/*! For license information please see bundle.min.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(self,(()=>(()=>{var e={122:(e,t,n)=>{"use strict";var r,a,i,o,s,u,l,d,p,c,f,h,m,g,y,b,w,v,$,_,x,S,C,E,I,T,A,k,O,R,z,B,P="/index.js",M=Object.defineProperty,D=Object.getOwnPropertyDescriptor,N=Object.getOwnPropertyNames,W=Object.prototype.hasOwnProperty,U=(e,t)=>()=>(e&&(t=e(e=0)),t),V=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),H=(e,t)=>{for(var n in t)M(e,n,{get:t[n],enumerable:!0})},L=e=>((e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let n of N(t))!W.call(e,n)&&undefined!==n&&M(e,n,{get:()=>t[n],enumerable:!(r=D(t,n))||r.enumerable});return e})(M({},"__esModule",{value:!0}),e),F=U((()=>{a=new Map,i=[],o=(e,t,n)=>{if(!t||"function"!=typeof t.init||"function"!=typeof t.createInferenceSessionHandler)throw new TypeError("not a valid backend");{let r=a.get(e);if(void 0===r)a.set(e,{backend:t,priority:n});else{if(r.priority>n)return;if(r.priority===n&&r.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${n}`)}if(n>=0){let t=i.indexOf(e);-1!==t&&i.splice(t,1);for(let t=0;t<i.length;t++)if(a.get(i[t]).priority<=n)return void i.splice(t,0,e);i.push(e)}}},s=async e=>{let t=0===e.length?i:e,n=[];for(let e of t){let t=a.get(e);if(t){if(t.initialized)return t.backend;if(t.aborted)continue;let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(a){r||n.push({name:e,err:a}),t.aborted=!0}finally{delete t.initPromise}}}throw new Error(`no available backend found. ERR: ${n.map((e=>`[${e.name}] ${e.err}`)).join(", ")}`)}})),G=U((()=>{F()})),j=U((()=>{u="1.17.0-dev.20240116-80f274ca6f"})),q=U((()=>{j(),l="warning",d={wasm:{},webgl:{},webgpu:{},versions:{common:u},set logLevel(e){if(void 0!==e){if("string"!=typeof e||-1===["verbose","info","warning","error","fatal"].indexOf(e))throw new Error(`Unsupported logging level: ${e}`);l=e}},get logLevel(){return l}},Object.defineProperty(d,"logLevel",{enumerable:!0})})),K=U((()=>{q(),p=d})),Y=U((()=>{c=(e,t)=>{let n=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);n.width=e.dims[3],n.height=e.dims[2];let r=n.getContext("2d");if(null!=r){let a,i;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(a=e.dims[2],i=e.dims[3]):(a=e.dims[3],i=e.dims[2]);let o,s,u=void 0!==t?.format?t.format:"RGB",l=t?.norm;void 0===l||void 0===l.mean?o=[255,255,255,255]:"number"==typeof l.mean?o=[l.mean,l.mean,l.mean,l.mean]:(o=[l.mean[0],l.mean[1],l.mean[2],0],void 0!==l.mean[3]&&(o[3]=l.mean[3])),void 0===l||void 0===l.bias?s=[0,0,0,0]:"number"==typeof l.bias?s=[l.bias,l.bias,l.bias,l.bias]:(s=[l.bias[0],l.bias[1],l.bias[2],0],void 0!==l.bias[3]&&(s[3]=l.bias[3]));let d=i*a,p=0,c=d,f=2*d,h=-1;"RGBA"===u?(p=0,c=d,f=2*d,h=3*d):"RGB"===u?(p=0,c=d,f=2*d):"RBG"===u&&(p=0,f=d,c=2*d);for(let t=0;t<i;t++)for(let n=0;n<a;n++){let a=(e.data[p++]-s[0])*o[0],i=(e.data[c++]-s[1])*o[1],u=(e.data[f++]-s[2])*o[2],l=-1===h?255:(e.data[h++]-s[3])*o[3];r.fillStyle="rgba("+a+","+i+","+u+","+l+")",r.fillRect(n,t,1,1)}if("toDataURL"in n)return n.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},f=(e,t)=>{let n,r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");if(null==r)throw new Error("Can not access image data");{let a,i,o;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(a=e.dims[2],i=e.dims[1],o=e.dims[3]):(a=e.dims[3],i=e.dims[2],o=e.dims[1]);let s,u,l=void 0!==t&&void 0!==t.format?t.format:"RGB",d=t?.norm;void 0===d||void 0===d.mean?s=[255,255,255,255]:"number"==typeof d.mean?s=[d.mean,d.mean,d.mean,d.mean]:(s=[d.mean[0],d.mean[1],d.mean[2],255],void 0!==d.mean[3]&&(s[3]=d.mean[3])),void 0===d||void 0===d.bias?u=[0,0,0,0]:"number"==typeof d.bias?u=[d.bias,d.bias,d.bias,d.bias]:(u=[d.bias[0],d.bias[1],d.bias[2],0],void 0!==d.bias[3]&&(u[3]=d.bias[3]));let p=i*a;if(void 0!==t&&(void 0!==t.format&&4===o&&"RGBA"!==t.format||3===o&&"RGB"!==t.format&&"BGR"!==t.format))throw new Error("Tensor format doesn't match input tensor dims");let c=4,f=0,h=1,m=2,g=3,y=0,b=p,w=2*p,v=-1;"RGBA"===l?(y=0,b=p,w=2*p,v=3*p):"RGB"===l?(y=0,b=p,w=2*p):"RBG"===l&&(y=0,w=p,b=2*p),n=r.createImageData(a,i);for(let t=0;t<i*a;f+=c,h+=c,m+=c,g+=c,t++)n.data[f]=(e.data[y++]-u[0])*s[0],n.data[h]=(e.data[b++]-u[1])*s[1],n.data[m]=(e.data[w++]-u[2])*s[2],n.data[g]=-1===v?255:(e.data[v++]-u[3])*s[3]}return n}})),Z=U((()=>{J(),h=(e,t)=>{if(void 0===e)throw new Error("Image buffer must be defined");if(void 0===t.height||void 0===t.width)throw new Error("Image height and width must be defined");if("NHWC"===t.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");let n,r,{height:a,width:i}=t,o=t.norm??{mean:255,bias:0};n="number"==typeof o.mean?[o.mean,o.mean,o.mean,o.mean]:[o.mean[0],o.mean[1],o.mean[2],o.mean[3]??255],r="number"==typeof o.bias?[o.bias,o.bias,o.bias,o.bias]:[o.bias[0],o.bias[1],o.bias[2],o.bias[3]??0];let s=void 0!==t.format?t.format:"RGBA",u=void 0!==t.tensorFormat&&void 0!==t.tensorFormat?t.tensorFormat:"RGB",l=a*i,d="RGBA"===u?new Float32Array(4*l):new Float32Array(3*l),p=4,c=0,f=1,h=2,m=3,g=0,y=l,b=2*l,w=-1;"RGB"===s&&(p=3,c=0,f=1,h=2,m=-1),"RGBA"===u?w=3*l:"RBG"===u?(g=0,b=l,y=2*l):"BGR"===u&&(b=0,y=l,g=2*l);for(let t=0;t<l;t++,c+=p,h+=p,f+=p,m+=p)d[g++]=(e[c]+r[0])/n[0],d[y++]=(e[f]+r[1])/n[1],d[b++]=(e[h]+r[2])/n[2],-1!==w&&-1!==m&&(d[w++]=(e[m]+r[3])/n[3]);return new C("float32",d,"RGBA"===u?[1,4,a,i]:[1,3,a,i])},m=async(e,t)=>{let n,r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,i=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,o="string"==typeof e,s=t??{},u=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},l=e=>e instanceof HTMLCanvasElement||e instanceof OffscreenCanvas?e.getContext("2d"):null;if(r){let r=u();r.width=e.width,r.height=e.height;let a=l(r);if(null==a)throw new Error("Can not access image data");{let r=e.height,i=e.width;if(void 0!==t&&void 0!==t.resizedHeight&&void 0!==t.resizedWidth&&(r=t.resizedHeight,i=t.resizedWidth),void 0!==t){if(s=t,void 0!==t.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");s.tensorFormat="RGBA",s.height=r,s.width=i}else s.tensorFormat="RGBA",s.height=r,s.width=i;a.drawImage(e,0,0),n=a.getImageData(0,0,i,r).data}}else{if(!a){if(i){if(void 0===t)throw new Error("Please provide image config with format for Imagebitmap");let r=u();r.width=e.width,r.height=e.height;let a=l(r);if(null!=a){let t=e.height,r=e.width;return a.drawImage(e,0,0,r,t),n=a.getImageData(0,0,r,t).data,s.height=t,s.width=r,h(n,s)}throw new Error("Can not access image data")}if(o)return new Promise(((t,n)=>{let r=u(),a=l(r);if(!e||!a)return n();let i=new Image;i.crossOrigin="Anonymous",i.src=e,i.onload=()=>{r.width=i.width,r.height=i.height,a.drawImage(i,0,0,r.width,r.height);let e=a.getImageData(0,0,r.width,r.height);s.height=r.height,s.width=r.width,t(h(e.data,s))}}));throw new Error("Input data provided is not supported - aborted tensor creation")}{let r,a;if(void 0!==t&&void 0!==t.resizedWidth&&void 0!==t.resizedHeight?(r=t.resizedHeight,a=t.resizedWidth):(r=e.height,a=e.width),void 0!==t&&(s=t),s.format="RGBA",s.height=r,s.width=a,void 0!==t){let t=u();t.width=a,t.height=r;let i=l(t);if(null==i)throw new Error("Can not access image data");i.putImageData(e,0,0),n=i.getImageData(0,0,a,r).data}else n=e.data}}if(void 0!==n)return h(n,s);throw new Error("Input data provided is not supported - aborted tensor creation")},g=(e,t)=>{let{width:n,height:r,download:a,dispose:i}=t;return new C({location:"texture",type:"float32",texture:e,dims:[1,r,n,4],download:a,dispose:i})},y=(e,t)=>{let{dataType:n,dims:r,download:a,dispose:i}=t;return new C({location:"gpu-buffer",type:n??"float32",gpuBuffer:e,dims:r,download:a,dispose:i})},b=(e,t,n)=>new C({location:"cpu-pinned",type:e,data:t,dims:n??[t.length]})})),Q=U((()=>{w=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),v=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),$=!1,_=()=>{if(!$){$=!0;let e=typeof BigInt64Array<"u"&&"function"==typeof BigInt64Array.from,t=typeof BigUint64Array<"u"&&"function"==typeof BigUint64Array.from;e&&(w.set("int64",BigInt64Array),v.set(BigInt64Array,"int64")),t&&(w.set("uint64",BigUint64Array),v.set(BigUint64Array,"uint64"))}}})),X=U((()=>{J(),x=e=>{let t=1;for(let n=0;n<e.length;n++){let r=e[n];if("number"!=typeof r||!Number.isSafeInteger(r))throw new TypeError(`dims[${n}] must be an integer, got: ${r}`);if(r<0)throw new RangeError(`dims[${n}] must be a non-negative integer, got: ${r}`);t*=r}return t},S=(e,t)=>{switch(e.location){case"cpu":return new C(e.type,e.data,t);case"cpu-pinned":return new C({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new C({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new C({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}})),J=U((()=>{Y(),Z(),Q(),X(),C=class{constructor(e,t,n){let r,a;if(_(),"object"==typeof e&&"location"in e)switch(this.dataLocation=e.location,r=e.type,a=e.dims,e.location){case"cpu-pinned":{let t=w.get(r);if(!t)throw new TypeError(`unsupported type "${r}" to create tensor from pinned buffer`);if(!(e.data instanceof t))throw new TypeError(`buffer should be of type ${t.name}`);this.cpuData=e.data;break}case"texture":if("float32"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break;case"gpu-buffer":if("float32"!==r&&"float16"!==r&&"int32"!==r&&"int64"!==r&&"uint32"!==r&&"bool"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let i,o;if("string"==typeof e)if(r=e,o=n,"string"===e){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");i=t}else{let n=w.get(e);if(void 0===n)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if("float16"===e)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");i="uint64"===e||"int64"===e?n.from(t,BigInt):n.from(t)}else{if(!(t instanceof n))throw new TypeError(`A ${r} tensor's data must be type of ${n}`);i=t}}else if(o=t,Array.isArray(e)){if(0===e.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");let t=typeof e[0];if("string"===t)r="string",i=e;else{if("boolean"!==t)throw new TypeError(`Invalid element type of data array: ${t}.`);r="bool",i=Uint8Array.from(e)}}else{let t=v.get(e.constructor);if(void 0===t)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);r=t,i=e}if(void 0===o)o=[i.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");a=o,this.cpuData=i,this.dataLocation="cpu"}let i=x(a);if(this.cpuData&&i!==this.cpuData.length)throw new Error(`Tensor's size(${i}) does not match data length(${this.cpuData.length}).`);this.type=r,this.dims=a,this.size=i}static async fromImage(e,t){return m(e,t)}static fromTexture(e,t){return g(e,t)}static fromGpuBuffer(e,t){return y(e,t)}static fromPinnedBuffer(e,t,n){return b(e,t,n)}toDataURL(e){return c(this,e)}toImageData(e){return f(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if("none"===this.dataLocation)throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return S(this,e)}}})),ee=U((()=>{J(),E=C})),te=U((()=>{q(),I=(e,t)=>{d.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},T=(e,t)=>{let n=(new Error).stack?.split(/\r\n|\r|\n/g)||[],r=!1;for(let a=0;a<n.length;a++){if(r&&!n[a].includes("TRACE_FUNC")){let r=`FUNC_${e}::${n[a].trim().split(" ")[1]}`;return t&&(r+=`::${t}`),void I("CPU",r)}n[a].includes("TRACE_FUNC")&&(r=!0)}},A=e=>{d.wasm.trace&&T("BEGIN",e)},k=e=>{d.wasm.trace&&T("END",e)}})),ne=U((()=>{F(),ee(),te(),O=class e{constructor(e){this.handler=e}async run(e,t,n){A();let r={},a={};if("object"!=typeof e||null===e||e instanceof E||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if("object"==typeof t){if(null===t)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof E)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(0===t.length)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(let e of t){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);r[e]=null}if("object"==typeof n&&null!==n)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let e=!1,o=Object.getOwnPropertyNames(t);for(let n of this.outputNames)if(-1!==o.indexOf(n)){let a=t[n];(null===a||a instanceof E)&&(e=!0,i=!1,r[n]=a)}if(e){if("object"==typeof n&&null!==n)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else a=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let t of this.inputNames)if(typeof e[t]>"u")throw new Error(`input '${t}' is missing in 'feeds'.`);if(i)for(let e of this.outputNames)r[e]=null;let o=await this.handler.run(e,r,a),s={};for(let e in o)if(Object.hasOwnProperty.call(o,e)){let t=o[e];s[e]=t instanceof E?t:new E(t.type,t.data,t.dims)}return k(),s}async release(){return this.handler.dispose()}static async create(t,n,r,a){A();let i,o={};if("string"==typeof t){if(i=t,"object"==typeof n&&null!==n)o=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(i=t,"object"==typeof n&&null!==n)o=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{if(!(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{let e=t,s=0,u=t.byteLength;if("object"==typeof n&&null!==n)o=n;else if("number"==typeof n){if(s=n,!Number.isSafeInteger(s))throw new RangeError("'byteOffset' must be an integer.");if(s<0||s>=e.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${e.byteLength}).`);if(u=t.byteLength-s,"number"==typeof r){if(u=r,!Number.isSafeInteger(u))throw new RangeError("'byteLength' must be an integer.");if(u<=0||s+u>e.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${e.byteLength-s}].`);if("object"==typeof a&&null!==a)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else if(typeof r<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof n<"u")throw new TypeError("'options' must be an object.");i=new Uint8Array(e,s,u)}}let u=(o.executionProviders||[]).map((e=>"string"==typeof e?e:e.name)),l=await(await s(u)).createInferenceSessionHandler(i,o);return k(),new e(l)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}})),re=U((()=>{ne(),R=O})),ae=U((()=>{})),ie=U((()=>{F(),ee(),z=class e{constructor(e,t,n){this.handler=e,this.hasOptimizerModel=t,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,n){let r=t.evalModel||"",a=t.optimizerModel||"",i=n||{},o=(i.executionProviders||[]).map((e=>"string"==typeof e?e:e.name)),u=await s(o);if(u.createTrainingSessionHandler){let n=await u.createTrainingSessionHandler(t.checkpointState,t.trainModel,r,a,i);return new e(n,!!t.optimizerModel,!!t.evalModel)}throw new Error("Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.")}typeNarrowingForRunStep(e,t,n,r,a){let i={},o={};if("object"!=typeof n||null===n||n instanceof E||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let s=!0;if("object"==typeof r){if(null===r)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof E)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(0===r.length)throw new TypeError("'fetches' cannot be an empty array.");s=!1;for(let e of r){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===t.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);i[e]=null}if("object"==typeof a&&null!==a)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let e=!1,n=Object.getOwnPropertyNames(r);for(let a of t)if(-1!==n.indexOf(a)){let t=r[a];(null===t||t instanceof E)&&(e=!0,s=!1,i[a]=t)}if(e){if("object"==typeof a&&null!==a)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else o=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let t of e)if(typeof n[t]>"u")throw new Error(`input '${t}' is missing in 'feeds'.`);if(s)for(let e of t)i[e]=null;return[i,o]}convertHandlerReturnTypeToMapOfTensors(e){let t={};for(let n in e)if(Object.hasOwnProperty.call(e,n)){let r=e[n];t[n]=r instanceof E?r:new E(r.type,r.data,r.dims)}return t}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(e,t,n){let[r,a]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,e,t,n),i=await this.handler.runTrainStep(e,r,a);return this.convertHandlerReturnTypeToMapOfTensors(i)}async runOptimizerStep(e){if(!this.hasOptimizerModel)throw new Error("This TrainingSession has no OptimizerModel loaded.");await this.handler.runOptimizerStep(e||{})}async runEvalStep(e,t,n){if(this.hasEvalModel){let[r,a]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,e,t,n),i=await this.handler.runEvalStep(e,r,a);return this.convertHandlerReturnTypeToMapOfTensors(i)}throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(e=!0){return this.handler.getParametersSize(e)}async loadParametersBuffer(e,t=!0){let n=await this.getParametersSize(t);if(e.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(e,t)}async getContiguousParameters(e=!0){return this.handler.getContiguousParameters(e)}async release(){return this.handler.dispose()}}})),oe=U((()=>{ie(),B=z})),se={};H(se,{InferenceSession:()=>R,TRACE:()=>I,TRACE_FUNC_BEGIN:()=>A,TRACE_FUNC_END:()=>k,Tensor:()=>E,TrainingSession:()=>B,env:()=>p,registerBackend:()=>o});var ue=U((()=>{G(),K(),re(),ee(),te(),ae(),oe()})),le={};H(le,{createReadStream:()=>ce,readFile:()=>de,readFileSync:()=>pe});var de,pe,ce,fe=U((()=>{de=void 0,pe=void 0,ce=void 0})),he={};H(he,{join:()=>me});var me,ge=U((()=>{me=void 0})),ye=V(((n,a)=>{var i,o=(i=(i=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0)||P,function(e={}){var t,n,r=e;r.ready=new Promise(((e,r)=>{t=e,n=r})),r.mountExternalData=(e,t)=>{(r.gb||(r.gb=new Map)).set(e,t)},r.unmountExternalData=()=>{delete r.gb},r.jsepInit=(e,t,n,a,i,o,s,u)=>{r.Fb=e,r.vb=t,r.xb=n,r.ob=a,r.wb=i,r.Sa=o,r.yb=s,r.zb=u,t=(e,t,n)=>(...r)=>{let a=ze,i=t?.();r=e(...r);let o=t?.();return i!==o&&(e=o,n(i),t=n=null),ze!=a?new Promise(((e,t)=>{We={resolve:e,reject:t}})):r},n=t=>async(...n)=>{try{if(r.fb)throw Error("Session already started");let a=r.fb={Ab:n[0],errors:[]},i=await t(...n);if(r.fb!==a)throw Error("Session mismatch");e.flush();let o=a.errors;if(0<o.length){let e=await Promise.all(o);if(e=e.filter((e=>e)),0<e.length)throw Error(e.join("\n"))}return i}finally{r.fb=null}},r._OrtCreateSession=t(r._OrtCreateSession,(()=>r._OrtCreateSession),(e=>r._OrtCreateSession=e)),r._OrtRun=n(t(r._OrtRun,(()=>r._OrtRun),(e=>r._OrtRun=e))),r._OrtRunWithBinding=n(t(r._OrtRunWithBinding,(()=>r._OrtRunWithBinding),(e=>r._OrtRunWithBinding=e))),r._OrtBindInput=t(r._OrtBindInput,(()=>r._OrtBindInput),(e=>r._OrtBindInput=e)),r.jsepRegisterBuffer=(t,n,r,a)=>e.registerBuffer(t,n,r,a),r.jsepUnregisterBuffers=t=>{e.unregisterBuffers(t)},r.jsepGetBuffer=t=>e.getBuffer(t),r.jsepCreateDownloader=(t,n,r)=>e.createDownloader(t,n,r),r.jsepOnRunStart=()=>e.onRunStart()};var a,o,s,u=Object.assign({},r),l="./this.program",d=(e,t)=>{throw t},p="object"==typeof window,c="function"==typeof importScripts,f="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,h="";if(f){var m=(fe(),L(le)),g=(ge(),L(he));h=c?g.dirname(h)+"/":"//",a=(e,t)=>(e=H(e)?new URL(e):g.normalize(e),m.readFileSync(e,t?void 0:"utf8")),s=e=>((e=a(e,!0)).buffer||(e=new Uint8Array(e)),e),o=(e,t,n,r=!0)=>{e=H(e)?new URL(e):g.normalize(e),m.readFile(e,r?void 0:"utf8",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!r.thisProgram&&1<process.argv.length&&(l=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),d=(e,t)=>{throw process.exitCode=e,t},r.inspect=()=>"[Emscripten Module object]"}else(p||c)&&(c?h=self.location.href:typeof document<"u"&&document.currentScript&&(h=document.currentScript.src),i&&(h=i),h=0!==h.indexOf("blob:")?h.substr(0,h.replace(/[?#].*/,"").lastIndexOf("/")+1):"",a=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},c&&(s=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),o=(e,t,n)=>{var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var y=console.log.bind(console),b=console.error.bind(console);Object.assign(r,u),u=null,"object"!=typeof WebAssembly&&W("no native wasm support detected");var w,v,$,_,x,S,C,E,I,T,A,k,O=!1;function R(){var e=w.buffer;r.HEAP8=$=new Int8Array(e),r.HEAP16=x=new Int16Array(e),r.HEAPU8=_=new Uint8Array(e),r.HEAPU16=S=new Uint16Array(e),r.HEAP32=C=new Int32Array(e),r.HEAPU32=E=new Uint32Array(e),r.HEAPF32=I=new Float32Array(e),r.HEAPF64=k=new Float64Array(e),r.HEAP64=T=new BigInt64Array(e),r.HEAPU64=A=new BigUint64Array(e)}var z=[],B=[],P=[],M=0,D=null,N=null;function W(e){throw b(e="Aborted("+e+")"),O=!0,v=1,e=new WebAssembly.RuntimeError(e+". Build with -sASSERTIONS for more info."),n(e),e}var U,V=e=>e.startsWith("data:application/octet-stream;base64,"),H=e=>e.startsWith("file://");if(!V(U="ort-wasm-simd.wasm")){var F=U;U=r.locateFile?r.locateFile(F,h):h+F}function G(e){if(s)return s(e);throw"both async and sync fetching of the wasm failed"}function j(e,t,n){return function(e){if(p||c){if("function"==typeof fetch&&!H(e))return fetch(e,{credentials:"same-origin"}).then((t=>{if(!t.ok)throw"failed to load wasm binary file at '"+e+"'";return t.arrayBuffer()})).catch((()=>G(e)));if(o)return new Promise(((t,n)=>{o(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>G(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{b(`failed to asynchronously prepare wasm: ${e}`),W(e)}))}var q={945168:(e,t,n,a)=>{if(typeof r>"u"||!r.gb)return 1;if((e=ee(e>>>0)).startsWith("./")&&(e=e.substring(2)),!(e=r.gb.get(e)))return 2;if((t>>>=0)+(n>>>=0)>e.byteLength)return 3;try{return _.set(e.subarray(t,t+n),a>>>0>>>0),0}catch{return 4}},945669:e=>r.vb(e),945702:e=>r.xb(e),945734:(e,t,n)=>{r.ob(e,t,n,!0)},945773:(e,t,n)=>{r.ob(e,t,n)},945806:e=>{r.Sa("Abs",e,void 0)},945857:e=>{r.Sa("Neg",e,void 0)},945908:e=>{r.Sa("Floor",e,void 0)},945961:e=>{r.Sa("Ceil",e,void 0)},946013:e=>{r.Sa("Reciprocal",e,void 0)},946071:e=>{r.Sa("Sqrt",e,void 0)},946123:e=>{r.Sa("Exp",e,void 0)},946174:e=>{r.Sa("Erf",e,void 0)},946225:e=>{r.Sa("Sigmoid",e,void 0)},946280:(e,t,n)=>{r.Sa("HardSigmoid",e,{alpha:t,beta:n})},946359:e=>{r.Sa("Log",e,void 0)},946410:e=>{r.Sa("Sin",e,void 0)},946461:e=>{r.Sa("Cos",e,void 0)},946512:e=>{r.Sa("Tan",e,void 0)},946563:e=>{r.Sa("Asin",e,void 0)},946615:e=>{r.Sa("Acos",e,void 0)},946667:e=>{r.Sa("Atan",e,void 0)},946719:e=>{r.Sa("Sinh",e,void 0)},946771:e=>{r.Sa("Cosh",e,void 0)},946823:e=>{r.Sa("Asinh",e,void 0)},946876:e=>{r.Sa("Acosh",e,void 0)},946929:e=>{r.Sa("Atanh",e,void 0)},946982:e=>{r.Sa("Tanh",e,void 0)},947034:e=>{r.Sa("Not",e,void 0)},947085:(e,t,n)=>{r.Sa("Clip",e,{min:t,max:n})},947154:e=>{r.Sa("Clip",e,void 0)},947206:(e,t)=>{r.Sa("Elu",e,{alpha:t})},947264:e=>{r.Sa("Relu",e,void 0)},947316:(e,t)=>{r.Sa("LeakyRelu",e,{alpha:t})},947380:(e,t)=>{r.Sa("ThresholdedRelu",e,{alpha:t})},947450:(e,t)=>{r.Sa("Cast",e,{to:t})},947508:e=>{r.Sa("Add",e,void 0)},947559:e=>{r.Sa("Sub",e,void 0)},947610:e=>{r.Sa("Mul",e,void 0)},947661:e=>{r.Sa("Div",e,void 0)},947712:e=>{r.Sa("Pow",e,void 0)},947763:e=>{r.Sa("Equal",e,void 0)},947816:e=>{r.Sa("Greater",e,void 0)},947871:e=>{r.Sa("GreaterOrEqual",e,void 0)},947933:e=>{r.Sa("Less",e,void 0)},947985:e=>{r.Sa("LessOrEqual",e,void 0)},948044:(e,t,n,a,i)=>{r.Sa("ReduceMean",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},948203:(e,t,n,a,i)=>{r.Sa("ReduceMax",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},948361:(e,t,n,a,i)=>{r.Sa("ReduceMin",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},948519:(e,t,n,a,i)=>{r.Sa("ReduceProd",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},948678:(e,t,n,a,i)=>{r.Sa("ReduceSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},948836:(e,t,n,a,i)=>{r.Sa("ReduceL1",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},948993:(e,t,n,a,i)=>{r.Sa("ReduceL2",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},949150:(e,t,n,a,i)=>{r.Sa("ReduceLogSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},949311:(e,t,n,a,i)=>{r.Sa("ReduceSumSquare",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},949475:(e,t,n,a,i)=>{r.Sa("ReduceLogSumExp",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},949639:e=>{r.Sa("Where",e,void 0)},949692:(e,t,n)=>{r.Sa("Transpose",e,{perm:t?Array.from(C.subarray(t>>>0,n>>>0)):[]})},949800:(e,t,n,a,i,o,s,u,l,d,p,c,f,h,m)=>{r.Sa("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:t,dilations:[n],group:a,kernel_shape:[i],pads:[o,s],strides:[u],wIsConst:()=>!!$[d>>>0],outputPadding:p?Array.from(C.subarray(p>>>0,c>>>0)):[],outputShape:f?Array.from(C.subarray(f>>>0,h>>>0)):[],activation:ee(m)})},950202:(e,t,n,a,i,o,s,u,l,d,p,c,f,h)=>{r.Sa("ConvTranspose",e,{format:u?"NHWC":"NCHW",autoPad:t,dilations:Array.from(C.subarray(n>>>0,2+(n>>>0)>>>0)),group:a,kernelShape:Array.from(C.subarray(i>>>0,2+(i>>>0)>>>0)),pads:Array.from(C.subarray(o>>>0,4+(o>>>0)>>>0)),strides:Array.from(C.subarray(s>>>0,2+(s>>>0)>>>0)),wIsConst:()=>!!$[l>>>0],outputPadding:d?Array.from(C.subarray(d>>>0,p>>>0)):[],outputShape:c?Array.from(C.subarray(c>>>0,f>>>0)):[],activation:ee(h)})},950767:(e,t,n,a,i,o,s,u,l,d,p,c,f,h,m)=>{r.Sa("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:t,dilations:[n],group:a,kernel_shape:[i],pads:[o,s],strides:[u],wIsConst:()=>!!$[d>>>0],outputPadding:p?Array.from(C.subarray(p>>>0,c>>>0)):[],outputShape:f?Array.from(C.subarray(f>>>0,h>>>0)):[],activation:ee(m)})},951169:(e,t,n,a,i,o,s,u,l,d,p,c,f,h)=>{r.Sa("ConvTranspose",e,{format:u?"NHWC":"NCHW",autoPad:t,dilations:Array.from(C.subarray(n>>>0,2+(n>>>0)>>>0)),group:a,kernelShape:Array.from(C.subarray(i>>>0,2+(i>>>0)>>>0)),pads:Array.from(C.subarray(o>>>0,4+(o>>>0)>>>0)),strides:Array.from(C.subarray(s>>>0,2+(s>>>0)>>>0)),wIsConst:()=>!!$[l>>>0],outputPadding:d?Array.from(C.subarray(d>>>0,p>>>0)):[],outputShape:c?Array.from(C.subarray(c>>>0,f>>>0)):[],activation:ee(h)})},951734:(e,t)=>{r.Sa("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},951825:(e,t,n,a,i,o,s,u,l,d,p,c,f,h,m,g)=>{r.Sa("AveragePool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:a,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[d,p,c,f],strides:[h,m]})},952109:(e,t)=>{r.Sa("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},952200:(e,t,n,a,i,o,s,u,l,d,p,c,f,h,m,g)=>{r.Sa("AveragePool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:a,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[d,p,c,f],strides:[h,m]})},952484:(e,t)=>{r.Sa("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},952571:(e,t,n,a,i,o,s,u,l,d,p,c,f,h,m,g)=>{r.Sa("MaxPool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:a,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[d,p,c,f],strides:[h,m]})},952851:(e,t)=>{r.Sa("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},952938:(e,t,n,a,i,o,s,u,l,d,p,c,f,h,m,g)=>{r.Sa("MaxPool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:a,storage_order:i,dilations:[o,s],kernel_shape:[u,l],pads:[d,p,c,f],strides:[h,m]})},953218:(e,t,n,a,i)=>{r.Sa("Gemm",e,{alpha:t,beta:n,transA:a,transB:i})},953322:e=>{r.Sa("MatMul",e,void 0)},953376:(e,t,n,a)=>{r.Sa("ArgMax",e,{keepDims:!!t,selectLastIndex:!!n,axis:a})},953484:(e,t,n,a)=>{r.Sa("ArgMin",e,{keepDims:!!t,selectLastIndex:!!n,axis:a})},953592:(e,t)=>{r.Sa("Softmax",e,{axis:t})},953655:(e,t)=>{r.Sa("Concat",e,{axis:t})},953715:(e,t,n,a,i)=>{r.Sa("Split",e,{axis:t,numOutputs:n,splitSizes:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},953855:e=>{r.Sa("Expand",e,void 0)},953909:(e,t)=>{r.Sa("Gather",e,{axis:Number(t)})},953980:(e,t)=>{r.Sa("GatherElements",e,{axis:Number(t)})},954059:(e,t,n,a,i,o,s,u,l,d,p)=>{r.Sa("Resize",e,{antialias:t,axes:n?Array.from(C.subarray(n>>>0,a>>>0)):[],coordinateTransformMode:ee(i),cubicCoeffA:o,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:ee(l),mode:ee(d),nearestMode:ee(p)})},954405:(e,t,n,a,i,o,s)=>{r.Sa("Slice",e,{starts:t?Array.from(C.subarray(t>>>0,n>>>0)):[],ends:a?Array.from(C.subarray(a>>>0,i>>>0)):[],axes:o?Array.from(C.subarray(o>>>0,s>>>0)):[]})},954621:e=>{r.Sa("Tile",e,void 0)},954673:(e,t,n)=>{r.Sa("LayerNormalization",e,{axis:Number(t),epsilon:Number(n)})},954780:(e,t,n)=>{r.Sa("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},954894:(e,t,n)=>{r.Sa("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},955008:e=>{r.Sa("Range",e,void 0)},955061:(e,t)=>{r.Sa("Einsum",e,{equation:ee(t)})},955142:(e,t,n,a,i)=>{r.Sa("Pad",e,{mode:t,value:n,pads:a?Array.from(C.subarray(a>>>0,i>>>0)):[]})},955269:(e,t,n,a,i,o)=>{r.Sa("BatchNormalization",e,{epsilon:t,momentum:n,spatial:!!i,trainingMode:!!a,format:o?"NHWC":"NCHW"})},955438:(e,t,n,a,i,o)=>{r.Sa("BatchNormalization",e,{epsilon:t,momentum:n,spatial:!!i,trainingMode:!!a,format:o?"NHWC":"NCHW"})},955607:(e,t,n)=>{r.Sa("CumSum",e,{exclusive:Number(t),reverse:Number(n)})},955704:(e,t,n,a,i,o,s,u,l)=>{r.Sa("Attention",e,{numHeads:t,isUnidirectional:n,maskFilterValue:a,scale:i,doRotary:o,qkvHiddenSizes:s?Array.from(C.subarray(Number(u)>>>0,Number(u)+s>>>0)):[],pastPresentShareBuffer:!!l})},955976:e=>{r.Sa("Gelu",e,void 0)},956028:(e,t,n,a,i,o)=>{r.Sa("MultiHeadAttention",e,{numHeads:t,isUnidirectional:n,maskFilterValue:a,scale:i,doRotary:o})},956187:e=>{r.Sa("BiasAdd",e,void 0)},956242:e=>{r.Sa("BiasSplitGelu",e,void 0)},956303:(e,t)=>{r.Sa("SkipLayerNormalization",e,{epsilon:t})},956384:(e,t,n,a,i,o,s,u,l,d,p,c,f)=>{r.Sa("Conv",e,{format:l?"NHWC":"NCHW",auto_pad:t,dilations:[n],group:a,kernel_shape:[i],pads:o?Array.from(C.subarray(o>>>0,s>>>0)):[],strides:[u],w_is_const:()=>!!$[d>>>0],activation:ee(p),activation_params:c?Array.from(I.subarray(c>>>0,f>>>0)):[]})},956754:(e,t,n,a,i,o,s,u,l,d,p,c,f,h,m,g)=>{r.Sa("Conv",e,{format:c?"NHWC":"NCHW",auto_pad:t,dilations:[n,a],group:i,kernel_shape:[o,s],pads:u?Array.from(C.subarray(u>>>0,l>>>0)):[],strides:[d,p],w_is_const:()=>!!$[f>>>0],activation:ee(h),activation_params:m?Array.from(I.subarray(m>>>0,g>>>0)):[]})},957145:e=>{r.yb(e)},957179:(e,t)=>r.zb(e,t,r.fb.Ab,r.fb.errors)};function K(e){this.name="ExitStatus",this.message=`Program terminated with exit(${e})`,this.status=e}function Y(e){this.cb=e-24,this.rb=function(e){E[this.cb+4>>>2>>>0]=e},this.qb=function(e){E[this.cb+8>>>2>>>0]=e},this.kb=function(e,t){this.jb(),this.rb(e),this.qb(t)},this.jb=function(){E[this.cb+16>>>2>>>0]=0}}var Z,Q,X=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,J=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&X)return X.decode(e.subarray(t,n));for(r="";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},ee=(e,t)=>(e>>>=0)?J(_,e,t):"",te=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},ne=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;t[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++>>>0]=224|o>>12}else{if(n+3>=r)break;t[n++>>>0]=240|o>>18,t[n++>>>0]=128|o>>12&63}t[n++>>>0]=128|o>>6&63}t[n++>>>0]=128|63&o}}return t[n>>>0]=0,n-a},re=e=>{if(null===e)return"null";var t=typeof e;return"object"===t||"array"===t||"function"===t?e.toString():""+e},ae=e=>{for(var t="";_[e>>>0];)t+=Z[_[e++>>>0]];return t},ie={},oe={},se={};function ue(e,t,n={}){if(!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");!function(e,t,n={}){var r=t.name;if(!e)throw new Q(`type "${r}" must have a positive integer typeid pointer`);if(oe.hasOwnProperty(e)){if(n.tb)return;throw new Q(`Cannot register type '${r}' twice`)}oe[e]=t,delete se[e],ie.hasOwnProperty(e)&&(t=ie[e],delete ie[e],t.forEach((e=>e())))}(e,t,n)}var de=(e,t,n)=>{switch(t){case 1:return n?e=>$[e>>>0>>>0]:e=>_[e>>>0>>>0];case 2:return n?e=>x[e>>>1>>>0]:e=>S[e>>>1>>>0];case 4:return n?e=>C[e>>>2>>>0]:e=>E[e>>>2>>>0];case 8:return n?e=>T[e>>>3]:e=>A[e>>>3];default:throw new TypeError(`invalid integer width (${t}): ${e}`)}};function pe(){this.$a=[void 0],this.nb=[]}var ce=new pe;function me(e){(e>>>=0)>=ce.cb&&0==--ce.get(e).pb&&ce.jb(e)}var ye=e=>{if(!e)throw new Q("Cannot use deleted val. handle = "+e);return ce.get(e).value},be=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ce.kb({pb:1,value:e})}};function we(e){return this.fromWireType(C[e>>>2>>>0])}var ve=(e,t)=>{switch(t){case 4:return function(e){return this.fromWireType(I[e>>>2>>>0])};case 8:return function(e){return this.fromWireType(k[e>>>3>>>0])};default:throw new TypeError(`invalid float width (${t}): ${e}`)}};function $e(e){return this.fromWireType(E[e>>>2>>>0])}var _e=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,xe=(e,t)=>{for(var n=e>>1,r=n+t/2;!(n>=r)&&S[n>>>0];)++n;if(32<(n<<=1)-e&&_e)return _e.decode(_.subarray(e>>>0,n>>>0));for(n="",r=0;!(r>=t/2);++r){var a=x[e+2*r>>>1>>>0];if(0==a)break;n+=String.fromCharCode(a)}return n},Se=(e,t,n)=>{if(n??=2147483647,2>n)return 0;var r=t;n=(n-=2)<2*e.length?n/2:e.length;for(var a=0;a<n;++a)x[t>>>1>>>0]=e.charCodeAt(a),t+=2;return x[t>>>1>>>0]=0,t-r},Ce=e=>2*e.length,Ee=(e,t)=>{for(var n=0,r="";!(n>=t/4);){var a=C[e+4*n>>>2>>>0];if(0==a)break;++n,65536<=a?(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a)):r+=String.fromCharCode(a)}return r},Ie=(e,t,n)=>{if(t>>>=0,n??=2147483647,4>n)return 0;var r=t;n=r+n-4;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),C[t>>>2>>>0]=i,(t+=4)+4>n)break}return C[t>>>2>>>0]=0,t-r},Te=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&++n,t+=4}return t},Ae=(e,t)=>{var n=oe[e];if(void 0===n)throw e=ht(e),n=ae(e),ft(e),new Q(t+" has unknown type "+n);return n},ke=(e,t,n)=>{var r=[];return e=e.toWireType(r,n),r.length&&(E[t>>>2>>>0]=be(r)),e},Oe=e=>{try{e()}catch(e){W(e)}},Re=0,ze=null,Be=0,Pe=[],Me={},De={},Ne=0,We=null,Ue=[];function Ve(e){return function(e){if(!O){if(0===Re){var t=!1,n=!1;e(((e=0)=>{if(!O&&(Be=e,t=!0,n)){Re=2,Oe((()=>vt(ze))),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.resume(),e=!1;try{var r=(0,lt[De[C[ze+8>>>2>>>0]]])()}catch(t){r=t,e=!0}var a=!1;if(!ze){var i=We;i&&(We=null,(e?i.reject:i.resolve)(r),a=!0)}if(e&&!a)throw r}})),n=!0,t||(Re=1,ze=function(){var e=ct(65548),t=e+12;E[e>>>2>>>0]=t,E[e+4>>>2>>>0]=t+65536,t=Pe[0];var n=Me[t];return void 0===n&&(n=Ne++,Me[t]=n,De[n]=t),C[e+8>>>2>>>0]=n,e}(),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.pause(),Oe((()=>bt(ze))))}else 2===Re?(Re=0,Oe($t),ft(ze),ze=null,Ue.forEach((e=>{if(!O)try{e();try{v=v=e=v,r.onExit?.(e),O=!0,d(e,new K(e))}catch(e){e instanceof K||"unwind"==e||d(1,e)}}catch(e){e instanceof K||"unwind"==e||d(1,e)}}))):W(`invalid state: ${Re}`);return Be}}((t=>{e().then(t)}))}var He,Le=[],Fe={},Ge=e=>{var t=Fe[e];return void 0===t?ae(e):t},je=()=>"object"==typeof globalThis?globalThis:Function("return this")(),qe=(e,t)=>Object.defineProperty(t,"name",{value:e}),Ke=e=>e%4==0&&(e%100!=0||e%400==0),Ye=[0,31,60,91,121,152,182,213,244,274,305,335],Ze=[0,31,59,90,120,151,181,212,243,273,304,334],Qe=e=>{var t=te(e)+1,n=ct(t);return n&&ne(e,_,n,t),n},Xe=[],Je=(e,t)=>{Xe.length=0;for(var n;n=_[e++>>>0];){var r=105!=n;t+=(r&=112!=n)&&t%8?4:0,Xe.push(112==n?E[t>>>2>>>0]:106==n?T[t>>>3]:105==n?C[t>>>2>>>0]:k[t>>>3>>>0]),t+=r?8:4}return Xe},et={},tt=()=>{if(!He){var e,t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:l||"./this.program"};for(e in et)void 0===et[e]?delete t[e]:t[e]=et[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);He=n}return He},nt=[null,[],[]],rt=[31,29,31,30,31,30,31,31,30,31,30,31],at=[31,28,31,30,31,30,31,31,30,31,30,31];function it(e,t,n,r){function a(e,t,n){for(e="number"==typeof e?e.toString():e||"";e.length<t;)e=n[0]+e;return e}function i(e,t){return a(e,t,"0")}function o(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.ab;for(e=new Date(new Date(e.bb+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Ke(e.getFullYear())?rt:at)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=o(t,e)?0>=o(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0;var l=E[40+(r>>>=0)>>>2>>>0];for(var d in r={Db:C[r>>>2>>>0],Cb:C[r+4>>>2>>>0],hb:C[r+8>>>2>>>0],mb:C[r+12>>>2>>>0],ib:C[r+16>>>2>>>0],bb:C[r+20>>>2>>>0],Wa:C[r+24>>>2>>>0],ab:C[r+28>>>2>>>0],Gb:C[r+32>>>2>>>0],Bb:C[r+36>>>2>>>0],Eb:l?ee(l):""},n=ee(n),l={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})n=n.replace(new RegExp(d,"g"),l[d]);var p="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),c="January February March April May June July August September October November December".split(" ");for(d in l={"%a":e=>p[e.Wa].substring(0,3),"%A":e=>p[e.Wa],"%b":e=>c[e.ib].substring(0,3),"%B":e=>c[e.ib],"%C":e=>i((e.bb+1900)/100|0,2),"%d":e=>i(e.mb,2),"%e":e=>a(e.mb,2," "),"%g":e=>u(e).toString().substring(2),"%G":e=>u(e),"%H":e=>i(e.hb,2),"%I":e=>(0==(e=e.hb)?e=12:12<e&&(e-=12),i(e,2)),"%j":e=>{for(var t=0,n=0;n<=e.ib-1;t+=(Ke(e.bb+1900)?rt:at)[n++]);return i(e.mb+t,3)},"%m":e=>i(e.ib+1,2),"%M":e=>i(e.Cb,2),"%n":()=>"\n","%p":e=>0<=e.hb&&12>e.hb?"AM":"PM","%S":e=>i(e.Db,2),"%t":()=>"\t","%u":e=>e.Wa||7,"%U":e=>i(Math.floor((e.ab+7-e.Wa)/7),2),"%V":e=>{var t=Math.floor((e.ab+7-(e.Wa+6)%7)/7);if(2>=(e.Wa+371-e.ab-2)%7&&t++,t)53==t&&(4==(n=(e.Wa+371-e.ab)%7)||3==n&&Ke(e.bb)||(t=1));else{t=52;var n=(e.Wa+7-e.ab-1)%7;(4==n||5==n&&Ke(e.bb%400-1))&&t++}return i(t,2)},"%w":e=>e.Wa,"%W":e=>i(Math.floor((e.ab+7-(e.Wa+6)%7)/7),2),"%y":e=>(e.bb+1900).toString().substring(2),"%Y":e=>e.bb+1900,"%z":e=>(0<=(e=e.Bb)?"+":"-")+("0000"+((e=Math.abs(e)/60)/60*100+e%60)).slice(-4),"%Z":e=>e.Eb,"%%":()=>"%"},n=n.replace(/%%/g,"\0\0"),l)n.includes(d)&&(n=n.replace(new RegExp(d,"g"),l[d](r)));return d=function(e){var t=Array(te(e)+1);return ne(e,t,0,t.length),t}(n=n.replace(/\0\0/g,"%")),d.length>t?0:($.set(d,e>>>0),d.length-1)}for(var ot=Array(256),st=0;256>st;++st)ot[st]=String.fromCharCode(st);Z=ot,Q=r.BindingError=class extends Error{constructor(e){super(e),this.name="BindingError"}},r.InternalError=class extends Error{constructor(e){super(e),this.name="InternalError"}},Object.assign(pe.prototype,{get(e){return this.$a[e]},has(e){return void 0!==this.$a[e]},kb(e){var t=this.nb.pop()||this.$a.length;return this.$a[t]=e,t},jb(e){this.$a[e]=void 0,this.nb.push(e)}}),ce.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),ce.cb=ce.$a.length,r.count_emval_handles=()=>{for(var e=0,t=ce.cb;t<ce.$a.length;++t)void 0!==ce.$a[t]&&++e;return e};var ut={ia:function(e,t,n){return Ve((async()=>{await r.wb(e,t,n)}))},a:function(e,t,n){throw new Y(e>>>=0).kb(t>>>0,n>>>0),e},x:function(){return 0},ba:function(){},O:function(){},Q:function(){},ca:function(){return 0},$:function(){},W:function(){},_:function(){},D:function(){},P:function(){},M:function(){},aa:function(){},N:function(){},G:function(e,t,n,r,a){var i=-1!=(t=ae(t>>>=0)).indexOf("u");i&&(a=(1n<<64n)-1n),ue(e>>>0,{name:t,fromWireType:e=>e,toWireType:function(e,n){if("bigint"!=typeof n&&"number"!=typeof n)throw new TypeError(`Cannot convert "${re(n)}" to ${this.name}`);if(n<r||n>a)throw new TypeError(`Passing a number "${re(n)}" from JS side to C/C++ side to an argument of type "${t}", which is outside the valid range [${r}, ${a}]!`);return n},argPackAdvance:8,readValueFromPointer:de(t,n>>>0,!i),eb:null})},ga:function(e,t,n,r){ue(e>>>0,{name:t=ae(t>>>0),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:r},argPackAdvance:8,readValueFromPointer:function(e){return this.fromWireType(_[e>>>0])},eb:null})},fa:function(e,t){ue(e>>>0,{name:t=ae(t>>>0),fromWireType:e=>{var t=ye(e);return me(e),t},toWireType:(e,t)=>be(t),argPackAdvance:8,readValueFromPointer:we,eb:null})},F:function(e,t,n){ue(e>>>0,{name:t=ae(t>>>0),fromWireType:e=>e,toWireType:(e,t)=>t,argPackAdvance:8,readValueFromPointer:ve(t,n>>>0),eb:null})},t:function(e,t,n,r,a){if(e>>>=0,n>>>=0,t=ae(t>>>0),-1===a&&(a=4294967295),a=e=>e,0===r){var i=32-8*n;a=e=>e<<i>>>i}var o=t.includes("unsigned")?function(e,t){return t>>>0}:function(e,t){return t};ue(e,{name:t,fromWireType:a,toWireType:o,argPackAdvance:8,readValueFromPointer:de(t,n,0!==r),eb:null})},n:function(e,t,n){function r(e){return new a($.buffer,E[e+4>>>2>>>0],E[e>>>2>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][t];ue(e>>>0,{name:n=ae(n>>>0),fromWireType:r,argPackAdvance:8,readValueFromPointer:r},{tb:!0})},H:function(e,t){var n="std::string"===(t=ae(t>>>0));ue(e>>>0,{name:t,fromWireType:function(e){var t=E[e>>>2>>>0],r=e+4;if(n)for(var a=r,i=0;i<=t;++i){var o=r+i;if(i==t||0==_[o>>>0]){if(a=ee(a,o-a),void 0===s)var s=a;else s+=String.fromCharCode(0),s+=a;a=o+1}}else{for(s=Array(t),i=0;i<t;++i)s[i]=String.fromCharCode(_[r+i>>>0]);s=s.join("")}return ft(e),s},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var r="string"==typeof t;if(!(r||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array))throw new Q("Cannot pass non-string to std::string");var a=n&&r?te(t):t.length,i=ct(4+a+1),o=i+4;if(E[i>>>2>>>0]=a,n&&r)ne(t,_,o,a+1);else if(r)for(r=0;r<a;++r){var s=t.charCodeAt(r);if(255<s)throw ft(o),new Q("String has UTF-16 code units that do not fit in 8 bits");_[o+r>>>0]=s}else for(r=0;r<a;++r)_[o+r>>>0]=t[r];return null!==e&&e.push(ft,i),i},argPackAdvance:8,readValueFromPointer:$e,eb(e){ft(e)}})},z:function(e,t,n){if(t>>>=0,n=ae(n>>>=0),2===t)var r=xe,a=Se,i=Ce,o=()=>S,s=1;else 4===t&&(r=Ee,a=Ie,i=Te,o=()=>E,s=2);ue(e>>>0,{name:n,fromWireType:e=>{for(var n,a=E[e>>>2>>>0],i=o(),u=e+4,l=0;l<=a;++l){var d=e+4+l*t;(l==a||0==i[d>>>s])&&(u=r(u,d-u),void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),u=d+t)}return ft(e),n},toWireType:(e,r)=>{if("string"!=typeof r)throw new Q(`Cannot pass non-string to C++ string type ${n}`);var o=i(r),u=ct(4+o+t);return E[u>>>2]=o>>s,a(r,u+4,o+t),null!==e&&e.push(ft,u),u},argPackAdvance:8,readValueFromPointer:we,eb(e){ft(e)}})},ha:function(e,t){ue(e>>>0,{ub:!0,name:t=ae(t>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},da:()=>1,s:function(e,t,n){return t>>>=0,n>>>=0,e=ye(e>>>0),t=Ae(t,"emval::as"),ke(t,n,e)},w:function(e){return e>>>=0,Ve((()=>(e=ye(e)).then(be)))},o:function(e,t,n,r){return n>>>=0,r>>>=0,(e=Le[e>>>0])(null,t=ye(t>>>0),n,r)},k:function(e,t,n,r,a){return n>>>=0,r>>>=0,a>>>=0,(e=Le[e>>>0])(t=ye(t>>>0),t[n=Ge(n)],r,a)},b:me,A:function(e,t){return t>>>=0,(e=ye(e>>>0))==ye(t)},m:function(e){return 0==(e>>>=0)?be(je()):(e=Ge(e),be(je()[e]))},i:function(e,t,n){t=((e,t)=>{for(var n=Array(e),r=0;r<e;++r)n[r]=Ae(E[t+4*r>>>2>>>0],"parameter "+r);return n})(e,t>>>0);var r=t.shift();e--;var a="return function (obj, func, destructorsRef, args) {\n",i=0,o=[];0===n&&o.push("obj");for(var s=["retType"],u=[r],l=0;l<e;++l)o.push("arg"+l),s.push("argType"+l),u.push(t[l]),a+=`  var arg${l} = argType${l}.readValueFromPointer(args${i?"+"+i:""});\n`,i+=t[l].argPackAdvance;for(a+=`  var rv = ${1===n?"new func":"func.call"}(${o.join(", ")});\n`,l=0;l<e;++l)t[l].deleteObject&&(a+=`  argType${l}.deleteObject(arg${l});\n`);return r.ub||(s.push("emval_returnValue"),u.push(ke),a+="  return emval_returnValue(retType, destructorsRef, rv);\n"),s.push(a+"};\n"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof t} which is not a function`);var n=qe(t.name||"unknownFunctionName",(function(){}));return n.prototype=t.prototype,n=new n,(e=t.apply(n,e))instanceof Object?e:n}(s).apply(null,u),n=`methodCaller<(${t.map((e=>e.name)).join(", ")}) => ${r.name}>`,(e=>{var t=Le.length;return Le.push(e),t})(qe(n,e))},r:function(e,t){return t>>>=0,e=ye(e>>>0),t=ye(t),be(e[t])},e:function(e){4<(e>>>=0)&&(ce.get(e).pb+=1)},u:function(){return be([])},l:function(e){e=ye(e>>>0);for(var t=Array(e.length),n=0;n<e.length;n++)t[n]=e[n];return be(t)},d:function(e){return be(Ge(e>>>0))},j:function(){return be({})},h:function(e){for(var t=ye(e>>>=0);t.length;){var n=t.pop();t.pop()(n)}me(e)},g:function(e,t,n){t>>>=0,n>>>=0,e=ye(e>>>0),t=ye(t),n=ye(n),e[t]=n},c:function(e,t){return t>>>=0,e=(e=Ae(e>>>0,"_emval_take_value")).readValueFromPointer(t),be(e)},T:function(e,t){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),t>>>=0,e=new Date(1e3*e),C[t>>>2>>>0]=e.getUTCSeconds(),C[t+4>>>2>>>0]=e.getUTCMinutes(),C[t+8>>>2>>>0]=e.getUTCHours(),C[t+12>>>2>>>0]=e.getUTCDate(),C[t+16>>>2>>>0]=e.getUTCMonth(),C[t+20>>>2>>>0]=e.getUTCFullYear()-1900,C[t+24>>>2>>>0]=e.getUTCDay(),C[t+28>>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},U:function(e,t){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),t>>>=0,e=new Date(1e3*e),C[t>>>2>>>0]=e.getSeconds(),C[t+4>>>2>>>0]=e.getMinutes(),C[t+8>>>2>>>0]=e.getHours(),C[t+12>>>2>>>0]=e.getDate(),C[t+16>>>2>>>0]=e.getMonth(),C[t+20>>>2>>>0]=e.getFullYear()-1900,C[t+24>>>2>>>0]=e.getDay(),C[t+28>>>2>>>0]=(Ke(e.getFullYear())?Ye:Ze)[e.getMonth()]+e.getDate()-1|0,C[t+36>>>2>>>0]=-60*e.getTimezoneOffset();var n=new Date(e.getFullYear(),6,1).getTimezoneOffset(),r=new Date(e.getFullYear(),0,1).getTimezoneOffset();C[t+32>>>2>>>0]=0|(n!=r&&e.getTimezoneOffset()==Math.min(r,n))},V:function(e){e>>>=0;var t=new Date(C[e+20>>>2>>>0]+1900,C[e+16>>>2>>>0],C[e+12>>>2>>>0],C[e+8>>>2>>>0],C[e+4>>>2>>>0],C[e>>>2>>>0],0),n=C[e+32>>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),o=Math.min(i,a);return 0>n?C[e+32>>>2>>>0]=+(a!=i&&o==r):0<n!=(o==r)&&(a=Math.max(i,a),t.setTime(t.getTime()+6e4*((0<n?o:a)-r))),C[e+24>>>2>>>0]=t.getDay(),C[e+28>>>2>>>0]=(Ke(t.getFullYear())?Ye:Ze)[t.getMonth()]+t.getDate()-1|0,C[e>>>2>>>0]=t.getSeconds(),C[e+4>>>2>>>0]=t.getMinutes(),C[e+8>>>2>>>0]=t.getHours(),C[e+12>>>2>>>0]=t.getDate(),C[e+16>>>2>>>0]=t.getMonth(),C[e+20>>>2>>>0]=t.getYear(),e=t.getTime(),isNaN(e)?(C[pt()>>>2>>>0]=61,e=-1):e/=1e3,BigInt(e)},R:function(){return-52},S:function(){},K:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\(([A-Za-z ]+)\)$/))?e[1]:"GMT"}n>>>=0;var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var s=o.getTimezoneOffset();E[e>>>0>>>2>>>0]=60*Math.max(a,s),C[t>>>0>>>2>>>0]=+(a!=s),e=r(i),t=r(o),e=Qe(e),t=Qe(t),s<a?(E[n>>>2>>>0]=e,E[n+4>>>2>>>0]=t):(E[n>>>2>>>0]=t,E[n+4>>>2>>>0]=e)},v:()=>{W("")},f:function(e,t,n){return e>>>=0,t=Je(t>>>0,n>>>0),q[e].apply(null,t)},I:function(e,t,n){return e>>>=0,t=Je(t>>>0,n>>>0),q[e].apply(null,t)},E:()=>Date.now(),L:function(){return 4294901760},q:()=>performance.now(),J:function(e){e>>>=0;var t=_.length;if(4294901760<e)return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r);e:{a=(a.min.call(a,4294901760,r+(65536-r%65536)%65536)-w.buffer.byteLength+65535)/65536;try{w.grow(a),R();var i=1;break e}catch{}i=void 0}if(i)return!0}return!1},Y:function(e,t){e>>>=0,t>>>=0;var n=0;return tt().forEach(((r,a)=>{var i=t+n;for(a=E[e+4*a>>>2>>>0]=i,i=0;i<r.length;++i)$[a++>>>0>>>0]=r.charCodeAt(i);$[a>>>0>>>0]=0,n+=r.length+1})),0},Z:function(e,t){e>>>=0,t>>>=0;var n=tt();E[e>>>2>>>0]=n.length;var r=0;return n.forEach((e=>r+=e.length+1)),E[t>>>2>>>0]=r,0},y:()=>52,C:function(){return 52},X:function(){return 70},B:function(e,t,n,r){t>>>=0,n>>>=0,r>>>=0;for(var a=0,i=0;i<n;i++){var o=E[t>>>2>>>0],s=E[t+4>>>2>>>0];t+=8;for(var u=0;u<s;u++){var l=_[o+u>>>0],d=nt[e];0===l||10===l?((1===e?y:b)(J(d,0)),d.length=0):d.push(l)}a+=s}return E[r>>>2>>>0]=a,0},ea:it,p:function(e,t,n,r){return it(e>>>0,t>>>0,n>>>0,r>>>0)}},lt=function(){function e(e){return lt=e.exports,lt=function(){var e=lt,t={};for(let[n,r]of Object.entries(e))t[n]="function"==typeof r?function(){Pe.push(n);try{return r.apply(null,arguments)}finally{O||(Pe.pop(),ze&&1===Re&&0===Pe.length&&(Re=0,Oe(wt),typeof Fibers<"u"&&Fibers.Hb()))}}:r;return t}(),lt=function(){var e=lt,t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).Oa=t(e.Oa),e.Pa=n(e.Pa),e.Ra=n(e.Ra),e.Ta=t(e.Ta),e.Va=n(e.Va),e}(),w=lt.ja,R(),B.unshift(lt.ka),0==--M&&(null!==D&&(clearInterval(D),D=null),N&&(e=N,N=null,e())),lt}var t={a:ut};if(M++,r.instantiateWasm)try{return r.instantiateWasm(t,e)}catch(e){b(`Module.instantiateWasm callback failed with error: ${e}`),n(e)}return function(e,t){var n=U;return"function"!=typeof WebAssembly.instantiateStreaming||V(n)||H(n)||f||"function"!=typeof fetch?j(n,e,t):fetch(n,{credentials:"same-origin"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return b(`wasm streaming compile failed: ${r}`),b("falling back to ArrayBuffer instantiation"),j(n,e,t)}))))}(t,(function(t){e(t.instance)})).catch(n),{}}();r._OrtInit=(e,t)=>(r._OrtInit=lt.la)(e,t),r._OrtGetLastError=(e,t)=>(r._OrtGetLastError=lt.ma)(e,t),r._OrtCreateSessionOptions=(e,t,n,a,i,o,s,u,l,d)=>(r._OrtCreateSessionOptions=lt.na)(e,t,n,a,i,o,s,u,l,d),r._OrtAppendExecutionProvider=(e,t)=>(r._OrtAppendExecutionProvider=lt.oa)(e,t),r._OrtAddFreeDimensionOverride=(e,t,n)=>(r._OrtAddFreeDimensionOverride=lt.pa)(e,t,n),r._OrtAddSessionConfigEntry=(e,t,n)=>(r._OrtAddSessionConfigEntry=lt.qa)(e,t,n),r._OrtReleaseSessionOptions=e=>(r._OrtReleaseSessionOptions=lt.ra)(e),r._OrtCreateSession=(e,t,n)=>(r._OrtCreateSession=lt.sa)(e,t,n),r._OrtReleaseSession=e=>(r._OrtReleaseSession=lt.ta)(e),r._OrtGetInputOutputCount=(e,t,n)=>(r._OrtGetInputOutputCount=lt.ua)(e,t,n),r._OrtGetInputName=(e,t)=>(r._OrtGetInputName=lt.va)(e,t),r._OrtGetOutputName=(e,t)=>(r._OrtGetOutputName=lt.wa)(e,t),r._OrtFree=e=>(r._OrtFree=lt.xa)(e),r._OrtCreateTensor=(e,t,n,a,i,o)=>(r._OrtCreateTensor=lt.ya)(e,t,n,a,i,o),r._OrtGetTensorData=(e,t,n,a,i)=>(r._OrtGetTensorData=lt.za)(e,t,n,a,i),r._OrtReleaseTensor=e=>(r._OrtReleaseTensor=lt.Aa)(e),r._OrtCreateRunOptions=(e,t,n,a)=>(r._OrtCreateRunOptions=lt.Ba)(e,t,n,a),r._OrtAddRunConfigEntry=(e,t,n)=>(r._OrtAddRunConfigEntry=lt.Ca)(e,t,n),r._OrtReleaseRunOptions=e=>(r._OrtReleaseRunOptions=lt.Da)(e),r._OrtCreateBinding=e=>(r._OrtCreateBinding=lt.Ea)(e),r._OrtBindInput=(e,t,n)=>(r._OrtBindInput=lt.Fa)(e,t,n),r._OrtBindOutput=(e,t,n,a)=>(r._OrtBindOutput=lt.Ga)(e,t,n,a),r._OrtClearBoundOutputs=e=>(r._OrtClearBoundOutputs=lt.Ha)(e),r._OrtReleaseBinding=e=>(r._OrtReleaseBinding=lt.Ia)(e),r._OrtRunWithBinding=(e,t,n,a,i)=>(r._OrtRunWithBinding=lt.Ja)(e,t,n,a,i),r._OrtRun=(e,t,n,a,i,o,s,u)=>(r._OrtRun=lt.Ka)(e,t,n,a,i,o,s,u),r._OrtEndProfiling=e=>(r._OrtEndProfiling=lt.La)(e),r._JsepOutput=(e,t,n)=>(r._JsepOutput=lt.Ma)(e,t,n),r._JsepGetNodeName=e=>(r._JsepGetNodeName=lt.Na)(e);var dt,pt=()=>(pt=lt.Oa)(),ct=r._malloc=e=>(ct=r._malloc=lt.Pa)(e),ft=r._free=e=>(ft=r._free=lt.Qa)(e),ht=e=>(ht=lt.Ra)(e),mt=()=>(mt=lt.Ta)(),gt=e=>(gt=lt.Ua)(e),yt=e=>(yt=lt.Va)(e),bt=e=>(bt=lt.Xa)(e),wt=()=>(wt=lt.Ya)(),vt=e=>(vt=lt.Za)(e),$t=()=>($t=lt._a)();function _t(){if(!(0<M)){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;){var e=r.preRun.shift();z.unshift(e)}for(;0<z.length;)z.shift()(r);if(!(0<M||dt||(dt=!0,r.calledRun=!0,O))){for(;0<B.length;)B.shift()(r);for(t(r);0<P.length;)P.shift()(r)}}}return r.___start_em_js=957291,r.___stop_em_js=957452,r.stackAlloc=yt,r.stackSave=mt,r.stackRestore=gt,r.UTF8ToString=ee,r.stringToUTF8=(e,t,n)=>ne(e,_,t,n),r.lengthBytesUTF8=te,N=function e(){dt||_t(),dt||(N=e)},_t(),e.ready});"object"==typeof n&&"object"==typeof a?a.exports=o:void 0===(r=(()=>o).apply(t,[]))||(e.exports=r)})),be=V((()=>{})),we=V((()=>{})),ve={};H(ve,{cpus:()=>$e});var $e,_e,xe,Se,Ce,Ee,Ie,Te,Ae,ke,Oe,Re,ze,Be,Pe,Me,De,Ne,We,Ue,Ve,He,Le,Fe,Ge,je,qe,Ke,Ye,Ze,Qe,Xe,Je,et,tt,nt,rt,at,it,ot,st,ut,lt,dt,pt,ct,ft,ht,mt,gt,yt,bt,wt,vt,$t,_t,xt,St,Ct,Et,It,Tt,At,kt,Ot,Rt,zt,Bt,Pt,Mt,Dt,Nt,Wt,Ut,Vt,Ht,Lt,Ft,Gt,jt,qt,Kt,Yt,Zt,Qt,Xt,Jt,en,tn,nn,rn,an,on,sn,un,ln,dn,pn,cn,fn,hn,mn,gn,yn,bn,wn,vn,$n,_n,xn,Sn,Cn,En,In,Tn,An,kn,On,Rn,zn,Bn,Pn,Mn,Dn,Nn,Wn,Un,Vn,Hn,Ln,Fn,Gn,jn,qn,Kn,Yn,Zn,Qn,Xn,Jn,er,tr,nr,rr,ar,ir,or,sr,ur,lr,dr,pr,cr,fr,hr,mr,gr,yr,br,wr,vr,$r,_r,xr,Sr,Cr,Er,Ir,Tr,Ar,kr,Or,Rr,zr,Br,Pr,Mr,Dr,Nr,Wr,Ur,Vr,Hr,Lr,Fr,Gr,jr,qr,Kr,Yr,Zr,Qr,Xr,Jr,ea,ta,na,ra,aa,ia,oa,sa,ua,la,da,pa,ca,fa,ha,ma,ga,ya,ba,wa,va,$a,_a,xa,Sa,Ca,Ea,Ia,Ta,Aa,ka,Oa,Ra,za,Ba,Pa,Ma,Da,Na,Wa,Ua,Va,Ha,La,Fa,Ga,ja,qa,Ka,Ya,Za,Qa,Xa,Ja,ei,ti,ni,ri,ai,ii,oi,si,ui,li,di,pi,ci,fi,hi,mi,gi,yi,bi,wi,vi,$i,_i,xi,Si,Ci,Ei,Ii,Ti,Ai,ki,Oi,Ri,zi,Bi,Pi,Mi,Di,Ni,Wi,Ui,Vi,Hi,Li,Fi,Gi,ji,qi,Ki,Yi,Zi,Qi,Xi,Ji,eo,to,no,ro,ao,io,oo,so,uo,lo,po,co,fo,ho,mo,go,yo,bo,wo,vo,$o,_o,xo,So,Co,Eo,Io,To,Ao,ko,Oo,Ro,zo,Bo,Po,Mo,Do,No,Wo,Uo,Vo,Ho,Lo,Fo,Go,jo,qo,Ko,Yo,Zo,Qo,Xo,Jo,es,ts,ns,rs,as,is,os,ss,us,ls,ds,ps,cs,fs,hs=U((()=>{$e=void 0})),ms=V(((a,i)=>{var o,s=(o=(o=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0)||P,function(e={}){function t(){return R.buffer!=P.buffer&&q(),P}function r(){return R.buffer!=P.buffer&&q(),M}function a(){return R.buffer!=P.buffer&&q(),D}function i(){return R.buffer!=P.buffer&&q(),N}function s(){return R.buffer!=P.buffer&&q(),W}function u(){return R.buffer!=P.buffer&&q(),U}function l(){return R.buffer!=P.buffer&&q(),V}function d(){return R.buffer!=P.buffer&&q(),G}var p,c,f=e;f.ready=new Promise(((e,t)=>{p=e,c=t})),f.mountExternalData=(e,t)=>{(f.Fb||(f.Fb=new Map)).set(e,t)},f.unmountExternalData=()=>{delete f.Fb},f.jsepInit=(e,t,n,r,a,i,o,s)=>{f.rc=e,f.$b=t,f.bc=n,f.Ob=r,f.ac=a,f.eb=i,f.cc=o,f.dc=s,t=(e,t,n)=>(...r)=>{let a=At,i=t?.();r=e(...r);let o=t?.();return i!==o&&(e=o,n(i),t=n=null),At!=a?new Promise(((e,t)=>{Pt={resolve:e,reject:t}})):r},n=t=>async(...n)=>{try{if(f.Eb)throw Error("Session already started");let r=f.Eb={fc:n[0],errors:[]},a=await t(...n);if(f.Eb!==r)throw Error("Session mismatch");e.flush();let i=r.errors;if(0<i.length){let e=await Promise.all(i);if(e=e.filter((e=>e)),0<e.length)throw Error(e.join("\n"))}return a}finally{f.Eb=null}},f._OrtCreateSession=t(f._OrtCreateSession,(()=>f._OrtCreateSession),(e=>f._OrtCreateSession=e)),f._OrtRun=n(t(f._OrtRun,(()=>f._OrtRun),(e=>f._OrtRun=e))),f._OrtRunWithBinding=n(t(f._OrtRunWithBinding,(()=>f._OrtRunWithBinding),(e=>f._OrtRunWithBinding=e))),f._OrtBindInput=t(f._OrtBindInput,(()=>f._OrtBindInput),(e=>f._OrtBindInput=e)),f.jsepRegisterBuffer=(t,n,r,a)=>e.registerBuffer(t,n,r,a),f.jsepUnregisterBuffers=t=>{e.unregisterBuffers(t)},f.jsepGetBuffer=t=>e.getBuffer(t),f.jsepCreateDownloader=(t,n,r)=>e.createDownloader(t,n,r),f.jsepOnRunStart=()=>e.onRunStart()};var h,m,g,y=Object.assign({},f),b="./this.program",w=(e,t)=>{throw t},v="object"==typeof window,$="function"==typeof importScripts,_="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,x=f.ENVIRONMENT_IS_PTHREAD||!1,S="";function C(e){return f.locateFile?f.locateFile(e,S):S+e}if(_){var E=(fe(),L(le)),I=(ge(),L(he));let e;S=$?I.dirname(S)+"/":"//",h=(e,t)=>(e=ie(e)?new URL(e):I.normalize(e),E.readFileSync(e,t?void 0:"utf8")),g=e=>((e=h(e,!0)).buffer||(e=new Uint8Array(e)),e),m=(e,t,n,r=!0)=>{e=ie(e)?new URL(e):I.normalize(e),E.readFile(e,r?void 0:"utf8",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!f.thisProgram&&1<process.argv.length&&(b=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),w=(e,t)=>{throw process.exitCode=e,t},f.inspect=()=>"[Emscripten Module object]";try{e=be()}catch(e){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=e.Worker}else(v||$)&&($?S=self.location.href:typeof document<"u"&&document.currentScript&&(S=document.currentScript.src),typeof o<"u"&&o&&(S=o),S=0!==S.indexOf("blob:")?S.substr(0,S.replace(/[?#].*/,"").lastIndexOf("/")+1):"",_||(h=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},$&&(g=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),m=(e,t,n)=>{var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));_&&typeof performance>"u"&&(n.g.performance=we().performance);var T=console.log.bind(console),A=console.error.bind(console);_&&(T=(...e)=>E.writeSync(1,e.join(" ")+"\n"),A=(...e)=>E.writeSync(2,e.join(" ")+"\n"));var k=T,O=A;Object.assign(f,y),y=null,"object"!=typeof WebAssembly&&ne("no native wasm support detected");var R,z,B,P,M,D,N,W,U,V,H,F,G,j=!1;function q(){var e=R.buffer;f.HEAP8=P=new Int8Array(e),f.HEAP16=D=new Int16Array(e),f.HEAPU8=M=new Uint8Array(e),f.HEAPU16=N=new Uint16Array(e),f.HEAP32=W=new Int32Array(e),f.HEAPU32=U=new Uint32Array(e),f.HEAPF32=V=new Float32Array(e),f.HEAPF64=G=new Float64Array(e),f.HEAP64=H=new BigInt64Array(e),f.HEAPU64=F=new BigUint64Array(e)}var K=16777216;if(x)R=f.wasmMemory;else if(f.wasmMemory)R=f.wasmMemory;else if(!((R=new WebAssembly.Memory({initial:K/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw O("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),_&&O("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");q(),K=R.buffer.byteLength;var Y=[],Z=[],Q=[],X=0,J=null,ee=null;function te(){if(0==--X&&(null!==J&&(clearInterval(J),J=null),ee)){var e=ee;ee=null,e()}}function ne(e){throw O(e="Aborted("+e+")"),j=!0,B=1,e=new WebAssembly.RuntimeError(e+". Build with -sASSERTIONS for more info."),c(e),e}var re,ae=e=>e.startsWith("data:application/octet-stream;base64,"),ie=e=>e.startsWith("file://");function oe(e){if(g)return g(e);throw"both async and sync fetching of the wasm failed"}function se(e,t,n){return function(e){if(v||$){if("function"==typeof fetch&&!ie(e))return fetch(e,{credentials:"same-origin"}).then((t=>{if(!t.ok)throw"failed to load wasm binary file at '"+e+"'";return t.arrayBuffer()})).catch((()=>oe(e)));if(m)return new Promise(((t,n)=>{m(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>oe(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{O(`failed to asynchronously prepare wasm: ${e}`),ne(e)}))}ae(re="ort-wasm-simd-threaded.wasm")||(re=C(re));var ue={946748:(e,t,n,a)=>{if(typeof f>"u"||!f.Fb)return 1;if((e=_e(e>>>0)).startsWith("./")&&(e=e.substring(2)),!(e=f.Fb.get(e)))return 2;if(a>>>=0,(t>>>=0)+(n>>>=0)>e.byteLength)return 3;try{return r().set(e.subarray(t,t+n),a>>>0),0}catch{return 4}},947249:e=>f.$b(e),947282:e=>f.bc(e),947314:(e,t,n)=>{f.Ob(e,t,n,!0)},947353:(e,t,n)=>{f.Ob(e,t,n)},947386:e=>{f.eb("Abs",e,void 0)},947437:e=>{f.eb("Neg",e,void 0)},947488:e=>{f.eb("Floor",e,void 0)},947541:e=>{f.eb("Ceil",e,void 0)},947593:e=>{f.eb("Reciprocal",e,void 0)},947651:e=>{f.eb("Sqrt",e,void 0)},947703:e=>{f.eb("Exp",e,void 0)},947754:e=>{f.eb("Erf",e,void 0)},947805:e=>{f.eb("Sigmoid",e,void 0)},947860:(e,t,n)=>{f.eb("HardSigmoid",e,{alpha:t,beta:n})},947939:e=>{f.eb("Log",e,void 0)},947990:e=>{f.eb("Sin",e,void 0)},948041:e=>{f.eb("Cos",e,void 0)},948092:e=>{f.eb("Tan",e,void 0)},948143:e=>{f.eb("Asin",e,void 0)},948195:e=>{f.eb("Acos",e,void 0)},948247:e=>{f.eb("Atan",e,void 0)},948299:e=>{f.eb("Sinh",e,void 0)},948351:e=>{f.eb("Cosh",e,void 0)},948403:e=>{f.eb("Asinh",e,void 0)},948456:e=>{f.eb("Acosh",e,void 0)},948509:e=>{f.eb("Atanh",e,void 0)},948562:e=>{f.eb("Tanh",e,void 0)},948614:e=>{f.eb("Not",e,void 0)},948665:(e,t,n)=>{f.eb("Clip",e,{min:t,max:n})},948734:e=>{f.eb("Clip",e,void 0)},948786:(e,t)=>{f.eb("Elu",e,{alpha:t})},948844:e=>{f.eb("Relu",e,void 0)},948896:(e,t)=>{f.eb("LeakyRelu",e,{alpha:t})},948960:(e,t)=>{f.eb("ThresholdedRelu",e,{alpha:t})},949030:(e,t)=>{f.eb("Cast",e,{to:t})},949088:e=>{f.eb("Add",e,void 0)},949139:e=>{f.eb("Sub",e,void 0)},949190:e=>{f.eb("Mul",e,void 0)},949241:e=>{f.eb("Div",e,void 0)},949292:e=>{f.eb("Pow",e,void 0)},949343:e=>{f.eb("Equal",e,void 0)},949396:e=>{f.eb("Greater",e,void 0)},949451:e=>{f.eb("GreaterOrEqual",e,void 0)},949513:e=>{f.eb("Less",e,void 0)},949565:e=>{f.eb("LessOrEqual",e,void 0)},949624:(e,t,n,r,a)=>{f.eb("ReduceMean",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},949783:(e,t,n,r,a)=>{f.eb("ReduceMax",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},949941:(e,t,n,r,a)=>{f.eb("ReduceMin",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},950099:(e,t,n,r,a)=>{f.eb("ReduceProd",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},950258:(e,t,n,r,a)=>{f.eb("ReduceSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},950416:(e,t,n,r,a)=>{f.eb("ReduceL1",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},950573:(e,t,n,r,a)=>{f.eb("ReduceL2",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},950730:(e,t,n,r,a)=>{f.eb("ReduceLogSum",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},950891:(e,t,n,r,a)=>{f.eb("ReduceSumSquare",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},951055:(e,t,n,r,a)=>{f.eb("ReduceLogSumExp",e,{keepDims:!!t,noopWithEmptyAxes:!!n,axes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},951219:e=>{f.eb("Where",e,void 0)},951272:(e,t,n)=>{f.eb("Transpose",e,{perm:t?Array.from(s().subarray(t>>>0,n>>>0)):[]})},951380:(e,n,r,a,i,o,u,l,d,p,c,h,m,g,y)=>{f.eb("ConvTranspose",e,{format:d?"NHWC":"NCHW",autoPad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,u],strides:[l],wIsConst:()=>!!t()[p>>>0],outputPadding:c?Array.from(s().subarray(c>>>0,h>>>0)):[],outputShape:m?Array.from(s().subarray(m>>>0,g>>>0)):[],activation:_e(y)})},951782:(e,n,r,a,i,o,u,l,d,p,c,h,m,g)=>{f.eb("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:n,dilations:Array.from(s().subarray(r>>>0,2+(r>>>0)>>>0)),group:a,kernelShape:Array.from(s().subarray(i>>>0,2+(i>>>0)>>>0)),pads:Array.from(s().subarray(o>>>0,4+(o>>>0)>>>0)),strides:Array.from(s().subarray(u>>>0,2+(u>>>0)>>>0)),wIsConst:()=>!!t()[d>>>0],outputPadding:p?Array.from(s().subarray(p>>>0,c>>>0)):[],outputShape:h?Array.from(s().subarray(h>>>0,m>>>0)):[],activation:_e(g)})},952347:(e,n,r,a,i,o,u,l,d,p,c,h,m,g,y)=>{f.eb("ConvTranspose",e,{format:d?"NHWC":"NCHW",autoPad:n,dilations:[r],group:a,kernel_shape:[i],pads:[o,u],strides:[l],wIsConst:()=>!!t()[p>>>0],outputPadding:c?Array.from(s().subarray(c>>>0,h>>>0)):[],outputShape:m?Array.from(s().subarray(m>>>0,g>>>0)):[],activation:_e(y)})},952749:(e,n,r,a,i,o,u,l,d,p,c,h,m,g)=>{f.eb("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:n,dilations:Array.from(s().subarray(r>>>0,2+(r>>>0)>>>0)),group:a,kernelShape:Array.from(s().subarray(i>>>0,2+(i>>>0)>>>0)),pads:Array.from(s().subarray(o>>>0,4+(o>>>0)>>>0)),strides:Array.from(s().subarray(u>>>0,2+(u>>>0)>>>0)),wIsConst:()=>!!t()[d>>>0],outputPadding:p?Array.from(s().subarray(p>>>0,c>>>0)):[],outputShape:h?Array.from(s().subarray(h>>>0,m>>>0)):[],activation:_e(g)})},953314:(e,t)=>{f.eb("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},953405:(e,t,n,r,a,i,o,s,u,l,d,p,c,h,m,g)=>{f.eb("AveragePool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[l,d,p,c],strides:[h,m]})},953689:(e,t)=>{f.eb("GlobalAveragePool",e,{format:t?"NHWC":"NCHW"})},953780:(e,t,n,r,a,i,o,s,u,l,d,p,c,h,m,g)=>{f.eb("AveragePool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[l,d,p,c],strides:[h,m]})},954064:(e,t)=>{f.eb("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},954151:(e,t,n,r,a,i,o,s,u,l,d,p,c,h,m,g)=>{f.eb("MaxPool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[l,d,p,c],strides:[h,m]})},954431:(e,t)=>{f.eb("GlobalMaxPool",e,{format:t?"NHWC":"NCHW"})},954518:(e,t,n,r,a,i,o,s,u,l,d,p,c,h,m,g)=>{f.eb("MaxPool",e,{format:g?"NHWC":"NCHW",auto_pad:t,ceil_mode:n,count_include_pad:r,storage_order:a,dilations:[i,o],kernel_shape:[s,u],pads:[l,d,p,c],strides:[h,m]})},954798:(e,t,n,r,a)=>{f.eb("Gemm",e,{alpha:t,beta:n,transA:r,transB:a})},954902:e=>{f.eb("MatMul",e,void 0)},954956:(e,t,n,r)=>{f.eb("ArgMax",e,{keepDims:!!t,selectLastIndex:!!n,axis:r})},955064:(e,t,n,r)=>{f.eb("ArgMin",e,{keepDims:!!t,selectLastIndex:!!n,axis:r})},955172:(e,t)=>{f.eb("Softmax",e,{axis:t})},955235:(e,t)=>{f.eb("Concat",e,{axis:t})},955295:(e,t,n,r,a)=>{f.eb("Split",e,{axis:t,numOutputs:n,splitSizes:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},955435:e=>{f.eb("Expand",e,void 0)},955489:(e,t)=>{f.eb("Gather",e,{axis:Number(t)})},955560:(e,t)=>{f.eb("GatherElements",e,{axis:Number(t)})},955639:(e,t,n,r,a,i,o,u,l,d,p)=>{f.eb("Resize",e,{antialias:t,axes:n?Array.from(s().subarray(n>>>0,r>>>0)):[],coordinateTransformMode:_e(a),cubicCoeffA:i,excludeOutside:o,extrapolationValue:u,keepAspectRatioPolicy:_e(l),mode:_e(d),nearestMode:_e(p)})},955985:(e,t,n,r,a,i,o)=>{f.eb("Slice",e,{starts:t?Array.from(s().subarray(t>>>0,n>>>0)):[],ends:r?Array.from(s().subarray(r>>>0,a>>>0)):[],axes:i?Array.from(s().subarray(i>>>0,o>>>0)):[]})},956201:e=>{f.eb("Tile",e,void 0)},956253:(e,t,n)=>{f.eb("LayerNormalization",e,{axis:Number(t),epsilon:Number(n)})},956360:(e,t,n)=>{f.eb("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},956474:(e,t,n)=>{f.eb("InstanceNormalization",e,{epsilon:t,format:n?"NHWC":"NCHW"})},956588:e=>{f.eb("Range",e,void 0)},956641:(e,t)=>{f.eb("Einsum",e,{equation:_e(t)})},956722:(e,t,n,r,a)=>{f.eb("Pad",e,{mode:t,value:n,pads:r?Array.from(s().subarray(r>>>0,a>>>0)):[]})},956849:(e,t,n,r,a,i)=>{f.eb("BatchNormalization",e,{epsilon:t,momentum:n,spatial:!!a,trainingMode:!!r,format:i?"NHWC":"NCHW"})},957018:(e,t,n,r,a,i)=>{f.eb("BatchNormalization",e,{epsilon:t,momentum:n,spatial:!!a,trainingMode:!!r,format:i?"NHWC":"NCHW"})},957187:(e,t,n)=>{f.eb("CumSum",e,{exclusive:Number(t),reverse:Number(n)})},957284:(e,t,n,r,a,i,o,u,l)=>{f.eb("Attention",e,{numHeads:t,isUnidirectional:n,maskFilterValue:r,scale:a,doRotary:i,qkvHiddenSizes:o?Array.from(s().subarray(Number(u)>>>0,Number(u)+o>>>0)):[],pastPresentShareBuffer:!!l})},957556:e=>{f.eb("Gelu",e,void 0)},957608:(e,t,n,r,a,i)=>{f.eb("MultiHeadAttention",e,{numHeads:t,isUnidirectional:n,maskFilterValue:r,scale:a,doRotary:i})},957767:e=>{f.eb("BiasAdd",e,void 0)},957822:e=>{f.eb("BiasSplitGelu",e,void 0)},957883:(e,t)=>{f.eb("SkipLayerNormalization",e,{epsilon:t})},957964:(e,n,r,a,i,o,u,d,p,c,h,m,g)=>{f.eb("Conv",e,{format:p?"NHWC":"NCHW",auto_pad:n,dilations:[r],group:a,kernel_shape:[i],pads:o?Array.from(s().subarray(o>>>0,u>>>0)):[],strides:[d],w_is_const:()=>!!t()[c>>>0],activation:_e(h),activation_params:m?Array.from(l().subarray(m>>>0,g>>>0)):[]})},958334:(e,n,r,a,i,o,u,d,p,c,h,m,g,y,b,w)=>{f.eb("Conv",e,{format:m?"NHWC":"NCHW",auto_pad:n,dilations:[r,a],group:i,kernel_shape:[o,u],pads:d?Array.from(s().subarray(d>>>0,p>>>0)):[],strides:[c,h],w_is_const:()=>!!t()[g>>>0],activation:_e(y),activation_params:b?Array.from(l().subarray(b>>>0,w>>>0)):[]})},958725:e=>{f.cc(e)},958759:(e,t)=>f.dc(e,t,f.Eb.fc,f.Eb.errors)};function de(e){this.name="ExitStatus",this.message=`Program terminated with exit(${e})`,this.status=e}var pe=e=>{e.terminate(),e.onmessage=()=>{}},ce=e=>{0==Ae.yb.length&&(Te(),Ae.Pb(Ae.yb[0]));var t=Ae.yb.pop();if(!t)return 6;Ae.zb.push(t),Ae.pb[e.xb]=t,t.xb=e.xb;var n={cmd:"run",start_routine:e.hc,arg:e.Vb,pthread_ptr:e.xb};return _&&t.unref(),t.postMessage(n,e.nc),0},me=0,ye=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,$e=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&ye)return ye.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r="";t<n;){var a=e[t++];if(128&a){var i=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},_e=(e,t)=>(e>>>=0)?$e(r(),e,t):"",xe=e=>{var t=Tn();return e=e(),An(t),e};function Se(e,t){var n=arguments.length-2,r=arguments;return xe((()=>{for(var a=2*n,i=kn(8*a),o=i>>>3,s=0;s<n;s++){var u=r[2+s];"bigint"==typeof u?(H[o+2*s]=1n,H[o+2*s+1]=u):(H[o+2*s]=0n,d()[o+2*s+1>>>0]=u)}return xn(e,a,i,t)}))}function Ce(e){if(x)return Se(0,1,e);B=e,0<me||(Ae.ic(),f.onExit?.(e),j=!0),w(e,new de(e))}var Ee=e=>{if(B=e,x)throw Oe(e),"unwind";Ce(e)},Ie=e=>{e instanceof de||"unwind"==e||w(1,e)};function Te(){var e=C("ort-wasm-simd-threaded.worker.js");e=new Worker(e),Ae.yb.push(e)}var Ae={yb:[],zb:[],Ub:[],pb:{},Ib(){x?(Ae.receiveObjectTransfer=Ae.ec,Ae.threadInitTLS=Ae.Tb,Ae.setExitStatus=Ae.Sb):function(){for(var e=f.numThreads;e--;)Te();Y.unshift((()=>{X++,function(e){x?e():Promise.all(Ae.yb.map(Ae.Pb)).then(e)}((()=>te()))}))}()},Sb:e=>B=e,sc:["$terminateWorker"],ic:()=>{for(var e of Ae.zb)pe(e);for(e of Ae.yb)pe(e);Ae.yb=[],Ae.zb=[],Ae.pb=[]},Rb:e=>{var t=e.xb;delete Ae.pb[t],Ae.yb.push(e),Ae.zb.splice(Ae.zb.indexOf(e),1),e.xb=0,Sn(t)},ec(){},Tb(){Ae.Ub.forEach((e=>e()))},Pb:e=>new Promise((t=>{e.onmessage=n=>{var r=(n=n.data).cmd;if(n.targetThread&&n.targetThread!=yn()){var a=Ae.pb[n.targetThread];a?a.postMessage(n,n.transferList):O(`Internal error! Worker sent a message "${r}" to target pthread ${n.targetThread}, but that thread no longer exists!`)}else"checkMailbox"===r?xt():"spawnThread"===r?ce(n):"cleanupThread"===r?Ae.Rb(Ae.pb[n.thread]):"killThread"===r?(n=n.thread,r=Ae.pb[n],delete Ae.pb[n],pe(r),Sn(n),Ae.zb.splice(Ae.zb.indexOf(r),1),r.xb=0):"cancelThread"===r?Ae.pb[n.thread].postMessage({cmd:"cancel"}):"loaded"===r?(e.loaded=!0,_&&!e.xb&&e.unref(),t(e)):"alert"===r?alert(`Thread ${n.threadId}: ${n.text}`):"setimmediate"===n.target?e.postMessage(n):"callHandler"===r?f[n.handler](...n.args):r&&O(`worker sent an unknown command ${r}`)},e.onerror=e=>{throw O(`worker sent an error! ${e.filename}:${e.lineno}: ${e.message}`),e},_&&(e.on("message",(t=>e.onmessage({data:t}))),e.on("error",(t=>e.onerror(t))));var n,r=[];for(n of["onExit"])f.hasOwnProperty(n)&&r.push(n);e.postMessage({cmd:"load",handlers:r,urlOrBlob:f.mainScriptUrlOrBlob||o,wasmMemory:R,wasmModule:z})}))};f.PThread=Ae;var ke=e=>{for(;0<e.length;)e.shift()(f)};function Oe(e){if(x)return Se(1,0,e);Ee(e)}function Re(e){this.Db=e-24,this.pc=function(e){u()[this.Db+4>>>2>>>0]=e},this.Mb=function(e){u()[this.Db+8>>>2>>>0]=e},this.Ib=function(e,t){this.Kb(),this.pc(e),this.Mb(t)},this.Kb=function(){u()[this.Db+16>>>2>>>0]=0}}function ze(e,t,n,r){return x?Se(2,1,e,t,n,r):Be(e,t,n,r)}function Be(e,t,n,r){if(e>>>=0,t>>>=0,n>>>=0,r>>>=0,typeof SharedArrayBuffer>"u")return O("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var a=[];return x&&0===a.length?ze(e,t,n,r):(e={hc:n,xb:e,Vb:r,nc:a},x?(e.qc="spawnThread",postMessage(e,a),0):ce(e))}function Pe(e,t,n){return x?Se(3,1,e,t,n):0}function Me(e,t){if(x)return Se(4,1,e,t)}f.establishStackSpace=()=>{var e=yn(),t=u()[e+52>>>2>>>0];e=u()[e+56>>>2>>>0],In(t,t-e),An(t)},f.invokeEntryPoint=(e,t)=>{e=On.apply(null,[e,t]),0<me?Ae.Sb(e):Cn(e)};var De=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},Ne=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<e.length;++i){var o=e.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++i)),127>=o){if(n>=r)break;t[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;t[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;t[n++>>>0]=224|o>>12}else{if(n+3>=r)break;t[n++>>>0]=240|o>>18,t[n++>>>0]=128|o>>12&63}t[n++>>>0]=128|o>>6&63}t[n++>>>0]=128|63&o}}return t[n>>>0]=0,n-a},We=(e,t,n)=>Ne(e,r(),t,n);function Ue(e,t){if(x)return Se(5,1,e,t)}function Ve(e,t,n){if(x)return Se(6,1,e,t,n)}function He(e,t,n){return x?Se(7,1,e,t,n):0}function Le(e,t){if(x)return Se(8,1,e,t)}function Fe(e,t,n){if(x)return Se(9,1,e,t,n)}function Ge(e,t,n,r){if(x)return Se(10,1,e,t,n,r)}function je(e,t,n,r){if(x)return Se(11,1,e,t,n,r)}function qe(e,t,n,r){if(x)return Se(12,1,e,t,n,r)}function Ke(e){if(x)return Se(13,1,e)}function Ye(e,t){if(x)return Se(14,1,e,t)}function Ze(e,t,n){if(x)return Se(15,1,e,t,n)}var Qe,Xe,Je=e=>{if(null===e)return"null";var t=typeof e;return"object"===t||"array"===t||"function"===t?e.toString():""+e},et=e=>{for(var t="";r()[e>>>0];)t+=Qe[r()[e++>>>0]];return t},tt={},nt={},rt={};function at(e,t,n={}){if(!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");!function(e,t,n={}){var r=t.name;if(!e)throw new Xe(`type "${r}" must have a positive integer typeid pointer`);if(nt.hasOwnProperty(e)){if(n.Yb)return;throw new Xe(`Cannot register type '${r}' twice`)}nt[e]=t,delete rt[e],tt.hasOwnProperty(e)&&(t=tt[e],delete tt[e],t.forEach((e=>e())))}(e,t,n)}var it=(e,n,o)=>{switch(n){case 1:return o?e=>t()[e>>>0>>>0]:e=>r()[e>>>0>>>0];case 2:return o?e=>a()[e>>>1>>>0]:e=>i()[e>>>1>>>0];case 4:return o?e=>s()[e>>>2>>>0]:e=>u()[e>>>2>>>0];case 8:return o?e=>H[e>>>3]:e=>F[e>>>3];default:throw new TypeError(`invalid integer width (${n}): ${e}`)}};function ot(){this.wb=[void 0],this.Nb=[]}var st=new ot;function ut(e){(e>>>=0)>=st.Db&&0==--st.get(e).Qb&&st.Mb(e)}var lt=e=>{if(!e)throw new Xe("Cannot use deleted val. handle = "+e);return st.get(e).value},dt=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return st.Kb({Qb:1,value:e})}};function pt(e){return this.fromWireType(s()[e>>>2>>>0])}var ct=(e,t)=>{switch(t){case 4:return function(e){return this.fromWireType(l()[e>>>2>>>0])};case 8:return function(e){return this.fromWireType(d()[e>>>3>>>0])};default:throw new TypeError(`invalid float width (${t}): ${e}`)}};function ft(e){return this.fromWireType(u()[e>>>2>>>0])}var ht=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,mt=(e,t)=>{for(var n=e>>1,o=n+t/2;!(n>=o)&&i()[n>>>0];)++n;if(32<(n<<=1)-e&&ht)return ht.decode(r().slice(e,n));for(n="",o=0;!(o>=t/2);++o){var s=a()[e+2*o>>>1>>>0];if(0==s)break;n+=String.fromCharCode(s)}return n},gt=(e,t,n)=>{if(n??=2147483647,2>n)return 0;var r=t;n=(n-=2)<2*e.length?n/2:e.length;for(var i=0;i<n;++i){var o=e.charCodeAt(i);a()[t>>>1>>>0]=o,t+=2}return a()[t>>>1>>>0]=0,t-r},yt=e=>2*e.length,bt=(e,t)=>{for(var n=0,r="";!(n>=t/4);){var a=s()[e+4*n>>>2>>>0];if(0==a)break;++n,65536<=a?(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a)):r+=String.fromCharCode(a)}return r},wt=(e,t,n)=>{if(t>>>=0,n??=2147483647,4>n)return 0;var r=t;n=r+n-4;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),s()[t>>>2>>>0]=i,(t+=4)+4>n)break}return s()[t>>>2>>>0]=0,t-r},vt=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);55296<=r&&57343>=r&&++n,t+=4}return t},$t=()=>{if(!(0<me))try{x?Cn(B):Ee(B)}catch(e){Ie(e)}};function _t(e){e>>>=0,"function"==typeof Atomics.oc&&(Atomics.oc(s(),e>>>2,e).value.then(xt),e+=128,Atomics.store(s(),e>>>2,1))}f.__emscripten_thread_mailbox_await=_t;var xt=()=>{var e=yn();if(e&&(_t(e),!j))try{En(),$t()}catch(e){Ie(e)}};f.checkMailbox=xt;var St=[],Ct=(e,t)=>{var n=nt[e];if(void 0===n)throw e=vn(e),n=et(e),wn(e),new Xe(t+" has unknown type "+n);return n},Et=(e,t,n)=>{var r=[];return e=e.toWireType(r,n),r.length&&(u()[t>>>2>>>0]=dt(r)),e},It=e=>{try{e()}catch(e){ne(e)}},Tt=0,At=null,kt=0,Ot=[],Rt={},zt={},Bt=0,Pt=null,Mt=[];function Dt(e){return function(e){if(!j){if(0===Tt){var t=!1,n=!1;e(((e=0)=>{if(!j&&(kt=e,t=!0,n)){Tt=2,It((()=>Bn(At))),typeof Browser<"u"&&Browser.Jb.Xb&&Browser.Jb.resume(),e=!1;try{var r=function(){var e=s()[At+8>>>2>>>0];return e=mn[zt[e]],--me,e()}()}catch(t){r=t,e=!0}var a=!1;if(!At){var i=Pt;i&&(Pt=null,(e?i.reject:i.resolve)(r),a=!0)}if(e&&!a)throw r}})),n=!0,t||(Tt=1,At=function(){var e=bn(65548),t=e+12;u()[e>>>2>>>0]=t,u()[e+4>>>2>>>0]=t+65536,t=Ot[0];var n=Rt[t];return void 0===n&&(n=Bt++,Rt[t]=n,zt[n]=t),t=n,s()[e+8>>>2>>>0]=t,e}(),typeof Browser<"u"&&Browser.Jb.Xb&&Browser.Jb.pause(),It((()=>Rn(At))))}else 2===Tt?(Tt=0,It(Pn),wn(At),At=null,Mt.forEach((e=>{if(!j)try{e(),$t()}catch(e){Ie(e)}}))):ne(`invalid state: ${Tt}`);return kt}}((t=>{e().then(t)}))}var Nt=[],Wt={},Ut=e=>{var t=Wt[e];return void 0===t?et(e):t},Vt=()=>"object"==typeof globalThis?globalThis:Function("return this")(),Ht=(e,t)=>Object.defineProperty(t,"name",{value:e}),Lt=e=>e%4==0&&(e%100!=0||e%400==0),Ft=[0,31,60,91,121,152,182,213,244,274,305,335],Gt=[0,31,59,90,120,151,181,212,243,273,304,334];function jt(e,t,n,r,a,i,o){return x?Se(16,1,e,t,n,r,a,i,o):-52}function qt(e,t,n,r,a,i){if(x)return Se(17,1,e,t,n,r,a,i)}var Kt,Yt=e=>{var t=De(e)+1,n=bn(t);return n&&We(e,n,t),n},Zt=[],Qt=(e,t)=>{Zt.length=0;for(var n;n=r()[e++>>>0];){var a=105!=n;t+=(a&=112!=n)&&t%8?4:0,Zt.push(112==n?u()[t>>>2>>>0]:106==n?H[t>>>3]:105==n?s()[t>>>2>>>0]:d()[t>>>3>>>0]),t+=a?8:4}return Zt},Xt={},Jt=()=>{if(!Kt){var e,t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:b||"./this.program"};for(e in Xt)void 0===Xt[e]?delete t[e]:t[e]=Xt[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);Kt=n}return Kt};function en(e,n){if(x)return Se(18,1,e,n);e>>>=0,n>>>=0;var r=0;return Jt().forEach(((a,i)=>{var o=n+r;for(i=u()[e+4*i>>>2>>>0]=o,o=0;o<a.length;++o)t()[i++>>>0>>>0]=a.charCodeAt(o);t()[i>>>0>>>0]=0,r+=a.length+1})),0}function tn(e,t){if(x)return Se(19,1,e,t);e>>>=0,t>>>=0;var n=Jt();u()[e>>>2>>>0]=n.length;var r=0;return n.forEach((e=>r+=e.length+1)),u()[t>>>2>>>0]=r,0}function nn(e){return x?Se(20,1,e):52}function rn(e,t,n,r){return x?Se(21,1,e,t,n,r):52}function an(e,t,n,r){return x?Se(22,1,e,t,n,r):70}var on=[null,[],[]];function sn(e,t,n,a){if(x)return Se(23,1,e,t,n,a);t>>>=0,n>>>=0,a>>>=0;for(var i=0,o=0;o<n;o++){var s=u()[t>>>2>>>0],l=u()[t+4>>>2>>>0];t+=8;for(var d=0;d<l;d++){var p=r()[s+d>>>0],c=on[e];0===p||10===p?((1===e?k:O)($e(c,0)),c.length=0):c.push(p)}i+=l}return u()[a>>>2>>>0]=i,0}var un=[31,29,31,30,31,30,31,31,30,31,30,31],ln=[31,28,31,30,31,30,31,31,30,31,30,31];function dn(e,n,r,a){function i(e,t,n){for(e="number"==typeof e?e.toString():e||"";e.length<t;)e=n[0]+e;return e}function o(e,t){return i(e,t,"0")}function l(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function d(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function p(e){var t=e.Ab;for(e=new Date(new Date(e.Bb+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Lt(e.getFullYear())?un:ln)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=d(new Date(e.getFullYear(),0,4)),n=d(n),0>=l(t,e)?0>=l(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,n>>>=0,r>>>=0,a>>>=0;var c=u()[a+40>>>2>>>0];for(var f in a={lc:s()[a>>>2>>>0],kc:s()[a+4>>>2>>>0],Gb:s()[a+8>>>2>>>0],Lb:s()[a+12>>>2>>>0],Hb:s()[a+16>>>2>>>0],Bb:s()[a+20>>>2>>>0],vb:s()[a+24>>>2>>>0],Ab:s()[a+28>>>2>>>0],tc:s()[a+32>>>2>>>0],jc:s()[a+36>>>2>>>0],mc:c?_e(c):""},r=_e(r),c={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})r=r.replace(new RegExp(f,"g"),c[f]);var h="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),m="January February March April May June July August September October November December".split(" ");for(f in c={"%a":e=>h[e.vb].substring(0,3),"%A":e=>h[e.vb],"%b":e=>m[e.Hb].substring(0,3),"%B":e=>m[e.Hb],"%C":e=>o((e.Bb+1900)/100|0,2),"%d":e=>o(e.Lb,2),"%e":e=>i(e.Lb,2," "),"%g":e=>p(e).toString().substring(2),"%G":e=>p(e),"%H":e=>o(e.Gb,2),"%I":e=>(0==(e=e.Gb)?e=12:12<e&&(e-=12),o(e,2)),"%j":e=>{for(var t=0,n=0;n<=e.Hb-1;t+=(Lt(e.Bb+1900)?un:ln)[n++]);return o(e.Lb+t,3)},"%m":e=>o(e.Hb+1,2),"%M":e=>o(e.kc,2),"%n":()=>"\n","%p":e=>0<=e.Gb&&12>e.Gb?"AM":"PM","%S":e=>o(e.lc,2),"%t":()=>"\t","%u":e=>e.vb||7,"%U":e=>o(Math.floor((e.Ab+7-e.vb)/7),2),"%V":e=>{var t=Math.floor((e.Ab+7-(e.vb+6)%7)/7);if(2>=(e.vb+371-e.Ab-2)%7&&t++,t)53==t&&(4==(n=(e.vb+371-e.Ab)%7)||3==n&&Lt(e.Bb)||(t=1));else{t=52;var n=(e.vb+7-e.Ab-1)%7;(4==n||5==n&&Lt(e.Bb%400-1))&&t++}return o(t,2)},"%w":e=>e.vb,"%W":e=>o(Math.floor((e.Ab+7-(e.vb+6)%7)/7),2),"%y":e=>(e.Bb+1900).toString().substring(2),"%Y":e=>e.Bb+1900,"%z":e=>(0<=(e=e.jc)?"+":"-")+("0000"+((e=Math.abs(e)/60)/60*100+e%60)).slice(-4),"%Z":e=>e.mc,"%%":()=>"%"},r=r.replace(/%%/g,"\0\0"),c)r.includes(f)&&(r=r.replace(new RegExp(f,"g"),c[f](a)));return f=function(e){var t=Array(De(e)+1);return Ne(e,t,0,t.length),t}(r=r.replace(/\0\0/g,"%")),f.length>n?0:(((e,n)=>{t().set(e,n>>>0)})(f,e),f.length-1)}Ae.Ib();for(var pn=Array(256),cn=0;256>cn;++cn)pn[cn]=String.fromCharCode(cn);Qe=pn,Xe=f.BindingError=class extends Error{constructor(e){super(e),this.name="BindingError"}},f.InternalError=class extends Error{constructor(e){super(e),this.name="InternalError"}},Object.assign(ot.prototype,{get(e){return this.wb[e]},has(e){return void 0!==this.wb[e]},Kb(e){var t=this.Nb.pop()||this.wb.length;return this.wb[t]=e,t},Mb(e){this.wb[e]=void 0,this.Nb.push(e)}}),st.wb.push({value:void 0},{value:null},{value:!0},{value:!1}),st.Db=st.wb.length,f.count_emval_handles=()=>{for(var e=0,t=st.Db;t<st.wb.length;++t)void 0!==st.wb[t]&&++e;return e};var fn=[Ce,Oe,ze,Pe,Me,Ue,Ve,He,Le,Fe,Ge,je,qe,Ke,Ye,Ze,jt,qt,en,tn,nn,rn,an,sn],hn={ua:function(e,t,n){return Dt((async()=>{await f.ac(e,t,n)}))},b:function(e,t,n){throw new Re(e>>>=0).Ib(t>>>0,n>>>0),e},fa:function(e){$n(e>>>0,!$,1,!v,131072,!1),Ae.Tb()},D:function(e){e>>>=0,x?postMessage({cmd:"cleanupThread",thread:e}):Ae.Rb(Ae.pb[e])},X:Be,z:Pe,la:Me,T:Ue,V:Ve,ma:He,ja:Le,ca:Fe,ia:Ge,H:je,U:qe,R:Ke,ka:Ye,S:Ze,K:function(e,t,n,r,a){e>>>=0,n>>>=0;var i=-1!=(t=et(t>>>=0)).indexOf("u");i&&(a=(1n<<64n)-1n),at(e,{name:t,fromWireType:e=>e,toWireType:function(e,n){if("bigint"!=typeof n&&"number"!=typeof n)throw new TypeError(`Cannot convert "${Je(n)}" to ${this.name}`);if(n<r||n>a)throw new TypeError(`Passing a number "${Je(n)}" from JS side to C/C++ side to an argument of type "${t}", which is outside the valid range [${r}, ${a}]!`);return n},argPackAdvance:8,readValueFromPointer:it(t,n,!i),Cb:null})},sa:function(e,t,n,a){at(e>>>=0,{name:t=et(t>>>0),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:a},argPackAdvance:8,readValueFromPointer:function(e){return this.fromWireType(r()[e>>>0])},Cb:null})},ra:function(e,t){at(e>>>=0,{name:t=et(t>>>0),fromWireType:e=>{var t=lt(e);return ut(e),t},toWireType:(e,t)=>dt(t),argPackAdvance:8,readValueFromPointer:pt,Cb:null})},J:function(e,t,n){n>>>=0,at(e>>>=0,{name:t=et(t>>>0),fromWireType:e=>e,toWireType:(e,t)=>t,argPackAdvance:8,readValueFromPointer:ct(t,n),Cb:null})},v:function(e,t,n,r,a){if(e>>>=0,n>>>=0,t=et(t>>>0),-1===a&&(a=4294967295),a=e=>e,0===r){var i=32-8*n;a=e=>e<<i>>>i}var o=t.includes("unsigned")?function(e,t){return t>>>0}:function(e,t){return t};at(e,{name:t,fromWireType:a,toWireType:o,argPackAdvance:8,readValueFromPointer:it(t,n,0!==r),Cb:null})},o:function(e,n,r){function a(e){var n=u()[e>>>2>>>0];return e=u()[e+4>>>2>>>0],new i(t().buffer,e,n)}var i=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][n];at(e>>>=0,{name:r=et(r>>>0),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{Yb:!0})},L:function(e,t){e>>>=0;var n="std::string"===(t=et(t>>>0));at(e,{name:t,fromWireType:function(e){var t=u()[e>>>2>>>0],a=e+4;if(n)for(var i=a,o=0;o<=t;++o){var s=a+o;if(o==t||0==r()[s>>>0]){if(i=_e(i,s-i),void 0===l)var l=i;else l+=String.fromCharCode(0),l+=i;i=s+1}}else{for(l=Array(t),o=0;o<t;++o)l[o]=String.fromCharCode(r()[a+o>>>0]);l=l.join("")}return wn(e),l},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var a="string"==typeof t;if(!(a||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array))throw new Xe("Cannot pass non-string to std::string");var i=n&&a?De(t):t.length,o=bn(4+i+1),s=o+4;if(u()[o>>>2>>>0]=i,n&&a)We(t,s,i+1);else if(a)for(a=0;a<i;++a){var l=t.charCodeAt(a);if(255<l)throw wn(s),new Xe("String has UTF-16 code units that do not fit in 8 bits");r()[s+a>>>0]=l}else for(a=0;a<i;++a)r()[s+a>>>0]=t[a];return null!==e&&e.push(wn,o),o},argPackAdvance:8,readValueFromPointer:ft,Cb(e){wn(e)}})},B:function(e,t,n){if(e>>>=0,t>>>=0,n=et(n>>>=0),2===t)var r=mt,a=gt,o=yt,s=()=>i(),l=1;else 4===t&&(r=bt,a=wt,o=vt,s=()=>u(),l=2);at(e,{name:n,fromWireType:e=>{for(var n,a=u()[e>>>2>>>0],i=s(),o=e+4,d=0;d<=a;++d){var p=e+4+d*t;(d==a||0==i[p>>>l])&&(o=r(o,p-o),void 0===n?n=o:(n+=String.fromCharCode(0),n+=o),o=p+t)}return wn(e),n},toWireType:(e,r)=>{if("string"!=typeof r)throw new Xe(`Cannot pass non-string to C++ string type ${n}`);var i=o(r),s=bn(4+i+t);return u()[s>>>2]=i>>l,a(r,s+4,i+t),null!==e&&e.push(wn,s),s},argPackAdvance:8,readValueFromPointer:pt,Cb(e){wn(e)}})},ta:function(e,t){at(e>>>=0,{Zb:!0,name:t=et(t>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},qa:()=>1,P:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>xt())):x?postMessage({targetThread:e,cmd:"checkMailbox"}):(e=Ae.pb[e])&&e.postMessage({cmd:"checkMailbox"})},Y:function(e,t,n,r){t>>>=0,n/=2,St.length=n,r=r>>>0>>>3;for(var a=0;a<n;a++)St[a]=H[r+2*a]?H[r+2*a+1]:d()[r+2*a+1>>>0];return e=0>e?ue[-e-1]:fn[e],Ae.Wb=t,t=e.apply(null,St),Ae.Wb=0,t},ea:_t,pa:function(e){_&&Ae.pb[e>>>0].ref()},t:function(e,t,n){return t>>>=0,n>>>=0,e=lt(e>>>0),t=Ct(t,"emval::as"),Et(t,n,e)},y:function(e){return e>>>=0,Dt((()=>(e=lt(e)).then(dt)))},p:function(e,t,n,r){return n>>>=0,r>>>=0,(e=Nt[e>>>0])(null,t=lt(t>>>0),n,r)},k:function(e,t,n,r,a){return n>>>=0,r>>>=0,a>>>=0,(e=Nt[e>>>0])(t=lt(t>>>0),t[n=Ut(n)],r,a)},c:ut,C:function(e,t){return t>>>=0,(e=lt(e>>>0))==lt(t)},n:function(e){return 0==(e>>>=0)?dt(Vt()):(e=Ut(e),dt(Vt()[e]))},j:function(e,t,n){t=((e,t)=>{for(var n=Array(e),r=0;r<e;++r)n[r]=Ct(u()[t+4*r>>>2>>>0],"parameter "+r);return n})(e,t>>>0);var r=t.shift();e--;var a="return function (obj, func, destructorsRef, args) {\n",i=0,o=[];0===n&&o.push("obj");for(var s=["retType"],l=[r],d=0;d<e;++d)o.push("arg"+d),s.push("argType"+d),l.push(t[d]),a+=`  var arg${d} = argType${d}.readValueFromPointer(args${i?"+"+i:""});\n`,i+=t[d].argPackAdvance;for(a+=`  var rv = ${1===n?"new func":"func.call"}(${o.join(", ")});\n`,d=0;d<e;++d)t[d].deleteObject&&(a+=`  argType${d}.deleteObject(arg${d});\n`);return r.Zb||(s.push("emval_returnValue"),l.push(Et),a+="  return emval_returnValue(retType, destructorsRef, rv);\n"),s.push(a+"};\n"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof t} which is not a function`);var n=Ht(t.name||"unknownFunctionName",(function(){}));return n.prototype=t.prototype,n=new n,(e=t.apply(n,e))instanceof Object?e:n}(s).apply(null,l),n=`methodCaller<(${t.map((e=>e.name)).join(", ")}) => ${r.name}>`,(e=>{var t=Nt.length;return Nt.push(e),t})(Ht(n,e))},s:function(e,t){return t>>>=0,e=lt(e>>>0),t=lt(t),dt(e[t])},e:function(e){4<(e>>>=0)&&(st.get(e).Qb+=1)},w:function(){return dt([])},m:function(e){e=lt(e>>>0);for(var t=Array(e.length),n=0;n<e.length;n++)t[n]=e[n];return dt(t)},f:function(e){return dt(Ut(e>>>0))},l:function(){return dt({})},i:function(e){for(var t=lt(e>>>=0);t.length;){var n=t.pop();t.pop()(n)}ut(e)},h:function(e,t,n){t>>>=0,n>>>=0,e=lt(e>>>0),t=lt(t),n=lt(n),e[t]=n},d:function(e,t){return t>>>=0,e=(e=Ct(e>>>0,"_emval_take_value")).readValueFromPointer(t),dt(e)},$:function(e,t){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),t>>>=0,e=new Date(1e3*e),s()[t>>>2>>>0]=e.getUTCSeconds(),s()[t+4>>>2>>>0]=e.getUTCMinutes(),s()[t+8>>>2>>>0]=e.getUTCHours(),s()[t+12>>>2>>>0]=e.getUTCDate(),s()[t+16>>>2>>>0]=e.getUTCMonth(),s()[t+20>>>2>>>0]=e.getUTCFullYear()-1900,s()[t+24>>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,s()[t+28>>>2>>>0]=e},aa:function(e,t){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),t>>>=0,e=new Date(1e3*e),s()[t>>>2>>>0]=e.getSeconds(),s()[t+4>>>2>>>0]=e.getMinutes(),s()[t+8>>>2>>>0]=e.getHours(),s()[t+12>>>2>>>0]=e.getDate(),s()[t+16>>>2>>>0]=e.getMonth(),s()[t+20>>>2>>>0]=e.getFullYear()-1900,s()[t+24>>>2>>>0]=e.getDay();var n=(Lt(e.getFullYear())?Ft:Gt)[e.getMonth()]+e.getDate()-1|0;s()[t+28>>>2>>>0]=n,s()[t+36>>>2>>>0]=-60*e.getTimezoneOffset(),n=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(n!=r&&e.getTimezoneOffset()==Math.min(r,n)),s()[t+32>>>2>>>0]=e},ba:function(e){e>>>=0;var t=new Date(s()[e+20>>>2>>>0]+1900,s()[e+16>>>2>>>0],s()[e+12>>>2>>>0],s()[e+8>>>2>>>0],s()[e+4>>>2>>>0],s()[e>>>2>>>0],0),n=s()[e+32>>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),o=Math.min(i,a);return 0>n?s()[e+32>>>2>>>0]=+(a!=i&&o==r):0<n!=(o==r)&&(a=Math.max(i,a),t.setTime(t.getTime()+6e4*((0<n?o:a)-r))),s()[e+24>>>2>>>0]=t.getDay(),n=(Lt(t.getFullYear())?Ft:Gt)[t.getMonth()]+t.getDate()-1|0,s()[e+28>>>2>>>0]=n,s()[e>>>2>>>0]=t.getSeconds(),s()[e+4>>>2>>>0]=t.getMinutes(),s()[e+8>>>2>>>0]=t.getHours(),s()[e+12>>>2>>>0]=t.getDate(),s()[e+16>>>2>>>0]=t.getMonth(),s()[e+20>>>2>>>0]=t.getYear(),e=t.getTime(),isNaN(e)?(s()[gn()>>>2>>>0]=61,e=-1):e/=1e3,BigInt(e)},Z:jt,_:qt,O:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\(([A-Za-z ]+)\)$/))?e[1]:"GMT"}e>>>=0,t>>>=0,n>>>=0;var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var l=o.getTimezoneOffset(),d=Math.max(a,l);u()[e>>>2>>>0]=60*d,s()[t>>>2>>>0]=+(a!=l),e=r(i),t=r(o),e=Yt(e),t=Yt(t),l<a?(u()[n>>>2>>>0]=e,u()[n+4>>>2>>>0]=t):(u()[n>>>2>>>0]=t,u()[n+4>>>2>>>0]=e)},q:()=>{ne("")},g:function(e,t,n){return e>>>=0,t=Qt(t>>>0,n>>>0),ue[e].apply(null,t)},M:function(e,t,n){return e>>>=0,t=Qt(t>>>0,n>>>0),ue[e].apply(null,t)},E:()=>{},I:()=>Date.now(),oa:()=>{throw me+=1,"unwind"},Q:function(){return 4294901760},u:()=>performance.timeOrigin+performance.now(),x:()=>_?(hs(),L(ve)).cpus().length:navigator.hardwareConcurrency,N:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var i=Math;a=Math.max(e,a);e:{i=(i.min.call(i,4294901760,a+(65536-a%65536)%65536)-R.buffer.byteLength+65535)/65536;try{R.grow(i),q();var o=1;break e}catch{}o=void 0}if(o)return!0}return!1},ga:en,ha:tn,W:Ee,A:nn,G:rn,da:an,F:sn,a:R||f.wasmMemory,na:dn,r:function(e,t,n,r){return dn(e>>>0,t>>>0,n>>>0,r>>>0)}},mn=function(){function e(e,t){return mn=e.exports,mn=function(){var e=mn,t={};for(let[n,r]of Object.entries(e))t[n]="function"==typeof r?function(){Ot.push(n);try{return r.apply(null,arguments)}finally{j||(Ot.pop(),At&&1===Tt&&0===Ot.length&&(Tt=0,me+=1,It(zn),typeof Fibers<"u"&&Fibers.uc()))}}:r;return t}(),mn=function(){var e=mn,t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).Za=t(e.Za),e._a=t(e._a),e.$a=n(e.$a),e.cb=n(e.cb),e.emscripten_main_runtime_thread_id=t(e.emscripten_main_runtime_thread_id),e.mb=t(e.mb),e.ob=n(e.ob),e}(),Ae.Ub.push(mn.bb),Z.unshift(mn.va),z=t,te(),mn}var t={a:hn};if(X++,f.instantiateWasm)try{return f.instantiateWasm(t,e)}catch(e){O(`Module.instantiateWasm callback failed with error: ${e}`),c(e)}return function(e,t){var n=re;return"function"!=typeof WebAssembly.instantiateStreaming||ae(n)||ie(n)||_||"function"!=typeof fetch?se(n,e,t):fetch(n,{credentials:"same-origin"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return O(`wasm streaming compile failed: ${r}`),O("falling back to ArrayBuffer instantiation"),se(n,e,t)}))))}(t,(function(t){e(t.instance,t.module)})).catch(c),{}}();f._OrtInit=(e,t)=>(f._OrtInit=mn.wa)(e,t),f._OrtGetLastError=(e,t)=>(f._OrtGetLastError=mn.xa)(e,t),f._OrtCreateSessionOptions=(e,t,n,r,a,i,o,s,u,l)=>(f._OrtCreateSessionOptions=mn.ya)(e,t,n,r,a,i,o,s,u,l),f._OrtAppendExecutionProvider=(e,t)=>(f._OrtAppendExecutionProvider=mn.za)(e,t),f._OrtAddFreeDimensionOverride=(e,t,n)=>(f._OrtAddFreeDimensionOverride=mn.Aa)(e,t,n),f._OrtAddSessionConfigEntry=(e,t,n)=>(f._OrtAddSessionConfigEntry=mn.Ba)(e,t,n),f._OrtReleaseSessionOptions=e=>(f._OrtReleaseSessionOptions=mn.Ca)(e),f._OrtCreateSession=(e,t,n)=>(f._OrtCreateSession=mn.Da)(e,t,n),f._OrtReleaseSession=e=>(f._OrtReleaseSession=mn.Ea)(e),f._OrtGetInputOutputCount=(e,t,n)=>(f._OrtGetInputOutputCount=mn.Fa)(e,t,n),f._OrtGetInputName=(e,t)=>(f._OrtGetInputName=mn.Ga)(e,t),f._OrtGetOutputName=(e,t)=>(f._OrtGetOutputName=mn.Ha)(e,t),f._OrtFree=e=>(f._OrtFree=mn.Ia)(e),f._OrtCreateTensor=(e,t,n,r,a,i)=>(f._OrtCreateTensor=mn.Ja)(e,t,n,r,a,i),f._OrtGetTensorData=(e,t,n,r,a)=>(f._OrtGetTensorData=mn.Ka)(e,t,n,r,a),f._OrtReleaseTensor=e=>(f._OrtReleaseTensor=mn.La)(e),f._OrtCreateRunOptions=(e,t,n,r)=>(f._OrtCreateRunOptions=mn.Ma)(e,t,n,r),f._OrtAddRunConfigEntry=(e,t,n)=>(f._OrtAddRunConfigEntry=mn.Na)(e,t,n),f._OrtReleaseRunOptions=e=>(f._OrtReleaseRunOptions=mn.Oa)(e),f._OrtCreateBinding=e=>(f._OrtCreateBinding=mn.Pa)(e),f._OrtBindInput=(e,t,n)=>(f._OrtBindInput=mn.Qa)(e,t,n),f._OrtBindOutput=(e,t,n,r)=>(f._OrtBindOutput=mn.Ra)(e,t,n,r),f._OrtClearBoundOutputs=e=>(f._OrtClearBoundOutputs=mn.Sa)(e),f._OrtReleaseBinding=e=>(f._OrtReleaseBinding=mn.Ta)(e),f._OrtRunWithBinding=(e,t,n,r,a)=>(f._OrtRunWithBinding=mn.Ua)(e,t,n,r,a),f._OrtRun=(e,t,n,r,a,i,o,s)=>(f._OrtRun=mn.Va)(e,t,n,r,a,i,o,s),f._OrtEndProfiling=e=>(f._OrtEndProfiling=mn.Wa)(e),f._JsepOutput=(e,t,n)=>(f._JsepOutput=mn.Xa)(e,t,n),f._JsepGetNodeName=e=>(f._JsepGetNodeName=mn.Ya)(e);var gn=()=>(gn=mn.Za)(),yn=f._pthread_self=()=>(yn=f._pthread_self=mn._a)(),bn=f._malloc=e=>(bn=f._malloc=mn.$a)(e),wn=f._free=e=>(wn=f._free=mn.ab)(e);f.__emscripten_tls_init=()=>(f.__emscripten_tls_init=mn.bb)();var vn=e=>(vn=mn.cb)(e);f.__embind_initialize_bindings=()=>(f.__embind_initialize_bindings=mn.db)();var $n=f.__emscripten_thread_init=(e,t,n,r,a,i)=>($n=f.__emscripten_thread_init=mn.fb)(e,t,n,r,a,i);f.__emscripten_thread_crashed=()=>(f.__emscripten_thread_crashed=mn.gb)();var _n,xn=(e,t,n,r)=>(xn=mn.hb)(e,t,n,r),Sn=e=>(Sn=mn.ib)(e),Cn=f.__emscripten_thread_exit=e=>(Cn=f.__emscripten_thread_exit=mn.jb)(e),En=()=>(En=mn.kb)(),In=(e,t)=>(In=mn.lb)(e,t),Tn=()=>(Tn=mn.mb)(),An=e=>(An=mn.nb)(e),kn=e=>(kn=mn.ob)(e),On=f.dynCall_ii=(e,t)=>(On=f.dynCall_ii=mn.qb)(e,t),Rn=e=>(Rn=mn.rb)(e),zn=()=>(zn=mn.sb)(),Bn=e=>(Bn=mn.tb)(e),Pn=()=>(Pn=mn.ub)();function Mn(){if(!(0<X))if(x)p(f),x||ke(Z),startWorker(f);else{if(f.preRun)for("function"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)Y.unshift(f.preRun.shift());ke(Y),0<X||_n||(_n=!0,f.calledRun=!0,j||(x||ke(Z),p(f),x||ke(Q)))}}return f.___start_em_js=958871,f.___stop_em_js=959032,f.wasmMemory=R,f.stackAlloc=kn,f.stackSave=Tn,f.stackRestore=An,f.keepRuntimeAlive=()=>0<me,f.UTF8ToString=_e,f.stringToUTF8=We,f.lengthBytesUTF8=De,f.ExitStatus=de,f.PThread=Ae,ee=function e(){_n||Mn(),_n||(ee=e)},Mn(),e.ready});"object"==typeof a&&"object"==typeof i?i.exports=s:void 0===(r=(()=>s).apply(t,[]))||(e.exports=r)})),gs=V(((e,t)=>{t.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\n'})),ys=U((()=>{_e=ye(),xe=ms(),Ce=!1,Ee=!1,Ie=!1,Te=e=>{if(1===e)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Ae=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},ke=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Oe=async e=>{if(Ce)return Promise.resolve();if(Ee)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Ie)throw new Error("previous call to 'initializeWebAssembly()' failed.");Ee=!0;let t=e.initTimeout,n=e.numThreads,r=e.simd,a=Te(n),i=r&&Ae(),o=e.wasmPaths,s="string"==typeof o?o:void 0,u=ke(i,a),l="object"==typeof o?o[u]:void 0,d=!1,p=[];if(t>0&&p.push(new Promise((e=>{setTimeout((()=>{d=!0,e()}),t)}))),p.push(new Promise(((e,t)=>{let r=a?xe:_e,i={locateFile:(e,t)=>{if(a&&e.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([gs()],{type:"text/javascript"}));if(e.endsWith(".wasm")){if(l)return l;let e=s??t;return"ort-wasm-simd.wasm"===u?e+"ort-wasm-simd.jsep.wasm":"ort-wasm-simd-threaded.wasm"===u?e+"ort-wasm-simd-threaded.jsep.wasm":e+u}return t+e}};if(a)if(i.numThreads=n,typeof Blob>"u")i.mainScriptUrlOrBlob=(void 0)("/","ort-wasm-threaded.js");else{let e=`var ortWasmThreaded=${r.toString()};`;i.mainScriptUrlOrBlob=new Blob([e],{type:"text/javascript"})}r(i).then((t=>{Ee=!1,Ce=!0,Se=t,e()}),(e=>{Ee=!1,Ie=!0,t(e)}))}))),await Promise.race(p),d)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Re=()=>{if(Ce&&Se)return Se;throw new Error("WebAssembly is not initialized yet.")}})),bs=U((()=>{ys(),ze=(e,t)=>{let n=Re(),r=n.lengthBytesUTF8(e)+1,a=n._malloc(r);return n.stringToUTF8(e,a,r),t.push(a),a},Be=(e,t,n,r)=>{if("object"==typeof e&&null!==e){if(n.has(e))throw new Error("Circular reference in options");n.add(e)}Object.entries(e).forEach((([e,a])=>{let i=t?t+e:e;if("object"==typeof a)Be(a,i+".",n,r);else if("string"==typeof a||"number"==typeof a)r(i,a.toString());else{if("boolean"!=typeof a)throw new Error("Can't handle extra config type: "+typeof a);r(i,a?"1":"0")}}))},Pe=e=>{let t=Re(),n=t.stackSave();try{let n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);let r=t.HEAP32[n/4],a=t.HEAPU32[n/4+1],i=a?t.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${r}, ERROR_MESSAGE: ${i}`)}finally{t.stackRestore(n)}}})),ws=U((()=>{ys(),bs(),Me=e=>{let t=Re(),n=0,r=[],a=e||{};try{if(void 0===e?.logSeverityLevel)a.logSeverityLevel=2;else if("number"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===e?.logVerbosityLevel)a.logVerbosityLevel=0;else if("number"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===e?.terminate&&(a.terminate=!1);let i=0;return void 0!==e?.tag&&(i=ze(e.tag,r)),n=t._OrtCreateRunOptions(a.logSeverityLevel,a.logVerbosityLevel,!!a.terminate,i),0===n&&Pe("Can't create run options."),void 0!==e?.extra&&Be(e.extra,"",new WeakSet,((e,a)=>{let i=ze(e,r),o=ze(a,r);0!==t._OrtAddRunConfigEntry(n,i,o)&&Pe(`Can't set a run config entry: ${e} - ${a}.`)})),[n,r]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),r.forEach((e=>t._free(e))),e}}})),vs=U((()=>{ys(),bs(),De=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Ne=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},We=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some((e=>"webgpu"===("string"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)},Ue=(e,t,n)=>{for(let r of t){let t="string"==typeof r?r:r.name;switch(t){case"webnn":if(t="WEBNN","string"!=typeof r){let t=r;if(t?.deviceType){let r=ze("deviceType",n),a=ze(t.deviceType,n);0!==Re()._OrtAddSessionConfigEntry(e,r,a)&&Pe(`Can't set a session config entry: 'deviceType' - ${t.deviceType}.`)}if(t?.numThreads){let r=t.numThreads;("number"!=typeof r||!Number.isInteger(r)||r<0)&&(r=0);let a=ze("numThreads",n),i=ze(r.toString(),n);0!==Re()._OrtAddSessionConfigEntry(e,a,i)&&Pe(`Can't set a session config entry: 'numThreads' - ${t.numThreads}.`)}if(t?.powerPreference){let r=ze("powerPreference",n),a=ze(t.powerPreference,n);0!==Re()._OrtAddSessionConfigEntry(e,r,a)&&Pe(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}.`)}}break;case"webgpu":if(t="JS","string"!=typeof r){let t=r;if(t?.preferredLayout){if("NCHW"!==t.preferredLayout&&"NHWC"!==t.preferredLayout)throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${t.preferredLayout}`);let r=ze("preferredLayout",n),a=ze(t.preferredLayout,n);0!==Re()._OrtAddSessionConfigEntry(e,r,a)&&Pe(`Can't set a session config entry: 'preferredLayout' - ${t.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${t}`)}let a=ze(t,n);0!==Re()._OrtAppendExecutionProvider(e,a)&&Pe(`Can't append execution provider: ${t}.`)}},Ve=e=>{let t=Re(),n=0,r=[],a=e||{};We(a);try{let e=De(a.graphOptimizationLevel??"all"),i=Ne(a.executionMode??"sequential"),o="string"==typeof a.logId?ze(a.logId,r):0,s=a.logSeverityLevel??2;if(!Number.isInteger(s)||s<0||s>4)throw new Error(`log serverity level is not valid: ${s}`);let u=a.logVerbosityLevel??0;if(!Number.isInteger(u)||u<0||u>4)throw new Error(`log verbosity level is not valid: ${u}`);let l="string"==typeof a.optimizedModelFilePath?ze(a.optimizedModelFilePath,r):0;if(n=t._OrtCreateSessionOptions(e,!!a.enableCpuMemArena,!!a.enableMemPattern,i,!!a.enableProfiling,0,o,s,u,l),0===n&&Pe("Can't create session options."),a.executionProviders&&Ue(n,a.executionProviders,r),a.freeDimensionOverrides)for(let[e,i]of Object.entries(a.freeDimensionOverrides)){if("string"!=typeof e)throw new Error(`free dimension override name must be a string: ${e}`);if("number"!=typeof i||!Number.isInteger(i)||i<0)throw new Error(`free dimension override value must be a non-negative integer: ${i}`);let a=ze(e,r);0!==t._OrtAddFreeDimensionOverride(n,a,i)&&Pe(`Can't set a free dimension override: ${e} - ${i}.`)}return void 0!==a.extra&&Be(a.extra,"",new WeakSet,((e,a)=>{let i=ze(e,r),o=ze(a,r);0!==t._OrtAddSessionConfigEntry(n,i,o)&&Pe(`Can't set a session config entry: ${e} - ${a}.`)})),[n,r]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),r.forEach((e=>t._free(e))),e}}})),$s=U((()=>{He=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Le=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Fe=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Ge=e=>{switch(e){case"float16":case"uint16":return Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},je=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},qe=e=>"float32"===e||"int32"===e||"int64"===e||"bool"===e||"float16"===e||"uint32"===e,Ke=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}})),_s=U((()=>{Ye=async e=>{if("string"!=typeof e)return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e);if(!(typeof process<"u"&&process.versions&&process.versions.node)){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let n=t.headers.get("Content-Length"),r=n?parseInt(n,10):0;if(r<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n,a=t.body.getReader();try{n=new ArrayBuffer(r)}catch(e){if(!(e instanceof RangeError))throw e;{let e=Math.ceil(r/65536);n=new WebAssembly.Memory({initial:e,maximum:e}).buffer}}let i=0;for(;;){let{done:e,value:t}=await a.read();if(e)break;let r=t.byteLength;new Uint8Array(n,i,r).set(t),i+=r}return new Uint8Array(n,0,r)}}try{return new Uint8Array(await(void 0)(e))}catch(t){if("ERR_FS_FILE_TOO_LARGE"===t.code){let t=(void 0)(e),n=[];for await(let e of t)n.push(e);return new Uint8Array(Buffer.concat(n))}throw t}}})),xs=U((()=>{$s(),Ze=["V","I","W","E","F"],Qe=(e,t)=>{console.log(`[${Ze[e]},${(new Date).toISOString()}]${t}`)},et=(e,t)=>{Xe=e,Je=t},tt=(e,t)=>{let n=je(e);n>=je(Xe)&&Qe(n,"function"==typeof t?t():t)},nt=(...e)=>{Je&&tt(...e)}})),Ss=U((()=>{$s(),rt=(e,t)=>new(Ge(t))(e)})),Cs=U((()=>{})),Es=U((()=>{xs(),Cs(),at=e=>16*Math.ceil(e/16),it=1,ot=()=>it++,st=async(e,t,n,r)=>{let a=at(n),i=e.device.createBuffer({size:a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let o=e.getCommandEncoder();e.endComputePass(),o.copyBufferToBuffer(t,0,i,0,a),e.flush(),await i.mapAsync(GPUMapMode.READ);let s=i.getMappedRange();if(r){let e=r();return e.set(new Uint8Array(s,0,n)),e}return new Uint8Array(s.slice(0,n))}finally{i.destroy()}},ut=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(e,t){let n=t.buffer,r=t.byteOffset,a=t.byteLength,i=at(a),o=this.storageCache.get(e);if(!o)throw new Error("gpu data for uploading does not exist");if(o.originalSize!==a)throw new Error(`inconsistent data size. gpu data size=${o.originalSize}, data size=${a}`);let s=this.backend.device.createBuffer({mappedAtCreation:!0,size:i,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),u=s.getMappedRange();new Uint8Array(u).set(new Uint8Array(n,r,a)),s.unmap();let l=this.backend.getCommandEncoder();this.backend.endComputePass(),l.copyBufferToBuffer(s,0,o.gpuData.buffer,0,i),nt("verbose",(()=>`[WebGPU] GpuDataManager.upload(id=${e})`)),this.buffersForUploadingPending.push(s)}memcpy(e,t){let n=this.storageCache.get(e);if(!n)throw new Error("source gpu data for memcpy does not exist");let r=this.storageCache.get(t);if(!r)throw new Error("destination gpu data for memcpy does not exist");if(n.originalSize!==r.originalSize)throw new Error("inconsistent source and destination gpu data size");let a=at(n.originalSize),i=this.backend.getCommandEncoder();this.backend.endComputePass(),i.copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,a)}registerExternalBuffer(e,t,n){let r;if(n){if(r=this.externalBuffers.get(n),void 0===r)throw new Error("previous buffer is not registered");if(e===n)return nt("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${r}, buffer is the same, skip.`)),r;this.externalBuffers.delete(n)}else r=ot();return this.storageCache.set(r,{gpuData:{id:r,type:0,buffer:e},originalSize:t}),this.externalBuffers.set(e,r),nt("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${r}, registered.`)),r}unregisterExternalBuffer(e){let t=this.externalBuffers.get(e);void 0!==t&&(this.storageCache.delete(t),this.externalBuffers.delete(e),nt("verbose",(()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${t}`)))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let n,r=at(e),a=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,i=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(a||i){let e=a?this.freeBuffers:this.freeUniformBuffers,i=e.get(r);i||(i=[],e.set(r,i)),n=i.length>0?i.pop():this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});let o={id:ot(),type:0,buffer:n};return this.storageCache.set(o.id,{gpuData:o,originalSize:e}),nt("verbose",(()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${o.id}`)),o}get(e){return this.storageCache.get(e)?.gpuData}release(e){let t=this.storageCache.get(e);if(!t)throw new Error("releasing data does not exist");return nt("verbose",(()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`)),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,t){let n=this.storageCache.get(e);if(!n)throw new Error("data does not exist");await st(this.backend,n.gpuData.buffer,n.originalSize,t)}refreshPendingBuffers(){for(let e of this.buffersForUploadingPending)e.destroy();this.buffersForUploadingPending=[];for(let e of this.buffersPending)(e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(e.size).push(e):(e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(e.size).push(e):e.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.freeUniformBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache.forEach((e=>{e.gpuData.buffer.destroy()})),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},lt=(...e)=>new ut(...e)})),Is=U((()=>{dt=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map((e=>`${this[e]}`)).join(";")),this.key}},pt=e=>new dt(e)})),Ts=U((()=>{ct=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},ft=class{static calcShape(e,t,n=!1){let r=e.length,a=t.length;if(0===r)return t;if(0===a)return e;let i=Math.max(e.length,t.length),o=new Array(i);if(n){if(r<2||a<2)return;let n=ct.calcMatMulShape([e[r-2],e[r-1]],[t[a-2],t[a-1]]);if(void 0===n)return;[o[i-2],o[i-1]]=n}for(let s=n?3:1;s<=i;s++){let n=r-s<0?1:e[r-s],u=a-s<0?1:t[a-s];if(n!==u&&n>1&&u>1)return;o[i-s]=Math.max(n,u)}return o}static isValidBroadcast(e,t){let n=e.length,r=t.length;if(n>r)return!1;for(let a=1;a<=n;a++)if(1!==e[n-a]&&e[n-a]!==t[r-a])return!1;return!0}},ht=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,n){if(n<0||n>t.length)throw new Error(`invalid dimension of ${n} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,n,t.length)}static sizeToDimension(t,n){if(n<0||n>t.length)throw new Error(`invalid dimension of ${n} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,n)}static getSizeFromDimensionRange(e,t,n){let r=1;for(let a=t;a<n;a++){if(e[a]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");r*=e[a]}return r}static computeStrides(e){let t=e.length;if(0===t)return[];if(1===t)return[1];let n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}static normalizeAxis(e,t){if(e<-t&&e>=t)throw new Error("unsupported axis for this operation.");return e<0?e+t:e}static normalizeAxes(e,t){return e.map((n=>this.normalizeAxis(n,t??e.length)))}static sortBasedOnPerm(e,t){return t?t.map((t=>e[t])):e.slice().reverse()}static padShape(e,t){let n=e.length;return e.map(((e,r)=>e+t[r]+t[r+n]))}static areEqual(e,t){return e.length===t.length&&e.every(((e,n)=>e===t[n]))}},mt=class e{static adjustPoolAttributes(e,t,n,r,a,i){if(!e&&n.length!==t.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(e)for(let e=0;e<t.length-2;e++)e>=n.length?n.push(t[e+2]):n[e]=t[e+2];for(let e=0;e<n.length;e++)if(e<r.length){if(r[e]<0)throw new Error("strides should be greater than or equal to 1")}else r.push(1);for(let e=0;e<n.length;e++)if(e<a.length){if(a[e]<0)throw new Error("dilations should be greater than or equal to 1")}else a.push(1);for(let e=0;e<2*n.length;e++)if(e<i.length){if(i[e]<0)throw new Error("pad should be greater than or equal to 1")}else i.push(0);for(let e=0;e<n.length;e++){if(n[e]<=0)throw new Error("kernel shapes need to be greater than 0");if(i[e]>=n[e]||i[e+n.length]>=n[e])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,n,r,a,i,o,s){if(s){if(i.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(a.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let u=0;u<t.length-2;u++)e.adjustPadAndReturnShape(t[u+(o?1:2)],n[u],r[u],a[u],i,u,u+t.length-2,s)}}static computePoolOutputShape(t,n,r,a,i,o,s){if(n.length<=0)throw new Error("input shape must be of size greater than 0");let u=[n[0],n[1]];return e.computeShapeHelper(t,n,u,r,a,i,o,s),u}static computeConvOutputShape(t,n,r,a,i,o,s){if(t.length<=0||n.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let u=[t[0],n[0]];return e.computeShapeHelper(!1,t,u,r,a,i,o,s),u}static computeShapeHelper(t,n,r,a,i,o,s,u){if(t)for(let e=0;e<n.length-2;e++)r.push(1);else for(let t=0;t<n.length-2;t++)r.push(e.adjustPadAndReturnShape(n[t+2],a[t],i[t],o[t],s,t,t+n.length-2,u))}static adjustPadAndReturnShape(e,t,n,r,a,i,o,s){let u=n*(r-1)+1;if(!s||"NOTSET"===s)return Math.floor((e+a[i]+a[o]-u)/t+1);switch(s){case"VALID":return a[i]=0,a[o]=0,Math.floor((e-u)/t+1);case"SAME_LOWER":case"SAME_UPPER":if(1!==n)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let n=((e+t-1)/t-1)*t+r-e;return a[i]=Math.floor("SAME_LOWER"===s?(n+1)/2:n/2),a[o]=n-a[i],Math.floor((e+n-r)/t+1)}default:throw new Error("Unsupported AutoPad type")}}},gt=class{static getShapeOfGemmResult(e,t,n,r,a){if(2!==e.length||2!==n.length)throw new Error("shape need to be of size 2");let i,o,s;t?(i=e[1],o=e[0]):(i=e[0],o=e[1]);let u=-1;if(r?(s=n[0],u=1):(s=n[1],u=0),n[u]!==o)throw new Error("dimension mismatch");if(i<=0||s<=0||o<=0)throw new Error("invalid shape specified");if(a&&!ft.isValidBroadcast(a,[i,s]))throw new Error("gemm: invalid bias shape for broadcast");return[i,s,o]}},yt=-34028234663852886e22,bt=34028234663852886e22})),As=U((()=>{$s(),Ts(),wt=(e,t)=>{if(3===t)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(4!==t)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},vt=(e,t=1)=>{let n=wt(e,t);return"string"==typeof n?n:n[0]},$t=(e,t=1)=>{let n=wt(e,t);return"string"==typeof n?n:n[1]},_t=e=>0===e.length?[]:[{type:"uint32",data:e},{type:"uint32",data:ht.computeStrides(e)}],xt=e=>e%4==0?4:e%2==0?2:1,St=(e="f32",t,n="0")=>t&&1!==t?`vec${t}<${e}>(${n})`:`${e}(${n})`,Ct=(e,t,n)=>"f32"===e?n:1===t?`f32(${n})`:`vec${t}f(${n})`,Et=(e,t)=>4===t?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:2===t?`(${e}.x + ${e}.y)`:3===t?`(${e}.x + ${e}.y + ${e}.z)`:e,It=(e,t,n,r)=>e.startsWith("uniforms.")&&n>4?"string"==typeof t?"f16"===r?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:"f16"===r?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:n>1?`${e}[${t}]`:e,Tt=(e,t,n,r,a)=>{let i="number"==typeof n,o=i?n:n.length,s=[...new Array(o).keys()],u=o<2?"u32":o<=4?`vec${o}<u32>`:`array<u32, ${o}>`,l=wt(t,a),d="string"==typeof l?l:l[1],p="string"==typeof l?l:l[0],c={indices:u,value:d,storage:p,tensor:t},f=e=>"string"==typeof e?e:`${e}u`,h={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},m=i?"uniforms.":"",g=`${m}${e}_shape`,y=`${m}${e}_strides`,b="";for(let e=0;e<o-1;e++)b+=`\n    let dim${e} = current / ${It(y,e,o)};\n    let rest${e} = current % ${It(y,e,o)};\n    indices[${e}] = dim${e};\n    current = rest${e};\n    `;b+=`indices[${o-1}] = current;`;let w=o<2?"":`\n  fn o2i_${e}(offset: u32) -> ${c.indices} {\n    var indices: ${c.indices};\n    var current = offset;\n    ${b}\n    return indices;\n  }`,v=[];if(o>=2)for(let e=o-1;e>=0;e--)v.push(`${It(y,e,o)} * (indices[${e}])`);let $=o<2?"":`\n  fn i2o_${e}(indices: ${c.indices}) -> u32 {\n    return ${v.join("+")};\n  }`,_=(...e)=>0===o?"0u":`${c.indices}(${e.map(f).join(",")})`,x=(e,t)=>o<2?`${e}`:`${It(e,t,o)}`,S={},C=(t,n)=>(()=>{if(c.storage===c.value)return`${e}[${t}]=${n};`;if("vec2<u32>"===c.storage&&"i32"===c.value)return`${e}[${t}]=vec2<u32>(u32(${n}), select(0u, 0xFFFFFFFFu, ${n} < 0));`;if("vec2<u32>"===c.storage&&"u32"===c.value)return`${e}[${t}]=vec2<u32>(u32(${n}), 0u);`;if("u32"===c.storage&&"vec4<bool>"===c.value)return`${e}[${t}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${n}));`;throw new Error(`not supported combination of storage type ${c.storage} and value type ${c.value} yet`)})(),E=t=>(()=>{if(c.storage===c.value)return`${e}[${t}]`;if("vec2<u32>"===c.storage&&"i32"===c.value)return`i32(${e}[${t}].x)`;if("vec2<u32>"===c.storage&&"u32"===c.value)return`u32(${e}[${t}].x)`;if("u32"===c.storage&&"vec4<bool>"===c.value)return`vec4<bool>(bool(${e}[${t}] & 0xFFu), bool(${e}[${t}] & 0xFF00u), bool(${e}[${t}] & 0xFF0000u), bool(${e}[${t}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${c.storage} and value type ${c.value} yet`)})(),I=o<2?"":`\n  fn get_${e}ByIndices(indices: ${c.indices}) -> ${d} {\n    return ${E(`i2o_${e}(indices)`)};\n  }`,T=o<2?"":(()=>{let t=s.map((e=>`d${e}: u32`)).join(", "),n=s.map((e=>`d${e}`)).join(", ");return`\n  fn get_${e}(${t}) -> ${d} {\n    return get_${e}ByIndices(${_(n)});\n  }`})(),A=o<2?"":`\n  fn set_${e}ByIndices(indices: ${c.indices}, value: ${d}) {\n    ${C(`i2o_${e}(indices)`,"value")}\n  }`,k=o<2?"":(()=>{let t=s.map((e=>`d${e}: u32`)).join(", "),n=s.map((e=>`d${e}`)).join(", ");return`\n  fn set_${e}(${t}, value: ${d}) {\n    set_${e}ByIndices(${_(n)}, value);\n  }`})();return{impl:()=>{let e=[],t=!1;return h.offsetToIndices&&(e.push(w),t=!0),h.indicesToOffset&&(e.push($),t=!0),h.broadcastedIndicesToOffset&&(Object.values(S).forEach((t=>e.push(t))),t=!0),h.set&&(e.push(k),t=!0),h.setByIndices&&(e.push(A),t=!0),h.get&&(e.push(T),t=!0),h.getByIndices&&(e.push(I),t=!0),!i&&t&&e.unshift(`const ${g} = ${c.indices}(${n.join(",")});`,`const ${y} = ${c.indices}(${ht.computeStrides(n).join(",")});`),e.join("\n")},type:c,offsetToIndices:t=>(h.offsetToIndices=!0,o<2?t:`o2i_${e}(${t})`),indicesToOffset:t=>(h.indicesToOffset=!0,o<2?t:`i2o_${e}(${t})`),broadcastedIndicesToOffset:(t,n)=>{h.broadcastedIndicesToOffset=!0;let r=`${n.name}broadcastedIndicesTo${e}Offset`;if(r in S)return`${r}(${t})`;let a=[];for(let e=o-1;e>=0;e--){let t=n.indicesGet("outputIndices",e+n.rank-o);a.push(`${x(y,e)} * (${t} % ${x(g,e)})`)}return S[r]=`fn ${r}(outputIndices: ${n.type.indices}) -> u32 {\n             return ${a.length>0?a.join("+"):"0u"};\n           }`,`${r}(${t})`},indices:_,indicesGet:x,indicesSet:(e,t,n)=>o<2?`${e}=${n};`:`${It(e,t,o)}=${n};`,set:(...t)=>{if(t.length!==o+1)throw new Error(`indices length must be ${o}`);let n=t[o];if("string"!=typeof n)throw new Error("value must be string");let r=t.slice(0,o).map(f).join(",");return 0===o?C("0u",n):1===o?C(r[0],n):(h.set=!0,h.setByIndices=!0,h.indicesToOffset=!0,`set_${e}(${r}, ${n})`)},setByOffset:C,setByIndices:(t,n)=>o<2?C(t,n):(h.setByIndices=!0,h.indicesToOffset=!0,`set_${e}ByIndices(${t}, ${n});`),get:(...t)=>{if(t.length!==o)throw new Error(`indices length must be ${o}`);let n=t.map(f).join(",");return 0===o?E("0u"):1===o?E(n[0]):(h.get=!0,h.getByIndices=!0,h.indicesToOffset=!0,`get_${e}(${n})`)},getByOffset:E,getByIndices:t=>o<2?E(t):(h.getByIndices=!0,h.indicesToOffset=!0,`get_${e}ByIndices(${t})`),usage:r,name:e,strides:y,shape:g,rank:o}},At=(e,t,n,r=1)=>Tt(e,t,n,"input",r),kt=(e,t,n,r=1)=>Tt(e,t,n,"output",r),Ot=(e,t,n,r=1)=>Tt(e,t,n,"internal",r),Rt=class{constructor(e){this.normalizedDispatchGroup=e,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${"number"==typeof e?`${e}u`:e}) { return; }`}mainStart(e=64){let t="number"==typeof e?e:e[0],n="number"==typeof e?1:e[1],r="number"==typeof e?1:e[2],a=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return`@compute @workgroup_size(${t}, ${n}, ${r})\n  fn main(${a?"@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>":"@builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>"}) {\n    ${a?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${t*n*r}u + local_idx;`}\n  `}appendVariableUniforms(e){0!==e.rank&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if("internal"===e.usage)throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let n="input"===e.usage?"read":"read_write",r=e.type.storage;return`@group(0) @binding(${t}) var<storage, ${n}> ${e.name}: array<${r}>;`}declareVariables(...e){return e.map((e=>this.declareVariable(e,this.variableIndex++))).join("\n")}registerInternalVariable(e){if("internal"!==e.usage)throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach((e=>this.registerInternalVariable(e))),this}registerUniform(e,t,n=1){return this.uniforms.push({name:e,type:t,length:n}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(0===this.uniforms.length)return"";let e=[];for(let{name:t,type:n,length:r}of this.uniforms)if(r&&r>4)"f16"===n?e.push(`@align(16) ${t}:array<mat2x4<${n}>, ${Math.ceil(r/8)}>`):e.push(`${t}:array<vec4<${n}>, ${Math.ceil(r/4)}>`);else{let a=null==r||1===r?n:`vec${r}<${n}>`;e.push(`${t}:${a}`)}return`\n      struct Uniforms { ${e.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map((e=>e.impl())).join("\n")+this.internalVariables.map((e=>e.impl())).join("\n")}},zt=e=>new Rt(e),Bt=(e,t)=>{let n=e.length,r=[];for(let a=0;a<n;a++){let i=n-1-a,o=e[i]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(i)}return r}})),ks=U((()=>{Ts(),Is(),As(),Pt=e=>{if(!e||1!==e.length)throw new Error("Transpose requires 1 input.")},Mt=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Dt=(e,t)=>ht.sortBasedOnPerm(e,Mt(e.length,t)),Nt=(e,t,n,r)=>{let a=[];a.push(`fn perm(i: ${r.type.indices}) -> ${n.type.indices} {\n    var a: ${n.type.indices};`);for(let r=0;r<t;++r)a.push(n.indicesSet("a",e[r],`i[${r}]`));return a.push("return a;}"),a.join("\n")},Wt=(e,t)=>{let n=e.dataType,r=e.dims.length,a=Mt(r,t),i=Dt(e.dims,a),o=kt("output",n,i.length),s=At("a",n,r);return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:e=>{let t=ht.size(i);return{outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(t/64)},programUniforms:[{type:"uint32",data:t},..._t(e[0].dims),..._t(i)]}},getShaderSource:e=>`\n  ${e.registerUniform("output_size","u32").declareVariables(s,o)}\n\n  ${Nt(a,r,s,o)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${o.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${o.setByOffset("global_idx",s.getByIndices("aIndices"))}\n  }`}},Ut=(e,t)=>{Pt(e.inputs),e.compute(Wt(e.inputs[0],t.perm))},Vt=e=>pt({perm:e.perm})})),Os=U((()=>{Ts(),As(),Rs(),ks(),Ht={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Lt={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Ft={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Gt={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},jt=(e,t)=>{let n=[];for(let r=t-e;r<t;++r)n.push(r);return n},qt=(e,t)=>{let n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]},Kt=(e,t)=>{let n=e.length+t.length,r=[],a=0;for(let i=0;i<n;i++)-1===t.indexOf(i)?r.push(e[a++]):r.push(1);return r},Yt=(e,t)=>{for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0},Zt=(e,t)=>{let n=[];if(!Yt(e,t)){for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);e.forEach((e=>n.push(e)))}return n},Qt=(e,t,n,r,a,i,o)=>{let s=n[0].dims,u=ht.size(i),l=ht.size(o),d=At("_A",n[0].dataType,s),p=kt("output",a,i),c=`\n          var<workgroup> aBestValues : array<${p.type.storage}, 32>;\n       `;return{name:e,shaderCache:t,getShaderSource:e=>`\n        ${e.registerUniform("reduceSize","u32").declareVariables(d,p)}\n        ${c}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${e.mainStart(32)}\n\n          let outputIndex = global_idx / 32;\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${p.type.storage}(${Ft[r]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + 32) {\n           let candidate = ${p.type.storage}(${d.getByOffset("offset + k")});\n           bestValue = ${Ht[r]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, 32u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${Lt[r]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${p.setByOffset("outputIndex","mean"===r?`bestValue / ${p.type.storage}(uniforms.reduceSize)`:`${Gt[r]}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:i,dataType:a}],dispatchGroup:{x:u},programUniforms:[{type:"uint32",data:l}]})}},Xt=(e,t,n,r)=>{let a=1===e.inputs.length?n:fn(e.inputs,n),i=a.axes;0===i.length&&!a.noopWithEmptyAxes&&(i=e.inputs[0].dims.map(((e,t)=>t)));let o=ht.normalizeAxes(i,e.inputs[0].dims.length),s=o,u=e.inputs[0],l=Zt(s,e.inputs[0].dims.length);l.length>0&&(u=e.compute(Wt(e.inputs[0],l),{inputs:[0],outputs:[-1]})[0],s=jt(s.length,u.dims.length));let[d,p]=qt(u.dims,s),c=d;a.keepDims&&(c=Kt(d,o)),e.compute(Qt(t,{hint:a.cacheKey,inputDependencies:["type"]},[u],r,e.inputs[0].dataType,c,p),{inputs:[u]})},Jt=(e,t)=>{Xt(e,"ReduceMeanShared",t,"mean")},en=(e,t)=>{Xt(e,"ReduceL1Shared",t,"l1")},tn=(e,t)=>{Xt(e,"ReduceL2Shared",t,"l2")},nn=(e,t)=>{Xt(e,"ReduceLogSumExpShared",t,"logSumExp")},rn=(e,t)=>{Xt(e,"ReduceMaxShared",t,"max")},an=(e,t)=>{Xt(e,"ReduceMinShared",t,"min")},on=(e,t)=>{Xt(e,"ReduceProdShared",t,"prod")},sn=(e,t)=>{Xt(e,"ReduceSumShared",t,"sum")},un=(e,t)=>{Xt(e,"ReduceSumSquareShared",t,"sumSquare")},ln=(e,t)=>{Xt(e,"ReduceLogSumShared",t,"logSum")}})),Rs=U((()=>{Ts(),Is(),As(),Os(),dn=e=>{if(!e||0===e.length||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(2===e.length&&1!==e[1].dims.length)throw new Error("Invalid axes input dims.")},pn=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],cn=(e,t,n,r,a,i,o=!1,s=!1)=>{let u=[],l=n[0].dims,d=l.length,p=ht.normalizeAxes(a,d),c=!s&&0===p.length;l.forEach(((e,t)=>{c||p.indexOf(t)>=0?o&&u.push(1):u.push(e)}));let f=u.length,h=ht.size(u);return{name:e,shaderCache:t,getShaderSource:e=>{let t=[],a=At("_A",n[0].dataType,d),s=kt("output",i,f),u=r(a,s,p),h=u[2];for(let e=0,n=0;e<d;e++)c||p.indexOf(e)>=0?(o&&n++,h=`for(var j${e}: u32 = 0; j${e} < ${l[e]}; j${e}++) {\n                  ${u[2].includes("last_index")?`let last_index = j${e};`:""}\n                  ${a.indicesSet("input_indices",e,`j${e}`)}\n                  ${h}\n                }`):(t.push(`${a.indicesSet("input_indices",e,s.indicesGet("output_indices",n))};`),n++);return`\n\n        ${e.registerUniform("output_size","u32").declareVariables(a,s)}\n\n        ${e.mainStart()}\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${a.type.indices};\n          let output_indices = ${s.offsetToIndices("global_idx")};\n\n          ${t.join("\n")}\n          ${u[0]}       // init ops for reduce max/min\n          ${u[1]}\n          ${h}\n          ${u[3]}\n          ${4===u.length?s.setByOffset("global_idx","value"):u.slice(4).join("\n")}\n        }`},getRunData:()=>({outputs:[{dims:u,dataType:i}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:[{type:"uint32",data:h},..._t(l),..._t(u)]})}},fn=(e,t)=>{let n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),pt({axes:n,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},hn=(e,t,n,r)=>{let a=e.inputs,i=1===a.length?n:fn(a,n);e.compute(cn(t,{hint:i.cacheKey,inputDependencies:["rank"]},[a[0]],i.noopWithEmptyAxes&&0===i.axes.length?pn:r,i.axes,a[0].dataType,i.keepDims,i.noopWithEmptyAxes),{inputs:[0]})},mn=(e,t)=>{dn(e.inputs),hn(e,"ReduceLogSum",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += ${e.getByIndices("input_indices")};`,"value = log(value);"]))},gn=(e,t)=>{dn(e.inputs),hn(e,"ReduceL1",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += abs(${e.getByIndices("input_indices")});`,""]))},yn=(e,t)=>{dn(e.inputs),hn(e,"ReduceL2",t,((e,t)=>[`var t = ${t.type.value}(0); var value = ${t.type.value}(0);`,"",`t = ${e.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"]))},bn=(e,t)=>{dn(e.inputs),hn(e,"ReduceLogSumExp",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += exp(${e.getByIndices("input_indices")});`,"value = log(value);"]))},wn=(e,t)=>{dn(e.inputs),hn(e,"ReduceMax",t,((e,t,n)=>{let r=[];for(let t=0;t<e.rank;t++)(n.indexOf(t)>=0||0===n.length)&&r.push(e.indicesSet("input_indices",t,0));return[`${r.join("\n")}`,`var value = ${e.getByIndices("input_indices")};`,`value = max(value, ${e.getByIndices("input_indices")});`,""]}))},vn=(e,t)=>{dn(e.inputs),hn(e,"ReduceMean",t,((t,n,r)=>{let a=1;for(let n=0;n<t.rank;n++)(r.indexOf(n)>=0||0===r.length)&&(a*=e.inputs[0].dims[n]);return["var sum = f32(0);","",`sum += f32(${t.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${a});`]}))},$n=(e,t)=>{dn(e.inputs),hn(e,"ReduceMin",t,((e,t,n)=>{let r=[];for(let t=0;t<e.rank;t++)(n.indexOf(t)>=0||0===n.length)&&r.push(`input_indices[${t}] = 0;`);return[`${r.join("\n")}`,`var value = ${e.getByIndices("input_indices")};`,`value = min(value, ${e.getByIndices("input_indices")});`,""]}))},_n=(e,t)=>{dn(e.inputs),hn(e,"ReduceProd",t,((e,t)=>[`var value = ${t.type.storage}(1);`,"",`value *= ${e.getByIndices("input_indices")};`,""]))},xn=(e,t)=>{dn(e.inputs),hn(e,"ReduceSum",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += ${e.getByIndices("input_indices")};`,""]))},Sn=(e,t)=>{dn(e.inputs),hn(e,"ReduceSumSquare",t,((e,t)=>[`var t = ${t.type.value}(0); var value = ${t.type.value}(0);`,"",`t = ${e.getByIndices("input_indices")}; value += t * t;`,""]))},Cn=(e,t,n)=>{if(0===t.length)return n;let r=1,a=1;for(let n=0;n<t.length;n++)-1===t.indexOf(n)?r*=e[n]:a*=e[n];return a<32&&r>1024},En=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vn(e,t):Jt(e,t)},In=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?gn(e,t):en(e,t)},Tn=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yn(e,t):tn(e,t)},An=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bn(e,t):nn(e,t)},kn=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wn(e,t):rn(e,t)},On=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$n(e,t):an(e,t)},Rn=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_n(e,t):on(e,t)},zn=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xn(e,t):sn(e,t)},Bn=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sn(e,t):un(e,t)},Pn=(e,t)=>{Cn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?mn(e,t):ln(e,t)}})),zs=U((()=>{$s(),Is(),Rs(),Mn=e=>{if(!e||0===e.length||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(1!==e[0].dataType)throw new Error("Invalid input type.")},Dn=(e,t)=>{Mn(e.inputs),e.compute(cn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],((e,n,r)=>{let a=[];for(let t=0;t<e.rank;t++)(r.indexOf(t)>=0||0===r.length)&&a.push(`input_indices[${t}] = 0;`);return[`${a.join("\n")}`,`var value = ${e.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${e.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${e.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]}),[t.axis],7,t.keepDims),{inputs:[0]})},Nn=(e,t)=>{Mn(e.inputs),e.compute(cn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],((e,n,r)=>{let a=[];for(let t=0;t<e.rank;t++)(r.indexOf(t)>=0||0===r.length)&&a.push(`input_indices[${t}] = 0;`);return[`${a.join("\n")}`,`var value = ${e.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${e.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${e.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]}),[t.axis],7,t.keepDims),{inputs:[0]})},Wn=e=>pt(e)})),Bs=U((()=>{$s(),Cs(),As(),Un=(e,t)=>{let n=e[0],r=e[1],a=e[2],i=e[3],o=e[4],s=e[5];if(o&&s)throw new Error("Attention cannot have both past and relative_position_bias");if(3!==n.dims.length)throw new Error('Input "input" must have 3 dimensions');let u=n.dims[0],l=n.dims[1],d=n.dims[2];if(1!==a.dims.length)throw new Error('Input "bias" is expected to have 1 dimensions');if(2!==r.dims.length)throw new Error('Input "weights" is expected to have 2 dimensions');if(r.dims[0]!==d)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(a.dims[0]!==r.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let p=a.dims[0]/3,c=p,f=c;if(t.qkvHiddenSizes.length>0){if(3!==t.qkvHiddenSizes.length)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let e of t.qkvHiddenSizes)if(e%t.numHeads!=0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");p=t.qkvHiddenSizes[0],c=t.qkvHiddenSizes[1],f=t.qkvHiddenSizes[2]}let h=l;if(p!==c)throw new Error("qkv_hidden_sizes first element should be same as the second");if(a.dims[0]!==p+c+f)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let m=0;if(o){if(c!==f)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(5!==o.dims.length)throw new Error('Input "past" must have 5 dimensions');if(2!==o.dims[0])throw new Error('Input "past" first dimension must be 2');if(o.dims[1]!==u)throw new Error('Input "past" second dimension must be batch_size');if(o.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(o.dims[4]!==c/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(m=o.dims[3])}let g=h+m;if(i)throw new Error("Mask not supported");if(o)throw new Error("past is not supported");if(s)throw new Error("relativePositionBias is not supported");return{batchSize:u,sequenceLength:l,pastSequenceLength:m,kvSequenceLength:h,totalSequenceLength:g,maxSequenceLength:-1,inputHiddenSize:d,hiddenSize:p,vHiddenSize:f,headSize:Math.floor(p/t.numHeads),vHeadSize:Math.floor(f/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:0,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Vn=(e,t,n,r)=>{let a=xt(r),i=64,o=r/a;o<i?i=1:o/8<64&&(i=Math.ceil(o/8));let s=Math.ceil(r/a/i),u=[{type:Le(t.dataType),data:1/r},{type:"uint32",data:o},{type:"uint32",data:s}],l=vt(t.dataType,a);e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${i};${l};${a}`},getShaderSource:e=>{let n=kt("x",t.dataType,t.dims,a),r="thread_max_vector";2===a?r="max(thread_max_vector.x, thread_max_vector.y)":4===a&&(r="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let o=$t(t.dataType),s=[{name:"d_inv",type:o},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${i}>;\n  var<workgroup> wgSum: array<f32, ${i}>;\n  ${e.registerUniforms(s).declareVariables(n)}\n  ${e.mainStart([i,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${St("f32",a,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${Ct(o,a,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${r};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${i}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${St("f32",a,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${Ct(o,a,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${Et("sumVector",a)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${i}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${St(o,a,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${Ct(o,a,"x[offset + i]")};\n        x[offset + i] = ${n.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`},getRunData:()=>({outputs:[],dispatchGroup:{x:n},programUniforms:u})},{inputs:[t],outputs:[]})},Hn=(e,t,n,r,a,i)=>{let o=[a.batchSize,a.numHeads,a.sequenceLength,a.kvSequenceLength+a.pastSequenceLength],s=0===i.scale?1/Math.sqrt(a.headSize):i.scale,u=xt(a.headSize),l=a.headSize/u,d={x:Math.ceil(a.totalSequenceLength/12),y:Math.ceil(a.sequenceLength/12),z:a.batchSize*a.numHeads},p=Le(t.dataType),c=[{type:"uint32",data:a.sequenceLength},{type:"uint32",data:l},{type:"uint32",data:a.totalSequenceLength},{type:"uint32",data:a.kvSequenceLength},{type:p,data:s}],f=[t,n],h=e.compute({name:"AttentionProbs",shaderCache:{hint:`${u}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:c}),getShaderSource:e=>{let r=At("q",t.dataType,t.dims,u),a=At("key",n.dataType,n.dims,u),i=kt("output",t.dataType,o),s=vt(t.dataType),l=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:s}];return`\n  const beta: ${s} = 1.0;\n  const TILE_SIZE = 12u;\n\n  var<workgroup> tileQ: array<${r.type.storage}, 144>;\n  var<workgroup> tileK: array<${r.type.storage}, 144>;\n  ${e.registerUniforms(l).declareVariables(r,a,i)}\n  ${e.mainStart([12,12,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${St(s,u)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (lm < uniforms.M && ln < uniforms.N) {\n      let outputIdx = headOffset + lm * uniforms.N + ln;\n      output[outputIdx] = ${Et("value",u)} * uniforms.alpha;\n    }\n  }`}},{inputs:f,outputs:[-1]})[0];return Vn(e,h,a.batchSize*a.numHeads*a.sequenceLength,a.totalSequenceLength),h},Ln=(e,t,n,r)=>{let a=[r.batchSize,r.sequenceLength,r.vHiddenSize],i={x:Math.ceil(r.vHeadSize/12),y:Math.ceil(r.sequenceLength/12),z:r.batchSize*r.numHeads},o=[{type:"uint32",data:r.sequenceLength},{type:"uint32",data:r.totalSequenceLength},{type:"uint32",data:r.vHeadSize},{type:"uint32",data:r.numHeads},{type:"uint32",data:r.vHiddenSize}];return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType,gpuDataType:0}],dispatchGroup:i,programUniforms:o}),getShaderSource:e=>{let r=At("probs",t.dataType,t.dims),i=At("v",n.dataType,n.dims),o=kt("output",t.dataType,a);return`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileQ: array<${r.type.value}, 144>;\n  var<workgroup> tileK: array<${r.type.value}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}]).declareVariables(r,i,o)}\n  ${e.mainStart([12,12,1])}\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${r.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`}},{inputs:[t,n],outputs:[0]})[0]},Fn=(e,t,n,r,a,i,o,s,u,l,d)=>{let p=Hn(e,t,n,0,l,d);Ln(e,p,r,l)},Gn=(e,t)=>{let n=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],r=t.sequenceLength,a=t.inputHiddenSize,i=t.headSize,o={x:Math.ceil(t.headSize/12),y:Math.ceil(t.sequenceLength/12),z:t.batchSize*t.numHeads},s=[e.inputs[0],e.inputs[1],e.inputs[2]],u=[{type:"uint32",data:r},{type:"uint32",data:a},{type:"uint32",data:i},{type:"uint32",data:t.numHeads},{type:"uint32",data:t.headSize},{type:"uint32",data:t.hiddenSize},{type:"uint32",data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}];return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:o,programUniforms:u}),getShaderSource:e=>{let t=kt("output_q",s[0].dataType,n),r=kt("output_k",s[0].dataType,n),a=kt("output_v",s[0].dataType,n),i=At("input",s[0].dataType,s[0].dims),o=At("weight",s[1].dataType,s[1].dims),u=At("bias",s[2].dataType,s[2].dims),l=i.type.storage;return`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileInput: array<${l}, 144>;\n  var<workgroup> tileWeightQ: array<${l}, 144>;\n  var<workgroup> tileWeightK: array<${l}, 144>;\n  var<workgroup> tileWeightV: array<${l}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}]).declareVariables(i,o,u,t,r,a)}\n  ${e.mainStart([12,12,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${l}(0);\n    var valueK = ${l}(0);\n    var valueV = ${l}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`}},{inputs:s,outputs:[-1,-1,-1]})},jn=(e,t)=>{let n=Un(e.inputs,t),[r,a,i]=Gn(e,n);return Fn(e,r,a,i,e.inputs[4],void 0,void 0,void 0,e.inputs[5],n,t)}})),Ps=U((()=>{ue(),Ts(),Is(),As(),qn=(e,t)=>{if(!e||5!==e.length)throw new Error("BatchNormalization requires 5 inputs");let n=(e,t,n)=>{let r=t.length;if(r!==e.length)throw new Error(`${n}: num dimensions != ${r}`);t.forEach(((t,r)=>{if(t!==e[r])throw new Error(`${n}: dim[${r}] do not match`)}))};if(e[0].dims.length>1){let r="NHWC"===t.format?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);n(e[1].dims,r,"Invalid input scale"),n(e[2].dims,r,"Invalid input B"),n(e[3].dims,r,"Invalid input mean"),n(e[4].dims,r,"Invalid input var")}else n(e[1].dims,[1],"Invalid input scale"),n(e[2].dims,[1],"Invalid input B"),n(e[3].dims,[1],"Invalid input mean"),n(e[4].dims,[1],"Invalid input var")},Kn=(e,t)=>{let{epsilon:n,spatial:r,format:a}=t,i=e[0].dims,o=r?xt(i[i.length-1]):1,s="NHWC"===a&&i.length>1?o:1,u=ht.size(i)/o,l=r,d=l?i.length:i,p=At("x",e[0].dataType,e[0].dims,o),c=At("scale",e[1].dataType,e[1].dims,s),f=At("bias",e[2].dataType,e[2].dims,s),h=At("inputMean",e[3].dataType,e[3].dims,s),m=At("inputVar",e[4].dataType,e[4].dims,s),g=kt("y",e[0].dataType,d,o);return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${r}_${o}`,inputDependencies:l?["rank","type","type","type","type"]:void 0},getShaderSource:e=>`\n  const epsilon = ${n};\n  ${e.registerUniform("outputSize","u32").declareVariables(p,c,f,h,m,g)}\n  ${e.mainStart()}\n  ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${g.offsetToIndices(`global_idx * ${o}`)};\n    ${(()=>{let e="";if(r)e=`let cOffset = ${1===i.length?"0u":"NHWC"===a?`outputIndices[${i.length-1}] / ${o}`:"outputIndices[1]"};`;else if("NCHW"===a)e=`\n            ${g.indicesSet("outputIndices","0","0")}\n            let cOffset = ${g.indicesToOffset("outputIndices")};`;else{e=`var cIndices = ${c.type.indices}(0);\n                       cIndices[0] = outputIndices[${i.length-1}];`;for(let t=1;t<c.rank;t++)e+=`cIndices[${t}] = outputIndices[${t}];`;e+=`let cOffset = ${c.indicesToOffset("cIndices")};`}return e})()}\n    let scale = ${c.getByOffset("cOffset")};\n    let bias = ${f.getByOffset("cOffset")};\n    let inputMean = ${h.getByOffset("cOffset")};\n    let inputVar = ${m.getByOffset("cOffset")};\n    let x = ${p.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${g.setByOffset("global_idx","value")}\n  }`,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:l?[{type:"uint32",data:u},..._t(i)]:[{type:"uint32",data:u}]})}},Yn=e=>pt(e),Zn=(e,t)=>{let{inputs:n,outputCount:r}=e,a=Yn({...t,outputCount:r});if(p.webgpu.validateInputContent&&qn(n,a),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Kn(n,a))}})),Ms=U((()=>{Ts(),As(),Qn=e=>{if(3!==e[0].dims.length)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(1!==e[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Xn=e=>{let t=e[0].dims,n=e[0].dims[2],r=ht.size(t)/4,a=e[0].dataType,i=At("input",a,t,4),o=At("bias",a,[n],4),s=At("residual",a,t,4),u=kt("output",a,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(r/64)}}),getShaderSource:e=>`\n  const channels = ${n}u / 4;\n  ${e.declareVariables(i,o,s,u)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(r)}\n    let value = ${i.getByOffset("global_idx")}\n      + ${o.getByOffset("global_idx % channels")} + ${s.getByOffset("global_idx")};\n    ${u.setByOffset("global_idx","value")}\n  }`}},Jn=e=>{Qn(e.inputs),e.compute(Xn(e.inputs))}})),Ds=U((()=>{$s(),Ts(),Is(),As(),er=(e,t,n,r,a,i)=>{let o=Math.ceil(t/4),s="";s="string"==typeof a?`${a}(a)`:a("a");let u=At("inputData",n,[o],4),l=kt("outputData",r,[o],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(u,l)}\n\n  ${i??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${u.getByOffset("global_idx")};\n    ${l.setByOffset("global_idx",s)}\n  }`},tr=(e,t,n,r,a,i=e.dataType)=>({name:t,shaderCache:{hint:a,inputDependencies:["type"]},getShaderSource:t=>er(t,ht.size(e.dims),e.dataType,i,n,r),getRunData:t=>({outputs:[{dims:e.dims,dataType:i}],dispatchGroup:{x:Math.ceil(ht.size(t[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(ht.size(e.dims)/4)}]})}),nr=e=>{e.compute(tr(e.inputs[0],"Abs","abs"))},rr=e=>{e.compute(tr(e.inputs[0],"Acos","acos"))},ar=e=>{e.compute(tr(e.inputs[0],"Acosh","acosh"))},ir=e=>{e.compute(tr(e.inputs[0],"Asin","asin"))},or=e=>{e.compute(tr(e.inputs[0],"Asinh","asinh"))},sr=e=>{e.compute(tr(e.inputs[0],"Atan","atan"))},ur=e=>{e.compute(tr(e.inputs[0],"Atanh","atanh"))},lr=e=>pt(e),dr=(e,t)=>{let n;switch(t.to){case 10:n="vec4<f16>";break;case 1:n="vec4<f32>";break;case 12:n="vec4<u32>";break;case 6:n="vec4<i32>";break;case 9:n="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(tr(e.inputs[0],"Cast",n,void 0,t.cacheKey,t.to))},pr=e=>{let t=e.length>=2&&0!==e[1].data?e[1].getFloat32Array()[0]:yt,n=e.length>=3&&0!==e[2].data?e[2].getFloat32Array()[0]:bt;return pt({min:t,max:n})},cr=(e,t)=>{let n=1===e.inputs.length?t:pr(e.inputs),r=$t(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Clip",(e=>`clamp(${e}, clip_min_, clip_max_)`),`\n    const clip_min_: vec4<${r}> = vec4(${r}(${n.min}));\n    const clip_max_: vec4<${r}> = vec4(${r}(${n.max}));\n`,n.cacheKey),{inputs:[0]})},fr=e=>{e.compute(tr(e.inputs[0],"Ceil","ceil"))},hr=e=>{e.compute(tr(e.inputs[0],"Cos","cos"))},mr=e=>{e.compute(tr(e.inputs[0],"Cosh","cosh"))},gr=e=>pt(e),yr=(e,t)=>{let n=$t(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Elu",(e=>`elu_vf32(${e})`),`\n  const elu_alpha_ = ${n}(${t.alpha});\n\n  fn elu_f32(a: ${n}) -> ${n} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${n}>) -> vec4<${n}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},br=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,wr=e=>{let t=$t(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Erf",(e=>`erf_vf32(${e})`),br(`vec4<${t}>`,t)))},vr=e=>{e.compute(tr(e.inputs[0],"Exp","exp"))},$r=e=>{e.compute(tr(e.inputs[0],"Floor","floor"))},_r=e=>{let t=$t(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Gelu",(e=>`0.5 * ${e} * (1.0 + erf_vf32(${e} * 0.7071067811865475))`),br(`vec4<${t}>`,t)))},xr=(e,t)=>{let n=$t(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"LeakyRelu",(e=>`select(leaky_relu_alpha_ * ${e}, ${e}, ${e} >= vec4<${n}>(0.0))`),`const leaky_relu_alpha_ = ${n}(${t.alpha});`,t.cacheKey))},Sr=e=>{e.compute(tr(e.inputs[0],"Not",(e=>`!${e}`)))},Cr=e=>{e.compute(tr(e.inputs[0],"Neg",(e=>`-${e}`)))},Er=e=>{e.compute(tr(e.inputs[0],"Reciprocal",(e=>`1.0/${e}`)))},Ir=e=>{let t=$t(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Relu",(e=>`select(vec4<${t}>(0.0), ${e}, ${e} > vec4<${t}>(0.0))`)))},Tr=e=>{e.compute(tr(e.inputs[0],"Sigmoid",(e=>`(1.0 / (1.0 + exp(-${e})))`)))},Ar=e=>pt(e),kr=(e,t)=>{let n=$t(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"HardSigmoid",(e=>`max(vec4<${n}>(0.0), min(vec4<${n}>(1.0), ${t.alpha} * ${e} + vec4<${n}>(${t.beta})))`),void 0,t.cacheKey))},Or=e=>{e.compute(tr(e.inputs[0],"Sin","sin"))},Rr=e=>{e.compute(tr(e.inputs[0],"Sinh","sinh"))},zr=e=>{e.compute(tr(e.inputs[0],"Sqrt","sqrt"))},Br=e=>{e.compute(tr(e.inputs[0],"Tan","tan"))},Pr=e=>{e.compute(tr(e.inputs[0],"Tanh",(e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`)))},Mr=(e,t)=>{let n=$t(e.inputs[0].dataType);return e.compute(tr(e.inputs[0],"ThresholdedRelu",(e=>`select(vec4<${n}>(0.0), ${e}, ${e} > thresholded_relu_alpha_)`),`const thresholded_relu_alpha_ = vec4<${n}>(${t.alpha});`,t.cacheKey)),0},Dr=e=>{e.compute(tr(e.inputs[0],"Log","log"))}})),Ns=U((()=>{Ts(),As(),Ds(),Nr=e=>{if(3!==e[0].dims.length)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(1!==e[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Wr=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let n=At("input",e[0].dataType,e[0].dims,4),r=At("bias",e[0].dataType,[e[0].dims[2]],4),a=kt("output",e[0].dataType,t,4),i=ht.size(t)/4,o=vt(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:t=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${t.declareVariables(n,r,a)}\n\n  ${br(`vec4<${o}>`,o)}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes(i)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${a.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},Ur=e=>{Nr(e.inputs),e.compute(Wr(e.inputs))}})),Ws=U((()=>{$s(),Ts(),As(),Vr=(e,t,n,r,a,i,o,s,u,l,d,p)=>{let c,f;"string"==typeof s?c=f=(e,t)=>`${s}((${e}),(${t}))`:"function"==typeof s?c=f=s:(c=s.scalar,f=s.vector);let h,m=kt("outputData",d,r.length,4),g=At("aData",u,t.length,4),y=At("bData",l,n.length,4);if(a)if(i){let e=1===ht.size(t),r=1===ht.size(n),a=t.length>0&&t[t.length-1]%4==0,i=n.length>0&&n[n.length-1]%4==0;h=e||r?m.setByOffset("global_idx",f(e?`${g.type.value}(${g.getByOffset("0")}.x)`:g.getByOffset("global_idx"),r?`${y.type.value}(${y.getByOffset("0")}.x)`:y.getByOffset("global_idx"))):`\n            let outputIndices = ${m.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${g.broadcastedIndicesToOffset("outputIndices",m)};\n            let offsetB = ${y.broadcastedIndicesToOffset("outputIndices",m)};\n            ${m.setByOffset("global_idx",f(o||a?g.getByOffset("offsetA / 4u"):`${g.type.value}(${g.getByOffset("offsetA / 4u")}[offsetA % 4u])`,o||i?y.getByOffset("offsetB / 4u"):`${y.type.value}(${y.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else h=m.setByOffset("global_idx",f(g.getByOffset("global_idx"),y.getByOffset("global_idx")));else{if(!i)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let e=(e,t,n="")=>{let r=`aData[indexA${t}][componentA${t}]`,a=`bData[indexB${t}][componentB${t}]`;return`\n            let outputIndices${t} = ${m.offsetToIndices(`global_idx * 4u + ${t}u`)};\n            let offsetA${t} = ${g.broadcastedIndicesToOffset(`outputIndices${t}`,m)};\n            let offsetB${t} = ${y.broadcastedIndicesToOffset(`outputIndices${t}`,m)};\n            let indexA${t} = offsetA${t} / 4u;\n            let indexB${t} = offsetB${t} / 4u;\n            let componentA${t} = offsetA${t} % 4u;\n            let componentB${t} = offsetB${t} % 4u;\n            ${e}[${t}] = ${n}(${c(r,a)});\n          `};h=9===d?`\n            var data = vec4<u32>(0);\n            ${e("data",0,"u32")}\n            ${e("data",1,"u32")}\n            ${e("data",2,"u32")}\n            ${e("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${e("outputData[global_idx]",0)}\n            ${e("outputData[global_idx]",1)}\n            ${e("outputData[global_idx]",2)}\n            ${e("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(g,y,m)}\n\n        ${p??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${h}\n      }`},Hr=(e,t,n,r,a,i,o=n.dataType)=>{let s=!ht.areEqual(n.dims,r.dims),u=n.dims,l=ht.size(n.dims),d=!1,p=!1,c=[s];if(s){let e=ft.calcShape(n.dims,r.dims,!1);if(!e)throw new Error("Can't perform binary op on the given tensors");u=e,l=ht.size(u);let t=1===ht.size(n.dims),a=1===ht.size(r.dims),i=n.dims.length>0&&n.dims[n.dims.length-1]%4==0,o=r.dims.length>0&&r.dims[r.dims.length-1]%4==0;c.push(t),c.push(a),c.push(i),c.push(o);let s=1;for(let e=1;e<u.length;e++){let t=n.dims[n.dims.length-e]??1;if(t!==(r.dims[r.dims.length-e]??1))break;s*=t}s%4==0?(p=!0,d=!0):(t||a||i||o)&&(d=!0)}else d=!0;return c.push(d),{name:e,shaderCache:{hint:t+c.map((e=>e.toString())).join("_"),inputDependencies:["rank","rank"]},getShaderSource:e=>Vr(e,n.dims,r.dims,u,d,s,p,a,n.dataType,r.dataType,o,i),getRunData:()=>({outputs:[{dims:u,dataType:o}],dispatchGroup:{x:Math.ceil(l/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(ht.size(u)/4)},..._t(n.dims),..._t(r.dims),..._t(u)]})}},Lr=(e,t,n,r,a,i)=>{e.compute(Hr(t,a??"",e.inputs[0],e.inputs[1],n,r,i))},Fr=e=>{Lr(e,"Add",((e,t)=>`${e}+${t}`))},Gr=e=>{Lr(e,"Div",((e,t)=>`${e}/${t}`))},jr=e=>{Lr(e,"Equal",{scalar:(e,t)=>`u32(${e}==${t})`,vector:(e,t)=>`vec4<u32>(${e}==${t})`},void 0,void 0,9)},qr=e=>{Lr(e,"Mul",((e,t)=>`${e}*${t}`))},Kr=e=>{let t=At("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Lr(e,"Pow",{scalar:(e,t)=>`pow_custom(${e},${t})`,vector:(e,t)=>`pow_vector_custom(${e},${t})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${"i32"===t?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Yr=e=>{Lr(e,"Sub",((e,t)=>`${e}-${t}`))},Zr=e=>{Lr(e,"Greater",{scalar:(e,t)=>`u32(${e}>${t})`,vector:(e,t)=>`vec4<u32>(${e}>${t})`},void 0,void 0,9)},Qr=e=>{Lr(e,"Less",{scalar:(e,t)=>`u32(${e}<${t})`,vector:(e,t)=>`vec4<u32>(${e}<${t})`},void 0,void 0,9)},Xr=e=>{Lr(e,"GreaterOrEqual",{scalar:(e,t)=>`u32(${e}>=${t})`,vector:(e,t)=>`vec4<u32>(${e}>=${t})`},void 0,void 0,9)},Jr=e=>{Lr(e,"LessOrEqual",{scalar:(e,t)=>`u32(${e}<=${t})`,vector:(e,t)=>`vec4<u32>(${e}<=${t})`},void 0,void 0,9)}})),Us=U((()=>{Ts(),Is(),As(),ea=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,n=e[0].dims.length;for(let r of e){if(r.dataType!==t)throw new Error("input tensors should be one type");if(r.dims.length!==n)throw new Error("input tensors should have the same shape")}},ta=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,na=(e,t)=>{let n=e.length,r=[];for(let a=0;a<n;++a){let i=t.setByOffset("global_idx",e[a].getByIndices("indices"));1===n?r.push(i):0===a?r.push(`if (inputIndex == ${a}u) { ${i} }`):a===n-1?r.push(`else { ${i} }`):r.push(`else if (inputIndex == ${a}) { ${i} }`)}return r.join("\n")},ra=(e,t)=>{let n=e[0].dims.slice();if(t>=n.length||t<-1*n.length)throw new Error("axis specified for concat doesn't match input dimensionality");let r=t<0?n.length+t:t,a=n.slice(0);for(let t=1;t<e.length;t++){let i=e[t].dims.slice();for(let e=0;e<n.length;e++)if(e===r)a[r]+=i[e];else if(n[e]!==i[e])throw new Error("non concat dimensions must match")}let i=ht.size(a),o=new Array(e.length),s=new Array(e.length),u=e[0].dataType,l=0,d=[],p=[],c=[{type:"uint32",data:i}];for(let t=0;t<e.length;++t)l+=e[t].dims[r],o[t]=l,p.push(e[t].dims.length),s[t]=At(`input${t}`,u,p[t]),d.push("rank"),c.push({type:"uint32",data:o[t]});for(let t=0;t<e.length;++t)c.push(..._t(e[t].dims));c.push(..._t(a));let f=kt("output",u,a.length),h=f.indicesGet("indices",r),m=Array.from(Array(o.length).keys()).map((e=>`uniforms.sizeInConcatAxis${e}`)).join(",");return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:c}),getShaderSource:t=>`\n\n  ${(()=>{t.registerUniform("outputSize","u32");for(let n=0;n<e.length;n++)t.registerUniform(`sizeInConcatAxis${n}`,"u32");return t.declareVariables(...s,f)})()}\n\n  ${ta(o.length,m)}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${f.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${h});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${o.length}u>(${m});\n      ${h} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${na(s,f)}\n  }`}},aa=(e,t)=>{ea(e.inputs),e.compute(ra(e.inputs,t.axis))},ia=e=>pt({axis:e.axis})})),Vs=U((()=>{Ts(),oa=(e,t)=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(uniforms.clip_min), ${t}(uniforms.clip_max));`;default:return""}},sa=e=>{let t=e?.activation||"";if("Clip"===t){let[n,r]=e?.activation_params||[yt,bt];return{activation:t,clipMax:r,clipMin:n}}return{activation:t}}})),Hs=U((()=>{ua=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},la=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `})),Ls=U((()=>{da=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`})),Fs=U((()=>{Ts(),As(),Vs(),Hs(),pa=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,ca=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${3===t?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,fa=(e,t,n="f32",r,a=!1,i=32,o=!1,s=32)=>{let u=t[1]*e[1],l=t[0]*e[0],d=a?u:i,p=a?i:u,c=d/t[0],f=i/t[1];if((!a||4!==c||4!==e[1])&&(a||3!==c&&4!==c)||d%t[0]!=0||i%t[1]!=0||4!==e[0])throw new Error(`If transposeA ${a} is true, innerElementSize ${c} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${c} must be 3 or 4.\n  tileAWidth ${d} must be divisible by workgroupSize[0]${t[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${c}<${n}>, ${d/c}>, ${p}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${n}>, ${l/e[0]}>, ${i}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${c};\nconst tileInner = ${i};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${o?"0":"i32(globalId.z)"};\n  ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${u};\n\n  let num_tiles = ${o?`${Math.ceil(s/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n  var kStart = ${o?`i32(globalId.z) * ${s}`:"0"};\n\n  var acc: array<vec4<${n}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${f};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${pa(a,r)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${r?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${3===c?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${ca(a,c)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},ha=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,ma=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",ga=(e,t,n="f32",r,a=!1,i=32,o=!1,s=32,u=!1)=>{let l=e[1]*t[1],d=e[0]*t[0],p=a?l:i,c=a?i:l;if(c%t[1]!=0||p%t[0]!=0||i%t[1]!=0)throw new Error(`tileAHight ${c} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${p} must be divisible by workgroupSize[0]${t[0]}, tileInner ${i} must be divisible by workgroupSize[1]${t[1]}`);let f=c/t[1],h=p/t[0],m=i/t[1],g=u?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${l};\n    let globalColStart = i32(workgroupId.x) * ${d};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${c}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${p}; inputCol = inputCol + ${t[0]}) {\n          ${ha(a,r)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${r?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${n}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${a?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${l};\n\nlet tileRowA = i32(localId.y) * ${f};\nlet tileColA = i32(localId.x) * ${h};\nlet tileRowB = i32(localId.y) * ${m};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${h}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${ha(a,r)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${r?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${n}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${ma(a)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${n}, ${p}>, ${c}>;\n  var<workgroup> mm_Bsub : array<array<${n}, ${d}>, ${i}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${i};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${o?"0":"i32(globalId.z)"};\n    ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}\n    let num_tiles = ${o?`${Math.ceil(s/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n    var kStart = ${o?`i32(globalId.z) * ${s}`:"0"};\n\n    var acc : array<array<${n}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${g}\n  }\n`},ya=(e,t,n,r,a,i=!1)=>{let[o,s,u]=a,[l,d,p,c]=r,f=Bt(o,u),h=Bt(s,u),m=vt(r[0].type.tensor);return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${l.type.indices}) -> ${ua(e,m)} {\n      var value = ${ua(e,m)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        ${(()=>{let e=d.rank,t=l.rank,n=`var aIndices: ${d.type.indices};`;for(let r=e-2-1,a=t-1;r>=0;r--,a--)n+=`\naIndices[${r}] = ${t>1?`batchIndices[${a}]`:"batchIndices"};`;return f.forEach((e=>{n+=`\naIndices[${e}] = 0;`})),n+=`\naIndices[${e-2}] = u32(row);\n                   aIndices[${e-1}] = u32(colIn);`,n})()}\n        value = ${d.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${l.type.indices}) -> ${ua(e,m)} {\n      var value = ${ua(e,m)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        ${(()=>{let e=p.rank,t=l.rank,n=`var bIndices: ${p.type.indices};`;for(let r=e-2-1,a=t-1;r>=0;r--,a--)n+=`\nbIndices[${r}] = ${t>1?`batchIndices[${a}]`:"batchIndices"};`;return h.forEach((e=>{n+=`\nbIndices[${e}] = 0;`})),n+=`\nbIndices[${e-2}] = u32(row);\n                   bIndices[${e-1}] = u32(colIn);`,n})()}\n        value = ${p.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${ua(e,m)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${i?"bias[colIn]":`${ua(e,m)}(bias[row])`};`:""}\n        ${n}\n        ${c.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},ba=(e,t,n,r,a=!1)=>{let i=e[0].dims,o=e[1].dims,s=i.slice(0,-2),u=o.slice(0,-2),l=r?r.slice(0,-2):n.slice(0,-2),d=ht.size(l),p=i[i.length-2],c=i[i.length-1],f=o[o.length-1],h=c%4==0&&f%4==0,m=p<=8?[4,1,1]:[4,4,1],g=[8,8,1],y=[Math.ceil(f/g[0]/m[0]),Math.ceil(p/g[1]/m[1]),Math.ceil(d/g[2]/m[2])],b=h?4:1,w=[...s,p,c/b],v=w.length,$=[...u,c,f/b],_=$.length,x=[d,p,f/b],S=[{type:"int32",data:p},{type:"int32",data:f},{type:"int32",data:c}];"Clip"===t.activation&&S.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),S.push(..._t(l),..._t(w),..._t($));let C=["rank","rank"],E=e.length>2;return E&&(S.push(..._t(e[2].dims)),C.push("rank")),S.push(..._t(x)),{name:"MatMul",shaderCache:{hint:`${m};${t.activation};${h};${a}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:y[0],y:y[1],z:y[2]},programUniforms:S}),getShaderSource:n=>{let r=l.length,i=Ot("batchDims",e[0].dataType,r,1),o=vt(e[0].dataType),d=At("a",e[0].dataType,v,b),p=At("b",e[1].dataType,_,b),c=kt("result",e[0].dataType,x.length,b),f=[d,p];if(E){let t=a?b:1;f.push(At("bias",e[2].dataType,e[2].dims.length,t))}let y=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];"Clip"===t.activation&&y.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"});let w=oa(t,c.type.value),$=ya(b,E,w,[i,d,p,c],[s,u,l],a);return`\n  ${n.registerUniforms(y).registerInternalVariables(i).declareVariables(...f,c)}\n  ${$}\n  ${h?fa(m,g,o,i):ga(m,g,o,i)}\n                   `}}}})),Gs=U((()=>{xs(),As(),Vs(),Hs(),Ls(),Fs(),wa=(e,t,n,r,a=!1,i,o=4,s=4,u=4,l="f32")=>{let d=e?"\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ":"\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    ",p=e?"\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ":"\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    ",c=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",f=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",h=e?"row":"col",m=e?"col":"row",g=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${h} / outWidth;\n    let outCol = ${h} % outWidth;\n\n    let WRow = ${m} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${m} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${m} % inChannels;\n    var resData = ${ua(o,l)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${c} && xCol >= 0 && xCol < ${f}) {\n      ${d}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${(e=>{switch(e){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${l}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(o)}\n    }\n    return resData;`,y=e?t&&r?`\n    let col = colIn * ${o};\n    ${g}`:`\n    let col = colIn * ${o};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${g}\n    }\n    return ${ua(o,l)}(0.0);`:r&&n?`\n    let col = colIn * ${o};\n    ${g}`:`\n    let col = colIn * ${o};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${g}\n    }\n    return ${ua(o,l)}(0.0);`,b=`${(e=>{switch(e){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(s)}`,w=ua(u,l),v=ua(e?o:s,l),$=ua(e?s:o,l),_=oa(i,w);return`\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${v} {\n      ${e?y:b}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${$} {\n      ${e?b:y}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${w}) {\n      let col = colIn * ${u};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${p}\n      ${la(a)}\n      ${_}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},va=(e,t,n,r,a,i,o,s)=>{let u="NHWC"===t.format,l=u?e[0].dims[3]:e[0].dims[1],d=n[0],p=u?n[2]:n[3],c=u?n[1]:n[2],f=u?n[3]:n[1],h=u&&(l%4==0||l%3==0)&&f%4==0,m=u?f:p*c,g=u?p*c:f,y=[8,8,1],b=r<=8?[4,1,1]:[4,4,1],w=[Math.ceil(m/y[0]/b[0]),Math.ceil(g/y[1]/b[1]),Math.ceil(d/y[2]/b[2])];nt("verbose",(()=>`[conv2d_mm_webgpu] dispatch = ${w}`));let v=h?u&&l%4!=0?3:4:1,$=y[1]*b[1],_=y[0]*b[0],x=Math.max(y[0]*v,y[1]),S=r%$==0,C=a%_==0,E=i%x==0,I=h?[v,4,4]:[1,1,1],T=[{type:"int32",data:r},{type:"int32",data:a},{type:"int32",data:i},{type:"int32",data:[t.pads[0],t.pads[1]]},{type:"int32",data:t.strides},{type:"int32",data:t.dilations}];"Clip"===t.activation&&T.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),T.push(..._t(e[0].dims),..._t(e[1].dims));let A=["rank","rank"];return o&&(T.push(..._t(e[2].dims)),A.push("rank")),T.push(..._t(n)),{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${v};${h};${S};${C};${E};${$};${_};${x}`,inputDependencies:A},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:w[0],y:w[1],z:w[2]},programUniforms:T}),getShaderSource:r=>{let a=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];"Clip"===t.activation&&a.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"});let i=h?4:1,l=vt(e[0].dataType),d=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${h?`vec4<${l}>`:l}) {\n        result[flatIndex] = ${h?`vec4<${l}>`:l}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${h?`vec4<${l}>`:l}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${h?"/ 4":""}, value);\n      }`,p=[At("x",e[0].dataType,e[0].dims.length,3===v?1:v),At("w",e[1].dataType,e[1].dims.length,i)],c=kt("result",e[0].dataType,n.length,i);if(o){let t=At("bias",e[2].dataType,e[2].dims.length,i);p.push(t),d+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${h?`vec4<${l}>`:l} {\n          return bias[coords.${u?"w":"y"}${h?"/ 4":""}];\n        }`}return`\n        ${da("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${r.registerUniforms(a).declareVariables(...p,c)}\n        ${d}\n        ${wa(u,S,C,E,o,t,I[0],I[1],I[2],l)}\n        ${h?fa(b,y,l,void 0,!u,x):ga(b,y,l,void 0,!u,x,!1,void 0,s)}`}}}})),js=U((()=>{Ts(),As(),Ks(),Vs(),$a=(e,t,n)=>{let r=e.length>2,a=r?"value += b[output_channel];":"",i=e[0].dims,o=e[1].dims,s=o[0]/t.group,u="NHWC"===t.format,l=Ca(i,o,t.dilations,t.pads,t.strides,u),d=ht.size(l),p=[{type:"uint32",data:d},{type:"uint32",data:t.dilations},{type:"uint32",data:[t.strides[0],t.strides[1]]},{type:"uint32",data:[t.pads[0],t.pads[1]]},{type:"uint32",data:s}];"Clip"===t.activation&&p.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),p.push(..._t(i),..._t(o),..._t(l));let c=["rank","rank"];return r&&(p.push(..._t(e[2].dims)),c.push("rank")),p.push(..._t(l)),{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:c},getRunData:()=>({outputs:[{dims:n?n(l):l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:p}),getShaderSource:n=>{let s=kt("output",e[0].dataType,l.length),d=oa(t,s.type.value),p=At("x",e[0].dataType,i.length),c=At("w",e[1].dataType,o.length),f=[p,c];r&&f.push(At("b",e[2].dataType,e[2].dims));let h=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return"Clip"===t.activation&&h.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}),`\n  ${n.registerUniforms(h).declareVariables(...f,s)}\n\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let outputIndices = ${s.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${u?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${u?1:2}], outputIndices[${u?2:3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel / uniforms.output_channels_per_group;\n\n    var value: ${s.type.value} = ${s.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[${u?1:2}]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[${u?2:3}]) {\n            continue;\n          }\n\n          let xVal = ${u?p.get("batch","xHeight","xWidth","input_channel"):p.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${c.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${a}\n    ${d}\n    ${s.setByOffset("global_idx","value")}\n  }`}}}})),qs=U((()=>{Ts(),Fs(),As(),Vs(),_a=(e,t,n,r,a=!1)=>{let i=e[0].dims,o=e[1].dims,s=i[i.length-2],u=o[o.length-1],l=i[i.length-1],d=xt(u),p=xt(l),c=xt(s),f=ht.size(n)/d/c,h=e.length>2,m=r?r.slice(0,-2):n.slice(0,-2),g=[ht.size(m),s,u],y=[{type:"uint32",data:f},{type:"uint32",data:s},{type:"uint32",data:u},{type:"uint32",data:l}];return"Clip"===t.activation&&y.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),y.push(..._t(m),..._t(i),..._t(o)),h&&y.push(..._t(e[2].dims)),y.push(..._t(g)),{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${d};${p};${c};${a}`,inputDependencies:h?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:y}),getShaderSource:r=>{let s=Ot("batch_dims",e[0].dataType,m.length),u=At("a",e[0].dataType,i.length,p),l=At("b",e[1].dataType,o.length,d),f=kt("output",e[0].dataType,g.length,d),y=oa(t,f.type.value),b=[u,l],w="";if(h){let t=a?d:1;b.push(At("bias",e[2].dataType,e[2].dims.length,t)),w=a?`value += bias[col / ${t}];`:`value += ${f.type.value}(bias[row + i]);`}let v=i.slice(0,-2),$=o.slice(0,-2),_=Bt(v,m),x=Bt($,m),S=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];"Clip"===t.activation&&S.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"});let C=(e,t)=>{let n=e.rank,r=e.name;if(2===n)return`var ${r}_indices = ${e.type.indices}(0u, 0u);`;let a=s.rank,i=`var ${r}_indices: ${e.type.indices};`;for(let e=n-2-1,t=a-1;e>=0;e--,t--)i+=`\n${r}_indices[${e}] = ${a>1?`batch_indices[${t}]`:"batch_indices"};`;return t.forEach((e=>{i+=`\n${r}_indices[${e}] = 0;`})),i+=`${r}_indices[${n-2}] = 0u;\n                     ${r}_indices[${n-1}] = 0u;`,i};return`\n  ${r.registerUniforms(S).registerInternalVariables(s).declareVariables(...b,f)}\n  ${r.mainStart()}\n    ${r.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let col = (global_idx % (uniforms.N / ${d})) * ${d};\n    var index1 = global_idx / (uniforms.N / ${d});\n    let stride1 = uniforms.M / ${c};\n    let row = (index1 % stride1) * ${c};\n    let batch = index1 / stride1;\n\n    ${2===n.length?"":`let batch_indices = ${s.offsetToIndices("batch")};`}\n    ${C(u,_)}\n    let a_offset = ${u.indicesToOffset("a_indices")};\n    ${C(l,x)}\n    let b_offset = ${l.indicesToOffset("b_indices")};\n    var values: array<${f.type.value}, ${c}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${p}) {\n      ${(()=>{let e=`var a_data: ${u.type.value};`;for(let t=0;t<p;t++)e+=`\n              let b_data${t} = b[(b_offset + (k + ${t}) * uniforms.N + col) / ${d}];`;for(let t=0;t<c;t++){e+=`a_data = a[(a_offset + (row + ${t}) * uniforms.K + k) / ${p}];`;for(let n=0;n<p;n++)e+=`\n            values[${t}] = fma(${l.type.value}(a_data${1===p?"":`[${n}]`}), b_data${n}, values[${t}]);\n`}return e})()}\n    }\n    for (var i = 0u; i < ${c}u; i++) {\n      var value = values[i];\n      ${w}\n      ${y}\n      let cur_indices = ${f.type.indices}(batch, row + i, col);\n      let offset = ${f.indicesToOffset("cur_indices")};\n      ${f.setByOffset(`offset / ${d}`,"value")};\n    }\n  }\n  `}}},xa=e=>{if(!e||2!==e.length)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Sa=e=>{xa(e.inputs);let t=ft.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let n=t[t.length-1],r=e.inputs[0].dims[e.inputs[0].dims.length-1];n<8&&r<8?e.compute(_a(e.inputs,{activation:""},t)):e.compute(ba(e.inputs,{activation:""},t))}})),Ks=U((()=>{Ts(),Gs(),Fs(),js(),Vs(),qs(),ks(),Ca=(e,t,n,r,a,i)=>{let o=e[0],s=e.slice(i?1:2,i?3:4),u=s.length,l=t[0],d=t.slice(2).map(((e,t)=>e+(e-1)*(n[t]-1))),p=s.map(((e,t)=>e+r[t]+r[t+u])).map(((e,t)=>Math.floor((e-d[t]+a[t])/a[t])));return p.splice(0,0,o),p.splice(i?3:1,0,l),p},Ea=[2,3,1,0],Ia=(e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Ta=(e,t)=>{let n=e.kernelShape.slice();for(let e=2;e<t[1].dims.length;++e)0===n[e-2]&&(n[e-2]=t[1].dims[e]);let r=e.pads.slice();mt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,r,"NHWC"===e.format,e.autoPad);let a=Object.assign({},e);return Object.assign(a,{kernelShape:n,pads:r}),a},Aa=e=>{let t=sa(e),n=e.format;return{autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],format:n,dilations:e.dilations,group:e.group,kernelShape:e.kernel_shape,pads:e.pads,strides:e.strides,wIsConst:e.w_is_const(),...t,cacheKey:`${e.format};${t.activation};`}},ka=(e,t,n)=>{let r=Ta(n,t),a="NHWC"===n.format;if(1!==n.group)return void e.compute($a(t,r));let i=3===t.length,o=t[0].dims[a?1:2],s=t[0].dims[a?2:3],u=t[0].dims[a?3:1],l=t[1].dims[2],d=t[1].dims[3],p=Ca(t[0].dims,t[1].dims,n.dilations,r.pads,n.strides,a),c=p[a?1:2],f=p[a?2:3],h=p[a?3:1],m=a&&l===o&&d===s&&0===n.pads[0]&&0===n.pads[1];if(m||1===l&&1===d&&1===n.dilations[0]&&1===n.dilations[1]&&1===n.strides[0]&&1===n.strides[1]&&0===n.pads[0]&&0===n.pads[1]){let l,d,g,y=p[0],b=[];if(a){let r=e.kernelCustomData.wT??e.compute(Wt(t[1],Ea),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];if(n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=r),m){let e=o*s*u;l=t[0].reshape([1,y,e]),d=r.reshape([1,e,h]),g=[1,y,h]}else l=t[0].reshape([y,o*s,u]),d=r.reshape([1,u,h]),g=[y,c*f,h];b.push(l),b.push(d)}else l=t[0].reshape([y,u,o*s]),d=t[1].reshape([1,h,u]),g=[y,h,c*f],b.push(d),b.push(l);i&&b.push(t[2]);let w=g[2],v=b[0].dims[b[0].dims.length-1];return void(w<8&&v<8?e.compute(_a(b,r,p,g,a),{inputs:b}):e.compute(ba(b,r,p,g,a),{inputs:b}))}let g=e.kernelCustomData.wT??e.compute(Wt(t[1],Ea),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=g);let y=[t[0],g];i&&y.push(t[2]);let b=a?c*f:h,w=a?h:c*f,v=l*d*u;e.compute(va(y,r,p,b,w,v,i,!0),{inputs:y})},Oa=(e,t)=>{let n="NHWC"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);let a=[0,t.pads[0],0,t.pads[1]],i=[1].concat(t.strides),o=[1].concat(t.dilations),s=[1].concat(t.kernelShape),u=Ta({...t,pads:a,strides:i,dilations:o,kernelShape:s},r);e.compute($a(r,u,(e=>n?[e[0],e[2],e[3]]:[])))},Ra=(e,t)=>{Ia(e.inputs,t),3===e.inputs[0].dims.length?Oa(e,t):ka(e,e.inputs,t)}})),Ys=U((()=>{xs(),As(),Vs(),Hs(),Ls(),Fs(),za=(e,t=!1,n,r=4)=>{let a=ua(r,"f32"),i=e?"\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ":"\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    ",o=e?"row":"col",s=e?"col":"row",u=`\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${o} / outWidth;\n      let outCol = ${o} % outWidth;\n\n      let WRow = ${s} / (uniforms.filter_dims[1] * inChannels);\n      let WCol = ${s} / inChannels % uniforms.filter_dims[1];\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(${e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])"}) || fract(xR) > 0.0) {\n        return ${a}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])"}) || fract(xC) > 0.0) {\n        return ${a}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${s} % inChannels;\n      ${e?"\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      "}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${r}];`,l=e?`\n      let col = colIn * ${r};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n        ${u}\n      }\n      return ${a}(0.0);`:`\n      let col = colIn * ${r};\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n        ${u}\n      }\n      return ${a}(0.0);`,d=`\n      let col = colIn * ${r};\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\n      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${(e=>{switch(e){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return"\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            ";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(r)}\n      }\n      return ${a}(0.0);\n      `,p=oa(n,a);return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${a} {\n    ${e?l:d}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${a} {\n    ${e?d:l}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${a}) {\n    let col = colIn * ${r};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${i}\n      ${la(t)}\n      ${p}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${r}] = value;\n    }\n  }`},Ba=(e,t,n,r,a,i,o,s)=>{let u="NHWC"===t.format,l=u?e[0].dims[3]:e[0].dims[1],d=n[0],p=u?n[2]:n[3],c=u?n[1]:n[2],f=u?n[3]:n[1],h=u?l%4==0&&f%4==0:p%4==0&&f%4==0,m=u?f:p*c,g=u?p*c:f,y=h?[8,8,1]:[m<=4||g<=4?4:16,m>4&&g<=4?4:16,1],b=h?[4,4,1]:[m<=4?1:4,m>4&&g<=4?1:4,1],w=[Math.ceil(m/y[0]/b[0]),Math.ceil(g/y[1]/b[1]),Math.ceil(d/y[2]/b[2])];nt("verbose",(()=>`[conv_backprop_mm_webgpu] dispatch = ${w}`));let v=h?4:1,$=Math.max(y[0]*v,y[1]),_=h?4:1,x=[t.kernelShape[u?1:2],t.kernelShape[u?2:3]],S=[x[0]+(t.dilations[0]<=1?0:(x[0]-1)*(t.dilations[0]-1)),x[1]+(t.dilations[1]<=1?0:(x[1]-1)*(t.dilations[1]-1))],C=[S[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),S[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],E=[{type:"int32",data:r},{type:"int32",data:a},{type:"int32",data:i},{type:"int32",data:t.strides},{type:"int32",data:t.dilations},{type:"int32",data:x},{type:"int32",data:C}];"Clip"===t.activation&&E.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),E.push(..._t(e[0].dims),..._t(e[1].dims));let I=["rank","rank"];return o&&(E.push(..._t(e[2].dims)),I.push("rank")),E.push(..._t(n)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${b};${y};${h}`,inputDependencies:I},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:w[0],y:w[1],z:w[2]},programUniforms:E}),getShaderSource:r=>{let a=At("x",e[0].dataType,e[0].dims.length,_),i=At("w",e[1].dataType,e[1].dims.length,1),l=kt("result",e[0].dataType,n.length,_),d=[a,i],p="";if(o){let t=At("bias",e[2].dataType,e[2].dims.length,_);d.push(t),p+=`\n          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${h?"vec4<f32>":"f32"} {\n            return bias[coords.${u?"w":"y"}${h?"/ 4":""}];\n          }`}let c=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:x.length},{name:"pads",type:"i32",length:C.length}];return"Clip"===t.activation&&c.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}),`\n        ${da("uniforms.result_strides")}\n        ${r.registerUniforms(c).declareVariables(...d,l)};\n        ${p}\n        ${za(u,o,t,v)}\n        ${h?fa(b,y,"f32",void 0,!u,$):ga(b,y,"f32",void 0,!u,$,!1,void 0,s)}`}}}})),Zs=U((()=>{xs(),Ts(),As(),Pa=(e,t,n,r,a,i=!1,o,s,u=!1)=>{let l=u?1:2,d=u?2:3,p=u?3:1,c=i?2:1,f=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${i?`vec4<${o}>`:o}) {\n    result[flatIndex] = ${i?`vec4<${o}>`:o}(value);\n  }`;r&&(f+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${i?`vec4<${o}>`:o} {\n      return bias[coords.${u?"w":"y"}${i?"/ 4":""}];\n    }`);let h=i?4:1,m=At("W",t[1].dataType,t[1].dims.length,h),g=At("Dy",t[0].dataType,t[0].dims.length,h),y=[g,m];r&&y.push(At("bias",t[2].dataType,[n[p]].length,h));let b=kt("result",t[0].dataType,n.length,h),w=`{\n        let batch: u32 = ${a?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];\n        let r = ${a?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];\n        let c = ${a?"global_id.y":"workgroup_id.y"} * ${c};\n        let d1: u32 = ${a?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${o}>, ${c}>;\n        for (var i = 0; i < ${c}; i++) {\n          dotProd[i] = vec4<${o}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\n          var dyR = (${o}(dyCorner.x) + ${o}(wR)) / ${o}(uniforms.strides.x);\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${o}(uniforms.Dy_shape[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\n            let dyC = (${o}(dyCorner.y) + ${o}(wC)) / ${o}(uniforms.strides.y);\n            let dyC2 = (${o}(dyCorner.y) + 1.0 + ${o}(wC)) / ${o}(uniforms.strides.y);\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${o}(uniforms.Dy_shape[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${o}(uniforms.Dy_shape[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${g.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${o}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${g.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${o}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = uniforms.Dy_shape[${p}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${g.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${o}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${m.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${g.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${o}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${c}; i = i + 1) {\n          let value = dotProd[i] + ${r?"bias[c+i]":`vec4<${o}>(0.0)`};\n          ${b.set("batch","r","c + i","d1","value")};\n        }\n      }`,v=`\n          let outputIndices = ${b.offsetToIndices("global_idx")};\n          let batch = ${b.indicesGet("outputIndices",0)};\n          let d1 = ${b.indicesGet("outputIndices",p)};\n          let r = ${b.indicesGet("outputIndices",l)};\n          let c = ${b.indicesGet("outputIndices",d)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / uniforms.output_channels_per_group;\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${o}(0.0);\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n            if (wR % uniforms.dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${o}(dyRCorner) + ${o}(wR)) / ${o}(uniforms.strides[0]);\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n            if (dyR < 0.0 || dyR >= ${o}(uniforms.Dy_shape[${l}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n              if (wC % uniforms.dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${o}(dyCCorner) + ${o}(wC)) / ${o}(uniforms.strides.y);\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n              if (dyC < 0.0 || dyC >= ${o}(uniforms.Dy_shape[${d}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * uniforms.input_channels_per_group;\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\n                let xValue = ${u?g.get("batch","idyR","idyC","inputChannel"):g.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${m.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${r?"bias[d1]":`${o}(0.0)`};\n          ${b.setByOffset("global_idx","value")};\n        `;return`\n  ${e.registerUniforms(s).declareVariables(...y,b)}\n  ${f}\n\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};\n  ${i?w:v}}`},Ma=(e,t,n)=>{let r=e.length>2,a=t.outputShape,i=ht.size(a),o=[Math.ceil(i/64),1,1];nt("verbose",(()=>`[conv2d_backprop_webgpu] dispatch = ${o}`));let s="NHWC"===t.format,u=["rank","rank"],l=[t.strides[0],t.strides[1]],d=[t.kernelShape[s?1:2],t.kernelShape[s?2:3]],p=[t.dilations[0],t.dilations[1]],c=[d[0]+(t.dilations[0]<=1?0:(t.kernelShape[s?1:2]-1)*(t.dilations[0]-1)),d[1]+(t.dilations[1]<=1?0:(t.kernelShape[s?2:3]-1)*(t.dilations[1]-1))],f=[c[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),c[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],h=t.group,m=e[1].dims,g=m[0]/h,y=m[1],b=[{type:"int32",data:i},{type:"uint32",data:l},{type:"uint32",data:d},{type:"uint32",data:p},{type:"uint32",data:c},{type:"int32",data:f},{type:"uint32",data:g},{type:"uint32",data:y},..._t(e[0].dims),..._t(e[1].dims)];r&&(b.push(..._t(e[2].dims)),u.push("rank")),b.push(..._t(a));let w=1===o[1]&&1===o[2];return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:u},getRunData:()=>({dispatchGroup:{x:o[0],y:o[1],z:o[2]},outputs:[{dims:n?n(a):a,dataType:e[0].dataType}],programUniforms:b}),getShaderSource:t=>{let n=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:l.length},{name:"filter_dims",type:"u32",length:d.length},{name:"dilations",type:"u32",length:d.length},{name:"effective_filter_dims",type:"u32",length:c.length},{name:"pads",type:"i32",length:f.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],i=vt(e[0].dataType);return`${Pa(t,e,a,r,w,!1,i,n,s)}`}}}})),Qs=U((()=>{Ys(),Zs(),Vs(),ks(),Da=(e,t,n,r,a,i)=>(e-1)*t+n+(r-1)*a+1-i,Na=(e,t,n,r,a)=>{let i=Math.floor(e/2);"SAME_UPPER"===t?(n[r]=i,n[a]=e-i):"SAME_LOWER"===t&&(n[r]=e-i,n[a]=i)},Wa=(e,t,n,r,a,i,o,s,u,l)=>{let d=e.length-2,p=0===l.length;if(0===u.length)for(let e=0;e<d;++e)u.push(0);let c=e[0],f=t[s?3:1]*a;for(let a=0,c=e.length-d-(s?1:0);a<d;++a,++c){let s=e[c],f=p?s*o[a]:l[a],h=Da(s,o[a],i[a],t[c],n[a],f);Na(h,r,i,a,a+d),p&&l.push(o[a]*(s-1)+u[a]+(t[c]-1)*n[a]+1-i[a]-i[a+d])}l.splice(0,0,c),l.splice(s?3:1,0,f)},Ua=(e,t)=>{let n=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce(((e,t)=>e*t),1)){n.length=0;for(let e=2;e<t[1].dims.length;++e)n.push(t[1].dims[e])}let r="NHWC"===e.format;n.splice(0,0,t[1].dims[0]),n.splice(r?3:1,0,t[1].dims[1]);let a=e.pads.slice(),i=e.outputShape.slice(),o=e.outputPadding.slice(),s=t[0].dims,u=e.dilations.slice();if(0===u.reduce(((e,t)=>e+t),0)){let e=t[0].dims.length-2;u=new Array(e).fill(1)}let l=e.strides.slice();if(0===l.reduce(((e,t)=>e+t),0)){let e=t[0].dims.length-2;l=new Array(e).fill(1)}Wa(s,n,u,e.autoPad,e.group,a,l,r,o,i);let d=Object.assign({},e);return Object.assign(d,{kernelShape:n,pads:a,outputPadding:o,outputShape:i,dilations:u,strides:l}),d},Va=e=>{let t=sa(e),n=e.format,r=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],a=e.dilations,i=e.group,o=e.kernelShape,s=e.pads,u=e.strides,l=e.wIsConst();return{autoPad:r,format:n,dilations:a,group:i,kernelShape:o,outputPadding:e.outputPadding,outputShape:e.outputShape,pads:s,strides:u,wIsConst:l,...t,cacheKey:`${e.format};${t.activation};`}},Ha=(e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===t.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error("invalid bias");let r=e[0].dims.length-2;if(t.dilations.reduce(((e,t)=>e+t),0)>0&&t.dilations.length!==r)throw new Error(`dilations should be ${r}D`);if(t.strides.reduce(((e,t)=>e+t),0)>0&&t.strides.length!==r)throw new Error(`strides should be ${r}D`);if(t.pads.reduce(((e,t)=>e+t),0)>0&&t.pads.length!==2*r)throw new Error(`pads should be ${2*r}D`);if(t.outputPadding.length!==r&&0!==t.outputPadding.length)throw new Error(`output_padding should be ${r}D`);if(t.kernelShape.reduce(((e,t)=>e+t),0)>0&&0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},La=[2,3,1,0],Fa=(e,t,n)=>{let r=Ua(n,t),a="NHWC"===n.format,i=r.outputShape,o=i[a?3:1],s=t[0].dims[a?3:1];if(1!==r.group||1===o&&1===s)return void e.compute(Ma(t,r));let u=i[a?1:2],l=i[a?2:3],d=a?u*l:o,p=a?o:u*l,c=t[1].dims[2]*t[1].dims[3]*s,f=e.kernelCustomData.wT??e.compute(Wt(t[1],La),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=f);let h=[t[0],f],m=3===t.length;m&&(a||1!==t[2].dims.length?h.push(t[2]):h.push(t[2].reshape([t[2].dims[0],1,1]))),e.compute(Ba(h,r,i,d,p,c,m,!0),{inputs:h})},Ga=(e,t)=>{let n="NHWC"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===r.length&&r.push(e.inputs[2]);let a=t.kernelShape;(0===a.length||0===a[0])&&(a=[e.inputs[1].dims[2]]);let i=t.dilations;(0===i.length||0===i[0])&&(i=[1]);let o=t.strides;(0===o.length||0===o[0])&&(o=[1]);let s=t.pads;0===s.length&&(s=[0,0]),s=[0,s[0],0,s[1]],o=[1].concat(o),i=[1].concat(i),a=[1].concat(a);let u=Ua({...t,pads:s,strides:o,dilations:i,kernelShape:a},r);e.compute(Ma(r,u,(e=>n?[e[0],e[2],e[3]]:[e[0],e[1],e[3]])))},ja=(e,t)=>{Ha(e.inputs,t),3===e.inputs[0].dims.length?Ga(e,t):Fa(e,e.inputs,t)}})),Xs=U((()=>{$s(),Ts(),Is(),As(),qa=(e,t,n,r)=>{let a=ht.size(t),i=t.length,o=At("input",e,i),s=kt("output",e,i),u=6===n.dataType?n.getInt32Array()[0]:Number(n.getBigInt64Array()[0]),l=ht.normalizeAxis(u,i);return{name:"CumSum",shaderCache:{hint:r.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:"uint32",data:a},{type:"int32",data:l},..._t(t),..._t(t)]}),getShaderSource:e=>{let t=` i32(${o.indicesGet("inputIndices","uniforms.axis")}) `,n=It("uniforms.input_shape","uniforms.axis",i),a=r.reverse?t+(r.exclusive?" + 1":""):"0",u=r.reverse?n:t+(r.exclusive?"":" + 1");return`\n                ${e.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(o,s)}\n                ${e.mainStart()}\n                  ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${s.offsetToIndices("global_idx")};\n                  var sum = ${s.type.value}(0);\n                  let first : i32 = ${a};\n                  let last : i32 = ${u};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${o.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${o.getByIndices("inputIndices")};\n                  }\n                  ${s.setByOffset("global_idx","sum")};\n                }`}}},Ka=(e,t)=>{let n=e.inputs[0].dims,r=e.inputs[0].dataType,a=e.inputs[1];e.compute(qa(r,n,a,t),{inputs:[0]})},Ya=e=>{let t=1===e.exclusive,n=1===e.reverse;return pt({exclusive:t,reverse:n})}})),Js=U((()=>{Ts(),Is(),As(),Xa="^"+(Qa="("+(Za="[a-zA-Z]|\\.\\.\\.")+")+")+"$",Ja="^("+Qa+",)*"+Qa+"$",ei=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let n=this.symbolToIndices.get(e);void 0===n?n=[t]:n.push(t),this.symbolToIndices.set(e,n)}},ti=class{constructor(e,t){this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[n,r]=t.includes("->")?t.split("->",2):[t,""];if(!n.match(RegExp(Ja)))throw new Error("Invalid LHS term");if(n.split(",").forEach(((t,n)=>{let r=e[n].dims.slice();if(!t.match(RegExp(Xa)))throw new Error("Invalid LHS term");let a=this.processTerm(t,!0,r,n);this.lhs.push(a)})),""===r)r+=[...this.symbolToInfo.entries()].filter((([e,t])=>1===t.count||"..."===e)).map((([e])=>e)).join("");else if(!r.match(RegExp(Qa)))throw new Error("Invalid RHS");r.match(RegExp(Za,"g"))?.forEach((e=>{if("..."===e)this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let t=this.symbolToInfo.get(e);if(void 0===t)throw new Error("Invalid RHS symbol");this.outputDims.push(t.dimValue)}})),this.rhs=this.processTerm(r,!1,this.outputDims)}addSymbol(e,t,n){let r=this.symbolToInfo.get(e);if(void 0!==r){if(r.dimValue!==t&&1!==r.count)throw new Error("Dimension mismatch");r.count++,r.inputIndices.push(n)}else r={count:1,dimValue:t,inputIndices:[n]};this.symbolToInfo.set(e,r)}processTerm(e,t,n,r=-1){let a=n.length,i=!1,o=[],s=0;if(!e.match(RegExp(Xa))&&!t&&""!==e)throw new Error("Invalid LHS term");let u=e.match(RegExp(Za,"g")),l=new ei(r);return u?.forEach(((e,d)=>{if("..."===e){if(i)throw new Error("Only one ellipsis is allowed per input term");i=!0;let e=a-u.length+1;if(e<0)throw new Error("Ellipsis out of bounds");if(o=n.slice(s,s+e),this.hasEllipsis){if(this.ellipsisDims.length!==o.length||this.ellipsisDims.toString()!==o.toString())throw new Error("Ellipsis dimensions mismatch")}else{if(!t)throw new Error("Ellipsis must be specified in the LHS");this.hasEllipsis=!0,this.ellipsisDims=o}for(let e=0;e<o.length;e++){let t=String.fromCharCode("0".charCodeAt(0)+e);l.addSymbol(t,d+e),this.addSymbol(t,n[s++],r)}}else l.addSymbol(e,d+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(e,n[s++],r)})),l}},ni=e=>e+"_max",ri=(e,t,n,r)=>{let a=e.map((e=>e.length)).map(((e,n)=>At(`input${n}`,t,e))),i=ht.size(r),o=kt("output",t,r.length),s=[...n.symbolToInfo.keys()].filter((e=>!n.rhs.symbolToIndices.has(e)));return{name:"Einsum",shaderCache:{hint:n.equation,inputDependencies:e.map((()=>"rank"))},getRunData:()=>{let a=s.filter((e=>n.symbolToInfo.has(e))).map((e=>({type:"uint32",data:n.symbolToInfo.get(e)?.dimValue||0})));a.push({type:"uint32",data:i});let o=e.map(((e,t)=>[..._t(e)])).reduce(((e,t)=>e.concat(t)),a);return o.push(..._t(r)),{outputs:[{dims:r,dataType:t}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:o}},getShaderSource:e=>{let t=[],r=[],i=[],u=[],l=[],d=n.symbolToInfo.size===n.rhs.symbolToIndices.size;n.symbolToInfo.forEach(((e,s)=>{if(n.rhs.symbolToIndices.has(s)){let r=n.rhs.symbolToIndices.get(s)?.[0];void 0!==r&&n.lhs.forEach(((n,i)=>{if(e.inputIndices.includes(i)){let e=n.symbolToIndices.get(s);if(void 0===e)throw new Error("Invalid symbol error");e.forEach((e=>{t.push(`${a[i].indicesSet(`input${i}Indices`,e,o.indicesGet("outputIndices",r))}`)}))}}))}else n.lhs.forEach(((t,n)=>{if(e.inputIndices.includes(n)){let e=t.symbolToIndices.get(s);if(void 0===e)throw new Error("Invalid symbol error");e.forEach((e=>{r.push(`${a[n].indicesSet(`input${n}Indices`,e,`${s}`)}`)})),l.push(`prod *= ${a[n].getByIndices(`input${n}Indices`)};`)}})),i.push(`for(var ${s}: u32 = 0; ${s} < uniforms.${ni(s)}; ${s}++) {`),u.push("}")}));let p=d?[...t,`let sum = ${a.map(((e,t)=>e.getByIndices(`input${t}Indices`))).join(" * ")};`]:[...t,"var sum = 0.0;",...i,...r,"var prod = 1.0;",...l,"sum += prod;",...u];return`\n            ${e.registerUniforms(s.map((e=>({name:`${ni(e)}`,type:"u32"})))).registerUniform("outputSize","u32").declareVariables(...a,o)}\n\n            ${e.mainStart()}\n            ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${o.offsetToIndices("global_idx")};\n            ${a.map(((e,t)=>`var input${t}Indices: ${a[t].type.indices};`)).join("\n")}\n            ${p.join("\n")};\n            ${o.setByOffset("global_idx","sum")};\n          }`}}},ai=(e,t)=>{let n=new ti(e.inputs,t.equation),r=n.outputDims,a=e.inputs.map(((e,t)=>e.dims));e.compute(ri(a,e.inputs[0].dataType,n,r))},ii=e=>{let t=e.equation.replace(/\s+/g,"");return pt({equation:t})}})),eu=U((()=>{$s(),Ts(),As(),oi=e=>{if(!e||2!==e.length)throw new Error("Expand requires 2 input.");let t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number),r=n.length<t.length?0:n.length-t.length,a=t.length<n.length?0:t.length-n.length;for(;r<n.length&&a<t.length;++r,++a)if(n[r]!==t[a]&&1!==n[r]&&1!==t[a])throw new Error("Expand requires shape to be broadcastable to input")},si=(e,t)=>{let n=e.length-t.length,r=[];for(let t=0;t<n;++t)r.push(e[t]);for(let a=0;a<t.length;++a)r.push(1===t[a]?e[a+n]:t[a]);return r},ui=(e,t)=>e.length>t.length?si(e,t):si(t,e),li=e=>{let t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number),r=ui(t,n),a=e[0].dataType,i=9===a?4:1,o=Math.ceil(ht.size(r)/i),s=[{type:"uint32",data:o},..._t(t),..._t(r)];return{name:"Expand",shaderCache:{hint:`${r.length}`,inputDependencies:["rank"]},getShaderSource:e=>{let n,o=At("input",a,t.length,i),s=kt("output",a,r.length,i);if(9===a){let e=(e,t,n="")=>`\n          let outputIndices${t} = ${s.offsetToIndices(`outputOffset + ${t}u`)};\n          let offset${t} = ${o.broadcastedIndicesToOffset(`outputIndices${t}`,s)};\n          let index${t} = offset${t} / 4u;\n          let component${t} = offset${t} % 4u;\n          ${e}[${t}] = ${n}(${o.getByOffset(`index${t}`)}[component${t}]);\n        `;n=`\n        let outputOffset = global_idx * ${i};\n        var data = vec4<u32>(0);\n        ${e("data",0,"u32")}\n        ${e("data",1,"u32")}\n        ${e("data",2,"u32")}\n        ${e("data",3,"u32")}\n        ${s.setByOffset("global_idx","data")}\n      }`}else n=`\n        let outputIndices = ${s.offsetToIndices("global_idx")};\n        let inputOffset = ${o.broadcastedIndicesToOffset("outputIndices",s)};\n        ${s.setByOffset("global_idx",o.getByOffset("inputOffset"))}\n      }`;return`\n    ${e.registerUniform("vec_size","u32").declareVariables(o,s)}\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${n}`},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:s})}},di=e=>{oi(e.inputs),e.compute(li(e.inputs),{inputs:[0]})}})),tu=U((()=>{$s(),Ts(),Is(),As(),pi=e=>{if(!e||2!==e.length)throw new Error("Gather requires 2 inputs.")},ci=(e,t)=>{let n=e[0].dims,r=e[1].dims,a=n.length,i=ht.normalizeAxis(t.axis,a),o=n.slice(0);o.splice(i,1,...r);let s=n[i],u=9===e[0].dataType?4:1,l=Math.ceil(ht.size(o)/u),d=[{type:"uint32",data:l},{type:"int32",data:s},{type:"uint32",data:i},..._t(e[0].dims),..._t(e[1].dims),..._t(o)];return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d}),getShaderSource:t=>{let n,s=At("data",e[0].dataType,e[0].dims.length,u),l=At("inputIndices",e[1].dataType,e[1].dims.length),d=kt("output",e[0].dataType,o.length,u),p=e=>{let t=r.length,n=`var indicesIndices${e}  = ${l.type.indices}(0);`;for(let r=0;r<t;r++)n+=`${t>1?`indicesIndices${e}[${r}]`:`indicesIndices${e}`} = ${o.length>1?`outputIndices${e}[uniforms.axis + ${r}]`:`outputIndices${e}`};`;n+=`\n          var idx${e} = ${l.getByIndices(`indicesIndices${e}`)};\n          if (idx${e} < 0) {\n            idx${e} = idx${e} + uniforms.axisDimLimit;\n          }\n          var dataIndices${e} = ${s.type.indices}(0);\n        `;for(let r=0,s=0;r<a;r++)r===i?(n+=`${a>1?`dataIndices${e}[${r}]`:`dataIndices${e}`} = u32(idx${e});`,s+=t):(n+=`${a>1?`dataIndices${e}[${r}]`:`dataIndices${e}`} = ${o.length>1?`outputIndices${e}[${s}]`:`outputIndices${e}`};`,s++);return n};if(9===e[0].dataType){let e=(e,t,n="")=>`\n          let outputIndices${t} = ${d.offsetToIndices(`outputOffset + ${t}u`)};\n          ${p(t)};\n          let offset${t} = ${s.indicesToOffset(`dataIndices${t}`)};\n          let index${t} = offset${t} / 4u;\n          let component${t} = offset${t} % 4u;\n          ${e}[${t}] = ${n}(${s.getByOffset(`index${t}`)}[component${t}]);\n        `;n=`\n        let outputOffset = global_idx * ${u};\n        var value = vec4<u32>(0);\n        ${e("value",0,"u32")}\n        ${e("value",1,"u32")}\n        ${e("value",2,"u32")}\n        ${e("value",3,"u32")}\n        ${d.setByOffset("global_idx","value")}\n      `}else n=`\n      let outputIndices = ${d.offsetToIndices("global_idx")};\n      ${p("")};\n      let value = ${s.getByIndices("dataIndices")};\n      ${d.setByOffset("global_idx","value")};\n      `;return`\n      ${t.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(s,l,d)}\n      ${t.mainStart()}\n        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${n}\n      }`}}},fi=e=>pt({axis:e.axis}),hi=(e,t)=>{let n=e.inputs;pi(n),e.compute(ci(e.inputs,t))}})),nu=U((()=>{Ts(),Is(),As(),mi=e=>{if(!e||2!==e.length)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error("GatherElements requires that the data input and\n                     indices input tensors be of same rank.")},gi=(e,t)=>{let n=e[0].dims,r=e[0].dataType,a=n.length,i=e[1].dims,o=e[1].dataType,s=ht.normalizeAxis(t.axis,a),u=n[s],l=i.slice(0),d=ht.size(l),p=At("input",r,a),c=At("indicesInput",o,i.length),f=kt("output",r,l.length),h=[{type:"uint32",data:d},{type:"int32",data:u},{type:"uint32",data:s}];return h.push(..._t(n)),h.push(..._t(i)),h.push(..._t(l)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:h}),getShaderSource:e=>`\n      ${e.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(p,c,f)}\n      ${e.mainStart()}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${f.offsetToIndices("global_idx")};\n\n      var idx = ${c.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${p.type.indices}(outputIndices);\n      ${p.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${p.getByIndices("inputIndices")};\n\n      ${f.setByOffset("global_idx","value")};\n  }`}},yi=e=>pt({axis:e.axis}),bi=(e,t)=>{let n=e.inputs;mi(n),e.compute(gi(e.inputs,t))}})),ru=U((()=>{Ts(),As(),wi=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(3===e.length&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},vi=(e,t)=>{let n=e[0].dims.slice(),r=e[1].dims.slice(),[a,i,o]=gt.getShapeOfGemmResult(n,t.transA,r,t.transB,3===e.length?e[2].dims:void 0),s=[a,i];if(!s)throw new Error("Can't use gemm on the given tensors");let u=ht.size(s),l=[{type:"uint32",data:u},{type:"uint32",data:a},{type:"uint32",data:i},{type:"uint32",data:o},{type:"float32",data:t.alpha},{type:"float32",data:t.beta}],d=["type","type"];return 3===e.length&&(l.push(..._t(e[2].dims)),d.push("rank")),l.push(..._t(s)),{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:l}),getShaderSource:n=>{let r="";t.transA&&t.transB?r="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?r="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?r="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(r="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let a=1===t.alpha?"":"value *= uniforms.alpha;",i=At("a",e[0].dataType,e[0].dims),o=At("b",e[1].dataType,e[1].dims),u=i.type.value,l=null,d=[i,o];3===e.length&&(l=At("c",e[2].dataType,e[2].dims.length),d.push(l));let p=kt("output",e[0].dataType,s.length);return d.push(p),`\n  ${n.registerUniforms([{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}]).declareVariables(...d)}\n\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${u}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${r}\n    }\n\n    ${a}\n    ${null!=l?`let cOffset = ${l.broadcastedIndicesToOffset("vec2(m, n)",p)}; value += ${u}(uniforms.beta) * ${l.getByOffset("cOffset")};`:""}\n    output[global_idx] = value;\n  }`}}},$i=e=>({transA:e.transA,transB:e.transB,alpha:e.alpha,beta:e.beta,cacheKey:`${e.transA};${e.transB};${1===e.alpha}`}),_i=(e,t)=>{wi(e.inputs),e.compute(vi(e.inputs,t))}})),au=U((()=>{$s(),Ts(),As(),xi=(e,t)=>{let n=e[0].dims,r=n,a=ht.sizeToDimension(n,2),i=ht.sizeFromDimension(n,2),o=xt(i),s=i/o,u=[n[0],n[1],s],l=[{type:"uint32",data:i},{type:"uint32",data:s}];return l.push(..._t(u),..._t(u)),{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${o}`,inputDependencies:["rank","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:a},programUniforms:l}),getShaderSource:n=>{let r=At("x",e[0].dataType,u.length,o),a=At("scale",e[1].dataType,e[1].dims),i=At("bias",e[2].dataType,e[2].dims),s=kt("output",e[0].dataType,u.length,o),l=[r,a,i,s],d=r.type.value,p=1===o?"f32":`vec${o}<f32>`;return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${p}, 64>;\n  const workgroupSize = 64u;\n  ${n.registerUniforms([{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}]).declareVariables(...l)}\n  ${n.mainStart(64)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${p}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${p}(${r.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${Et("workgroupShared[0]",o)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${p}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${p}(${r.get("batch","channel","h")}) - ${p}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${Et("workgroupShared[0]",o)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${a.getByOffset("channel")});\n    let channelShift = f32(${i.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${r.get("batch","channel","h")} * ${d}(${p}(channelScale)) + ${d}(${p}(channelShift));\n      ${s.set("batch","channel","h","value")};\n    }\n  }`}}},Si=(e,t,n,r,a,i,o,s)=>{let u=xt(o),l=1===u?"vec2f":`mat2x${u}f`,d=1===u?"f32":`vec${u}f`,p=(e,t)=>`${l}(${e}, ${t})`,c=a*o/u,f=[{type:"uint32",data:Math.ceil(i/64)},{type:"uint32",data:i},{type:"uint32",data:Math.floor(o/u)},{type:"uint32",data:Math.floor(i*o/u)}],h=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${u}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:[a,o,64,2],dataType:1}],dispatchGroup:{x:a*o/u},programUniforms:f}),getShaderSource:e=>{let n=At("input",t.dataType,t.dims,u);return`\n  ${e.declareVariables(n)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${l}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart(64)}\n    let currentImageNumber = global_idx / 64 / uniforms.C;\n    let currentChannelNumber = (global_idx / 64) % uniforms.C;\n    let wgId = global_idx % 64;\n    let wgOffset = wgId * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${St("f32",u)};\n    var squaredSum = ${St("f32",u)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${d}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${p("sum","squaredSum")};\n  }`}},{inputs:[t],outputs:[-1]})[0],m=[{type:"uint32",data:c},{type:"uint32",data:i},{type:"uint32",data:Math.floor(o/u)},{type:"uint32",data:Math.floor(64*o/u)}];return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${u};${s}`,inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:[a,o,2],dataType:1}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:m}),getShaderSource:e=>{let t=At("scale",n.dataType,n.dims,u),a=At("bias",r.dataType,r.dims,u);return`\n  @group(0) @binding(0) var<storage, read> input : array<${l}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${t.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${a.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${l}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${St("f32",u)};\n    var squaredSum = ${St("f32",u)};\n    for (var i: u32 = 0; i < 64; i++) {\n        let value = input[offset + i + currentChannelNumber * 64];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${s}));\n    let channelScale = invStdDev * ${d}(scale[currentChannelNumber]);\n    let channelShift = ${d}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${p("channelScale","channelShift")};\n  }`}},{inputs:[h,n,r],outputs:[-1]})[0]},Ci=(e,t,n)=>{let r=t[0].dims,a=r,i=r[0],o=r[r.length-1],s=ht.sizeFromDimension(r,1)/o,u=xt(o),l=ht.size(a)/u,d=[{type:"uint32",data:s},{type:"uint32",data:Math.floor(o/u)}],p=Si(e,t[0],t[1],t[2],i,s,o,n.epsilon);e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${u}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:a,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d}),getShaderSource:e=>{let n=vt(t[0].dataType),r=1===u?"vec2f":`mat2x${u}f`,i=1===u?n:`vec${u}<${n}>`,o=At("input",t[0].dataType,t[0].dims,u),s=kt("output",t[0].dataType,a,u);return`\n  @group(0) @binding(0) var<storage, read> input : array<${o.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${r}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${s.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${i}(scale[0]), ${i}(scale[1]));\n  }`}},{inputs:[t[0],p]})},Ei=(e,t)=>{"NHWC"===t.format?Ci(e,e.inputs,t):e.compute(xi(e.inputs,t))}})),iu=U((()=>{$s(),Ts(),As(),Ii=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Ti=(e,t,n)=>{let r=e[0].dims,a=e[1],i=e[2],o=r,s=ht.normalizeAxis(t.axis,r.length),u=ht.sizeToDimension(r,s),l=ht.sizeFromDimension(r,s),d=ht.size(a.dims),p=i?ht.size(i.dims):0;if(d!==l||i&&p!==l)throw new Error(`Size of X.shape()[axis:] == ${l}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${d} and bias size of ${p}`);let c=[];for(let e=0;e<r.length;++e)e<s?c.push(r[e]):c.push(1);let f=xt(l),h=["type","type"],m=[{type:"uint32",data:u},{type:"float32",data:l},{type:"uint32",data:Math.floor(l/f)},{type:"float32",data:t.epsilon}];i&&h.push("type");let g=n>1,y=n>2,b=[{dims:o,dataType:e[0].dataType}];return g&&b.push({dims:c,dataType:1}),y&&b.push({dims:c,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${f};${n}`,inputDependencies:h},getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(u/64)},programUniforms:m}),getShaderSource:t=>{let n=vt(e[0].dataType),r=[At("x",e[0].dataType,e[0].dims,f),At("scale",a.dataType,a.dims,f)];return i&&r.push(At("bias",i.dataType,i.dims,f)),r.push(kt("output",e[0].dataType,o,f)),g&&r.push(kt("mean_data_output",1,c)),y&&r.push(kt("inv_std_output",1,c)),`\n  ${t.registerUniforms([{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...r)}\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var meanVector = ${St("f32",f)};\n    var meanSquareVector = ${St("f32",f)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${Ct(n,f,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${Et("meanVector",f)} / uniforms.norm_size;\n    let invStdDev =\n        inverseSqrt(${Et("meanSquareVector",f)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${Ct(n,f,"x[j + offset]")};\n      let f32scale = ${Ct(n,f,"scale[j]")};\n      output[j + offset] = ${r[0].type.value}((f32input - mean) * invStdDev * f32scale\n        ${i?`+ ${Ct(n,f,"bias[j]")}`:""}\n      );\n    }\n\n    ${g?"mean_data_output[global_idx] = mean":""};\n    ${y?"inv_std_output[global_idx] = invStdDev":""};\n  }`}}},Ai=(e,t)=>{Ii(e.inputs),e.compute(Ti(e.inputs,t,e.outputCount))}})),ou=U((()=>{Ts(),Is(),Cs(),Bs(),As(),ks(),ki=(e,t)=>{let n=e[0],r=e[1],a=e[2],i=e[3],o=e[4],s=e[5],u=e[6],l=e[7];if(3!==n.dims.length&&5!==n.dims.length)throw new Error("Input query is expected to have 3 or 5 dimensions");let d,p=n.dims[0],c=n.dims[1],f=3===n.dims.length?n.dims[2]:t.numHeads*n.dims[4],h=c,m=0,g=0,y=Math.floor(f/t.numHeads);if(u&&l){if(4!==u.dims.length)throw new Error('Input "past_key" is expected to have 4 dimensions');if(4!==l.dims.length)throw new Error('Input "past_value" is expected to have 4 dimensions');m=u.dims[2],g=u.dims[2]}else if(u||l)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');if(r){if(3!==n.dims.length)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(r.dims.length<3||r.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(n.dims[0]!==r.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(3===r.dims.length){if(r.dims[2]!==n.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');d=2,h=r.dims[1]}else if(5===r.dims.length){if(r.dims[2]!==t.numHeads||2!==r.dims[3]||r.dims[4]!==y)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(a)throw new Error('Expect "value" be none when "key" has packed kv format.');d=5,h=r.dims[1]}else{if(r.dims[1]!==t.numHeads||r.dims[3]!==y)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');d=0,h=r.dims[2]}}else{if(3!==n.dims.length&&5!==n.dims.length)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(5===n.dims.length&&(n.dims[2]!==t.numHeads||3!==n.dims[3]))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');d=3}if(i){if(1!==i.dims.length)throw new Error('Input "bias" is expected to have 1 dimension');if(a&&5===n.dims.length&&2===n.dims[3])throw new Error("bias is not allowed for packed kv.")}let b=0;if(o){b=8;let e=o.dims;throw 1===e.length?e[0]===p?b=1:e[0]===3*p+2&&(b=3):2===e.length&&e[0]===p&&e[1]===h&&(b=5),8===b?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let w=!1,v=f;if(a){if(3!==a.dims.length&&4!==a.dims.length)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(n.dims[0]!==a.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(3===a.dims.length){if(h!==a.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');v=a.dims[2]}else{if(h!==a.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');v=a.dims[1]*a.dims[3],w=!0}}let $=m+h;if(o)throw new Error("Key padding mask is not supported");if(s)throw new Error("extraAddQk is not supported");if(u)throw new Error("pastKey is not supported");if(l)throw new Error("pastValue is not supported");return{batchSize:p,sequenceLength:c,pastSequenceLength:m,kvSequenceLength:h,totalSequenceLength:$,maxSequenceLength:g,inputHiddenSize:0,hiddenSize:f,vHiddenSize:v,headSize:y,vHeadSize:Math.floor(v/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:b,scale:t.scale,broadcastResPosBias:!1,passPastInKv:w,qkvFormat:d}},Oi=e=>pt({...e}),Ri=pt({perm:[0,2,1,3]}),zi=(e,t,n,r,a,i,o)=>{let s=[r,a,i],u=ht.size(s),l=[{type:"uint32",data:u},{type:"uint32",data:o},{type:"uint32",data:i}];return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:l}),getShaderSource:e=>{let r=kt("qkv_with_bias",t.dataType,s),a=At("qkv",t.dataType,s),i=At("bias",n.dataType,s);return`\n  ${e.registerUniforms([{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}]).declareVariables(a,i,r)}\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`}},{inputs:[t,n],outputs:[-1]})[0]},Bi=(e,t,n,r,a,i,o,s)=>{let u=i;if(o){if(1===r)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return u=zi(e,i,o,t,r,n*a,s),u=u.reshape([t,r,n,a]),e.compute(Wt(u,Ri.perm),{inputs:[u],outputs:[-1]})[0]}return 3===i.dims.length&&(u=i.reshape([t,r,n,a])),e.compute(Wt(u,Ri.perm),{inputs:[u],outputs:[-1]})[0]},Pi=(e,t)=>{let n=ki(e.inputs,t);if(5===e.inputs[0].dims.length)throw new Error("Packed QKV is not implemented");if(5===e.inputs[1]?.dims.length)throw new Error("Packed KV is not implemented");let r=e.inputs[1]&&e.inputs[2]&&4===e.inputs[1].dims.length&&4===e.inputs[2].dims.length,a=Bi(e,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,e.inputs[0],e.inputs[3],0);if(r)return Fn(e,a,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],n,t);let i=Bi(e,n.batchSize,n.numHeads,n.kvSequenceLength,n.headSize,e.inputs[1],e.inputs[3],n.hiddenSize),o=Bi(e,n.batchSize,n.numHeads,n.kvSequenceLength,n.vHeadSize,e.inputs[2],e.inputs[3],2*n.hiddenSize);Fn(e,a,i,o,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],n,t)}})),su=U((()=>{$s(),Ts(),As(),Mi=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(1!==e[0].dataType&&10!==e[0].dataType)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=2*e[0].dims.length===e[1].dims[0];if(4===e.length&&(t=2*e[3].dims[0]===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Di=(e,t,n)=>{let r="";for(let a=t-1;a>=0;--a)r+=`\n            k = i32(${e.indicesGet("indices",a)}) - ${It("uniforms.pads",a,n)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${It("uniforms.x_shape",a,t)})) {\n              break;\n            }\n            offset += k * i32(${It("uniforms.x_strides",a,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${r}\n            value = x[offset];\n          }\n      `},Ni=(e,t,n)=>{let r="";for(let a=t-1;a>=0;--a)r+=`\n                k = i32(${e.indicesGet("indices",a)}) - ${It("uniforms.pads",a,n)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${It("uniforms.x_shape",a,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${It("uniforms.x_shape",a,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${It("uniforms.x_strides",a,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},Wi=(e,t,n)=>{let r="";for(let a=t-1;a>=0;--a)r+=`\n                k = i32(${e.indicesGet("indices",a)}) - ${It("uniforms.pads",a,n)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${It("uniforms.x_shape",a,t)})) {\n                  k = i32(${It("uniforms.x_shape",a,t)}) - 1;\n                }\n                offset += k * i32(${It("uniforms.x_strides",a,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},Ui=(e,t,n)=>{let r="";for(let a=t-1;a>=0;--a)r+=`\n                k = i32(${e.indicesGet("indices",a)}) - ${It("uniforms.pads",a,n)};\n                if (k < 0)  {\n                  k += i32(${It("uniforms.x_shape",a,t)}]);\n                }\n                if (k >= i32(${It("uniforms.x_shape",a,t)})) {\n                  k -= i32(${It("uniforms.x_shape",a,t)});\n                }\n                offset += k * i32(${It("uniforms.x_strides",a,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},Vi=(e,t,n)=>{switch(n.mode){case 0:return Di(e,t,n.pads.length);case 1:return Ni(e,t,n.pads.length);case 2:return Wi(e,t,n.pads.length);case 3:return Ui(e,t,n.pads.length);default:throw new Error("Invalid mode")}},Hi=(e,t)=>{let n=ht.padShape(e[0].dims.slice(),t.pads),r=e[0].dims,a=[{type:"uint32",data:ht.size(n)},{type:"uint32",data:t.pads}];if(0===t.mode){let n=Le(e[0].dataType);a.push({type:n,data:t.value})}return a.push(..._t(e[0].dims),..._t(n)),{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(ht.size(n)/64)},programUniforms:a}),getShaderSource:a=>{let i=kt("output",e[0].dataType,n.length),o=At("x",e[0].dataType,r.length),s=o.type.value,u=Vi(i,r.length,t),l=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return 0===t.mode&&l.push({name:"constant_value",type:s}),`\n            ${a.registerUniforms(l).declareVariables(o,i)}\n            ${a.mainStart()}\n            ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${i.offsetToIndices("global_idx")};\n\n            var value = ${s}(0);\n            ${u}\n            output[global_idx] = value;\n        }`}}},Li=(e,t)=>{if(e.length>1){let n=e[1].getBigInt64Array(),r=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,a=e[0].dims.length,i=new Int32Array(2*a).fill(0);if(e.length>=4){let t=e[3].getBigInt64Array();for(let e=0;e<t.length;e++)i[Number(t[e])]=Number(n[e]),i[Number(t[e])+a]=Number(n[e+t.length])}else n.forEach(((e,t)=>i[Number(t)]=Number(e)));let o=[];return i.forEach((e=>o.push(e))),{mode:t.mode,value:r,pads:o}}return t},Fi=(e,t)=>{Mi(e.inputs);let n=Li(e.inputs,t);e.compute(Hi(e.inputs,n),{inputs:[0]})}})),uu=U((()=>{ue(),Ts(),As(),Gi=e=>{if(p.webgpu.validateInputContent&&(!e||1!==e.length))throw new Error("Pool ops requires 1 input.")},ji=(e,t,n)=>{let r="NHWC"===t.format,a=e.dims.slice();r&&a.splice(1,0,a.pop());let i=Object.hasOwnProperty.call(t,"dilations"),o=t.kernelShape.slice(),s=t.strides.slice(),u=i?t.dilations.slice():[],l=t.pads.slice();mt.adjustPoolAttributes(n,a,o,s,u,l);let d=mt.computePoolOutputShape(n,a,s,u,o,l,t.autoPad),p=Object.assign({},t);i?Object.assign(p,{kernelShape:o,strides:s,pads:l,dilations:u,cacheKey:t.cacheKey}):Object.assign(p,{kernelShape:o,strides:s,pads:l,cacheKey:t.cacheKey});let c=d.slice();return c.push(c.splice(1,1)[0]),[p,r?c:d]},qi=(e,t)=>{let n="NHWC"===t.format,r=[{type:"uint32",data:ht.size(e)},{type:"uint32",data:ht.size(t.kernelShape)}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let e=t.kernelShape[t.kernelShape.length-1],n=t.strides[t.strides.length-1],i=t.pads[t.pads.length/2-1],o=t.pads[t.pads.length-1],s=!!(i+o);r.push({type:"uint32",data:e},{type:"uint32",data:n},{type:"uint32",data:i},{type:"uint32",data:o}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let u=!1;if(2===t.kernelShape.length){let e=t.kernelShape[t.kernelShape.length-2],n=t.strides[t.strides.length-2],i=t.pads[t.pads.length/2-2],o=t.pads[t.pads.length-2];u=!!(i+o),r.push({type:"uint32",data:e},{type:"uint32",data:n},{type:"uint32",data:i},{type:"uint32",data:o}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[r,a,!0,s,u]}{if(n)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let e=ht.computeStrides(t.kernelShape);return r.push({type:"uint32",data:e},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),a.push({name:"kernelStrides",type:"u32",length:e.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length}),[r,a,!!t.pads.reduce(((e,t)=>e+t)),!1,!1]}},Ki=(e,t,n,r,a,i,o,s,u,l,d,p)=>{let c="NHWC"===a.format,f=t.type.value,h=kt("output",t.type.tensor,r);if(a.kernelShape.length<=2){let r="",l="",m="",g=n-(c?2:1);if(r=d?`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${g}] < 0 || xIndices[${g}]\n                      >= uniforms.x_shape[${g}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${i}\n                }`:`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${i}\n                }`,2===a.kernelShape.length){let e=n-(c?3:2);l=p?`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${e}] = indices[${e}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${e}] < 0 || xIndices[${e}] >= uniforms.x_shape[${e}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${e}] = indices[${e}] * uniforms.sh - uniforms.phStart + j;\n                `,m="\n              }\n            "}return`\n            ${e.registerUniforms(u).declareVariables(t,h)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${h.offsetToIndices("global_idx")};\n              var xIndices = ${h.offsetToIndices("global_idx")};\n\n              var value = ${f}(${s});\n              var pad = 0;\n              ${l}\n              ${r}\n              ${m}\n              ${o}\n\n              output[global_idx] = value;\n            }`}{if(c)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let r=a.kernelShape.length,d=a.pads.length,p="";return p=l?`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${i}\n              }`:`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${i}\n            `,`\n            ${e.registerUniforms(u).declareVariables(t,h)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${h.offsetToIndices("global_idx")};\n              var xIndices = ${h.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${r}>;\n\n              var value = ${f}(${s});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${r-1}u; j++) {\n                  offsets[j] = offset / ${It("uniforms.kernelStrides","j",r)};\n                  offset -= offsets[j] * ${It("uniforms.kernelStrides","j",r)};\n                }\n                offsets[${r-1}] = offset;\n\n                isPad = false;\n                for (var j = ${n-r}u; j < ${n}u; j++) {\n                  xIndices[j] = indices[j] * ${It("uniforms.strides",`j - ${n-r}u`,r)}\n                    + offsets[j - ${n-r}u] - ${It("uniforms.pads","j - 2u",d)};\n                  ${p}\n              }\n              ${o}\n\n              output[global_idx] = value;\n            }`}},Yi=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Zi=e=>`${Yi(e)};${e.countIncludePad}`,Qi=e=>`${Yi(e)};${e.storageOrder};${e.dilations}`,Xi=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Ji=(e,t,n,r)=>{let[a,i]=ji(t,r,n),o=At("x",t.dataType,t.dims.length),s=o.type.value,u="";a.countIncludePad?u+=`value /= ${s}(uniforms.kernelSize);`:u+=`value /= ${s}(i32(uniforms.kernelSize) - pad);`;let[l,d,p,c,f]=qi(i,a);return l.push(..._t(t.dims),..._t(i)),{name:e,shaderCache:{hint:`${r.cacheKey};${p};${c};${f}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(ht.size(i)/64)},programUniforms:l}),getShaderSource:e=>Ki(e,o,t.dims.length,i.length,a,"value += x_val;",u,0,d,p,c,f)}},eo=e=>{let t=0!==e.count_include_pad,n=Xi(e);if(0!==n.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let r={countIncludePad:t,...n,cacheKey:""};return{...r,cacheKey:Zi(r)}},to=(e,t)=>{Gi(e.inputs),e.compute(Ji("AveragePool",e.inputs[0],!1,t))},no={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},ro=e=>{let t=e.format;return{format:t,...no,cacheKey:t}},ao=(e,t)=>{Gi(e.inputs),e.compute(Ji("GlobalAveragePool",e.inputs[0],!0,t))},io=(e,t,n,r)=>{let[a,i]=ji(t,r,n),o=At("x",t.dataType,t.dims.length),[s,u,l,d,p]=qi(i,a);return s.push(..._t(t.dims),..._t(i)),{name:e,shaderCache:{hint:`${r.cacheKey};${l};${d};${p}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(ht.size(i)/64)},programUniforms:s}),getShaderSource:e=>Ki(e,o,t.dims.length,i.length,a,"\n      value = max(x_val, value);\n    ","",-1e5,u,l,d,p)}},oo=(e,t)=>{Gi(e.inputs),e.compute(io("MaxPool",e.inputs[0],!1,t))},so=e=>{let t=e.storage_order,n=e.dilations,r=Xi(e);if(0!==t)throw new Error("column major storage order is not yet supported for MaxPool");if(0!==r.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let a={storageOrder:t,dilations:n,...r,cacheKey:""};return{...a,cacheKey:Qi(a)}},uo=e=>{let t=e.format;return{format:t,...no,cacheKey:t}},lo=(e,t)=>{Gi(e.inputs),e.compute(io("GlobalMaxPool",e.inputs[0],!0,t))}})),lu=U((()=>{ue(),$s(),As(),po=(e,t,n)=>{if(e===t||e<t&&n<0||e>t&&n>0)throw new Error("Range these inputs' contents are invalid.")},co=(e,t,n,r)=>{let a=Math.abs(Math.ceil((t-e)/n)),i=[a],o=a,s=Le(r),u=[{type:"uint32",data:o},{type:s,data:e},{type:s,data:n},..._t(i)];return{name:"Range",shaderCache:{hint:`${r}`},getShaderSource:e=>{let t=kt("output",r,i.length),n=t.type.value,a=[{name:"outputSize",type:"u32"},{name:"start",type:n},{name:"delta",type:n}];return`\n        ${e.registerUniforms(a).declareVariables(t)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${n}(global_idx) * uniforms.delta;\n      }`},getRunData:()=>({outputs:[{dims:i,dataType:r}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:u})}},fo=e=>{let t=0,n=0,r=0;6===e.inputs[0].dataType?(t=e.inputs[0].getInt32Array()[0],n=e.inputs[1].getInt32Array()[0],r=e.inputs[2].getInt32Array()[0]):1===e.inputs[0].dataType&&(t=e.inputs[0].getFloat32Array()[0],n=e.inputs[1].getFloat32Array()[0],r=e.inputs[2].getFloat32Array()[0]),p.webgpu.validateInputContent&&po(t,n,r),e.compute(co(t,n,r,e.inputs[0].dataType),{inputs:[]})}})),du=U((()=>{Ts(),Is(),As(),ho=(e,t)=>{if(e.every((e=>e>0||(()=>{throw new Error("Resize requires scales input values to be positive")}))),e.length>0)if("linear"===t.mode){if(!(2===e.length||3===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]||5===e.length&&1===e[0]&&1===e[1]))throw new Error("For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1")}else if("cubic"===t.mode&&!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")},mo=(e,t,n)=>{t.every((e=>e>=0&&e<n||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")})));let r=new Array(n).fill(1);return t.forEach(((t,n)=>r[t]=e[n])),r},go=(e,t,n,r,a,i)=>{let[o,s,u]=n>10?[1,2,3]:[-1,e.length>1?1:-1,-1],l=e[0].dims.length;if(o>0&&e.length>o&&e[o].dims.length>0)e[o].getFloat32Array().forEach((e=>i.push(e)));else if("tf_crop_and_resize"===t.coordinateTransformMode)throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(s>0&&e.length>s&&e[s].dims.length>0){if(e[s].getFloat32Array().forEach((e=>r.push(e))),0!==r.length&&r.length!==l&&n>=18&&r.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");ho(r,t),t.axes.length>0&&mo(r,t.axes,l).forEach(((e,t)=>r[t]=e))}if(u>0&&e.length>u&&(e[u].getBigInt64Array().forEach((e=>a.push(Number(e)))),a.length!==l||n>=18&&a.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(r.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(a.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof r<"u"&&typeof a<"u"&&r.length>0&&a.length>l)throw new Error("Resize requires only of scales or sizes to be specified")},yo=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",bo=(e,t,n)=>`fn getNearestPixelFromOriginal(xOriginal: ${n}, isDownSample: bool) -> ${n} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",wo=(e,t,n)=>{let r=new Array(n).fill(0).concat(new Array(n).fill(1)),a=0===e.length?r:e.slice();return t.length>0?(t.forEach(((e,i)=>{r[e]=a[i],r[i+n]=a[t.length+i]})),r):a},vo=(e,t,n,r)=>{let a=[];if(n.length>0)if(r.length>0){if(e.forEach((e=>a.push(e))),Math.max(...r)>e.length)throw new Error("axes is out of bound");r.forEach(((e,t)=>a[e]=n[t]))}else n.forEach((e=>a.push(e)));else{if(0===t.length)throw new Error("Resize requires either scales or sizes.");a=e.map(((e,n)=>Math.round(e*t[n])))}return a},$o=(e,t,n)=>{let r=(()=>{switch(n.keepAspectRatioPolicy){case"not_larger":return n.axes.length>0?Math.min(...n.axes.map((e=>t[e])),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return n.axes.length>0?Math.max(...n.axes.map((e=>t[e])),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${n.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let a=e.slice();return n.axes.length>0?(n.axes.forEach((e=>t[e]=r)),n.axes.forEach((n=>a[n]=Math.round(e[n]*t[n])))):(t.fill(r,0,t.length),a.forEach(((e,n)=>a[n]=Math.round(e*t[n])))),a},_o=(e,t,n,r,a)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${n.length}> {\n      var original_indices: array<${e.type.value}, ${n.length}>;\n      for (var i:u32 = 0; i < ${n.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${It("uniforms.scales","i",r)};\n        var roi_low = ${It("uniforms.roi","i",a)};\n        var roi_hi = ${It("uniforms.roi",`i + ${t.length}`,a)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${It("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${It("uniforms.output_shape","i",n.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,xo=(e,t,n,r,a,i,o)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${It("uniforms.scales","i",a)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${It("uniforms.roi","i",i)};\n          var roi_hi = ${It("uniforms.roi",`i + ${n.length}`,i)};\n          var input_shape_i = ${It("uniforms.input_shape","i",n.length)};\n          var output_shape_i = ${It("uniforms.output_shape","i",r.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${o} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,So=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${It("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,Co=(e,t,n,r)=>e.rank>r?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",n,"batch")};\n`:"",Eo=(e,t,n,r,a)=>{let[i,o,s,u]=2===n.length?[-1,0,1,-1]:[0,2,3,1],l=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${l} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",o,`max(0, min(row, ${n[o]} - 1))`)};\n      ${e.indicesSet("input_indices",s,`max(0, min(col, ${n[s]} - 1))`)};\n      ${Co(e,u,i,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${l} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${l} = originalIndices[${o}];\n      var col:${l} = originalIndices[${s}];\n      ${r?`if (row < 0 || row > (${n[o]} - 1) || col < 0 || col > (${n[s]} - 1)) {\n        return ${a};\n      }`:""};\n      row = max(0, min(row, ${n[o]} - 1));\n      col = max(0, min(col, ${n[s]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${n.length>2?`u32(originalIndices[${u}])`:"0"};\n      var batch: u32 =  ${n.length>2?`u32(originalIndices[${i}])`:"0"};\n      var x11: ${l} = getInputValue(batch, channel, row1, col1);\n      var x12: ${l} = getInputValue(batch, channel, row1, col2);\n      var x21: ${l} = getInputValue(batch, channel, row2, col1);\n      var x22: ${l} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${l} = abs(row - ${l}(row1));\n      var dx2: ${l} = abs(${l}(row2) - row);\n      var dy1: ${l} = abs(col - ${l}(col1));\n      var dy2: ${l} = abs(${l}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},Io=(e,t,n,r,a,i,o,s,u,l)=>{let d=2===n.length,[p,c]=d?[0,1]:[2,3],f=e.type.value,h=o=>{let d=o===p?"row":"col";return`\n      fn ${d}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${f} {\n        var output_index = ${t.indicesGet("output_indices",o)};\n        var originalIdx: ${f} = getOriginalCoordinateFromResizedCoordinate(output_index, ${a[o]},\n        ${r[o]}, ${n[o]}, ${i[o]}, ${i[o]} + ${n.length});\n        var fractOriginalIdx: ${f} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${s} && (originalIdx < 0 || originalIdx > (${n[o]} - 1))) {\n          return ${u};\n        }\n        var data: array<${f}, 4> = array<${f}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${d}: ${f} = originalIdx + ${f}(i);\n          if (${d} < 0 || ${d} >= ${n[o]}) {\n            ${l?"coefs[i + 1] = 0.0;\n                        continue;":s?`return ${u};`:`${d} = max(0, min(${d}, ${n[o]} - 1));`};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",o,`u32(${d})`)};\n          data[i + 1] = ${o===p?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${h(p)};\n    ${h(c)};\n  fn getCubicInterpolationCoefs(s: ${f}) -> array<${f}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${f}, 4> = array<${f}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${f} = 1.0 - absS;\n    var twoMinusAbsS: ${f} = 2.0 - absS;\n    var onePlusAbsS: ${f} = 1.0 + absS;\n    coeffs[0] = ((${o} * onePlusAbsS - 5 * ${o}) * onePlusAbsS + 8 * ${o}) * onePlusAbsS - 4 * ${o};\n    coeffs[1] = ((${o} + 2) * absS - (${o} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${o} + 2) * oneMinusAbsS - (${o} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${o} * twoMinusAbsS - 5 * ${o}) * twoMinusAbsS + 8 * ${o}) * twoMinusAbsS - 4 * ${o};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${f}, 4>, coefs: array<${f}, 4>) -> ${f} {\n    var coefsSum: ${f} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${f} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},To=(e,t,n,r,a)=>{let[i,o,s,u,l]=3===n.length?[-1,0,1,2,-1]:[0,2,3,4,1],d=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${d} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",o,`max(0, min(depth, ${n[o]} - 1))`)};\n      ${e.indicesSet("input_indices",s,`max(0, min(height, ${n[s]} - 1))`)};\n      ${e.indicesSet("input_indices",u,`max(0, min(width, ${n[u]} - 1))`)};\n      ${Co(e,l,i,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${d} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${d} = originalIndices[${o}];\n      var height:${d} = originalIndices[${s}];\n      var width:${d} = originalIndices[${u}];\n      ${r?`if (depth < 0 || depth > (${n[o]} - 1) || height < 0 || height > (${n[s]} - 1) || width < 0 || (width > ${n[u]} - 1)) {\n      return ${a};\n        }`:""};\n\n    depth = max(0, min(depth, ${n[o]} - 1));\n      height = max(0, min(height, ${n[s]} - 1));\n      width = max(0, min(width, ${n[u]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${n.length>3?`u32(originalIndices[${l}])`:"0"};\n      var batch: u32 =  ${n.length>3?`u32(originalIndices[${i}])`:"0"};\n\n      var x111: ${d} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${d} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${d} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${d} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${d} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${d} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${d} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${d} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${d} = abs(depth - ${d}(depth1));\n      var dx2: ${d} = abs(${d}(depth2) - depth);\n      var dy1: ${d} = abs(height - ${d}(height1));\n      var dy2: ${d} = abs(${d}(height2) - height);\n      var dz1: ${d} = abs(width - ${d}(width1));\n      var dz2: ${d} = abs(${d}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},Ao=(e,t,n,r,a,i)=>{let o=e.dims,s=wo(i,t.axes,o.length),u=vo(o,r,a,t.axes),l=r.slice();0===r.length&&(l=o.map(((e,t)=>0===e?1:u[t]/e)),"stretch"!==t.keepAspectRatioPolicy&&(u=$o(o,l,t)));let d=kt("output",e.dataType,u.length),p=At("input",e.dataType,o.length),c=ht.size(u),f=o.length===u.length&&o.every(((e,t)=>e===u[t])),h="tf_crop_and_resize"===t.coordinateTransformMode,m=t.extrapolationValue,g=p.type.value;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${n}|${l.length>0?l:""}|${a.length>0?a:""}|${s.length>0?s:""}|${f}|${o}`,inputDependencies:["rank"]},getShaderSource:e=>`\n      ${f?"":`\n      ${yo(t.coordinateTransformMode,g)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${So(p,o)};\n              ${bo(t.nearestMode,n,g)};\n              ${xo(p,d,o,u,l.length,s.length,h)};\n              `;case"linear":return`\n              ${_o(d,o,u,l.length,s.length)};\n              ${(()=>{if(2===o.length||4===o.length)return`${Eo(p,d,o,h,m)}`;if(3===o.length||5===o.length)return`${To(p,d,o,h,m)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(2===o.length||4===o.length)return`${Io(p,d,o,u,l,s,t.cubicCoeffA,h,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${e.registerUniform("output_size","u32").registerUniform("scales","f32",l.length).registerUniform("roi","f32",s.length).declareVariables(p,d)}\n      ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${f?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${d.offsetToIndices("global_idx")};\n        var input_indices: ${p.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${p.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${2===o.length||4===o.length?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`,getRunData:()=>({outputs:[{dims:u,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:[{type:"uint32",data:c},{type:"float32",data:l},{type:"float32",data:s},..._t(o),..._t(u)]})}},ko=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Oo=(e,t)=>{let n=[],r=[],a=[],i=ko(e);if(0!==t.antialias)throw Error("Only default value (0) for Antialias attribute is supported");go(e.inputs,t,i,n,r,a),e.compute(Ao(e.inputs[0],t,i,n,r,a),{inputs:[0]})},Ro=e=>{let t=e.antialias,n=e.axes,r=e.coordinateTransformMode,a=e.cubicCoeffA,i=0!==e.excludeOutside,o=e.extrapolationValue,s=e.keepAspectRatioPolicy,u=e.mode,l=""===e.nearestMode?"simple":e.nearestMode;return pt({antialias:t,axes:n,coordinateTransformMode:r,cubicCoeffA:a,excludeOutside:i,extrapolationValue:o,keepAspectRatioPolicy:s,mode:u,nearestMode:l})}})),pu=U((()=>{$s(),Ts(),As(),zo=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],n=e[1],r=e[2];if(t.dataType!==n.dataType||t.dataType!==r.dataType)throw new Error("All inputs must have the same data type");if(3!==t.dims.length&&2!==t.dims.length)throw new Error("Input must be 2D or 3D");if(3!==n.dims.length&&2!==n.dims.length)throw new Error("Skip must be 2D or 3D");let a=t.dims[t.dims.length-1],i=t.dims[t.dims.length-2];if(n.dims[n.dims.length-1]!==a)throw new Error("Skip must have the same hidden size as input");if(n.dims[n.dims.length-2]!==i)throw new Error("Skip must have the same sequence length as input");if(1!==r.dims.length)throw new Error("Gamma must be 1D");if(r.dims[r.dims.length-1]!==a)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let t=e[3];if(1!==t.dims.length)throw new Error("Beta must be 1D");if(t.dims[t.dims.length-1]!==a)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let t=e[4];if(1!==t.dims.length)throw new Error("Bias must be 1D");if(t.dims[t.dims.length-1]!==a)throw new Error("Bias must have the same hidden size as input")}},Bo=(e,t,n,r)=>{let a=e[0].dims,i=ht.size(a),o=a,s=i,u=a.slice(-1)[0],l=r?a.slice(0,-1).concat(1):[],d=e.length>3,p=e.length>4,c=r&&n>1,f=r&&n>2,h=n>3,m=xt(u),g=[{type:"uint32",data:s},{type:"uint32",data:m},{type:"uint32",data:u},{type:"float32",data:t.epsilon}],y=[{dims:o,dataType:e[0].dataType}];return n>1&&y.push({dims:l,dataType:1}),n>2&&y.push({dims:l,dataType:1}),n>3&&y.push({dims:a,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${m};${c};${f};${h}`,inputDependencies:e.map(((e,t)=>"type"))},getShaderSource:t=>{let n=[At("x",e[0].dataType,e[0].dims,m),At("skip",e[1].dataType,e[1].dims,m),At("gamma",e[2].dataType,e[2].dims,m)];d&&n.push(At("beta",e[3].dataType,e[3].dims,m)),p&&n.push(At("bias",e[4].dataType,e[4].dims,m)),n.push(kt("output",e[0].dataType,o,m)),c&&n.push(kt("mean_output",1,l)),f&&n.push(kt("inv_std_output",1,l)),h&&n.push(kt("input_skip_bias_sum",e[0].dataType,o,m));let r=vt(e[0].dataType);return`\n\n      ${t.registerUniforms([{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...n)}\n\n      ${t.mainStart()}\n        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        let offset = global_idx * hidden_size_vectorized;\n        var sum = ${St("f32",m)};\n        var squareSum = ${St("f32",m)};\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${p?"bias[i]":"0.0"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${h?"input_skip_bias_sum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32_value = ${Ct(r,m,"value")};\n          sum += f32_value;\n          squareSum += f32_value * f32_value;\n        }\n        let mean = ${Et("sum",m)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${Et("squareSum",m)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);\n        ${c?"mean_output[global_idx] = mean;":""}\n        ${f?"inv_std_output[global_idx] = inv_std_dev;":""}\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${r}(mean)) * ${r}(inv_std_dev) * gamma[i] + ${d?"beta[i]":"0.0"};\n        }\n      }`},getRunData:()=>({outputs:y,dispatchGroup:{x:Math.ceil(s/u/64)},programUniforms:g})}},Po=(e,t)=>{zo(e.inputs);let n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(Bo(e.inputs,t,e.outputCount,!1),{outputs:n})}})),cu=U((()=>{$s(),Ts(),Is(),As(),Mo=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(0!==t.axes.length){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach(((t,n)=>{if(6!==e[n+1].dataType&&7!==e[n+1].dataType)throw new Error(`Input ${n} must be an array of int32 or int64`)}))},Do=(e,t)=>{let n=[];if(e.length>t)if(7===e[t].dataType)e[t].getBigInt64Array().forEach((e=>n.push(Number(e))));else{if(6!==e[t].dataType)throw new Error(`Input ${t} must be an array of int32 or int64`);e[t].getInt32Array().forEach((e=>n.push(Number(e))))}return n},No=(e,t)=>{if(e.length>1){let t=Do(e,1),n=Do(e,2),r=Do(e,3);return 0===r.length&&(r=[...Array(e[0].dims.length).keys()]),pt({starts:t,ends:n,axes:r})}return t},Wo=(e,t,n,r,a)=>{let i=e;return e<0&&(i+=n[r[t]]),a[t]<0?Math.max(0,Math.min(i,n[r[t]]-1)):Math.max(0,Math.min(i,n[r[t]]))},Uo=(e,t,n)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${n.length}; i >= 0; i--) {\n            let input_shape_i = ${It("uniforms.input_shape","i",n.length)};\n            let steps_i = ${It("uniforms.steps","i",n.length)};\n            let signs_i = ${It("uniforms.signs","i",n.length)};\n            let starts_i = ${It("uniforms.starts","i",n.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,Vo=(e,t)=>{let n=e[0].dims,r=ht.size(n),a=t.axes.length>0?ht.normalizeAxes(t.axes,n.length):[...Array(n.length).keys()],i=Do(e,4);i.forEach((e=>0!==e||(()=>{throw new Error("step cannot be 0")}))),0===i.length&&(i=Array(a.length).fill(1));let o=t.starts.map(((e,t)=>Wo(e,t,n,a,i))),s=t.ends.map(((e,t)=>Wo(e,t,n,a,i)));if(a.length!==o.length||a.length!==s.length)throw new Error("start, ends and axes should have the same number of elements");if(a.length!==n.length)for(let e=0;e<n.length;++e)a.includes(e)||(o.splice(e,0,0),s.splice(e,0,n[e]),i.splice(e,0,1));let u=i.map((e=>Math.sign(e)));i.forEach(((e,t,n)=>{if(e<0){let r=(s[t]-o[t])/e,a=o[t],u=a+r*i[t];o[t]=u,s[t]=a,n[t]=-e}}));let l=n.slice(0);a.forEach(((e,t)=>{l[e]=Math.ceil((s[e]-o[e])/i[e])}));let d={dims:l,dataType:e[0].dataType},p=kt("output",e[0].dataType,l.length),c=At("input",e[0].dataType,e[0].dims.length),f=ht.size(l),h=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:o.length},{name:"signs",type:"i32",length:u.length},{name:"steps",type:"u32",length:i.length}],m=[{type:"uint32",data:f},{type:"uint32",data:o},{type:"int32",data:u},{type:"uint32",data:i},..._t(e[0].dims),..._t(l)];return{name:"Slice",shaderCache:{hint:`${u.length}_${o.length}_${i.length}`,inputDependencies:["rank"]},getShaderSource:e=>`\n      ${e.registerUniforms(h).declareVariables(c,p)}\n        ${Uo(c,p,n)}\n        ${e.mainStart()}\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${p.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${p.setByOffset("global_idx",c.getByIndices("input_indices"))}\n      }`,getRunData:()=>({outputs:[d],dispatchGroup:{x:Math.ceil(r/64)},programUniforms:m})}},Ho=(e,t)=>{Mo(e.inputs,t);let n=No(e.inputs,t);e.compute(Vo(e.inputs,n),{inputs:[0]})},Lo=e=>{let t=e.starts,n=e.ends,r=e.axes;return pt({starts:t,ends:n,axes:r})}})),fu=U((()=>{Ts(),Is(),As(),Fo=e=>{if(!e||1!==e.length)throw new Error("Softmax op requires 1 input.")},Go=(e,t)=>{let n=e.dims,r=ht.size(n),a=t.axis;if(a<0&&(a=n.length+a),a<n.length-1)throw new Error("softmax only supports last axis for now.");let i=n[a],o=r/i,s=xt(i),u=i/s,l=At("x",e.dataType,e.dims,s),d=kt("result",e.dataType,e.dims,s),p=l.type.value,c="f32"===vt(e.dataType)?`var threadMax = ${p}(-3.402823e+38f);`:`var threadMax = ${p}(-65504.0h);`;return{name:"Softmax",shaderCache:{hint:`${s}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:n,dataType:e.dataType}],dispatchGroup:{x:o},programUniforms:[{type:"uint32",data:u}]}),getShaderSource:e=>`\n      var<workgroup> rowMaxShared : ${p};\n      var<workgroup> rowSumShared : ${p};\n      var<workgroup> threadShared : array<${p}, 64>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${p} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${p}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${e.registerUniform("packedCols","i32").declareVariables(l,d)}\n      ${e.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = 64;\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${c}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${p}(${((e,t)=>4===t?`max(max(${e}.x, ${e}.y), max(${e}.z, ${e}.w))`:2===t?`max(${e}.x, ${e}.y)`:3===t?`max(max(${e}.x, ${e}.y), ${e}.z)`:e)("threadShared[0]",s)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${p}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${p}(${Et("threadShared[0]",s)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`}},jo=(e,t)=>{Fo(e.inputs),e.compute(Go(e.inputs[0],t))},qo=e=>pt({axis:e.axis})})),hu=U((()=>{Ts(),Is(),As(),Ko=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Yo=(e,t)=>{let n=[],r=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),r=n.length),pt({numOutputs:r,axis:t.axis,splitSizes:n})},Zo=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${It("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,Qo=e=>{let t=e.length,n=[];for(let r=0;r<t;++r){let a=e[r].setByIndices("indices","input[global_idx]");1===t?n.push(a):0===r?n.push(`if (output_number == ${r}u) { ${a} }`):r===t-1?n.push(`else { ${a} }`):n.push(`else if (output_number == ${r}) { ${a} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${n.join("\n")}\n      }`},Xo=(e,t)=>{let n=e[0].dims,r=ht.size(n),a=e[0].dataType,i=ht.normalizeAxis(t.axis,n.length),o=new Array(t.numOutputs),s=At("input",a,n),u=new Array(t.numOutputs),l=[],d=[],p=0,c=[{type:"uint32",data:r}];for(let r=0;r<t.numOutputs;r++){p+=t.splitSizes[r],u[r]=p;let i=n.slice();i[t.axis]=t.splitSizes[r],d.push(i),o[r]=kt(`output${r}`,a,i),l.push({dims:d[r],dataType:e[0].dataType})}return c.push({type:"uint32",data:u}),c.push(..._t(n)),d.forEach((e=>c.push(..._t(e)))),{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:e=>`\n  ${e.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",u.length).declareVariables(s,...o)}\n  ${Zo(u.length)}\n  ${Qo(o)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${s.offsetToIndices("global_idx")};\n    var index = ${s.indicesGet("indices",i)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${It("uniforms.size_in_split_axis","output_number - 1u",u.length)};\n      ${s.indicesSet("indices",i,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`,getRunData:()=>({outputs:l,dispatchGroup:{x:Math.ceil(r/64)},programUniforms:c})}},Jo=(e,t)=>{Ko(e.inputs);let n=1===e.inputs.length?t:Yo(e.inputs,t);e.compute(Xo(e.inputs,n),{inputs:[0]})},es=e=>{let t=e.axis,n=e.splitSizes,r=e.numOutputs<0?n.length:e.numOutputs;if(r!==n.length)throw new Error("numOutputs and splitSizes lengh must be equal");return pt({axis:t,numOutputs:r,splitSizes:n})}})),mu=U((()=>{$s(),Ts(),As(),ts=e=>Array.from(e.getBigInt64Array(),Number),ns=e=>{if(!e||2!==e.length)throw new Error("Tile requires 2 inputs.");if(1!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error("Tile only support float, int32, and uint32 data types");if(7!==e[1].dataType)throw new Error("Tile `repeats` input should be of int64 data type");if(1!==e[1].dims.length)throw new Error("Tile `repeats` input should be 1-D");if(ts(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},rs=(e,t)=>{let n=[];for(let r=0;r<e.length;++r)n.push(e[r]*t[r]);return n},as=e=>{let t=e[0].dims,n=ts(e[1]),r=rs(t,n),a=ht.size(r),i=e[0].dataType,o=At("input",i,t.length),s=kt("output",i,r.length);return{name:"Tile",shaderCache:{hint:`${n}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:"uint32",data:a},..._t(e[0].dims),..._t(r)]}),getShaderSource:e=>`\n      const inputShape = ${o.indices(...t)};\n      ${e.registerUniform("output_size","u32").declareVariables(o,s)}\n      ${e.mainStart()}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${s.offsetToIndices("global_idx")};\n      var input_indices: ${o.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${o.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${s.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${o.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${s.setByOffset("global_idx",o.getByIndices("input_indices"))}\n    }`}},is=e=>{ns(e.inputs),e.compute(as(e.inputs),{inputs:[0]})}})),gu=U((()=>{$s(),Ts(),As(),os=(e,t,n,r,a)=>{let i,o=kt("output_data",a,n.length,4),s=At("a_data",t[1].dataType,t[1].dims.length,4),u=At("b_data",t[2].dataType,t[2].dims.length,4),l=At("c_data",t[0].dataType,t[0].dims.length,4),d=(e,t,n)=>`select(${t}, ${e}, ${n})`;if(r){let e=(e,t,n="")=>{let r=`a_data[index_a${t}][component_a${t}]`,a=`b_data[index_b${t}][component_b${t}]`,i=`bool(c_data[index_c${t}] & ${4278190080>>>8*(3-t)}u)`;return`\n            let output_indices${t} = ${o.offsetToIndices(`global_idx * 4u + ${t}u`)};\n            let offset_a${t} = ${s.broadcastedIndicesToOffset(`output_indices${t}`,o)};\n            let offset_b${t} = ${u.broadcastedIndicesToOffset(`output_indices${t}`,o)};\n            let offset_c${t} = ${l.broadcastedIndicesToOffset(`output_indices${t}`,o)};\n            let index_a${t} = offset_a${t} / 4u;\n            let index_b${t} = offset_b${t} / 4u;\n            let index_c${t} = offset_c${t} / 4u;\n            let component_a${t} = offset_a${t} % 4u;\n            let component_b${t} = offset_b${t} % 4u;\n            ${e}[${t}] = ${n}(${d(r,a,i)});\n          `};i=9===a?`\n            var data = vec4<u32>(0);\n            ${e("data",0,"u32")}\n            ${e("data",1,"u32")}\n            ${e("data",2,"u32")}\n            ${e("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${e("output_data[global_idx]",0)}\n            ${e("output_data[global_idx]",1)}\n            ${e("output_data[global_idx]",2)}\n            ${e("output_data[global_idx]",3)}\n          `}else i=o.setByOffset("global_idx",d(s.getByOffset("global_idx"),u.getByOffset("global_idx"),l.getByOffset("global_idx")));return`\n        ${e.registerUniform("vec_size","u32").declareVariables(l,s,u,o)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${i}\n      }`},ss=e=>{let t=e[1].dims,n=e[2].dims,r=e[0].dims,a=e[1].dataType,i=!(ht.areEqual(t,n)&&ht.areEqual(n,r)),o=t,s=ht.size(t);if(i){let e=ft.calcShape(ft.calcShape(t,n,!1),r,!1);if(!e)throw new Error("Can't perform where op on the given tensors");o=e,s=ht.size(o)}let u=Math.ceil(s/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:t=>os(t,e,o,i,a),getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(s/64/4)},programUniforms:[{type:"uint32",data:u},..._t(r),..._t(t),..._t(n),..._t(o)]})}},us=e=>{e.compute(ss(e.inputs))}})),yu=U((()=>{zs(),Bs(),Ps(),Ms(),Ns(),Ws(),Us(),Ks(),Qs(),Xs(),Js(),eu(),tu(),nu(),ru(),au(),iu(),qs(),ou(),su(),uu(),lu(),Rs(),du(),pu(),cu(),fu(),hu(),mu(),ks(),Ds(),gu(),ls=new Map([["Abs",[nr]],["Acos",[rr]],["Acosh",[ar]],["Add",[Fr]],["ArgMax",[Nn,Wn]],["ArgMin",[Dn,Wn]],["Asin",[ir]],["Asinh",[or]],["Atan",[sr]],["Atanh",[ur]],["Attention",[jn]],["AveragePool",[to,eo]],["BatchNormalization",[Zn]],["BiasAdd",[Jn]],["BiasSplitGelu",[Ur]],["Cast",[dr,lr]],["Ceil",[fr]],["Clip",[cr]],["Concat",[aa,ia]],["Conv",[Ra,Aa]],["ConvTranspose",[ja,Va]],["Cos",[hr]],["Cosh",[mr]],["CumSum",[Ka,Ya]],["Div",[Gr]],["Einsum",[ai,ii]],["Elu",[yr,gr]],["Equal",[jr]],["Erf",[wr]],["Exp",[vr]],["Expand",[di]],["Floor",[$r]],["FusedConv",[Ra,Aa]],["Gather",[hi,fi]],["GatherElements",[bi,yi]],["Gelu",[_r]],["Gemm",[_i,$i]],["GlobalAveragePool",[ao,ro]],["GlobalMaxPool",[lo,uo]],["Greater",[Zr]],["GreaterOrEqual",[Xr]],["HardSigmoid",[kr,Ar]],["InstanceNormalization",[Ei]],["LayerNormalization",[Ai]],["LeakyRelu",[xr,gr]],["Less",[Qr]],["LessOrEqual",[Jr]],["Log",[Dr]],["MatMul",[Sa]],["MaxPool",[oo,so]],["Mul",[qr]],["MultiHeadAttention",[Pi,Oi]],["Neg",[Cr]],["Not",[Sr]],["Pad",[Fi]],["Pow",[Kr]],["Range",[fo]],["Reciprocal",[Er]],["ReduceMin",[On]],["ReduceMean",[En]],["ReduceMax",[kn]],["ReduceSum",[zn]],["ReduceProd",[Rn]],["ReduceL1",[In]],["ReduceL2",[Tn]],["ReduceLogSum",[Pn]],["ReduceLogSumExp",[An]],["ReduceSumSquare",[Bn]],["Relu",[Ir]],["Resize",[Oo,Ro]],["Sigmoid",[Tr]],["Sin",[Or]],["Sinh",[Rr]],["Slice",[Ho,Lo]],["SkipLayerNormalization",[Po]],["Split",[Jo,es]],["Sqrt",[zr]],["Softmax",[jo,qo]],["Sub",[Yr]],["Tan",[Br]],["Tanh",[Pr]],["ThresholdedRelu",[Mr,gr]],["Tile",[is]],["Transpose",[Ut,Vt]],["Where",[us]]])})),bu=U((()=>{ue(),xs(),As(),ds=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,n,r,a){A(e.programInfo.name);let i=this.backend.device,o=this.backend.getComputePassEncoder();this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber),o.setPipeline(e.computePipeline);let s=[];for(let e of t)s.push({binding:s.length,resource:{buffer:e.buffer}});for(let e of n)s.push({binding:s.length,resource:{buffer:e.buffer}});a&&s.push({binding:s.length,resource:a});let u=i.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:s,label:e.programInfo.name});o.setBindGroup(0,u),o.dispatchWorkgroups(...r),this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||"at-passes"===this.backend.queryType)&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),k(e.programInfo.name)}dispose(){}build(e,t){A(e.name);let n=this.backend.device,r=[];n.features.has("shader-f16")&&r.push("enable f16;");let a=zt(t),i=e.getShaderSource(a),o=`${r.join("\n")}\n${a.additionalImplementations}\n${i}`,s=n.createShaderModule({code:o,label:e.name});nt("verbose",(()=>`[WebGPU] ${e.name} shader code: ${o}`));let u=n.createComputePipeline({compute:{module:s,entryPoint:"main"},layout:"auto",label:e.name});return k(e.name),{programInfo:e,computePipeline:u}}normalizeDispatchGroupSize(e){let t="number"==typeof e?e:e.x,n="number"==typeof e?1:e.y||1,r="number"==typeof e?1:e.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=a&&n<=a&&r<=a)return[t,n,r];let i=t*n*r,o=Math.ceil(Math.sqrt(i));if(o>a){if(o=Math.ceil(Math.cbrt(i)),o>a)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[o,o,o]}return[o,o,1]}}})),wu=U((()=>{ue(),$s(),xs(),Ss(),Es(),yu(),bu(),ps=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let n=[];for(let r=0;r<e.length;++r){let a=e[r].dataType;switch(t[r]){case"none":n.push("");break;case"type":n.push(`${a}`);break;case"rank":{let t=e[r].dims.length;n.push(`${a};${t}`);break}case"dims":{let t=e[r].dims.join(",");n.push(`${a};${t}`);break}default:throw new Error(`unsupported input dependency: ${t[r]}`)}}return n.join("|")},cs=(e,t,n)=>{let r=e.name;return e.shaderCache?.hint&&(r+="["+e.shaderCache.hint+"]"),r+=":"+n+`:${ps(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,r},fs=class{constructor(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(null===this.currentKernelId)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;let n=[],r={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n};t.features.has("chromium-experimental-timestamp-query-inside-passes")?n.push("chromium-experimental-timestamp-query-inside-passes"):t.features.has("timestamp-query")&&n.push("timestamp-query"),t.features.has("shader-f16")&&n.push("shader-f16"),this.device=await t.requestDevice(r),this.gpuDataManager=lt(this),this.programManager=new ds(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,et(e.logLevel,!!e.debug),this.device.onuncapturederror=e=>{e.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${e.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e={};"at-passes"===this.queryType&&(e.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:2*this.pendingDispatchNumber,endOfPassWriteIndex:2*this.pendingDispatchNumber+1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(e)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;let e;A(),this.endComputePass(),"none"!==this.queryType&&(this.commandEncoder.resolveQuerySet(this.querySet,0,2*this.pendingDispatchNumber,this.queryResolveBuffer,0),e=this.device.createBuffer({size:2*this.pendingDispatchNumber*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,2*this.pendingDispatchNumber*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,"none"!==this.queryType&&e.mapAsync(GPUMapMode.READ).then((()=>{let t=new BigUint64Array(e.getMappedRange()),n=this.pendingQueries.get(e);for(let e=0;e<t.length/2;e++){let r=n[e],a=r.kernelId,i=this.kernels.get(a),o=i.kernelType,s=i.kernelName,u=r.programName,l=r.inputTensorViews,d=r.outputTensorViews,p=t[2*e],c=t[2*e+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=p);let f=Number(p-this.queryTimeBase),h=Number(c-this.queryTimeBase);if(!Number.isSafeInteger(f)||!Number.isSafeInteger(h))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:l.map((e=>({dims:e.dims,dataType:Le(e.dataType)}))),outputsMetadata:d.map((e=>({dims:e.dims,dataType:Le(e.dataType)}))),kernelId:a,kernelType:o,kernelName:s,programName:u,startTime:f,endTime:h});else{let e="";l.forEach(((t,n)=>{e+=`input[${n}]: [${t.dims}] | ${Le(t.dataType)}, `}));let t="";d.forEach(((e,n)=>{t+=`output[${n}]: [${e.dims}] | ${Le(e.dataType)}, `})),console.log(`[profiling] kernel "${a}|${o}|${s}|${u}" ${e}${t}execution time: ${h-f} ns`)}I("GPU",`${u}::${p}::${c}`)}e.unmap(),this.pendingQueries.delete(e)})),k()}run(e,t,n,r,a){A(e.name);let i=[];for(let e=0;e<t.length;++e){let n=this.gpuDataManager.get(t[e].data);if(!n)throw new Error(`no GPU data for input: ${t[e].data}`);i[e]=n}let{outputs:o,dispatchGroup:s,programUniforms:u}=e.getRunData(t),l=0===n.length?o.map(((e,t)=>t)):n;if(l.length!==o.length)throw new Error(`Output size ${l.length} must be equal to ${o.length}.`);let d,p=[],c=[];for(let e=0;e<o.length;++e){if(!Number.isInteger(l[e])||l[e]<-3||l[e]>=o.length)throw new Error(`Invalid output index: ${l[e]}`);if(-3===l[e])continue;let t=-1===l[e],n=-2===l[e],i=t||n?a(o[e].dataType,o[e].dims):r(l[e],o[e].dataType,o[e].dims),s=this.gpuDataManager.get(i.data);if(!s)throw new Error(`no GPU data for output: ${i.data}`);if(t&&this.temporaryData.push(s),n){let e=this.kernelPersistentData.get(this.currentKernelId);e||(e=[],this.kernelPersistentData.set(this.currentKernelId,e)),e.push(s)}p.push(i),c.push(s)}if(u){let e=0,t=[];u.forEach((n=>{let r="number"==typeof n.data?[n.data]:n.data;if(0===r.length)return;let a,i,o="float16"===n.type?2:4;"float16"===n.type?(i=r.length>4?16:r.length>2?8:r.length*o,a=r.length>4?16:o*r.length):(i=r.length<=2?r.length*o:16,a=16),e=Math.ceil(e/i)*i,t.push(e);let s="float16"===n.type?8:4;e+=r.length>4?Math.ceil(r.length/s)*a:r.length*o}));let n=16;e=Math.ceil(e/n)*n;let r=new ArrayBuffer(e);u.forEach(((e,n)=>{let a=t[n],i="number"==typeof e.data?[e.data]:e.data;"int32"===e.type?new Int32Array(r,a,i.length).set(i):"uint32"===e.type?new Uint32Array(r,a,i.length).set(i):"float16"===e.type?new Uint16Array(r,a,i.length).set(i):new Float32Array(r,a,i.length).set(i)}));let a=this.gpuDataManager.create(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(a.buffer,0,r,0,e),this.gpuDataManager.release(a.id),d={offset:0,size:e,buffer:a.buffer}}let f=this.programManager.normalizeDispatchGroupSize(s),h=1===f[1]&&1===f[2],m=cs(e,t,h),g=this.programManager.getArtifact(m);if(g||(g=this.programManager.build(e,f),this.programManager.setArtifact(m,g),nt("info",(()=>`[artifact] key: ${m}, programName: ${e.name}`))),nt("info",(()=>`[ProgramManager] run "${e.name}" (key=${m}) with ${f[0]}x${f[1]}x${f[2]}`)),"none"!==this.queryType){let e={kernelId:this.currentKernelId,programName:g.programInfo.name,inputTensorViews:t,outputTensorViews:p};this.pendingKernels.push(e)}return this.programManager.run(g,i,c,f,d),k(e.name),p}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,n,r){let a=ls.get(e);if(!a)throw new Error(`kernel not implemented: ${e}`);let i={kernelType:e,kernelName:r,kernelEntry:a[0],attributes:[a[1],n]};this.kernels.set(t,i)}releaseKernel(e){let t=this.kernelPersistentData.get(e);if(t){for(let e of t)this.gpuDataManager.release(e.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,n){let r=this.kernels.get(e);if(!r)throw new Error(`kernel not created: ${e}`);let a=r.kernelType,i=r.kernelName,o=r.kernelEntry,s=r.attributes;if(null!==this.currentKernelId)throw new Error(`kernel "[${a}] ${i}" is not allowed to be called recursively`);this.currentKernelId=e,s[0]&&(s[1]=s[0](s[1]),s[0]=void 0),nt("info",(()=>`[WebGPU] Start to run kernel "[${a}] ${i}"...`));let u=this.env.debug;this.temporaryData=[];try{return u&&this.device.pushErrorScope("validation"),o(t,s[1]),0}catch(e){return n.push(Promise.resolve(`[WebGPU] Kernel "[${a}] ${i}" failed. ${e}`)),1}finally{u&&n.push(this.device.popErrorScope().then((e=>e?`GPU validation error for kernel "[${a}] ${i}": ${e.message}`:null)));for(let e of this.temporaryData)this.gpuDataManager.release(e.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,n,r){let a=this.sessionExternalDataMapping.get(e);a||(a=new Map,this.sessionExternalDataMapping.set(e,a));let i=a.get(t),o=this.gpuDataManager.registerExternalBuffer(n,r,i?.[1]);return a.set(t,[o,n]),o}unregisterBuffers(e){let t=this.sessionExternalDataMapping.get(e);t&&(t.forEach((e=>this.gpuDataManager.unregisterExternalBuffer(e[1]))),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,n){return async()=>{let r=await st(this,e,t);return rt(r.buffer,n)}}writeTimestamp(e){"inside-passes"===this.queryType&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",("default"===this.env.webgpu.profiling?.mode||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),"none"!==this.queryType&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2*this.maxDispatchNumber}),this.queryResolveBuffer=this.device.createBuffer({size:2*this.maxDispatchNumber*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}onRunStart(){this.setQueryType()}}})),vu={};H(vu,{init:()=>xu});var $u,_u,xu,Su,Cu,Eu,Iu,Tu,Au,ku,Ou,Ru,zu,Bu,Pu,Mu,Du,Nu,Wu,Uu,Vu,Hu,Lu,Fu,Gu,ju,qu,Ku,Yu,Zu,Qu,Xu,Ju,el,tl,nl,rl,al,il=U((()=>{$s(),wu(),xs(),Ts(),$u=class e{constructor(e,t,n,r){this.module=e,this.dataType=t,this.data=n,this.dims=r}getFloat32Array(){if(1!==this.dataType)throw new Error("Invalid data type");let e=ht.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)}getBigInt64Array(){if(7!==this.dataType)throw new Error("Invalid data type");let e=ht.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)}getInt32Array(){if(6!==this.dataType)throw new Error("Invalid data type");let e=ht.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)}reshape(t){if(ht.size(t)!==ht.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},_u=class{constructor(e,t,n){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0;let r=e.HEAPU32,a=n>>>2;this.opKernelContext=r[a++];let i=r[a++];this.outputCount=r[a++],this.customDataOffset=r[a++],this.customDataSize=r[a++];let o=[];for(let t=0;t<i;t++){let t=r[a++],n=r[a++],i=r[a++],s=[];for(let e=0;e<i;e++)s.push(r[a++]);o.push(new $u(e,t,n,s))}this.inputs=o}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(e,t){let n=t?.inputs?.map((e=>"number"==typeof e?this.inputs[e]:e))??this.inputs,r=t?.outputs??[];return this.backend.run(e,n,r,((e,t,n)=>new $u(this.module,t,this.output(e,n),n)),((e,t)=>{let n=Fe(e);if(!n)throw new Error(`Unsupported data type: ${e}`);let r=n*ht.size(t);return new $u(this.module,e,this.backend.gpuDataManager.create(r).id,t)}))}output(e,t){let n=this.module.stackSave();try{let n=this.module.stackAlloc(4*(1+t.length)),r=n>>2;this.module.HEAPU32[r++]=t.length;for(let e=0;e<t.length;e++)this.module.HEAPU32[r++]=t[e];return this.module._JsepOutput(this.opKernelContext,e,n)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(n)}}},xu=async(e,t,n)=>{let r=e.jsepInit;if(!r)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let a=new fs;await a.initialize(t,n),r(a,(e=>a.alloc(e)),(e=>a.free(e)),((t,n,r,i=!1)=>{if(i)nt("verbose",(()=>`[WebGPU] jsepCopyGpuToGpu: src=${t}, dst=${n}, size=${r}`)),a.memcpy(t,n);else{nt("verbose",(()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${t}, gpuDataId=${n}, size=${r}`));let i=e.HEAPU8.subarray(t>>>0,(t>>>0)+r);a.upload(n,i)}}),(async(t,n,r)=>{nt("verbose",(()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${t}, dataOffset=${n}, size=${r}`)),await a.download(t,(()=>e.HEAPU8.subarray(n>>>0,(n>>>0)+r)))}),((t,n,r)=>a.createKernel(t,n,r,e.UTF8ToString(e._JsepGetNodeName(n)))),(e=>a.releaseKernel(e)),((t,n,r,i)=>{nt("verbose",(()=>`[WebGPU] jsepRun: sessionHandle=${r}, kernel=${t}, contextDataOffset=${n}`));let o=new _u(e,a,n);return a.computeKernel(t,o,i)}))}})),ol=U((()=>{ws(),vs(),$s(),ys(),bs(),_s(),Su=(e,t)=>{0!==Re()._OrtInit(e,t)&&Pe("Can't initialize onnxruntime.")},Cu=async e=>{Su(e.wasm.numThreads,je(e.logLevel))},Eu=async(e,t)=>{if("webgpu"===t||"webnn"===t){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let t=await navigator.gpu.requestAdapter();if(!t)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let n=(il(),L(vu)).init;await n(Re(),e,t)}},Iu=new Map,Tu=e=>{let t=Re(),n=t.stackSave();try{let n=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,n,n+4)&&Pe("Can't get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(n)}},Au=e=>{let t=Re(),n=t._malloc(e.byteLength);if(0===n)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,n),[n,e.byteLength]},ku=async(e,t)=>{let n,r,a=Re();Array.isArray(e)?[n,r]=e:e.buffer===a.HEAPU8.buffer?[n,r]=[e.byteOffset,e.byteLength]:[n,r]=Au(e);let i=0,o=0,s=0,u=[],l=[],d=[];try{if([o,u]=Ve(t),t?.externalData&&a.mountExternalData){let e=[];for(let n of t.externalData){let t="string"==typeof n?n:n.path;e.push(Ye("string"==typeof n?n:n.data).then((e=>{a.mountExternalData(t,e)})))}await Promise.all(e)}i=await a._OrtCreateSession(n,r,o),0===i&&Pe("Can't create a session.");let[e,p]=Tu(i),c=[],f=[],h=[];for(let t=0;t<e;t++){let e=a._OrtGetInputName(i,t);0===e&&Pe("Can't get an input name."),l.push(e),c.push(a.UTF8ToString(e))}for(let e=0;e<p;e++){let n=a._OrtGetOutputName(i,e);0===n&&Pe("Can't get an output name."),d.push(n);let r=a.UTF8ToString(n);f.push(r);{let e="string"==typeof t?.preferredOutputLocation?t.preferredOutputLocation:t?.preferredOutputLocation?.[r]??"cpu";if("cpu"!==e&&"cpu-pinned"!==e&&"gpu-buffer"!==e)throw new Error(`Not supported preferred output location: ${e}.`);h.push(e)}}let m=null;return h.some((e=>"gpu-buffer"===e))&&(s=a._OrtCreateBinding(i),0===s&&Pe("Can't create IO binding."),m={handle:s,outputPreferredLocations:h,outputPreferredLocationsEncoded:h.map((e=>Ke(e)))}),Iu.set(i,[i,l,d,m]),[i,c,f]}catch(e){throw l.forEach((e=>a._OrtFree(e))),d.forEach((e=>a._OrtFree(e))),0!==s&&a._OrtReleaseBinding(s),0!==i&&a._OrtReleaseSession(i),e}finally{a._free(n),0!==o&&a._OrtReleaseSessionOptions(o),u.forEach((e=>a._free(e))),a.unmountExternalData?.()}},Ou=e=>{let t=Re(),n=Iu.get(e);if(!n)throw new Error(`cannot release session. invalid session id: ${e}`);let[r,a,i,o]=n;o&&t._OrtReleaseBinding(o.handle),t.jsepUnregisterBuffers?.(e),a.forEach((e=>t._OrtFree(e))),i.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(r),Iu.delete(e)},Ru=(e,t,n,r,a)=>{if(!e)return void t.push(0);let i,o,s=Re(),u=e[0],l=e[1],d=e[3];if("string"===u&&"gpu-buffer"===d)throw new Error("String tensor is not supported on GPU.");if("gpu-buffer"===d){let t=e[2].gpuBuffer,n=Fe(He(u));o=l.reduce(((e,t)=>e*t),1)*n,i=s.jsepRegisterBuffer(r,a,t,o)}else{let t=e[2];if(Array.isArray(t)){o=4*t.length,i=s._malloc(o),n.push(i);let e=i/4;for(let r=0;r<t.length;r++){if("string"!=typeof t[r])throw new TypeError(`tensor data at index ${r} is not a string`);s.HEAPU32[e++]=ze(t[r],n)}}else o=t.byteLength,i=s._malloc(o),n.push(i),s.HEAPU8.set(new Uint8Array(t.buffer,t.byteOffset,o),i)}let p=s.stackSave(),c=s.stackAlloc(4*l.length);try{let e=c/4;l.forEach((t=>s.HEAP32[e++]=t));let n=s._OrtCreateTensor(He(u),i,o,c,l.length,Ke(d));0===n&&Pe(`Can't create tensor for input/output. session=${r}, index=${a}.`),t.push(n)}finally{s.stackRestore(p)}},zu=async(e,t,n,r,a,i)=>{let o=Re(),s=Iu.get(e);if(!s)throw new Error(`cannot run inference. invalid session id: ${e}`);let[u,l,d,p]=s,c=t.length,f=r.length,h=0,m=[],g=[],y=[],b=[],w=o.stackSave(),v=o.stackAlloc(4*c),$=o.stackAlloc(4*c),_=o.stackAlloc(4*f),x=o.stackAlloc(4*f);try{[h,m]=Me(i);for(let r=0;r<c;r++)Ru(n[r],g,b,e,t[r]);for(let t=0;t<f;t++)Ru(a[t],y,b,e,c+r[t]);let s,w=v/4,S=$/4,C=_/4,E=x/4;for(let e=0;e<c;e++)o.HEAPU32[w++]=g[e],o.HEAPU32[S++]=l[t[e]];for(let e=0;e<f;e++)o.HEAPU32[C++]=y[e],o.HEAPU32[E++]=d[r[e]];if(p){let{handle:n,outputPreferredLocations:i,outputPreferredLocationsEncoded:s}=p;if(l.length!==c)throw new Error(`input count from feeds (${c}) is expected to be always equal to model's input count (${l.length}).`);for(let r=0;r<c;r++){let a=t[r];0!==await o._OrtBindInput(n,l[a],g[r])&&Pe(`Can't bind input[${r}] for session=${e}.`)}for(let t=0;t<f;t++){let u=r[t];a[t]?.[3]?0!==o._OrtBindOutput(n,d[u],y[t],0)&&Pe(`Can't bind pre-allocated output[${t}] for session=${e}.`):0!==o._OrtBindOutput(n,d[u],0,s[u])&&Pe(`Can't bind output[${t}] to ${i[t]} for session=${e}.`)}}o.jsepOnRunStart?.(),s=p?await o._OrtRunWithBinding(u,p.handle,f,_,h):await o._OrtRun(u,$,v,c,x,f,_,h),0!==s&&Pe("failed to call OrtRun().");let I=[];for(let e=0;e<f;e++){let t=o.HEAPU32[_/4+e];if(t===y[e]){I.push(a[e]);continue}let n,i=o.stackSave(),s=o.stackAlloc(16),u=!1,l=0;try{0!==o._OrtGetTensorData(t,s,s+4,s+8,s+12)&&Pe(`Can't access output tensor data on index ${e}.`);let a=s/4,i=o.HEAPU32[a++];l=o.HEAPU32[a++];let d=o.HEAPU32[a++],c=o.HEAPU32[a++],f=[];for(let e=0;e<c;e++)f.push(o.HEAPU32[d/4+e]);o._OrtFree(d);let h=f.reduce(((e,t)=>e*t),1);n=Le(i);let m=p?.outputPreferredLocations[r[e]];if("string"===n){if("gpu-buffer"===m)throw new Error("String tensor is not supported on GPU.");let e=[],t=l/4;for(let n=0;n<h;n++){let r=o.HEAPU32[t++],a=n===h-1?void 0:o.HEAPU32[t]-r;e.push(o.UTF8ToString(r,a))}I.push([n,f,e,"cpu"])}else if("gpu-buffer"===m&&h>0){let e=o.jsepGetBuffer(l),r=Fe(i);if(void 0===r||!qe(n))throw new Error(`Unsupported data type: ${n}`);u=!0,I.push([n,f,{gpuBuffer:e,download:o.jsepCreateDownloader(e,h*r,n),dispose:()=>{o._OrtReleaseTensor(t)}},"gpu-buffer"])}else{let e=new(Ge(n))(h);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(o.HEAPU8.subarray(l,l+e.byteLength)),I.push([n,f,e,"cpu"])}}finally{o.stackRestore(i),"string"===n&&l&&o._free(l),u||o._OrtReleaseTensor(t)}}return p&&o._OrtClearBoundOutputs(p.handle),I}finally{o.stackRestore(w),g.forEach((e=>o._OrtReleaseTensor(e))),y.forEach((e=>o._OrtReleaseTensor(e))),b.forEach((e=>o._free(e))),0!==h&&o._OrtReleaseRunOptions(h),m.forEach((e=>o._free(e)))}},Bu=e=>{let t=Re(),n=Iu.get(e);if(!n)throw new Error("invalid session id");let r=n[0],a=t._OrtEndProfiling(r);0===a&&Pe("Can't get an profile file name."),t._OrtFree(a)},Pu=e=>{let t=[];for(let n of e){let e=n[2];!Array.isArray(e)&&"buffer"in e&&t.push(e.buffer)}return t}})),sl=V(((e,t)=>{t.exports='/*!\n * ONNX Runtime Web v1.18.0-dev.20240130-9f68a27c7a\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var eo=Object.defineProperty;var kl=Object.getOwnPropertyDescriptor;var Rl=Object.getOwnPropertyNames;var Bl=Object.prototype.hasOwnProperty;var Q=(e,t)=>()=>(e&&(t=e(e=0)),t);var Br=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),hn=(e,t)=>{for(var r in t)eo(e,r,{get:t[r],enumerable:!0})},Dl=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Rl(t))!Bl.call(e,i)&&i!==r&&eo(e,i,{get:()=>t[i],enumerable:!(o=kl(t,i))||o.enumerable});return e};var ur=e=>Dl(eo({},"__esModule",{value:!0}),e);var to={};hn(to,{createReadStream:()=>yi,readFile:()=>Ml,readFileSync:()=>zl});var Ml,zl,yi,ro=Q(()=>{Ml=void 0,zl=void 0,yi=void 0});var no={};hn(no,{join:()=>Ul});var Ul,oo=Q(()=>{Ul=void 0});var vi=Br((wi,io)=>{"use strict";var bi=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,i;r.ready=new Promise((s,c)=>{o=s,i=c}),r.mountExternalData=(s,c)=>{(r.gb||(r.gb=new Map)).set(s,c)},r.unmountExternalData=()=>{delete r.gb},r.jsepInit=(s,c,g,$,I,D,H,X)=>{r.Fb=s,r.vb=c,r.xb=g,r.ob=$,r.wb=I,r.Sa=D,r.yb=H,r.zb=X,c=(q,j,ne)=>(...fe)=>{let $e=Je,k=j?.();fe=q(...fe);let ae=j?.();return k!==ae&&(q=ae,ne(k),j=ne=null),Je!=$e?Zr():fe},g=q=>async(...j)=>{try{if(r.fb)throw Error("Session already started");let ne=r.fb={Ab:j[0],errors:[]},fe=await q(...j);if(r.fb!==ne)throw Error("Session mismatch");s.flush();let $e=ne.errors;if(0<$e.length){let k=await Promise.all($e);if(k=k.filter(ae=>ae),0<k.length)throw Error(k.join(`\n`))}return fe}finally{r.fb=null}},r._OrtCreateSession=c(r._OrtCreateSession,()=>r._OrtCreateSession,q=>r._OrtCreateSession=q),r._OrtRun=g(c(r._OrtRun,()=>r._OrtRun,q=>r._OrtRun=q)),r._OrtRunWithBinding=g(c(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,q=>r._OrtRunWithBinding=q)),r._OrtBindInput=c(r._OrtBindInput,()=>r._OrtBindInput,q=>r._OrtBindInput=q),r.jsepRegisterBuffer=(q,j,ne,fe)=>s.registerBuffer(q,j,ne,fe),r.jsepUnregisterBuffers=q=>{s.unregisterBuffers(q)},r.jsepGetBuffer=q=>s.getBuffer(q),r.jsepCreateDownloader=(q,j,ne)=>s.createDownloader(q,j,ne),r.jsepOnRunStart=()=>s.onRunStart()};var u=Object.assign({},r),a="./this.program",p=(s,c)=>{throw c},m=typeof window=="object",h=typeof importScripts=="function",d=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",y="",w,_,v;if(d){var x=(ro(),ur(to)),T=(oo(),ur(no));y=h?T.dirname(y)+"/":__dirname+"/",w=(s,c)=>(s=ie(s)?new URL(s):T.normalize(s),x.readFileSync(s,c?void 0:"utf8")),v=s=>(s=w(s,!0),s.buffer||(s=new Uint8Array(s)),s),_=(s,c,g,$=!0)=>{s=ie(s)?new URL(s):T.normalize(s),x.readFile(s,$?void 0:"utf8",(I,D)=>{I?g(I):c($?D.buffer:D)})},!r.thisProgram&&1<process.argv.length&&(a=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),p=(s,c)=>{throw process.exitCode=s,c},r.inspect=()=>"[Emscripten Module object]"}else(m||h)&&(h?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y.indexOf("blob:")!==0?y=y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):y="",w=s=>{var c=new XMLHttpRequest;return c.open("GET",s,!1),c.send(null),c.responseText},h&&(v=s=>{var c=new XMLHttpRequest;return c.open("GET",s,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),_=(s,c,g)=>{var $=new XMLHttpRequest;$.open("GET",s,!0),$.responseType="arraybuffer",$.onload=()=>{$.status==200||$.status==0&&$.response?c($.response):g()},$.onerror=g,$.send(null)});var C=console.log.bind(console),S=console.error.bind(console);Object.assign(r,u),u=null,typeof WebAssembly!="object"&&Ge("no native wasm support detected");var E,O=!1,U,M,N,Y,se,B,te,Pe,Ee,ee,be;function Me(){var s=E.buffer;r.HEAP8=M=new Int8Array(s),r.HEAP16=Y=new Int16Array(s),r.HEAPU8=N=new Uint8Array(s),r.HEAPU16=se=new Uint16Array(s),r.HEAP32=B=new Int32Array(s),r.HEAPU32=te=new Uint32Array(s),r.HEAPF32=Pe=new Float32Array(s),r.HEAPF64=be=new Float64Array(s),r.HEAP64=Ee=new BigInt64Array(s),r.HEAPU64=ee=new BigUint64Array(s)}var pe=[],ye=[],de=[],we=0,ze=null,Re=null;function Ge(s){throw s="Aborted("+s+")",S(s),O=!0,U=1,s=new WebAssembly.RuntimeError(s+". Build with -sASSERTIONS for more info."),i(s),s}var F=s=>s.startsWith("data:application/octet-stream;base64,"),ie=s=>s.startsWith("file://"),he;if(he="ort-wasm-simd.wasm",!F(he)){var Xe=he;he=r.locateFile?r.locateFile(Xe,y):y+Xe}function nt(s){if(v)return v(s);throw"both async and sync fetching of the wasm failed"}function ke(s){if(m||h){if(typeof fetch=="function"&&!ie(s))return fetch(s,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+s+"\'";return c.arrayBuffer()}).catch(()=>nt(s));if(_)return new Promise((c,g)=>{_(s,$=>c(new Uint8Array($)),g)})}return Promise.resolve().then(()=>nt(s))}function Le(s,c,g){return ke(s).then($=>WebAssembly.instantiate($,c)).then($=>$).then(g,$=>{S(`failed to asynchronously prepare wasm: ${$}`),Ge($)})}function It(s,c){var g=he;return typeof WebAssembly.instantiateStreaming!="function"||F(g)||ie(g)||d||typeof fetch!="function"?Le(g,s,c):fetch(g,{credentials:"same-origin"}).then($=>WebAssembly.instantiateStreaming($,s).then(c,function(I){return S(`wasm streaming compile failed: ${I}`),S("falling back to ArrayBuffer instantiation"),Le(g,s,c)}))}var Tt={945168:(s,c,g,$)=>{if(typeof r>"u"||!r.gb)return 1;if(s=Fe(s>>>0),s.startsWith("./")&&(s=s.substring(2)),s=r.gb.get(s),!s)return 2;if(c>>>=0,g>>>=0,c+g>s.byteLength)return 3;try{return N.set(s.subarray(c,c+g),$>>>0>>>0),0}catch{return 4}},945669:s=>r.vb(s),945702:s=>r.xb(s),945734:(s,c,g)=>{r.ob(s,c,g,!0)},945773:(s,c,g)=>{r.ob(s,c,g)},945806:s=>{r.Sa("Abs",s,void 0)},945857:s=>{r.Sa("Neg",s,void 0)},945908:s=>{r.Sa("Floor",s,void 0)},945961:s=>{r.Sa("Ceil",s,void 0)},946013:s=>{r.Sa("Reciprocal",s,void 0)},946071:s=>{r.Sa("Sqrt",s,void 0)},946123:s=>{r.Sa("Exp",s,void 0)},946174:s=>{r.Sa("Erf",s,void 0)},946225:s=>{r.Sa("Sigmoid",s,void 0)},946280:(s,c,g)=>{r.Sa("HardSigmoid",s,{alpha:c,beta:g})},946359:s=>{r.Sa("Log",s,void 0)},946410:s=>{r.Sa("Sin",s,void 0)},946461:s=>{r.Sa("Cos",s,void 0)},946512:s=>{r.Sa("Tan",s,void 0)},946563:s=>{r.Sa("Asin",s,void 0)},946615:s=>{r.Sa("Acos",s,void 0)},946667:s=>{r.Sa("Atan",s,void 0)},946719:s=>{r.Sa("Sinh",s,void 0)},946771:s=>{r.Sa("Cosh",s,void 0)},946823:s=>{r.Sa("Asinh",s,void 0)},946876:s=>{r.Sa("Acosh",s,void 0)},946929:s=>{r.Sa("Atanh",s,void 0)},946982:s=>{r.Sa("Tanh",s,void 0)},947034:s=>{r.Sa("Not",s,void 0)},947085:(s,c,g)=>{r.Sa("Clip",s,{min:c,max:g})},947154:s=>{r.Sa("Clip",s,void 0)},947206:(s,c)=>{r.Sa("Elu",s,{alpha:c})},947264:s=>{r.Sa("Relu",s,void 0)},947316:(s,c)=>{r.Sa("LeakyRelu",s,{alpha:c})},947380:(s,c)=>{r.Sa("ThresholdedRelu",s,{alpha:c})},947450:(s,c)=>{r.Sa("Cast",s,{to:c})},947508:s=>{r.Sa("Add",s,void 0)},947559:s=>{r.Sa("Sub",s,void 0)},947610:s=>{r.Sa("Mul",s,void 0)},947661:s=>{r.Sa("Div",s,void 0)},947712:s=>{r.Sa("Pow",s,void 0)},947763:s=>{r.Sa("Equal",s,void 0)},947816:s=>{r.Sa("Greater",s,void 0)},947871:s=>{r.Sa("GreaterOrEqual",s,void 0)},947933:s=>{r.Sa("Less",s,void 0)},947985:s=>{r.Sa("LessOrEqual",s,void 0)},948044:(s,c,g,$,I)=>{r.Sa("ReduceMean",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},948203:(s,c,g,$,I)=>{r.Sa("ReduceMax",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},948361:(s,c,g,$,I)=>{r.Sa("ReduceMin",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},948519:(s,c,g,$,I)=>{r.Sa("ReduceProd",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},948678:(s,c,g,$,I)=>{r.Sa("ReduceSum",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},948836:(s,c,g,$,I)=>{r.Sa("ReduceL1",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},948993:(s,c,g,$,I)=>{r.Sa("ReduceL2",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},949150:(s,c,g,$,I)=>{r.Sa("ReduceLogSum",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},949311:(s,c,g,$,I)=>{r.Sa("ReduceSumSquare",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},949475:(s,c,g,$,I)=>{r.Sa("ReduceLogSumExp",s,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},949639:s=>{r.Sa("Where",s,void 0)},949692:(s,c,g)=>{r.Sa("Transpose",s,{perm:c?Array.from(B.subarray(c>>>0,g>>>0)):[]})},949800:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e,k,ae)=>{r.Sa("ConvTranspose",s,{format:q?"NHWC":"NCHW",autoPad:c,dilations:[g],group:$,kernel_shape:[I],pads:[D,H],strides:[X],wIsConst:()=>!!M[j>>>0],outputPadding:ne?Array.from(B.subarray(ne>>>0,fe>>>0)):[],outputShape:$e?Array.from(B.subarray($e>>>0,k>>>0)):[],activation:Fe(ae)})},950202:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e,k)=>{r.Sa("ConvTranspose",s,{format:X?"NHWC":"NCHW",autoPad:c,dilations:Array.from(B.subarray(g>>>0,(g>>>0)+2>>>0)),group:$,kernelShape:Array.from(B.subarray(I>>>0,(I>>>0)+2>>>0)),pads:Array.from(B.subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(B.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!M[q>>>0],outputPadding:j?Array.from(B.subarray(j>>>0,ne>>>0)):[],outputShape:fe?Array.from(B.subarray(fe>>>0,$e>>>0)):[],activation:Fe(k)})},950767:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e,k,ae)=>{r.Sa("ConvTranspose",s,{format:q?"NHWC":"NCHW",autoPad:c,dilations:[g],group:$,kernel_shape:[I],pads:[D,H],strides:[X],wIsConst:()=>!!M[j>>>0],outputPadding:ne?Array.from(B.subarray(ne>>>0,fe>>>0)):[],outputShape:$e?Array.from(B.subarray($e>>>0,k>>>0)):[],activation:Fe(ae)})},951169:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e,k)=>{r.Sa("ConvTranspose",s,{format:X?"NHWC":"NCHW",autoPad:c,dilations:Array.from(B.subarray(g>>>0,(g>>>0)+2>>>0)),group:$,kernelShape:Array.from(B.subarray(I>>>0,(I>>>0)+2>>>0)),pads:Array.from(B.subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(B.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!M[q>>>0],outputPadding:j?Array.from(B.subarray(j>>>0,ne>>>0)):[],outputShape:fe?Array.from(B.subarray(fe>>>0,$e>>>0)):[],activation:Fe(k)})},951734:(s,c)=>{r.Sa("GlobalAveragePool",s,{format:c?"NHWC":"NCHW"})},951825:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e,k,ae,Ae)=>{r.Sa("AveragePool",s,{format:Ae?"NHWC":"NCHW",auto_pad:c,ceil_mode:g,count_include_pad:$,storage_order:I,dilations:[D,H],kernel_shape:[X,q],pads:[j,ne,fe,$e],strides:[k,ae]})},952109:(s,c)=>{r.Sa("GlobalAveragePool",s,{format:c?"NHWC":"NCHW"})},952200:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e,k,ae,Ae)=>{r.Sa("AveragePool",s,{format:Ae?"NHWC":"NCHW",auto_pad:c,ceil_mode:g,count_include_pad:$,storage_order:I,dilations:[D,H],kernel_shape:[X,q],pads:[j,ne,fe,$e],strides:[k,ae]})},952484:(s,c)=>{r.Sa("GlobalMaxPool",s,{format:c?"NHWC":"NCHW"})},952571:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e,k,ae,Ae)=>{r.Sa("MaxPool",s,{format:Ae?"NHWC":"NCHW",auto_pad:c,ceil_mode:g,count_include_pad:$,storage_order:I,dilations:[D,H],kernel_shape:[X,q],pads:[j,ne,fe,$e],strides:[k,ae]})},952851:(s,c)=>{r.Sa("GlobalMaxPool",s,{format:c?"NHWC":"NCHW"})},952938:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e,k,ae,Ae)=>{r.Sa("MaxPool",s,{format:Ae?"NHWC":"NCHW",auto_pad:c,ceil_mode:g,count_include_pad:$,storage_order:I,dilations:[D,H],kernel_shape:[X,q],pads:[j,ne,fe,$e],strides:[k,ae]})},953218:(s,c,g,$,I)=>{r.Sa("Gemm",s,{alpha:c,beta:g,transA:$,transB:I})},953322:s=>{r.Sa("MatMul",s,void 0)},953376:(s,c,g,$)=>{r.Sa("ArgMax",s,{keepDims:!!c,selectLastIndex:!!g,axis:$})},953484:(s,c,g,$)=>{r.Sa("ArgMin",s,{keepDims:!!c,selectLastIndex:!!g,axis:$})},953592:(s,c)=>{r.Sa("Softmax",s,{axis:c})},953655:(s,c)=>{r.Sa("Concat",s,{axis:c})},953715:(s,c,g,$,I)=>{r.Sa("Split",s,{axis:c,numOutputs:g,splitSizes:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},953855:s=>{r.Sa("Expand",s,void 0)},953909:(s,c)=>{r.Sa("Gather",s,{axis:Number(c)})},953980:(s,c)=>{r.Sa("GatherElements",s,{axis:Number(c)})},954059:(s,c,g,$,I,D,H,X,q,j,ne)=>{r.Sa("Resize",s,{antialias:c,axes:g?Array.from(B.subarray(g>>>0,$>>>0)):[],coordinateTransformMode:Fe(I),cubicCoeffA:D,excludeOutside:H,extrapolationValue:X,keepAspectRatioPolicy:Fe(q),mode:Fe(j),nearestMode:Fe(ne)})},954405:(s,c,g,$,I,D,H)=>{r.Sa("Slice",s,{starts:c?Array.from(B.subarray(c>>>0,g>>>0)):[],ends:$?Array.from(B.subarray($>>>0,I>>>0)):[],axes:D?Array.from(B.subarray(D>>>0,H>>>0)):[]})},954621:s=>{r.Sa("Tile",s,void 0)},954673:(s,c,g)=>{r.Sa("LayerNormalization",s,{axis:Number(c),epsilon:Number(g)})},954780:(s,c,g)=>{r.Sa("InstanceNormalization",s,{epsilon:c,format:g?"NHWC":"NCHW"})},954894:(s,c,g)=>{r.Sa("InstanceNormalization",s,{epsilon:c,format:g?"NHWC":"NCHW"})},955008:s=>{r.Sa("Range",s,void 0)},955061:(s,c)=>{r.Sa("Einsum",s,{equation:Fe(c)})},955142:(s,c,g,$,I)=>{r.Sa("Pad",s,{mode:c,value:g,pads:$?Array.from(B.subarray($>>>0,I>>>0)):[]})},955269:(s,c,g,$,I,D)=>{r.Sa("BatchNormalization",s,{epsilon:c,momentum:g,spatial:!!I,trainingMode:!!$,format:D?"NHWC":"NCHW"})},955438:(s,c,g,$,I,D)=>{r.Sa("BatchNormalization",s,{epsilon:c,momentum:g,spatial:!!I,trainingMode:!!$,format:D?"NHWC":"NCHW"})},955607:(s,c,g)=>{r.Sa("CumSum",s,{exclusive:Number(c),reverse:Number(g)})},955704:(s,c,g,$,I,D,H,X,q)=>{r.Sa("Attention",s,{numHeads:c,isUnidirectional:g,maskFilterValue:$,scale:I,doRotary:D,qkvHiddenSizes:H?Array.from(B.subarray(Number(X)>>>0,Number(X)+H>>>0)):[],pastPresentShareBuffer:!!q})},955976:s=>{r.Sa("Gelu",s,void 0)},956028:(s,c,g,$,I,D)=>{r.Sa("MultiHeadAttention",s,{numHeads:c,isUnidirectional:g,maskFilterValue:$,scale:I,doRotary:D})},956187:s=>{r.Sa("BiasAdd",s,void 0)},956242:s=>{r.Sa("BiasSplitGelu",s,void 0)},956303:(s,c)=>{r.Sa("SkipLayerNormalization",s,{epsilon:c})},956384:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e)=>{r.Sa("Conv",s,{format:q?"NHWC":"NCHW",auto_pad:c,dilations:[g],group:$,kernel_shape:[I],pads:D?Array.from(B.subarray(D>>>0,H>>>0)):[],strides:[X],w_is_const:()=>!!M[j>>>0],activation:Fe(ne),activation_params:fe?Array.from(Pe.subarray(fe>>>0,$e>>>0)):[]})},956754:(s,c,g,$,I,D,H,X,q,j,ne,fe,$e,k,ae,Ae)=>{r.Sa("Conv",s,{format:fe?"NHWC":"NCHW",auto_pad:c,dilations:[g,$],group:I,kernel_shape:[D,H],pads:X?Array.from(B.subarray(X>>>0,q>>>0)):[],strides:[j,ne],w_is_const:()=>!!M[$e>>>0],activation:Fe(k),activation_params:ae?Array.from(Pe.subarray(ae>>>0,Ae>>>0)):[]})},957145:s=>{r.yb(s)},957179:(s,c)=>r.zb(s,c,r.fb.Ab,r.fb.errors)};function Vt(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}function Rt(s){this.cb=s-24,this.rb=function(c){te[this.cb+4>>>2>>>0]=c},this.qb=function(c){te[this.cb+8>>>2>>>0]=c},this.kb=function(c,g){this.jb(),this.rb(c),this.qb(g)},this.jb=function(){te[this.cb+16>>>2>>>0]=0}}var Jt=0,Wt=0,mr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Bt=(s,c,g)=>{c>>>=0;var $=c+g;for(g=c;s[g]&&!(g>=$);)++g;if(16<g-c&&s.buffer&&mr)return mr.decode(s.subarray(c,g));for($="";c<g;){var I=s[c++];if(I&128){var D=s[c++]&63;if((I&224)==192)$+=String.fromCharCode((I&31)<<6|D);else{var H=s[c++]&63;I=(I&240)==224?(I&15)<<12|D<<6|H:(I&7)<<18|D<<12|H<<6|s[c++]&63,65536>I?$+=String.fromCharCode(I):(I-=65536,$+=String.fromCharCode(55296|I>>10,56320|I&1023))}}else $+=String.fromCharCode(I)}return $},Fe=(s,c)=>(s>>>=0)?Bt(N,s,c):"",Et=s=>{for(var c=0,g=0;g<s.length;++g){var $=s.charCodeAt(g);127>=$?c++:2047>=$?c+=2:55296<=$&&57343>=$?(c+=4,++g):c+=3}return c},bt=(s,c,g,$)=>{if(g>>>=0,!(0<$))return 0;var I=g;$=g+$-1;for(var D=0;D<s.length;++D){var H=s.charCodeAt(D);if(55296<=H&&57343>=H){var X=s.charCodeAt(++D);H=65536+((H&1023)<<10)|X&1023}if(127>=H){if(g>=$)break;c[g++>>>0]=H}else{if(2047>=H){if(g+1>=$)break;c[g++>>>0]=192|H>>6}else{if(65535>=H){if(g+2>=$)break;c[g++>>>0]=224|H>>12}else{if(g+3>=$)break;c[g++>>>0]=240|H>>18,c[g++>>>0]=128|H>>12&63}c[g++>>>0]=128|H>>6&63}c[g++>>>0]=128|H&63}}return c[g>>>0]=0,g-I},fr=s=>{if(s===null)return"null";var c=typeof s;return c==="object"||c==="array"||c==="function"?s.toString():""+s},Gr,ot=s=>{for(var c="";N[s>>>0];)c+=Gr[N[s++>>>0]];return c},hr={},Nt={},gr={},ct;function Lr(s,c,g={}){var $=c.name;if(!s)throw new ct(`type "${$}" must have a positive integer typeid pointer`);if(Nt.hasOwnProperty(s)){if(g.tb)return;throw new ct(`Cannot register type \'${$}\' twice`)}Nt[s]=c,delete gr[s],hr.hasOwnProperty(s)&&(c=hr[s],delete hr[s],c.forEach(I=>I()))}function qe(s,c,g={}){if(!("argPackAdvance"in c))throw new TypeError("registerType registeredInstance requires argPackAdvance");Lr(s,c,g)}var yr=(s,c,g)=>{switch(c){case 1:return g?$=>M[$>>>0>>>0]:$=>N[$>>>0>>>0];case 2:return g?$=>Y[$>>>1>>>0]:$=>se[$>>>1>>>0];case 4:return g?$=>B[$>>>2>>>0]:$=>te[$>>>2>>>0];case 8:return g?$=>Ee[$>>>3]:$=>ee[$>>>3];default:throw new TypeError(`invalid integer width (${c}): ${s}`)}};function br(){this.$a=[void 0],this.nb=[]}var Oe=new br;function wr(s){s>>>=0,s>=Oe.cb&&--Oe.get(s).pb===0&&Oe.jb(s)}var ve=s=>{if(!s)throw new ct("Cannot use deleted val. handle = "+s);return Oe.get(s).value},it=s=>{switch(s){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return Oe.kb({pb:1,value:s})}};function Qt(s){return this.fromWireType(B[s>>>2>>>0])}var vr=(s,c)=>{switch(c){case 4:return function(g){return this.fromWireType(Pe[g>>>2>>>0])};case 8:return function(g){return this.fromWireType(be[g>>>3>>>0])};default:throw new TypeError(`invalid float width (${c}): ${s}`)}};function Hn(s){return this.fromWireType(te[s>>>2>>>0])}var $r=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Gn=(s,c)=>{for(var g=s>>1,$=g+c/2;!(g>=$)&&se[g>>>0];)++g;if(g<<=1,32<g-s&&$r)return $r.decode(N.subarray(s>>>0,g>>>0));for(g="",$=0;!($>=c/2);++$){var I=Y[s+2*$>>>1>>>0];if(I==0)break;g+=String.fromCharCode(I)}return g},me=(s,c,g)=>{if(g??=2147483647,2>g)return 0;g-=2;var $=c;g=g<2*s.length?g/2:s.length;for(var I=0;I<g;++I)Y[c>>>1>>>0]=s.charCodeAt(I),c+=2;return Y[c>>>1>>>0]=0,c-$},er=s=>2*s.length,Fr=(s,c)=>{for(var g=0,$="";!(g>=c/4);){var I=B[s+4*g>>>2>>>0];if(I==0)break;++g,65536<=I?(I-=65536,$+=String.fromCharCode(55296|I>>10,56320|I&1023)):$+=String.fromCharCode(I)}return $},Ln=(s,c,g)=>{if(c>>>=0,g??=2147483647,4>g)return 0;var $=c;g=$+g-4;for(var I=0;I<s.length;++I){var D=s.charCodeAt(I);if(55296<=D&&57343>=D){var H=s.charCodeAt(++I);D=65536+((D&1023)<<10)|H&1023}if(B[c>>>2>>>0]=D,c+=4,c+4>g)break}return B[c>>>2>>>0]=0,c-$},jr=s=>{for(var c=0,g=0;g<s.length;++g){var $=s.charCodeAt(g);55296<=$&&57343>=$&&++g,c+=4}return c},_r=(s,c)=>{var g=Nt[s];if(g===void 0)throw s=Ft(s),g=ot(s),at(s),new ct(c+" has unknown type "+g);return g},Sr=(s,c,g)=>{var $=[];return s=s.toWireType($,g),$.length&&(te[c>>>2>>>0]=it($)),s},Ht=s=>{try{s()}catch(c){Ge(c)}};function qr(){var s=ue,c={};for(let[g,$]of Object.entries(s))c[g]=typeof $=="function"?function(){Dt.push(g);try{return $.apply(null,arguments)}finally{O||(Dt.pop(),Je&&mt===1&&Dt.length===0&&(mt=0,Ht(ln),typeof Fibers<"u"&&Fibers.Hb()))}}:$;return c}var mt=0,Je=null,xr=0,Dt=[],Cr={},Ar={},Kr=0,tr=null,Yr=[];function Zr(){return new Promise((s,c)=>{tr={resolve:s,reject:c}})}function Xr(){var s=Mt(65548),c=s+12;te[s>>>2>>>0]=c,te[s+4>>>2>>>0]=c+65536,c=Dt[0];var g=Cr[c];return g===void 0&&(g=Kr++,Cr[c]=g,Ar[g]=c),B[s+8>>>2>>>0]=g,s}function Jr(s){if(!O){if(mt===0){var c=!1,g=!1;s(($=0)=>{if(!O&&(xr=$,c=!0,g)){mt=2,Ht(()=>ft(Je)),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.resume(),$=!1;try{var I=(0,ue[Ar[B[Je+8>>>2>>>0]]])()}catch(X){I=X,$=!0}var D=!1;if(!Je){var H=tr;H&&(tr=null,($?H.reject:H.resolve)(I),D=!0)}if($&&!D)throw I}}),g=!0,c||(mt=1,Je=Xr(),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.pause(),Ht(()=>jt(Je)))}else mt===2?(mt=0,Ht(dt),at(Je),Je=null,Yr.forEach($=>{if(!O)try{$();try{U=U=$=U,r.onExit?.($),O=!0,p($,new Vt($))}catch(I){I instanceof Vt||I=="unwind"||p(1,I)}}catch(I){I instanceof Vt||I=="unwind"||p(1,I)}})):Ge(`invalid state: ${mt}`);return xr}}function Ir(s){return Jr(c=>{s().then(c)})}var Gt=[],Qr={},rr=s=>{var c=Qr[s];return c===void 0?ot(s):c},Tr=()=>typeof globalThis=="object"?globalThis:Function("return this")(),lt=s=>{var c=Gt.length;return Gt.push(s),c},Er=(s,c)=>{for(var g=Array(s),$=0;$<s;++$)g[$]=_r(te[c+4*$>>>2>>>0],"parameter "+$);return g},nr=(s,c)=>Object.defineProperty(c,"name",{value:s});function Fn(s){var c=Function;if(!(c instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof c} which is not a function`);var g=nr(c.name||"unknownFunctionName",function(){});return g.prototype=c.prototype,g=new g,s=c.apply(g,s),s instanceof Object?s:g}var Qe=s=>s%4===0&&(s%100!==0||s%400===0),en=[0,31,60,91,121,152,182,213,244,274,305,335],pt=[0,31,59,90,120,151,181,212,243,273,304,334],Pr=s=>{var c=Et(s)+1,g=Mt(c);return g&&bt(s,N,g,c),g},or=[],et=(s,c)=>{or.length=0;for(var g;g=N[s++>>>0];){var $=g!=105;$&=g!=112,c+=$&&c%8?4:0,or.push(g==112?te[c>>>2>>>0]:g==106?Ee[c>>>3]:g==105?B[c>>>2>>>0]:be[c>>>3>>>0]),c+=$?8:4}return or},Lt={},Ke=()=>{if(!tt){var s={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:a||"./this.program"},c;for(c in Lt)Lt[c]===void 0?delete s[c]:s[c]=Lt[c];var g=[];for(c in s)g.push(`${c}=${s[c]}`);tt=g}return tt},tt,tn=[null,[],[]],rn=[31,29,31,30,31,30,31,31,30,31,30,31],nn=[31,28,31,30,31,30,31,31,30,31,30,31];function on(s){var c=Array(Et(s)+1);return bt(s,c,0,c.length),c}function an(s,c,g,$){function I(k,ae,Ae){for(k=typeof k=="number"?k.toString():k||"";k.length<ae;)k=Ae[0]+k;return k}function D(k,ae){return I(k,ae,"0")}function H(k,ae){function Ae(kt){return 0>kt?-1:0<kt?1:0}var Ot;return(Ot=Ae(k.getFullYear()-ae.getFullYear()))===0&&(Ot=Ae(k.getMonth()-ae.getMonth()))===0&&(Ot=Ae(k.getDate()-ae.getDate())),Ot}function X(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function q(k){var ae=k.ab;for(k=new Date(new Date(k.bb+1900,0,1).getTime());0<ae;){var Ae=k.getMonth(),Ot=(Qe(k.getFullYear())?rn:nn)[Ae];if(ae>Ot-k.getDate())ae-=Ot-k.getDate()+1,k.setDate(1),11>Ae?k.setMonth(Ae+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+ae);break}}return Ae=new Date(k.getFullYear()+1,0,4),ae=X(new Date(k.getFullYear(),0,4)),Ae=X(Ae),0>=H(ae,k)?0>=H(Ae,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}s>>>=0,c>>>=0,g>>>=0,$>>>=0;var j=te[$+40>>>2>>>0];$={Db:B[$>>>2>>>0],Cb:B[$+4>>>2>>>0],hb:B[$+8>>>2>>>0],mb:B[$+12>>>2>>>0],ib:B[$+16>>>2>>>0],bb:B[$+20>>>2>>>0],Wa:B[$+24>>>2>>>0],ab:B[$+28>>>2>>>0],Gb:B[$+32>>>2>>>0],Bb:B[$+36>>>2>>>0],Eb:j?Fe(j):""},g=Fe(g),j={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ne in j)g=g.replace(new RegExp(ne,"g"),j[ne]);var fe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),$e="January February March April May June July August September October November December".split(" ");j={"%a":k=>fe[k.Wa].substring(0,3),"%A":k=>fe[k.Wa],"%b":k=>$e[k.ib].substring(0,3),"%B":k=>$e[k.ib],"%C":k=>D((k.bb+1900)/100|0,2),"%d":k=>D(k.mb,2),"%e":k=>I(k.mb,2," "),"%g":k=>q(k).toString().substring(2),"%G":k=>q(k),"%H":k=>D(k.hb,2),"%I":k=>(k=k.hb,k==0?k=12:12<k&&(k-=12),D(k,2)),"%j":k=>{for(var ae=0,Ae=0;Ae<=k.ib-1;ae+=(Qe(k.bb+1900)?rn:nn)[Ae++]);return D(k.mb+ae,3)},"%m":k=>D(k.ib+1,2),"%M":k=>D(k.Cb,2),"%n":()=>`\n`,"%p":k=>0<=k.hb&&12>k.hb?"AM":"PM","%S":k=>D(k.Db,2),"%t":()=>"\t","%u":k=>k.Wa||7,"%U":k=>D(Math.floor((k.ab+7-k.Wa)/7),2),"%V":k=>{var ae=Math.floor((k.ab+7-(k.Wa+6)%7)/7);if(2>=(k.Wa+371-k.ab-2)%7&&ae++,ae)ae==53&&(Ae=(k.Wa+371-k.ab)%7,Ae==4||Ae==3&&Qe(k.bb)||(ae=1));else{ae=52;var Ae=(k.Wa+7-k.ab-1)%7;(Ae==4||Ae==5&&Qe(k.bb%400-1))&&ae++}return D(ae,2)},"%w":k=>k.Wa,"%W":k=>D(Math.floor((k.ab+7-(k.Wa+6)%7)/7),2),"%y":k=>(k.bb+1900).toString().substring(2),"%Y":k=>k.bb+1900,"%z":k=>{k=k.Bb;var ae=0<=k;return k=Math.abs(k)/60,(ae?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Eb,"%%":()=>"%"},g=g.replace(/%%/g,"\\0\\0");for(ne in j)g.includes(ne)&&(g=g.replace(new RegExp(ne,"g"),j[ne]($)));return g=g.replace(/\\0\\0/g,"%"),ne=on(g),ne.length>c?0:(M.set(ne,s>>>0),ne.length-1)}for(var sn=Array(256),ir=0;256>ir;++ir)sn[ir]=String.fromCharCode(ir);Gr=sn,ct=r.BindingError=class extends Error{constructor(s){super(s),this.name="BindingError"}},r.InternalError=class extends Error{constructor(s){super(s),this.name="InternalError"}},Object.assign(br.prototype,{get(s){return this.$a[s]},has(s){return this.$a[s]!==void 0},kb(s){var c=this.nb.pop()||this.$a.length;return this.$a[c]=s,c},jb(s){this.$a[s]=void 0,this.nb.push(s)}}),Oe.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),Oe.cb=Oe.$a.length,r.count_emval_handles=()=>{for(var s=0,c=Oe.cb;c<Oe.$a.length;++c)Oe.$a[c]!==void 0&&++s;return s};var jn={ia:function(s,c,g){return Ir(async()=>{await r.wb(s,c,g)})},a:function(s,c,g){throw s>>>=0,new Rt(s).kb(c>>>0,g>>>0),Jt=s,Wt++,Jt},x:function(){return 0},ba:function(){},O:function(){},Q:function(){},ca:function(){return 0},$:function(){},W:function(){},_:function(){},D:function(){},P:function(){},M:function(){},aa:function(){},N:function(){},G:function(s,c,g,$,I){c>>>=0,c=ot(c);var D=c.indexOf("u")!=-1;D&&(I=(1n<<64n)-1n),qe(s>>>0,{name:c,fromWireType:H=>H,toWireType:function(H,X){if(typeof X!="bigint"&&typeof X!="number")throw new TypeError(`Cannot convert "${fr(X)}" to ${this.name}`);if(X<$||X>I)throw new TypeError(`Passing a number "${fr(X)}" from JS side to C/C++ side to an argument of type "${c}", which is outside the valid range [${$}, ${I}]!`);return X},argPackAdvance:8,readValueFromPointer:yr(c,g>>>0,!D),eb:null})},ga:function(s,c,g,$){c=ot(c>>>0),qe(s>>>0,{name:c,fromWireType:function(I){return!!I},toWireType:function(I,D){return D?g:$},argPackAdvance:8,readValueFromPointer:function(I){return this.fromWireType(N[I>>>0])},eb:null})},fa:function(s,c){c=ot(c>>>0),qe(s>>>0,{name:c,fromWireType:g=>{var $=ve(g);return wr(g),$},toWireType:(g,$)=>it($),argPackAdvance:8,readValueFromPointer:Qt,eb:null})},F:function(s,c,g){c=ot(c>>>0),qe(s>>>0,{name:c,fromWireType:$=>$,toWireType:($,I)=>I,argPackAdvance:8,readValueFromPointer:vr(c,g>>>0),eb:null})},t:function(s,c,g,$,I){if(s>>>=0,g>>>=0,c=ot(c>>>0),I===-1&&(I=4294967295),I=X=>X,$===0){var D=32-8*g;I=X=>X<<D>>>D}var H=c.includes("unsigned")?function(X,q){return q>>>0}:function(X,q){return q};qe(s,{name:c,fromWireType:I,toWireType:H,argPackAdvance:8,readValueFromPointer:yr(c,g,$!==0),eb:null})},n:function(s,c,g){function $(D){return new I(M.buffer,te[D+4>>>2>>>0],te[D>>>2>>>0])}var I=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][c];g=ot(g>>>0),qe(s>>>0,{name:g,fromWireType:$,argPackAdvance:8,readValueFromPointer:$},{tb:!0})},H:function(s,c){c=ot(c>>>0);var g=c==="std::string";qe(s>>>0,{name:c,fromWireType:function($){var I=te[$>>>2>>>0],D=$+4;if(g)for(var H=D,X=0;X<=I;++X){var q=D+X;if(X==I||N[q>>>0]==0){if(H=Fe(H,q-H),j===void 0)var j=H;else j+=String.fromCharCode(0),j+=H;H=q+1}}else{for(j=Array(I),X=0;X<I;++X)j[X]=String.fromCharCode(N[D+X>>>0]);j=j.join("")}return at($),j},toWireType:function($,I){I instanceof ArrayBuffer&&(I=new Uint8Array(I));var D=typeof I=="string";if(!(D||I instanceof Uint8Array||I instanceof Uint8ClampedArray||I instanceof Int8Array))throw new ct("Cannot pass non-string to std::string");var H=g&&D?Et(I):I.length,X=Mt(4+H+1),q=X+4;if(te[X>>>2>>>0]=H,g&&D)bt(I,N,q,H+1);else if(D)for(D=0;D<H;++D){var j=I.charCodeAt(D);if(255<j)throw at(q),new ct("String has UTF-16 code units that do not fit in 8 bits");N[q+D>>>0]=j}else for(D=0;D<H;++D)N[q+D>>>0]=I[D];return $!==null&&$.push(at,X),X},argPackAdvance:8,readValueFromPointer:Hn,eb($){at($)}})},z:function(s,c,g){if(c>>>=0,g>>>=0,g=ot(g),c===2)var $=Gn,I=me,D=er,H=()=>se,X=1;else c===4&&($=Fr,I=Ln,D=jr,H=()=>te,X=2);qe(s>>>0,{name:g,fromWireType:q=>{for(var j=te[q>>>2>>>0],ne=H(),fe,$e=q+4,k=0;k<=j;++k){var ae=q+4+k*c;(k==j||ne[ae>>>X]==0)&&($e=$($e,ae-$e),fe===void 0?fe=$e:(fe+=String.fromCharCode(0),fe+=$e),$e=ae+c)}return at(q),fe},toWireType:(q,j)=>{if(typeof j!="string")throw new ct(`Cannot pass non-string to C++ string type ${g}`);var ne=D(j),fe=Mt(4+ne+c);return te[fe>>>2]=ne>>X,I(j,fe+4,ne+c),q!==null&&q.push(at,fe),fe},argPackAdvance:8,readValueFromPointer:Qt,eb(q){at(q)}})},ha:function(s,c){c=ot(c>>>0),qe(s>>>0,{ub:!0,name:c,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},da:()=>1,s:function(s,c,g){return c>>>=0,g>>>=0,s=ve(s>>>0),c=_r(c,"emval::as"),Sr(c,g,s)},w:function(s){return s>>>=0,Ir(()=>(s=ve(s),s.then(it)))},o:function(s,c,g,$){return g>>>=0,$>>>=0,s=Gt[s>>>0],c=ve(c>>>0),s(null,c,g,$)},k:function(s,c,g,$,I){return g>>>=0,$>>>=0,I>>>=0,s=Gt[s>>>0],c=ve(c>>>0),g=rr(g),s(c,c[g],$,I)},b:wr,A:function(s,c){return c>>>=0,s=ve(s>>>0),c=ve(c),s==c},m:function(s){return s>>>=0,s===0?it(Tr()):(s=rr(s),it(Tr()[s]))},i:function(s,c,g){c=Er(s,c>>>0);var $=c.shift();s--;var I=`return function (obj, func, destructorsRef, args) {\n`,D=0,H=[];g===0&&H.push("obj");for(var X=["retType"],q=[$],j=0;j<s;++j)H.push("arg"+j),X.push("argType"+j),q.push(c[j]),I+=`  var arg${j} = argType${j}.readValueFromPointer(args${D?"+"+D:""});\n`,D+=c[j].argPackAdvance;for(I+=`  var rv = ${g===1?"new func":"func.call"}(${H.join(", ")});\n`,j=0;j<s;++j)c[j].deleteObject&&(I+=`  argType${j}.deleteObject(arg${j});\n`);return $.ub||(X.push("emval_returnValue"),q.push(Sr),I+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),X.push(I+`};\n`),s=Fn(X).apply(null,q),g=`methodCaller<(${c.map(ne=>ne.name).join(", ")}) => ${$.name}>`,lt(nr(g,s))},r:function(s,c){return c>>>=0,s=ve(s>>>0),c=ve(c),it(s[c])},e:function(s){s>>>=0,4<s&&(Oe.get(s).pb+=1)},u:function(){return it([])},l:function(s){s=ve(s>>>0);for(var c=Array(s.length),g=0;g<s.length;g++)c[g]=s[g];return it(c)},d:function(s){return it(rr(s>>>0))},j:function(){return it({})},h:function(s){s>>>=0;for(var c=ve(s);c.length;){var g=c.pop();c.pop()(g)}wr(s)},g:function(s,c,g){c>>>=0,g>>>=0,s=ve(s>>>0),c=ve(c),g=ve(g),s[c]=g},c:function(s,c){return c>>>=0,s=_r(s>>>0,"_emval_take_value"),s=s.readValueFromPointer(c),it(s)},T:function(s,c){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),c>>>=0,s=new Date(1e3*s),B[c>>>2>>>0]=s.getUTCSeconds(),B[c+4>>>2>>>0]=s.getUTCMinutes(),B[c+8>>>2>>>0]=s.getUTCHours(),B[c+12>>>2>>>0]=s.getUTCDate(),B[c+16>>>2>>>0]=s.getUTCMonth(),B[c+20>>>2>>>0]=s.getUTCFullYear()-1900,B[c+24>>>2>>>0]=s.getUTCDay(),B[c+28>>>2>>>0]=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},U:function(s,c){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),c>>>=0,s=new Date(1e3*s),B[c>>>2>>>0]=s.getSeconds(),B[c+4>>>2>>>0]=s.getMinutes(),B[c+8>>>2>>>0]=s.getHours(),B[c+12>>>2>>>0]=s.getDate(),B[c+16>>>2>>>0]=s.getMonth(),B[c+20>>>2>>>0]=s.getFullYear()-1900,B[c+24>>>2>>>0]=s.getDay(),B[c+28>>>2>>>0]=(Qe(s.getFullYear())?en:pt)[s.getMonth()]+s.getDate()-1|0,B[c+36>>>2>>>0]=-(60*s.getTimezoneOffset());var g=new Date(s.getFullYear(),6,1).getTimezoneOffset(),$=new Date(s.getFullYear(),0,1).getTimezoneOffset();B[c+32>>>2>>>0]=(g!=$&&s.getTimezoneOffset()==Math.min($,g))|0},V:function(s){s>>>=0;var c=new Date(B[s+20>>>2>>>0]+1900,B[s+16>>>2>>>0],B[s+12>>>2>>>0],B[s+8>>>2>>>0],B[s+4>>>2>>>0],B[s>>>2>>>0],0),g=B[s+32>>>2>>>0],$=c.getTimezoneOffset(),I=new Date(c.getFullYear(),6,1).getTimezoneOffset(),D=new Date(c.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(D,I);return 0>g?B[s+32>>>2>>>0]=+(I!=D&&H==$):0<g!=(H==$)&&(I=Math.max(D,I),c.setTime(c.getTime()+6e4*((0<g?H:I)-$))),B[s+24>>>2>>>0]=c.getDay(),B[s+28>>>2>>>0]=(Qe(c.getFullYear())?en:pt)[c.getMonth()]+c.getDate()-1|0,B[s>>>2>>>0]=c.getSeconds(),B[s+4>>>2>>>0]=c.getMinutes(),B[s+8>>>2>>>0]=c.getHours(),B[s+12>>>2>>>0]=c.getDate(),B[s+16>>>2>>>0]=c.getMonth(),B[s+20>>>2>>>0]=c.getYear(),s=c.getTime(),isNaN(s)?(B[un()>>>2>>>0]=61,s=-1):s/=1e3,BigInt(s)},R:function(){return-52},S:function(){},K:function(s,c,g){function $(q){return(q=q.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?q[1]:"GMT"}g>>>=0;var I=new Date().getFullYear(),D=new Date(I,0,1),H=new Date(I,6,1);I=D.getTimezoneOffset();var X=H.getTimezoneOffset();te[s>>>0>>>2>>>0]=60*Math.max(I,X),B[c>>>0>>>2>>>0]=+(I!=X),s=$(D),c=$(H),s=Pr(s),c=Pr(c),X<I?(te[g>>>2>>>0]=s,te[g+4>>>2>>>0]=c):(te[g>>>2>>>0]=c,te[g+4>>>2>>>0]=s)},v:()=>{Ge("")},f:function(s,c,g){return s>>>=0,c=et(c>>>0,g>>>0),Tt[s].apply(null,c)},I:function(s,c,g){return s>>>=0,c=et(c>>>0,g>>>0),Tt[s].apply(null,c)},E:()=>Date.now(),L:function(){return 4294901760},q:()=>performance.now(),J:function(s){s>>>=0;var c=N.length;if(4294901760<s)return!1;for(var g=1;4>=g;g*=2){var $=c*(1+.2/g);$=Math.min($,s+100663296);var I=Math;$=Math.max(s,$);e:{I=(I.min.call(I,4294901760,$+(65536-$%65536)%65536)-E.buffer.byteLength+65535)/65536;try{E.grow(I),Me();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},Y:function(s,c){s>>>=0,c>>>=0;var g=0;return Ke().forEach(($,I)=>{var D=c+g;for(I=te[s+4*I>>>2>>>0]=D,D=0;D<$.length;++D)M[I++>>>0>>>0]=$.charCodeAt(D);M[I>>>0>>>0]=0,g+=$.length+1}),0},Z:function(s,c){s>>>=0,c>>>=0;var g=Ke();te[s>>>2>>>0]=g.length;var $=0;return g.forEach(I=>$+=I.length+1),te[c>>>2>>>0]=$,0},y:()=>52,C:function(){return 52},X:function(){return 70},B:function(s,c,g,$){c>>>=0,g>>>=0,$>>>=0;for(var I=0,D=0;D<g;D++){var H=te[c>>>2>>>0],X=te[c+4>>>2>>>0];c+=8;for(var q=0;q<X;q++){var j=N[H+q>>>0],ne=tn[s];j===0||j===10?((s===1?C:S)(Bt(ne,0)),ne.length=0):ne.push(j)}I+=X}return te[$>>>2>>>0]=I,0},ea:an,p:function(s,c,g,$){return an(s>>>0,c>>>0,g>>>0,$>>>0)}},ue=function(){function s(g){return ue=g.exports,ue=qr(),ue=dn(),E=ue.ja,Me(),ye.unshift(ue.ka),we--,we==0&&(ze!==null&&(clearInterval(ze),ze=null),Re&&(g=Re,Re=null,g())),ue}var c={a:jn};if(we++,r.instantiateWasm)try{return r.instantiateWasm(c,s)}catch(g){S(`Module.instantiateWasm callback failed with error: ${g}`),i(g)}return It(c,function(g){s(g.instance)}).catch(i),{}}();r._OrtInit=(s,c)=>(r._OrtInit=ue.la)(s,c),r._OrtGetLastError=(s,c)=>(r._OrtGetLastError=ue.ma)(s,c),r._OrtCreateSessionOptions=(s,c,g,$,I,D,H,X,q,j)=>(r._OrtCreateSessionOptions=ue.na)(s,c,g,$,I,D,H,X,q,j),r._OrtAppendExecutionProvider=(s,c)=>(r._OrtAppendExecutionProvider=ue.oa)(s,c),r._OrtAddFreeDimensionOverride=(s,c,g)=>(r._OrtAddFreeDimensionOverride=ue.pa)(s,c,g),r._OrtAddSessionConfigEntry=(s,c,g)=>(r._OrtAddSessionConfigEntry=ue.qa)(s,c,g),r._OrtReleaseSessionOptions=s=>(r._OrtReleaseSessionOptions=ue.ra)(s),r._OrtCreateSession=(s,c,g)=>(r._OrtCreateSession=ue.sa)(s,c,g),r._OrtReleaseSession=s=>(r._OrtReleaseSession=ue.ta)(s),r._OrtGetInputOutputCount=(s,c,g)=>(r._OrtGetInputOutputCount=ue.ua)(s,c,g),r._OrtGetInputName=(s,c)=>(r._OrtGetInputName=ue.va)(s,c),r._OrtGetOutputName=(s,c)=>(r._OrtGetOutputName=ue.wa)(s,c),r._OrtFree=s=>(r._OrtFree=ue.xa)(s),r._OrtCreateTensor=(s,c,g,$,I,D)=>(r._OrtCreateTensor=ue.ya)(s,c,g,$,I,D),r._OrtGetTensorData=(s,c,g,$,I)=>(r._OrtGetTensorData=ue.za)(s,c,g,$,I),r._OrtReleaseTensor=s=>(r._OrtReleaseTensor=ue.Aa)(s),r._OrtCreateRunOptions=(s,c,g,$)=>(r._OrtCreateRunOptions=ue.Ba)(s,c,g,$),r._OrtAddRunConfigEntry=(s,c,g)=>(r._OrtAddRunConfigEntry=ue.Ca)(s,c,g),r._OrtReleaseRunOptions=s=>(r._OrtReleaseRunOptions=ue.Da)(s),r._OrtCreateBinding=s=>(r._OrtCreateBinding=ue.Ea)(s),r._OrtBindInput=(s,c,g)=>(r._OrtBindInput=ue.Fa)(s,c,g),r._OrtBindOutput=(s,c,g,$)=>(r._OrtBindOutput=ue.Ga)(s,c,g,$),r._OrtClearBoundOutputs=s=>(r._OrtClearBoundOutputs=ue.Ha)(s),r._OrtReleaseBinding=s=>(r._OrtReleaseBinding=ue.Ia)(s),r._OrtRunWithBinding=(s,c,g,$,I)=>(r._OrtRunWithBinding=ue.Ja)(s,c,g,$,I),r._OrtRun=(s,c,g,$,I,D,H,X)=>(r._OrtRun=ue.Ka)(s,c,g,$,I,D,H,X),r._OrtEndProfiling=s=>(r._OrtEndProfiling=ue.La)(s),r._JsepOutput=(s,c,g)=>(r._JsepOutput=ue.Ma)(s,c,g),r._JsepGetNodeName=s=>(r._JsepGetNodeName=ue.Na)(s);var un=()=>(un=ue.Oa)(),Mt=r._malloc=s=>(Mt=r._malloc=ue.Pa)(s),at=r._free=s=>(at=r._free=ue.Qa)(s),Ft=s=>(Ft=ue.Ra)(s),ar=()=>(ar=ue.Ta)(),sr=s=>(sr=ue.Ua)(s),Or=s=>(Or=ue.Va)(s),jt=s=>(jt=ue.Xa)(s),ln=()=>(ln=ue.Ya)(),ft=s=>(ft=ue.Za)(s),dt=()=>(dt=ue._a)();r.___start_em_js=957291,r.___stop_em_js=957452;function dn(){var s=ue;s=Object.assign({},s);var c=$=>()=>$()>>>0,g=$=>I=>$(I)>>>0;return s.Oa=c(s.Oa),s.Pa=g(s.Pa),s.Ra=g(s.Ra),s.Ta=c(s.Ta),s.Va=g(s.Va),s}r.stackAlloc=Or,r.stackSave=ar,r.stackRestore=sr,r.UTF8ToString=Fe,r.stringToUTF8=(s,c,g)=>bt(s,N,c,g),r.lengthBytesUTF8=Et;var Pt;Re=function s(){Pt||kr(),Pt||(Re=s)};function kr(){if(!(0<we)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var s=r.preRun.shift();pe.unshift(s)}for(;0<pe.length;)pe.shift()(r);if(!(0<we||Pt||(Pt=!0,r.calledRun=!0,O))){for(;0<ye.length;)ye.shift()(r);for(o(r);0<de.length;)de.shift()(r)}}}return kr(),t.ready}})();typeof wi=="object"&&typeof io=="object"?io.exports=bi:typeof define=="function"&&define.amd&&define([],()=>bi)});var $i=Br(()=>{});var _i=Br(()=>{});var Si={};hn(Si,{cpus:()=>Vl});var Vl,xi=Q(()=>{Vl=void 0});var Ii=Br((Ai,ao)=>{"use strict";var Ci=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return be.buffer!=de.buffer&&ke(),de}function o(){return be.buffer!=de.buffer&&ke(),we}function i(){return be.buffer!=de.buffer&&ke(),ze}function u(){return be.buffer!=de.buffer&&ke(),Re}function a(){return be.buffer!=de.buffer&&ke(),Ge}function p(){return be.buffer!=de.buffer&&ke(),F}function m(){return be.buffer!=de.buffer&&ke(),ie}function h(){return be.buffer!=de.buffer&&ke(),nt}var d=t,y,w;d.ready=new Promise((n,l)=>{y=n,w=l}),d.mountExternalData=(n,l)=>{(d.Fb||(d.Fb=new Map)).set(n,l)},d.unmountExternalData=()=>{delete d.Fb},d.jsepInit=(n,l,f,b,A,P,z,L)=>{d.rc=n,d.$b=l,d.bc=f,d.Ob=b,d.ac=A,d.eb=P,d.cc=z,d.dc=L,l=(Z,K,oe)=>(...ge)=>{let Se=dt,R=K?.();ge=Z(...ge);let le=K?.();return R!==le&&(Z=le,oe(R),K=oe=null),dt!=Se?I():ge},f=Z=>async(...K)=>{try{if(d.Eb)throw Error("Session already started");let oe=d.Eb={fc:K[0],errors:[]},ge=await Z(...K);if(d.Eb!==oe)throw Error("Session mismatch");n.flush();let Se=oe.errors;if(0<Se.length){let R=await Promise.all(Se);if(R=R.filter(le=>le),0<R.length)throw Error(R.join(`\n`))}return ge}finally{d.Eb=null}},d._OrtCreateSession=l(d._OrtCreateSession,()=>d._OrtCreateSession,Z=>d._OrtCreateSession=Z),d._OrtRun=f(l(d._OrtRun,()=>d._OrtRun,Z=>d._OrtRun=Z)),d._OrtRunWithBinding=f(l(d._OrtRunWithBinding,()=>d._OrtRunWithBinding,Z=>d._OrtRunWithBinding=Z)),d._OrtBindInput=l(d._OrtBindInput,()=>d._OrtBindInput,Z=>d._OrtBindInput=Z),d.jsepRegisterBuffer=(Z,K,oe,ge)=>n.registerBuffer(Z,K,oe,ge),d.jsepUnregisterBuffers=Z=>{n.unregisterBuffers(Z)},d.jsepGetBuffer=Z=>n.getBuffer(Z),d.jsepCreateDownloader=(Z,K,oe)=>n.createDownloader(Z,K,oe),d.jsepOnRunStart=()=>n.onRunStart()};var _=Object.assign({},d),v="./this.program",x=(n,l)=>{throw l},T=typeof window=="object",C=typeof importScripts=="function",S=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",E=d.ENVIRONMENT_IS_PTHREAD||!1,O="";function U(n){return d.locateFile?d.locateFile(n,O):O+n}var M,N,Y;if(S){var se=(ro(),ur(to)),B=(oo(),ur(no));O=C?B.dirname(O)+"/":__dirname+"/",M=(l,f)=>(l=Et(l)?new URL(l):B.normalize(l),se.readFileSync(l,f?void 0:"utf8")),Y=l=>(l=M(l,!0),l.buffer||(l=new Uint8Array(l)),l),N=(l,f,b,A=!0)=>{l=Et(l)?new URL(l):B.normalize(l),se.readFile(l,A?void 0:"utf8",(P,z)=>{P?b(P):f(A?z.buffer:z)})},!d.thisProgram&&1<process.argv.length&&(v=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),x=(l,f)=>{throw process.exitCode=l,f},d.inspect=()=>"[Emscripten Module object]";let n;try{n=$i()}catch(l){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),l}global.Worker=n.Worker}else(T||C)&&(C?O=self.location.href:typeof document<"u"&&document.currentScript&&(O=document.currentScript.src),typeof e<"u"&&e&&(O=e),O.indexOf("blob:")!==0?O=O.substr(0,O.replace(/[?#].*/,"").lastIndexOf("/")+1):O="",S||(M=n=>{var l=new XMLHttpRequest;return l.open("GET",n,!1),l.send(null),l.responseText},C&&(Y=n=>{var l=new XMLHttpRequest;return l.open("GET",n,!1),l.responseType="arraybuffer",l.send(null),new Uint8Array(l.response)}),N=(n,l,f)=>{var b=new XMLHttpRequest;b.open("GET",n,!0),b.responseType="arraybuffer",b.onload=()=>{b.status==200||b.status==0&&b.response?l(b.response):f()},b.onerror=f,b.send(null)}));S&&typeof performance>"u"&&(global.performance=_i().performance);var te=console.log.bind(console),Pe=console.error.bind(console);S&&(te=(...n)=>se.writeSync(1,n.join(" ")+`\n`),Pe=(...n)=>se.writeSync(2,n.join(" ")+`\n`));var Ee=te,ee=Pe;Object.assign(d,_),_=null,typeof WebAssembly!="object"&&Bt("no native wasm support detected");var be,Me,pe=!1,ye,de,we,ze,Re,Ge,F,ie,he,Xe,nt;function ke(){var n=be.buffer;d.HEAP8=de=new Int8Array(n),d.HEAP16=ze=new Int16Array(n),d.HEAPU8=we=new Uint8Array(n),d.HEAPU16=Re=new Uint16Array(n),d.HEAP32=Ge=new Int32Array(n),d.HEAPU32=F=new Uint32Array(n),d.HEAPF32=ie=new Float32Array(n),d.HEAPF64=nt=new Float64Array(n),d.HEAP64=he=new BigInt64Array(n),d.HEAPU64=Xe=new BigUint64Array(n)}var Le=16777216;if(E)be=d.wasmMemory;else if(d.wasmMemory)be=d.wasmMemory;else if(be=new WebAssembly.Memory({initial:Le/65536,maximum:65536,shared:!0}),!(be.buffer instanceof SharedArrayBuffer))throw ee("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),S&&ee("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");ke(),Le=be.buffer.byteLength;var It=[],Tt=[],Vt=[],Rt=0,Jt=null,Wt=null;function mr(){if(Rt--,Rt==0&&(Jt!==null&&(clearInterval(Jt),Jt=null),Wt)){var n=Wt;Wt=null,n()}}function Bt(n){throw n="Aborted("+n+")",ee(n),pe=!0,ye=1,n=new WebAssembly.RuntimeError(n+". Build with -sASSERTIONS for more info."),w(n),n}var Fe=n=>n.startsWith("data:application/octet-stream;base64,"),Et=n=>n.startsWith("file://"),bt;bt="ort-wasm-simd-threaded.wasm",Fe(bt)||(bt=U(bt));function fr(n){if(Y)return Y(n);throw"both async and sync fetching of the wasm failed"}function Gr(n){if(T||C){if(typeof fetch=="function"&&!Et(n))return fetch(n,{credentials:"same-origin"}).then(l=>{if(!l.ok)throw"failed to load wasm binary file at \'"+n+"\'";return l.arrayBuffer()}).catch(()=>fr(n));if(N)return new Promise((l,f)=>{N(n,b=>l(new Uint8Array(b)),f)})}return Promise.resolve().then(()=>fr(n))}function ot(n,l,f){return Gr(n).then(b=>WebAssembly.instantiate(b,l)).then(b=>b).then(f,b=>{ee(`failed to asynchronously prepare wasm: ${b}`),Bt(b)})}function hr(n,l){var f=bt;return typeof WebAssembly.instantiateStreaming!="function"||Fe(f)||Et(f)||S||typeof fetch!="function"?ot(f,n,l):fetch(f,{credentials:"same-origin"}).then(b=>WebAssembly.instantiateStreaming(b,n).then(l,function(A){return ee(`wasm streaming compile failed: ${A}`),ee("falling back to ArrayBuffer instantiation"),ot(f,n,l)}))}var Nt={946748:(n,l,f,b)=>{if(typeof d>"u"||!d.Fb)return 1;if(n=Oe(n>>>0),n.startsWith("./")&&(n=n.substring(2)),n=d.Fb.get(n),!n)return 2;if(l>>>=0,f>>>=0,b>>>=0,l+f>n.byteLength)return 3;try{return o().set(n.subarray(l,l+f),b>>>0),0}catch{return 4}},947249:n=>d.$b(n),947282:n=>d.bc(n),947314:(n,l,f)=>{d.Ob(n,l,f,!0)},947353:(n,l,f)=>{d.Ob(n,l,f)},947386:n=>{d.eb("Abs",n,void 0)},947437:n=>{d.eb("Neg",n,void 0)},947488:n=>{d.eb("Floor",n,void 0)},947541:n=>{d.eb("Ceil",n,void 0)},947593:n=>{d.eb("Reciprocal",n,void 0)},947651:n=>{d.eb("Sqrt",n,void 0)},947703:n=>{d.eb("Exp",n,void 0)},947754:n=>{d.eb("Erf",n,void 0)},947805:n=>{d.eb("Sigmoid",n,void 0)},947860:(n,l,f)=>{d.eb("HardSigmoid",n,{alpha:l,beta:f})},947939:n=>{d.eb("Log",n,void 0)},947990:n=>{d.eb("Sin",n,void 0)},948041:n=>{d.eb("Cos",n,void 0)},948092:n=>{d.eb("Tan",n,void 0)},948143:n=>{d.eb("Asin",n,void 0)},948195:n=>{d.eb("Acos",n,void 0)},948247:n=>{d.eb("Atan",n,void 0)},948299:n=>{d.eb("Sinh",n,void 0)},948351:n=>{d.eb("Cosh",n,void 0)},948403:n=>{d.eb("Asinh",n,void 0)},948456:n=>{d.eb("Acosh",n,void 0)},948509:n=>{d.eb("Atanh",n,void 0)},948562:n=>{d.eb("Tanh",n,void 0)},948614:n=>{d.eb("Not",n,void 0)},948665:(n,l,f)=>{d.eb("Clip",n,{min:l,max:f})},948734:n=>{d.eb("Clip",n,void 0)},948786:(n,l)=>{d.eb("Elu",n,{alpha:l})},948844:n=>{d.eb("Relu",n,void 0)},948896:(n,l)=>{d.eb("LeakyRelu",n,{alpha:l})},948960:(n,l)=>{d.eb("ThresholdedRelu",n,{alpha:l})},949030:(n,l)=>{d.eb("Cast",n,{to:l})},949088:n=>{d.eb("Add",n,void 0)},949139:n=>{d.eb("Sub",n,void 0)},949190:n=>{d.eb("Mul",n,void 0)},949241:n=>{d.eb("Div",n,void 0)},949292:n=>{d.eb("Pow",n,void 0)},949343:n=>{d.eb("Equal",n,void 0)},949396:n=>{d.eb("Greater",n,void 0)},949451:n=>{d.eb("GreaterOrEqual",n,void 0)},949513:n=>{d.eb("Less",n,void 0)},949565:n=>{d.eb("LessOrEqual",n,void 0)},949624:(n,l,f,b,A)=>{d.eb("ReduceMean",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},949783:(n,l,f,b,A)=>{d.eb("ReduceMax",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},949941:(n,l,f,b,A)=>{d.eb("ReduceMin",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},950099:(n,l,f,b,A)=>{d.eb("ReduceProd",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},950258:(n,l,f,b,A)=>{d.eb("ReduceSum",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},950416:(n,l,f,b,A)=>{d.eb("ReduceL1",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},950573:(n,l,f,b,A)=>{d.eb("ReduceL2",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},950730:(n,l,f,b,A)=>{d.eb("ReduceLogSum",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},950891:(n,l,f,b,A)=>{d.eb("ReduceSumSquare",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},951055:(n,l,f,b,A)=>{d.eb("ReduceLogSumExp",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},951219:n=>{d.eb("Where",n,void 0)},951272:(n,l,f)=>{d.eb("Transpose",n,{perm:l?Array.from(a().subarray(l>>>0,f>>>0)):[]})},951380:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se,R,le)=>{d.eb("ConvTranspose",n,{format:Z?"NHWC":"NCHW",autoPad:l,dilations:[f],group:b,kernel_shape:[A],pads:[P,z],strides:[L],wIsConst:()=>!!r()[K>>>0],outputPadding:oe?Array.from(a().subarray(oe>>>0,ge>>>0)):[],outputShape:Se?Array.from(a().subarray(Se>>>0,R>>>0)):[],activation:Oe(le)})},951782:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se,R)=>{d.eb("ConvTranspose",n,{format:L?"NHWC":"NCHW",autoPad:l,dilations:Array.from(a().subarray(f>>>0,(f>>>0)+2>>>0)),group:b,kernelShape:Array.from(a().subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(a().subarray(P>>>0,(P>>>0)+4>>>0)),strides:Array.from(a().subarray(z>>>0,(z>>>0)+2>>>0)),wIsConst:()=>!!r()[Z>>>0],outputPadding:K?Array.from(a().subarray(K>>>0,oe>>>0)):[],outputShape:ge?Array.from(a().subarray(ge>>>0,Se>>>0)):[],activation:Oe(R)})},952347:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se,R,le)=>{d.eb("ConvTranspose",n,{format:Z?"NHWC":"NCHW",autoPad:l,dilations:[f],group:b,kernel_shape:[A],pads:[P,z],strides:[L],wIsConst:()=>!!r()[K>>>0],outputPadding:oe?Array.from(a().subarray(oe>>>0,ge>>>0)):[],outputShape:Se?Array.from(a().subarray(Se>>>0,R>>>0)):[],activation:Oe(le)})},952749:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se,R)=>{d.eb("ConvTranspose",n,{format:L?"NHWC":"NCHW",autoPad:l,dilations:Array.from(a().subarray(f>>>0,(f>>>0)+2>>>0)),group:b,kernelShape:Array.from(a().subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(a().subarray(P>>>0,(P>>>0)+4>>>0)),strides:Array.from(a().subarray(z>>>0,(z>>>0)+2>>>0)),wIsConst:()=>!!r()[Z>>>0],outputPadding:K?Array.from(a().subarray(K>>>0,oe>>>0)):[],outputShape:ge?Array.from(a().subarray(ge>>>0,Se>>>0)):[],activation:Oe(R)})},953314:(n,l)=>{d.eb("GlobalAveragePool",n,{format:l?"NHWC":"NCHW"})},953405:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se,R,le,Ie)=>{d.eb("AveragePool",n,{format:Ie?"NHWC":"NCHW",auto_pad:l,ceil_mode:f,count_include_pad:b,storage_order:A,dilations:[P,z],kernel_shape:[L,Z],pads:[K,oe,ge,Se],strides:[R,le]})},953689:(n,l)=>{d.eb("GlobalAveragePool",n,{format:l?"NHWC":"NCHW"})},953780:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se,R,le,Ie)=>{d.eb("AveragePool",n,{format:Ie?"NHWC":"NCHW",auto_pad:l,ceil_mode:f,count_include_pad:b,storage_order:A,dilations:[P,z],kernel_shape:[L,Z],pads:[K,oe,ge,Se],strides:[R,le]})},954064:(n,l)=>{d.eb("GlobalMaxPool",n,{format:l?"NHWC":"NCHW"})},954151:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se,R,le,Ie)=>{d.eb("MaxPool",n,{format:Ie?"NHWC":"NCHW",auto_pad:l,ceil_mode:f,count_include_pad:b,storage_order:A,dilations:[P,z],kernel_shape:[L,Z],pads:[K,oe,ge,Se],strides:[R,le]})},954431:(n,l)=>{d.eb("GlobalMaxPool",n,{format:l?"NHWC":"NCHW"})},954518:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se,R,le,Ie)=>{d.eb("MaxPool",n,{format:Ie?"NHWC":"NCHW",auto_pad:l,ceil_mode:f,count_include_pad:b,storage_order:A,dilations:[P,z],kernel_shape:[L,Z],pads:[K,oe,ge,Se],strides:[R,le]})},954798:(n,l,f,b,A)=>{d.eb("Gemm",n,{alpha:l,beta:f,transA:b,transB:A})},954902:n=>{d.eb("MatMul",n,void 0)},954956:(n,l,f,b)=>{d.eb("ArgMax",n,{keepDims:!!l,selectLastIndex:!!f,axis:b})},955064:(n,l,f,b)=>{d.eb("ArgMin",n,{keepDims:!!l,selectLastIndex:!!f,axis:b})},955172:(n,l)=>{d.eb("Softmax",n,{axis:l})},955235:(n,l)=>{d.eb("Concat",n,{axis:l})},955295:(n,l,f,b,A)=>{d.eb("Split",n,{axis:l,numOutputs:f,splitSizes:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},955435:n=>{d.eb("Expand",n,void 0)},955489:(n,l)=>{d.eb("Gather",n,{axis:Number(l)})},955560:(n,l)=>{d.eb("GatherElements",n,{axis:Number(l)})},955639:(n,l,f,b,A,P,z,L,Z,K,oe)=>{d.eb("Resize",n,{antialias:l,axes:f?Array.from(a().subarray(f>>>0,b>>>0)):[],coordinateTransformMode:Oe(A),cubicCoeffA:P,excludeOutside:z,extrapolationValue:L,keepAspectRatioPolicy:Oe(Z),mode:Oe(K),nearestMode:Oe(oe)})},955985:(n,l,f,b,A,P,z)=>{d.eb("Slice",n,{starts:l?Array.from(a().subarray(l>>>0,f>>>0)):[],ends:b?Array.from(a().subarray(b>>>0,A>>>0)):[],axes:P?Array.from(a().subarray(P>>>0,z>>>0)):[]})},956201:n=>{d.eb("Tile",n,void 0)},956253:(n,l,f)=>{d.eb("LayerNormalization",n,{axis:Number(l),epsilon:Number(f)})},956360:(n,l,f)=>{d.eb("InstanceNormalization",n,{epsilon:l,format:f?"NHWC":"NCHW"})},956474:(n,l,f)=>{d.eb("InstanceNormalization",n,{epsilon:l,format:f?"NHWC":"NCHW"})},956588:n=>{d.eb("Range",n,void 0)},956641:(n,l)=>{d.eb("Einsum",n,{equation:Oe(l)})},956722:(n,l,f,b,A)=>{d.eb("Pad",n,{mode:l,value:f,pads:b?Array.from(a().subarray(b>>>0,A>>>0)):[]})},956849:(n,l,f,b,A,P)=>{d.eb("BatchNormalization",n,{epsilon:l,momentum:f,spatial:!!A,trainingMode:!!b,format:P?"NHWC":"NCHW"})},957018:(n,l,f,b,A,P)=>{d.eb("BatchNormalization",n,{epsilon:l,momentum:f,spatial:!!A,trainingMode:!!b,format:P?"NHWC":"NCHW"})},957187:(n,l,f)=>{d.eb("CumSum",n,{exclusive:Number(l),reverse:Number(f)})},957284:(n,l,f,b,A,P,z,L,Z)=>{d.eb("Attention",n,{numHeads:l,isUnidirectional:f,maskFilterValue:b,scale:A,doRotary:P,qkvHiddenSizes:z?Array.from(a().subarray(Number(L)>>>0,Number(L)+z>>>0)):[],pastPresentShareBuffer:!!Z})},957556:n=>{d.eb("Gelu",n,void 0)},957608:(n,l,f,b,A,P)=>{d.eb("MultiHeadAttention",n,{numHeads:l,isUnidirectional:f,maskFilterValue:b,scale:A,doRotary:P})},957767:n=>{d.eb("BiasAdd",n,void 0)},957822:n=>{d.eb("BiasSplitGelu",n,void 0)},957883:(n,l)=>{d.eb("SkipLayerNormalization",n,{epsilon:l})},957964:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se)=>{d.eb("Conv",n,{format:Z?"NHWC":"NCHW",auto_pad:l,dilations:[f],group:b,kernel_shape:[A],pads:P?Array.from(a().subarray(P>>>0,z>>>0)):[],strides:[L],w_is_const:()=>!!r()[K>>>0],activation:Oe(oe),activation_params:ge?Array.from(m().subarray(ge>>>0,Se>>>0)):[]})},958334:(n,l,f,b,A,P,z,L,Z,K,oe,ge,Se,R,le,Ie)=>{d.eb("Conv",n,{format:ge?"NHWC":"NCHW",auto_pad:l,dilations:[f,b],group:A,kernel_shape:[P,z],pads:L?Array.from(a().subarray(L>>>0,Z>>>0)):[],strides:[K,oe],w_is_const:()=>!!r()[Se>>>0],activation:Oe(R),activation_params:le?Array.from(m().subarray(le>>>0,Ie>>>0)):[]})},958725:n=>{d.cc(n)},958759:(n,l)=>d.dc(n,l,d.Eb.fc,d.Eb.errors)};function gr(n){this.name="ExitStatus",this.message=`Program terminated with exit(${n})`,this.status=n}var ct=n=>{n.terminate(),n.onmessage=()=>{}},Lr=n=>{me.yb.length==0&&($r(),me.Pb(me.yb[0]));var l=me.yb.pop();if(!l)return 6;me.zb.push(l),me.pb[n.xb]=l,l.xb=n.xb;var f={cmd:"run",start_routine:n.hc,arg:n.Vb,pthread_ptr:n.xb};return S&&l.unref(),l.postMessage(f,n.nc),0},qe=0,yr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,br=(n,l,f)=>{l>>>=0;var b=l+f;for(f=l;n[f]&&!(f>=b);)++f;if(16<f-l&&n.buffer&&yr)return yr.decode(n.buffer instanceof SharedArrayBuffer?n.slice(l,f):n.subarray(l,f));for(b="";l<f;){var A=n[l++];if(A&128){var P=n[l++]&63;if((A&224)==192)b+=String.fromCharCode((A&31)<<6|P);else{var z=n[l++]&63;A=(A&240)==224?(A&15)<<12|P<<6|z:(A&7)<<18|P<<12|z<<6|n[l++]&63,65536>A?b+=String.fromCharCode(A):(A-=65536,b+=String.fromCharCode(55296|A>>10,56320|A&1023))}}else b+=String.fromCharCode(A)}return b},Oe=(n,l)=>(n>>>=0)?br(o(),n,l):"",wr=n=>{var l=Jn();return n=n(),mn(l),n};function ve(n,l){var f=arguments.length-2,b=arguments;return wr(()=>{for(var A=2*f,P=Qn(8*A),z=P>>>3,L=0;L<f;L++){var Z=b[2+L];typeof Z=="bigint"?(he[z+2*L]=1n,he[z+2*L+1]=Z):(he[z+2*L]=0n,h()[z+2*L+1>>>0]=Z)}return si(n,A,P,l)})}function it(n){if(E)return ve(0,1,n);ye=n,0<qe||(me.ic(),d.onExit?.(n),pe=!0),x(n,new gr(n))}var Qt=n=>{if(ye=n,E)throw Fr(n),"unwind";it(n)},vr=n=>{n instanceof gr||n=="unwind"||x(1,n)};function Hn(){for(var n=d.numThreads;n--;)$r();It.unshift(()=>{Rt++,Gn(()=>mr())})}function $r(){var n=U("ort-wasm-simd-threaded.worker.js");n=new Worker(n),me.yb.push(n)}function Gn(n){E?n():Promise.all(me.yb.map(me.Pb)).then(n)}var me={yb:[],zb:[],Ub:[],pb:{},Ib(){E?(me.receiveObjectTransfer=me.ec,me.threadInitTLS=me.Tb,me.setExitStatus=me.Sb):Hn()},Sb:n=>ye=n,sc:["$terminateWorker"],ic:()=>{for(var n of me.zb)ct(n);for(n of me.yb)ct(n);me.yb=[],me.zb=[],me.pb=[]},Rb:n=>{var l=n.xb;delete me.pb[l],me.yb.push(n),me.zb.splice(me.zb.indexOf(n),1),n.xb=0,Zn(l)},ec(){},Tb(){me.Ub.forEach(n=>n())},Pb:n=>new Promise(l=>{n.onmessage=P=>{P=P.data;var z=P.cmd;if(P.targetThread&&P.targetThread!=pn()){var L=me.pb[P.targetThread];L?L.postMessage(P,P.transferList):ee(`Internal error! Worker sent a message "${z}" to target pthread ${P.targetThread}, but that thread no longer exists!`)}else z==="checkMailbox"?Ft():z==="spawnThread"?Lr(P):z==="cleanupThread"?me.Rb(me.pb[P.thread]):z==="killThread"?(P=P.thread,z=me.pb[P],delete me.pb[P],ct(z),Zn(P),me.zb.splice(me.zb.indexOf(z),1),z.xb=0):z==="cancelThread"?me.pb[P.thread].postMessage({cmd:"cancel"}):z==="loaded"?(n.loaded=!0,S&&!n.xb&&n.unref(),l(n)):z==="alert"?alert(`Thread ${P.threadId}: ${P.text}`):P.target==="setimmediate"?n.postMessage(P):z==="callHandler"?d[P.handler](...P.args):z&&ee(`worker sent an unknown command ${z}`)},n.onerror=P=>{throw ee(`worker sent an error! ${P.filename}:${P.lineno}: ${P.message}`),P},S&&(n.on("message",P=>n.onmessage({data:P})),n.on("error",P=>n.onerror(P)));var f=[],b=["onExit"],A;for(A of b)d.hasOwnProperty(A)&&f.push(A);n.postMessage({cmd:"load",handlers:f,urlOrBlob:d.mainScriptUrlOrBlob||e,wasmMemory:be,wasmModule:Me})})};d.PThread=me;var er=n=>{for(;0<n.length;)n.shift()(d)};d.establishStackSpace=()=>{var n=pn(),l=p()[n+52>>>2>>>0];n=p()[n+56>>>2>>>0],li(l,l-n),mn(l)};function Fr(n){if(E)return ve(1,0,n);Qt(n)}d.invokeEntryPoint=(n,l)=>{n=di.apply(null,[n,l]),0<qe?me.Sb(n):Xn(n)};function Ln(n){this.Db=n-24,this.pc=function(l){p()[this.Db+4>>>2>>>0]=l},this.Mb=function(l){p()[this.Db+8>>>2>>>0]=l},this.Ib=function(l,f){this.Kb(),this.pc(l),this.Mb(f)},this.Kb=function(){p()[this.Db+16>>>2>>>0]=0}}var jr=0,_r=0;function Sr(n,l,f,b){return E?ve(2,1,n,l,f,b):Ht(n,l,f,b)}function Ht(n,l,f,b){if(n>>>=0,l>>>=0,f>>>=0,b>>>=0,typeof SharedArrayBuffer>"u")return ee("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var A=[];return E&&A.length===0?Sr(n,l,f,b):(n={hc:f,xb:n,Vb:b,nc:A},E?(n.qc="spawnThread",postMessage(n,A),0):Lr(n))}function qr(n,l,f){return E?ve(3,1,n,l,f):0}function mt(n,l){if(E)return ve(4,1,n,l)}var Je=n=>{for(var l=0,f=0;f<n.length;++f){var b=n.charCodeAt(f);127>=b?l++:2047>=b?l+=2:55296<=b&&57343>=b?(l+=4,++f):l+=3}return l},xr=(n,l,f,b)=>{if(f>>>=0,!(0<b))return 0;var A=f;b=f+b-1;for(var P=0;P<n.length;++P){var z=n.charCodeAt(P);if(55296<=z&&57343>=z){var L=n.charCodeAt(++P);z=65536+((z&1023)<<10)|L&1023}if(127>=z){if(f>=b)break;l[f++>>>0]=z}else{if(2047>=z){if(f+1>=b)break;l[f++>>>0]=192|z>>6}else{if(65535>=z){if(f+2>=b)break;l[f++>>>0]=224|z>>12}else{if(f+3>=b)break;l[f++>>>0]=240|z>>18,l[f++>>>0]=128|z>>12&63}l[f++>>>0]=128|z>>6&63}l[f++>>>0]=128|z&63}}return l[f>>>0]=0,f-A},Dt=(n,l,f)=>xr(n,o(),l,f);function Cr(n,l){if(E)return ve(5,1,n,l)}function Ar(n,l,f){if(E)return ve(6,1,n,l,f)}function Kr(n,l,f){return E?ve(7,1,n,l,f):0}function tr(n,l){if(E)return ve(8,1,n,l)}function Yr(n,l,f){if(E)return ve(9,1,n,l,f)}function Zr(n,l,f,b){if(E)return ve(10,1,n,l,f,b)}function Xr(n,l,f,b){if(E)return ve(11,1,n,l,f,b)}function Jr(n,l,f,b){if(E)return ve(12,1,n,l,f,b)}function Ir(n){if(E)return ve(13,1,n)}function Gt(n,l){if(E)return ve(14,1,n,l)}function Qr(n,l,f){if(E)return ve(15,1,n,l,f)}var rr=n=>{if(n===null)return"null";var l=typeof n;return l==="object"||l==="array"||l==="function"?n.toString():""+n},Tr,lt=n=>{for(var l="";o()[n>>>0];)l+=Tr[o()[n++>>>0]];return l},Er={},nr={},Fn={},Qe;function en(n,l,f={}){var b=l.name;if(!n)throw new Qe(`type "${b}" must have a positive integer typeid pointer`);if(nr.hasOwnProperty(n)){if(f.Yb)return;throw new Qe(`Cannot register type \'${b}\' twice`)}nr[n]=l,delete Fn[n],Er.hasOwnProperty(n)&&(l=Er[n],delete Er[n],l.forEach(A=>A()))}function pt(n,l,f={}){if(!("argPackAdvance"in l))throw new TypeError("registerType registeredInstance requires argPackAdvance");en(n,l,f)}var Pr=(n,l,f)=>{switch(l){case 1:return f?b=>r()[b>>>0>>>0]:b=>o()[b>>>0>>>0];case 2:return f?b=>i()[b>>>1>>>0]:b=>u()[b>>>1>>>0];case 4:return f?b=>a()[b>>>2>>>0]:b=>p()[b>>>2>>>0];case 8:return f?b=>he[b>>>3]:b=>Xe[b>>>3];default:throw new TypeError(`invalid integer width (${l}): ${n}`)}};function or(){this.wb=[void 0],this.Nb=[]}var et=new or;function Lt(n){n>>>=0,n>=et.Db&&--et.get(n).Qb===0&&et.Mb(n)}var Ke=n=>{if(!n)throw new Qe("Cannot use deleted val. handle = "+n);return et.get(n).value},tt=n=>{switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return et.Kb({Qb:1,value:n})}};function tn(n){return this.fromWireType(a()[n>>>2>>>0])}var rn=(n,l)=>{switch(l){case 4:return function(f){return this.fromWireType(m()[f>>>2>>>0])};case 8:return function(f){return this.fromWireType(h()[f>>>3>>>0])};default:throw new TypeError(`invalid float width (${l}): ${n}`)}};function nn(n){return this.fromWireType(p()[n>>>2>>>0])}var on=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,an=(n,l)=>{for(var f=n>>1,b=f+l/2;!(f>=b)&&u()[f>>>0];)++f;if(f<<=1,32<f-n&&on)return on.decode(o().slice(n,f));for(f="",b=0;!(b>=l/2);++b){var A=i()[n+2*b>>>1>>>0];if(A==0)break;f+=String.fromCharCode(A)}return f},sn=(n,l,f)=>{if(f??=2147483647,2>f)return 0;f-=2;var b=l;f=f<2*n.length?f/2:n.length;for(var A=0;A<f;++A){var P=n.charCodeAt(A);i()[l>>>1>>>0]=P,l+=2}return i()[l>>>1>>>0]=0,l-b},ir=n=>2*n.length,jn=(n,l)=>{for(var f=0,b="";!(f>=l/4);){var A=a()[n+4*f>>>2>>>0];if(A==0)break;++f,65536<=A?(A-=65536,b+=String.fromCharCode(55296|A>>10,56320|A&1023)):b+=String.fromCharCode(A)}return b},ue=(n,l,f)=>{if(l>>>=0,f??=2147483647,4>f)return 0;var b=l;f=b+f-4;for(var A=0;A<n.length;++A){var P=n.charCodeAt(A);if(55296<=P&&57343>=P){var z=n.charCodeAt(++A);P=65536+((P&1023)<<10)|z&1023}if(a()[l>>>2>>>0]=P,l+=4,l+4>f)break}return a()[l>>>2>>>0]=0,l-b},un=n=>{for(var l=0,f=0;f<n.length;++f){var b=n.charCodeAt(f);55296<=b&&57343>=b&&++f,l+=4}return l},Mt=()=>{if(!(0<qe))try{E?Xn(ye):Qt(ye)}catch(n){vr(n)}};function at(n){n>>>=0,typeof Atomics.oc=="function"&&(Atomics.oc(a(),n>>>2,n).value.then(Ft),n+=128,Atomics.store(a(),n>>>2,1))}d.__emscripten_thread_mailbox_await=at;var Ft=()=>{var n=pn();if(n&&(at(n),!pe))try{ui(),Mt()}catch(l){vr(l)}};d.checkMailbox=Ft;var ar=[],sr=(n,l)=>{var f=nr[n];if(f===void 0)throw n=ii(n),f=lt(n),wt(n),new Qe(l+" has unknown type "+f);return f},Or=(n,l,f)=>{var b=[];return n=n.toWireType(b,f),b.length&&(p()[l>>>2>>>0]=tt(b)),n},jt=n=>{try{n()}catch(l){Bt(l)}};function ln(){var n=re,l={};for(let[f,b]of Object.entries(n))l[f]=typeof b=="function"?function(){Pt.push(f);try{return b.apply(null,arguments)}finally{pe||(Pt.pop(),dt&&ft===1&&Pt.length===0&&(ft=0,qe+=1,jt(pi),typeof Fibers<"u"&&Fibers.uc()))}}:b;return l}var ft=0,dt=null,dn=0,Pt=[],kr={},s={},c=0,g=null,$=[];function I(){return new Promise((n,l)=>{g={resolve:n,reject:l}})}function D(){var n=Rr(65548),l=n+12;p()[n>>>2>>>0]=l,p()[n+4>>>2>>>0]=l+65536,l=Pt[0];var f=kr[l];return f===void 0&&(f=c++,kr[l]=f,s[f]=l),l=f,a()[n+8>>>2>>>0]=l,n}function H(){var n=a()[dt+8>>>2>>>0];return n=re[s[n]],--qe,n()}function X(n){if(!pe){if(ft===0){var l=!1,f=!1;n((b=0)=>{if(!pe&&(dn=b,l=!0,f)){ft=2,jt(()=>mi(dt)),typeof Browser<"u"&&Browser.Jb.Xb&&Browser.Jb.resume(),b=!1;try{var A=H()}catch(L){A=L,b=!0}var P=!1;if(!dt){var z=g;z&&(g=null,(b?z.reject:z.resolve)(A),P=!0)}if(b&&!P)throw A}}),f=!0,l||(ft=1,dt=D(),typeof Browser<"u"&&Browser.Jb.Xb&&Browser.Jb.pause(),jt(()=>ci(dt)))}else ft===2?(ft=0,jt(fi),wt(dt),dt=null,$.forEach(b=>{if(!pe)try{b(),Mt()}catch(A){vr(A)}})):Bt(`invalid state: ${ft}`);return dn}}function q(n){return X(l=>{n().then(l)})}var j=[],ne={},fe=n=>{var l=ne[n];return l===void 0?lt(n):l},$e=()=>typeof globalThis=="object"?globalThis:Function("return this")(),k=n=>{var l=j.length;return j.push(n),l},ae=(n,l)=>{for(var f=Array(n),b=0;b<n;++b)f[b]=sr(p()[l+4*b>>>2>>>0],"parameter "+b);return f},Ae=(n,l)=>Object.defineProperty(l,"name",{value:n});function Ot(n){var l=Function;if(!(l instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof l} which is not a function`);var f=Ae(l.name||"unknownFunctionName",function(){});return f.prototype=l.prototype,f=new f,n=l.apply(f,n),n instanceof Object?n:f}var kt=n=>n%4===0&&(n%100!==0||n%400===0),No=[0,31,60,91,121,152,182,213,244,274,305,335],Ho=[0,31,59,90,120,151,181,212,243,273,304,334];function Go(n,l,f,b,A,P,z){return E?ve(16,1,n,l,f,b,A,P,z):-52}function Lo(n,l,f,b,A,P){if(E)return ve(17,1,n,l,f,b,A,P)}var Fo=n=>{var l=Je(n)+1,f=Rr(l);return f&&Dt(n,f,l),f},qn=[],jo=(n,l)=>{qn.length=0;for(var f;f=o()[n++>>>0];){var b=f!=105;b&=f!=112,l+=b&&l%8?4:0,qn.push(f==112?p()[l>>>2>>>0]:f==106?he[l>>>3]:f==105?a()[l>>>2>>>0]:h()[l>>>3>>>0]),l+=b?8:4}return qn},Kn={},qo=()=>{if(!Yn){var n={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:v||"./this.program"},l;for(l in Kn)Kn[l]===void 0?delete n[l]:n[l]=Kn[l];var f=[];for(l in n)f.push(`${l}=${n[l]}`);Yn=f}return Yn},Yn;function Ko(n,l){if(E)return ve(18,1,n,l);n>>>=0,l>>>=0;var f=0;return qo().forEach((b,A)=>{var P=l+f;for(A=p()[n+4*A>>>2>>>0]=P,P=0;P<b.length;++P)r()[A++>>>0>>>0]=b.charCodeAt(P);r()[A>>>0>>>0]=0,f+=b.length+1}),0}function Yo(n,l){if(E)return ve(19,1,n,l);n>>>=0,l>>>=0;var f=qo();p()[n>>>2>>>0]=f.length;var b=0;return f.forEach(A=>b+=A.length+1),p()[l>>>2>>>0]=b,0}function Zo(n){return E?ve(20,1,n):52}function Xo(n,l,f,b){return E?ve(21,1,n,l,f,b):52}function Jo(n,l,f,b){return E?ve(22,1,n,l,f,b):70}var Al=[null,[],[]];function Qo(n,l,f,b){if(E)return ve(23,1,n,l,f,b);l>>>=0,f>>>=0,b>>>=0;for(var A=0,P=0;P<f;P++){var z=p()[l>>>2>>>0],L=p()[l+4>>>2>>>0];l+=8;for(var Z=0;Z<L;Z++){var K=o()[z+Z>>>0],oe=Al[n];K===0||K===10?((n===1?Ee:ee)(br(oe,0)),oe.length=0):oe.push(K)}A+=L}return p()[b>>>2>>>0]=A,0}var ei=[31,29,31,30,31,30,31,31,30,31,30,31],ti=[31,28,31,30,31,30,31,31,30,31,30,31];function Il(n){var l=Array(Je(n)+1);return xr(n,l,0,l.length),l}var Tl=(n,l)=>{r().set(n,l>>>0)};function ri(n,l,f,b){function A(R,le,Ie){for(R=typeof R=="number"?R.toString():R||"";R.length<le;)R=Ie[0]+R;return R}function P(R,le){return A(R,le,"0")}function z(R,le){function Ie(gi){return 0>gi?-1:0<gi?1:0}var qt;return(qt=Ie(R.getFullYear()-le.getFullYear()))===0&&(qt=Ie(R.getMonth()-le.getMonth()))===0&&(qt=Ie(R.getDate()-le.getDate())),qt}function L(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function Z(R){var le=R.Ab;for(R=new Date(new Date(R.Bb+1900,0,1).getTime());0<le;){var Ie=R.getMonth(),qt=(kt(R.getFullYear())?ei:ti)[Ie];if(le>qt-R.getDate())le-=qt-R.getDate()+1,R.setDate(1),11>Ie?R.setMonth(Ie+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+le);break}}return Ie=new Date(R.getFullYear()+1,0,4),le=L(new Date(R.getFullYear(),0,4)),Ie=L(Ie),0>=z(le,R)?0>=z(Ie,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}n>>>=0,l>>>=0,f>>>=0,b>>>=0;var K=p()[b+40>>>2>>>0];b={lc:a()[b>>>2>>>0],kc:a()[b+4>>>2>>>0],Gb:a()[b+8>>>2>>>0],Lb:a()[b+12>>>2>>>0],Hb:a()[b+16>>>2>>>0],Bb:a()[b+20>>>2>>>0],vb:a()[b+24>>>2>>>0],Ab:a()[b+28>>>2>>>0],tc:a()[b+32>>>2>>>0],jc:a()[b+36>>>2>>>0],mc:K?Oe(K):""},f=Oe(f),K={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var oe in K)f=f.replace(new RegExp(oe,"g"),K[oe]);var ge="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Se="January February March April May June July August September October November December".split(" ");K={"%a":R=>ge[R.vb].substring(0,3),"%A":R=>ge[R.vb],"%b":R=>Se[R.Hb].substring(0,3),"%B":R=>Se[R.Hb],"%C":R=>P((R.Bb+1900)/100|0,2),"%d":R=>P(R.Lb,2),"%e":R=>A(R.Lb,2," "),"%g":R=>Z(R).toString().substring(2),"%G":R=>Z(R),"%H":R=>P(R.Gb,2),"%I":R=>(R=R.Gb,R==0?R=12:12<R&&(R-=12),P(R,2)),"%j":R=>{for(var le=0,Ie=0;Ie<=R.Hb-1;le+=(kt(R.Bb+1900)?ei:ti)[Ie++]);return P(R.Lb+le,3)},"%m":R=>P(R.Hb+1,2),"%M":R=>P(R.kc,2),"%n":()=>`\n`,"%p":R=>0<=R.Gb&&12>R.Gb?"AM":"PM","%S":R=>P(R.lc,2),"%t":()=>"\t","%u":R=>R.vb||7,"%U":R=>P(Math.floor((R.Ab+7-R.vb)/7),2),"%V":R=>{var le=Math.floor((R.Ab+7-(R.vb+6)%7)/7);if(2>=(R.vb+371-R.Ab-2)%7&&le++,le)le==53&&(Ie=(R.vb+371-R.Ab)%7,Ie==4||Ie==3&&kt(R.Bb)||(le=1));else{le=52;var Ie=(R.vb+7-R.Ab-1)%7;(Ie==4||Ie==5&&kt(R.Bb%400-1))&&le++}return P(le,2)},"%w":R=>R.vb,"%W":R=>P(Math.floor((R.Ab+7-(R.vb+6)%7)/7),2),"%y":R=>(R.Bb+1900).toString().substring(2),"%Y":R=>R.Bb+1900,"%z":R=>{R=R.jc;var le=0<=R;return R=Math.abs(R)/60,(le?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.mc,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(oe in K)f.includes(oe)&&(f=f.replace(new RegExp(oe,"g"),K[oe](b)));return f=f.replace(/\\0\\0/g,"%"),oe=Il(f),oe.length>l?0:(Tl(oe,n),oe.length-1)}me.Ib();for(var ni=Array(256),cn=0;256>cn;++cn)ni[cn]=String.fromCharCode(cn);Tr=ni,Qe=d.BindingError=class extends Error{constructor(n){super(n),this.name="BindingError"}},d.InternalError=class extends Error{constructor(n){super(n),this.name="InternalError"}},Object.assign(or.prototype,{get(n){return this.wb[n]},has(n){return this.wb[n]!==void 0},Kb(n){var l=this.Nb.pop()||this.wb.length;return this.wb[l]=n,l},Mb(n){this.wb[n]=void 0,this.Nb.push(n)}}),et.wb.push({value:void 0},{value:null},{value:!0},{value:!1}),et.Db=et.wb.length,d.count_emval_handles=()=>{for(var n=0,l=et.Db;l<et.wb.length;++l)et.wb[l]!==void 0&&++n;return n};var El=[it,Fr,Sr,qr,mt,Cr,Ar,Kr,tr,Yr,Zr,Xr,Jr,Ir,Gt,Qr,Go,Lo,Ko,Yo,Zo,Xo,Jo,Qo],Pl={ua:function(n,l,f){return q(async()=>{await d.ac(n,l,f)})},b:function(n,l,f){throw n>>>=0,new Ln(n).Ib(l>>>0,f>>>0),jr=n,_r++,jr},fa:function(n){ai(n>>>0,!C,1,!T,131072,!1),me.Tb()},D:function(n){n>>>=0,E?postMessage({cmd:"cleanupThread",thread:n}):me.Rb(me.pb[n])},X:Ht,z:qr,la:mt,T:Cr,V:Ar,ma:Kr,ja:tr,ca:Yr,ia:Zr,H:Xr,U:Jr,R:Ir,ka:Gt,S:Qr,K:function(n,l,f,b,A){n>>>=0,l>>>=0,f>>>=0,l=lt(l);var P=l.indexOf("u")!=-1;P&&(A=(1n<<64n)-1n),pt(n,{name:l,fromWireType:z=>z,toWireType:function(z,L){if(typeof L!="bigint"&&typeof L!="number")throw new TypeError(`Cannot convert "${rr(L)}" to ${this.name}`);if(L<b||L>A)throw new TypeError(`Passing a number "${rr(L)}" from JS side to C/C++ side to an argument of type "${l}", which is outside the valid range [${b}, ${A}]!`);return L},argPackAdvance:8,readValueFromPointer:Pr(l,f,!P),Cb:null})},sa:function(n,l,f,b){n>>>=0,l=lt(l>>>0),pt(n,{name:l,fromWireType:function(A){return!!A},toWireType:function(A,P){return P?f:b},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(o()[A>>>0])},Cb:null})},ra:function(n,l){n>>>=0,l=lt(l>>>0),pt(n,{name:l,fromWireType:f=>{var b=Ke(f);return Lt(f),b},toWireType:(f,b)=>tt(b),argPackAdvance:8,readValueFromPointer:tn,Cb:null})},J:function(n,l,f){n>>>=0,f>>>=0,l=lt(l>>>0),pt(n,{name:l,fromWireType:b=>b,toWireType:(b,A)=>A,argPackAdvance:8,readValueFromPointer:rn(l,f),Cb:null})},v:function(n,l,f,b,A){if(n>>>=0,f>>>=0,l=lt(l>>>0),A===-1&&(A=4294967295),A=L=>L,b===0){var P=32-8*f;A=L=>L<<P>>>P}var z=l.includes("unsigned")?function(L,Z){return Z>>>0}:function(L,Z){return Z};pt(n,{name:l,fromWireType:A,toWireType:z,argPackAdvance:8,readValueFromPointer:Pr(l,f,b!==0),Cb:null})},o:function(n,l,f){function b(P){var z=p()[P>>>2>>>0];return P=p()[P+4>>>2>>>0],new A(r().buffer,P,z)}n>>>=0;var A=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][l];f=lt(f>>>0),pt(n,{name:f,fromWireType:b,argPackAdvance:8,readValueFromPointer:b},{Yb:!0})},L:function(n,l){n>>>=0,l=lt(l>>>0);var f=l==="std::string";pt(n,{name:l,fromWireType:function(b){var A=p()[b>>>2>>>0],P=b+4;if(f)for(var z=P,L=0;L<=A;++L){var Z=P+L;if(L==A||o()[Z>>>0]==0){if(z=Oe(z,Z-z),K===void 0)var K=z;else K+=String.fromCharCode(0),K+=z;z=Z+1}}else{for(K=Array(A),L=0;L<A;++L)K[L]=String.fromCharCode(o()[P+L>>>0]);K=K.join("")}return wt(b),K},toWireType:function(b,A){A instanceof ArrayBuffer&&(A=new Uint8Array(A));var P=typeof A=="string";if(!(P||A instanceof Uint8Array||A instanceof Uint8ClampedArray||A instanceof Int8Array))throw new Qe("Cannot pass non-string to std::string");var z=f&&P?Je(A):A.length,L=Rr(4+z+1),Z=L+4;if(p()[L>>>2>>>0]=z,f&&P)Dt(A,Z,z+1);else if(P)for(P=0;P<z;++P){var K=A.charCodeAt(P);if(255<K)throw wt(Z),new Qe("String has UTF-16 code units that do not fit in 8 bits");o()[Z+P>>>0]=K}else for(P=0;P<z;++P)o()[Z+P>>>0]=A[P];return b!==null&&b.push(wt,L),L},argPackAdvance:8,readValueFromPointer:nn,Cb(b){wt(b)}})},B:function(n,l,f){if(n>>>=0,l>>>=0,f>>>=0,f=lt(f),l===2)var b=an,A=sn,P=ir,z=()=>u(),L=1;else l===4&&(b=jn,A=ue,P=un,z=()=>p(),L=2);pt(n,{name:f,fromWireType:Z=>{for(var K=p()[Z>>>2>>>0],oe=z(),ge,Se=Z+4,R=0;R<=K;++R){var le=Z+4+R*l;(R==K||oe[le>>>L]==0)&&(Se=b(Se,le-Se),ge===void 0?ge=Se:(ge+=String.fromCharCode(0),ge+=Se),Se=le+l)}return wt(Z),ge},toWireType:(Z,K)=>{if(typeof K!="string")throw new Qe(`Cannot pass non-string to C++ string type ${f}`);var oe=P(K),ge=Rr(4+oe+l);return p()[ge>>>2]=oe>>L,A(K,ge+4,oe+l),Z!==null&&Z.push(wt,ge),ge},argPackAdvance:8,readValueFromPointer:tn,Cb(Z){wt(Z)}})},ta:function(n,l){n>>>=0,l=lt(l>>>0),pt(n,{Zb:!0,name:l,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},qa:()=>1,P:function(n,l){n>>>=0,n==l>>>0?setTimeout(()=>Ft()):E?postMessage({targetThread:n,cmd:"checkMailbox"}):(n=me.pb[n])&&n.postMessage({cmd:"checkMailbox"})},Y:function(n,l,f,b){l>>>=0,f/=2,ar.length=f,b=b>>>0>>>3;for(var A=0;A<f;A++)ar[A]=he[b+2*A]?he[b+2*A+1]:h()[b+2*A+1>>>0];return n=0>n?Nt[-n-1]:El[n],me.Wb=l,l=n.apply(null,ar),me.Wb=0,l},ea:at,pa:function(n){S&&me.pb[n>>>0].ref()},t:function(n,l,f){return l>>>=0,f>>>=0,n=Ke(n>>>0),l=sr(l,"emval::as"),Or(l,f,n)},y:function(n){return n>>>=0,q(()=>(n=Ke(n),n.then(tt)))},p:function(n,l,f,b){return f>>>=0,b>>>=0,n=j[n>>>0],l=Ke(l>>>0),n(null,l,f,b)},k:function(n,l,f,b,A){return f>>>=0,b>>>=0,A>>>=0,n=j[n>>>0],l=Ke(l>>>0),f=fe(f),n(l,l[f],b,A)},c:Lt,C:function(n,l){return l>>>=0,n=Ke(n>>>0),l=Ke(l),n==l},n:function(n){return n>>>=0,n===0?tt($e()):(n=fe(n),tt($e()[n]))},j:function(n,l,f){l=ae(n,l>>>0);var b=l.shift();n--;var A=`return function (obj, func, destructorsRef, args) {\n`,P=0,z=[];f===0&&z.push("obj");for(var L=["retType"],Z=[b],K=0;K<n;++K)z.push("arg"+K),L.push("argType"+K),Z.push(l[K]),A+=`  var arg${K} = argType${K}.readValueFromPointer(args${P?"+"+P:""});\n`,P+=l[K].argPackAdvance;for(A+=`  var rv = ${f===1?"new func":"func.call"}(${z.join(", ")});\n`,K=0;K<n;++K)l[K].deleteObject&&(A+=`  argType${K}.deleteObject(arg${K});\n`);return b.Zb||(L.push("emval_returnValue"),Z.push(Or),A+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),L.push(A+`};\n`),n=Ot(L).apply(null,Z),f=`methodCaller<(${l.map(oe=>oe.name).join(", ")}) => ${b.name}>`,k(Ae(f,n))},s:function(n,l){return l>>>=0,n=Ke(n>>>0),l=Ke(l),tt(n[l])},e:function(n){n>>>=0,4<n&&(et.get(n).Qb+=1)},w:function(){return tt([])},m:function(n){n=Ke(n>>>0);for(var l=Array(n.length),f=0;f<n.length;f++)l[f]=n[f];return tt(l)},f:function(n){return tt(fe(n>>>0))},l:function(){return tt({})},i:function(n){n>>>=0;for(var l=Ke(n);l.length;){var f=l.pop();l.pop()(f)}Lt(n)},h:function(n,l,f){l>>>=0,f>>>=0,n=Ke(n>>>0),l=Ke(l),f=Ke(f),n[l]=f},d:function(n,l){return l>>>=0,n=sr(n>>>0,"_emval_take_value"),n=n.readValueFromPointer(l),tt(n)},$:function(n,l){n=-9007199254740992>n||9007199254740992<n?NaN:Number(n),l>>>=0,n=new Date(1e3*n),a()[l>>>2>>>0]=n.getUTCSeconds(),a()[l+4>>>2>>>0]=n.getUTCMinutes(),a()[l+8>>>2>>>0]=n.getUTCHours(),a()[l+12>>>2>>>0]=n.getUTCDate(),a()[l+16>>>2>>>0]=n.getUTCMonth(),a()[l+20>>>2>>>0]=n.getUTCFullYear()-1900,a()[l+24>>>2>>>0]=n.getUTCDay(),n=(n.getTime()-Date.UTC(n.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[l+28>>>2>>>0]=n},aa:function(n,l){n=-9007199254740992>n||9007199254740992<n?NaN:Number(n),l>>>=0,n=new Date(1e3*n),a()[l>>>2>>>0]=n.getSeconds(),a()[l+4>>>2>>>0]=n.getMinutes(),a()[l+8>>>2>>>0]=n.getHours(),a()[l+12>>>2>>>0]=n.getDate(),a()[l+16>>>2>>>0]=n.getMonth(),a()[l+20>>>2>>>0]=n.getFullYear()-1900,a()[l+24>>>2>>>0]=n.getDay();var f=(kt(n.getFullYear())?No:Ho)[n.getMonth()]+n.getDate()-1|0;a()[l+28>>>2>>>0]=f,a()[l+36>>>2>>>0]=-(60*n.getTimezoneOffset()),f=new Date(n.getFullYear(),6,1).getTimezoneOffset();var b=new Date(n.getFullYear(),0,1).getTimezoneOffset();n=(f!=b&&n.getTimezoneOffset()==Math.min(b,f))|0,a()[l+32>>>2>>>0]=n},ba:function(n){n>>>=0;var l=new Date(a()[n+20>>>2>>>0]+1900,a()[n+16>>>2>>>0],a()[n+12>>>2>>>0],a()[n+8>>>2>>>0],a()[n+4>>>2>>>0],a()[n>>>2>>>0],0),f=a()[n+32>>>2>>>0],b=l.getTimezoneOffset(),A=new Date(l.getFullYear(),6,1).getTimezoneOffset(),P=new Date(l.getFullYear(),0,1).getTimezoneOffset(),z=Math.min(P,A);return 0>f?a()[n+32>>>2>>>0]=+(A!=P&&z==b):0<f!=(z==b)&&(A=Math.max(P,A),l.setTime(l.getTime()+6e4*((0<f?z:A)-b))),a()[n+24>>>2>>>0]=l.getDay(),f=(kt(l.getFullYear())?No:Ho)[l.getMonth()]+l.getDate()-1|0,a()[n+28>>>2>>>0]=f,a()[n>>>2>>>0]=l.getSeconds(),a()[n+4>>>2>>>0]=l.getMinutes(),a()[n+8>>>2>>>0]=l.getHours(),a()[n+12>>>2>>>0]=l.getDate(),a()[n+16>>>2>>>0]=l.getMonth(),a()[n+20>>>2>>>0]=l.getYear(),n=l.getTime(),isNaN(n)?(a()[oi()>>>2>>>0]=61,n=-1):n/=1e3,BigInt(n)},Z:Go,_:Lo,O:function(n,l,f){function b(K){return(K=K.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?K[1]:"GMT"}n>>>=0,l>>>=0,f>>>=0;var A=new Date().getFullYear(),P=new Date(A,0,1),z=new Date(A,6,1);A=P.getTimezoneOffset();var L=z.getTimezoneOffset(),Z=Math.max(A,L);p()[n>>>2>>>0]=60*Z,a()[l>>>2>>>0]=+(A!=L),n=b(P),l=b(z),n=Fo(n),l=Fo(l),L<A?(p()[f>>>2>>>0]=n,p()[f+4>>>2>>>0]=l):(p()[f>>>2>>>0]=l,p()[f+4>>>2>>>0]=n)},q:()=>{Bt("")},g:function(n,l,f){return n>>>=0,l=jo(l>>>0,f>>>0),Nt[n].apply(null,l)},M:function(n,l,f){return n>>>=0,l=jo(l>>>0,f>>>0),Nt[n].apply(null,l)},E:()=>{},I:()=>Date.now(),oa:()=>{throw qe+=1,"unwind"},Q:function(){return 4294901760},u:()=>performance.timeOrigin+performance.now(),x:()=>S?(xi(),ur(Si)).cpus().length:navigator.hardwareConcurrency,N:function(n){n>>>=0;var l=o().length;if(n<=l||4294901760<n)return!1;for(var f=1;4>=f;f*=2){var b=l*(1+.2/f);b=Math.min(b,n+100663296);var A=Math;b=Math.max(n,b);e:{A=(A.min.call(A,4294901760,b+(65536-b%65536)%65536)-be.buffer.byteLength+65535)/65536;try{be.grow(A),ke();var P=1;break e}catch{}P=void 0}if(P)return!0}return!1},ga:Ko,ha:Yo,W:Qt,A:Zo,G:Xo,da:Jo,F:Qo,a:be||d.wasmMemory,na:ri,r:function(n,l,f,b){return ri(n>>>0,l>>>0,f>>>0,b>>>0)}},re=function(){function n(f,b){return re=f.exports,re=ln(),re=Ol(),me.Ub.push(re.bb),Tt.unshift(re.va),Me=b,mr(),re}var l={a:Pl};if(Rt++,d.instantiateWasm)try{return d.instantiateWasm(l,n)}catch(f){ee(`Module.instantiateWasm callback failed with error: ${f}`),w(f)}return hr(l,function(f){n(f.instance,f.module)}).catch(w),{}}();d._OrtInit=(n,l)=>(d._OrtInit=re.wa)(n,l),d._OrtGetLastError=(n,l)=>(d._OrtGetLastError=re.xa)(n,l),d._OrtCreateSessionOptions=(n,l,f,b,A,P,z,L,Z,K)=>(d._OrtCreateSessionOptions=re.ya)(n,l,f,b,A,P,z,L,Z,K),d._OrtAppendExecutionProvider=(n,l)=>(d._OrtAppendExecutionProvider=re.za)(n,l),d._OrtAddFreeDimensionOverride=(n,l,f)=>(d._OrtAddFreeDimensionOverride=re.Aa)(n,l,f),d._OrtAddSessionConfigEntry=(n,l,f)=>(d._OrtAddSessionConfigEntry=re.Ba)(n,l,f),d._OrtReleaseSessionOptions=n=>(d._OrtReleaseSessionOptions=re.Ca)(n),d._OrtCreateSession=(n,l,f)=>(d._OrtCreateSession=re.Da)(n,l,f),d._OrtReleaseSession=n=>(d._OrtReleaseSession=re.Ea)(n),d._OrtGetInputOutputCount=(n,l,f)=>(d._OrtGetInputOutputCount=re.Fa)(n,l,f),d._OrtGetInputName=(n,l)=>(d._OrtGetInputName=re.Ga)(n,l),d._OrtGetOutputName=(n,l)=>(d._OrtGetOutputName=re.Ha)(n,l),d._OrtFree=n=>(d._OrtFree=re.Ia)(n),d._OrtCreateTensor=(n,l,f,b,A,P)=>(d._OrtCreateTensor=re.Ja)(n,l,f,b,A,P),d._OrtGetTensorData=(n,l,f,b,A)=>(d._OrtGetTensorData=re.Ka)(n,l,f,b,A),d._OrtReleaseTensor=n=>(d._OrtReleaseTensor=re.La)(n),d._OrtCreateRunOptions=(n,l,f,b)=>(d._OrtCreateRunOptions=re.Ma)(n,l,f,b),d._OrtAddRunConfigEntry=(n,l,f)=>(d._OrtAddRunConfigEntry=re.Na)(n,l,f),d._OrtReleaseRunOptions=n=>(d._OrtReleaseRunOptions=re.Oa)(n),d._OrtCreateBinding=n=>(d._OrtCreateBinding=re.Pa)(n),d._OrtBindInput=(n,l,f)=>(d._OrtBindInput=re.Qa)(n,l,f),d._OrtBindOutput=(n,l,f,b)=>(d._OrtBindOutput=re.Ra)(n,l,f,b),d._OrtClearBoundOutputs=n=>(d._OrtClearBoundOutputs=re.Sa)(n),d._OrtReleaseBinding=n=>(d._OrtReleaseBinding=re.Ta)(n),d._OrtRunWithBinding=(n,l,f,b,A)=>(d._OrtRunWithBinding=re.Ua)(n,l,f,b,A),d._OrtRun=(n,l,f,b,A,P,z,L)=>(d._OrtRun=re.Va)(n,l,f,b,A,P,z,L),d._OrtEndProfiling=n=>(d._OrtEndProfiling=re.Wa)(n),d._JsepOutput=(n,l,f)=>(d._JsepOutput=re.Xa)(n,l,f),d._JsepGetNodeName=n=>(d._JsepGetNodeName=re.Ya)(n);var oi=()=>(oi=re.Za)(),pn=d._pthread_self=()=>(pn=d._pthread_self=re._a)(),Rr=d._malloc=n=>(Rr=d._malloc=re.$a)(n),wt=d._free=n=>(wt=d._free=re.ab)(n);d.__emscripten_tls_init=()=>(d.__emscripten_tls_init=re.bb)();var ii=n=>(ii=re.cb)(n);d.__embind_initialize_bindings=()=>(d.__embind_initialize_bindings=re.db)();var ai=d.__emscripten_thread_init=(n,l,f,b,A,P)=>(ai=d.__emscripten_thread_init=re.fb)(n,l,f,b,A,P);d.__emscripten_thread_crashed=()=>(d.__emscripten_thread_crashed=re.gb)();var si=(n,l,f,b)=>(si=re.hb)(n,l,f,b),Zn=n=>(Zn=re.ib)(n),Xn=d.__emscripten_thread_exit=n=>(Xn=d.__emscripten_thread_exit=re.jb)(n),ui=()=>(ui=re.kb)(),li=(n,l)=>(li=re.lb)(n,l),Jn=()=>(Jn=re.mb)(),mn=n=>(mn=re.nb)(n),Qn=n=>(Qn=re.ob)(n),di=d.dynCall_ii=(n,l)=>(di=d.dynCall_ii=re.qb)(n,l),ci=n=>(ci=re.rb)(n),pi=()=>(pi=re.sb)(),mi=n=>(mi=re.tb)(n),fi=()=>(fi=re.ub)();d.___start_em_js=958871,d.___stop_em_js=959032;function Ol(){var n=re;n=Object.assign({},n);var l=b=>()=>b()>>>0,f=b=>A=>b(A)>>>0;return n.Za=l(n.Za),n._a=l(n._a),n.$a=f(n.$a),n.cb=f(n.cb),n.emscripten_main_runtime_thread_id=l(n.emscripten_main_runtime_thread_id),n.mb=l(n.mb),n.ob=f(n.ob),n}d.wasmMemory=be,d.stackAlloc=Qn,d.stackSave=Jn,d.stackRestore=mn,d.keepRuntimeAlive=()=>0<qe,d.UTF8ToString=Oe,d.stringToUTF8=Dt,d.lengthBytesUTF8=Je,d.ExitStatus=gr,d.PThread=me;var fn;Wt=function n(){fn||hi(),fn||(Wt=n)};function hi(){if(!(0<Rt))if(E)y(d),E||er(Tt),startWorker(d);else{if(d.preRun)for(typeof d.preRun=="function"&&(d.preRun=[d.preRun]);d.preRun.length;)It.unshift(d.preRun.shift());er(It),0<Rt||fn||(fn=!0,d.calledRun=!0,pe||(E||er(Tt),y(d),E||er(Vt)))}}return hi(),t.ready}})();typeof Ai=="object"&&typeof ao=="object"?ao.exports=Ci:typeof define=="function"&&define.amd&&define([],()=>Ci)});var Ti=Br((Vp,Wl)=>{Wl.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\\n\'});var lo,st,Mr,yn,zr,Bi,co,Ve=Q(()=>{"use strict";lo=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},st=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Mr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],yn=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},zr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Bi=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",co=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var bn=Q(()=>{"use strict"});var Mi=Q(()=>{"use strict";bn()});var zi,Ui=Q(()=>{"use strict";zi="1.17.0-dev.20240116-80f274ca6f"});var Vi,Kt,po=Q(()=>{"use strict";Ui();Vi="warning",Kt={wasm:{},webgl:{},webgpu:{},versions:{common:zi},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Vi=e}},get logLevel(){return Vi}};Object.defineProperty(Kt,"logLevel",{enumerable:!0})});var lr,Wi=Q(()=>{"use strict";po();lr=Kt});var Ni=Q(()=>{"use strict"});var Hi=Q(()=>{"use strict";wn()});var Li=Q(()=>{"use strict"});var Fi=Q(()=>{"use strict";wn()});var wn=Q(()=>{"use strict";Ni();Hi();Li();Fi()});var vn=Q(()=>{"use strict";wn()});var mo,ji,Yt,Zt,fo=Q(()=>{"use strict";po();mo=(e,t)=>{Kt.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},ji=(e,t)=>{let r=new Error().stack?.split(/\\r\\n|\\r|\\n/g)||[],o=!1;for(let i=0;i<r.length;i++){if(o&&!r[i].includes("TRACE_FUNC")){let u=`FUNC_${e}::${r[i].trim().split(" ")[1]}`;t&&(u+=`::${t}`),mo("CPU",u);return}r[i].includes("TRACE_FUNC")&&(o=!0)}},Yt=e=>{Kt.wasm.trace&&ji("BEGIN",e)},Zt=e=>{Kt.wasm.trace&&ji("END",e)}});var qi=Q(()=>{"use strict";bn();vn();fo()});var Ki=Q(()=>{"use strict";qi()});var Yi=Q(()=>{"use strict"});var Zi=Q(()=>{"use strict";bn();vn()});var Xi=Q(()=>{"use strict";Zi()});var dr=Q(()=>{"use strict";Mi();Wi();Ki();vn();fo();Yi();Xi()});var Xl,Jl,Ji,Qi,ea,Ql,De,zt=Q(()=>{"use strict";Ve();Xl=["V","I","W","E","F"],Jl=(e,t)=>{console.log(`[${Xl[e]},${new Date().toISOString()}]${t}`)},ea=(e,t)=>{Ji=e,Qi=t},Ql=(e,t)=>{let r=zr(e),o=zr(Ji);r>=o&&Jl(r,typeof t=="function"?t():t)},De=(...e)=>{Qi&&Ql(...e)}});var ta,ra=Q(()=>{"use strict";Ve();ta=(e,t)=>new(yn(t))(e)});var $n=Q(()=>{"use strict"});var _n,ed,na,go,ho,ia,aa=Q(()=>{"use strict";zt();$n();_n=e=>Math.ceil(e/16)*16,ed=1,na=()=>ed++,go=async(e,t,r,o)=>{let i=_n(r),u=e.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(t,0,u,0,i),e.flush(),await u.mapAsync(GPUMapMode.READ);let p=u.getMappedRange();if(o){let m=o();return m.set(new Uint8Array(p,0,r)),m}else return new Uint8Array(p.slice(0,r))}finally{u.destroy()}},ho=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let o=r.buffer,i=r.byteOffset,u=r.byteLength,a=_n(u),p=this.storageCache.get(t);if(!p)throw new Error("gpu data for uploading does not exist");if(p.originalSize!==u)throw new Error(`inconsistent data size. gpu data size=${p.originalSize}, data size=${u}`);let m=this.backend.device.createBuffer({mappedAtCreation:!0,size:a,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),h=m.getMappedRange();new Uint8Array(h).set(new Uint8Array(o,i,u)),m.unmap();let d=this.backend.getCommandEncoder();this.backend.endComputePass(),d.copyBufferToBuffer(m,0,p.gpuData.buffer,0,a),De("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(m)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let i=this.storageCache.get(r);if(!i)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==i.originalSize)throw new Error("inconsistent source and destination gpu data size");let u=_n(o.originalSize),a=this.backend.getCommandEncoder();this.backend.endComputePass(),a.copyBufferToBuffer(o.gpuData.buffer,0,i.gpuData.buffer,0,u)}registerExternalBuffer(t,r,o){let i;if(o){if(i=this.externalBuffers.get(o),i===void 0)throw new Error("previous buffer is not registered");if(t===o)return De("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${i}, buffer is the same, skip.`),i;this.externalBuffers.delete(o)}else i=na();return this.storageCache.set(i,{gpuData:{id:i,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,i),De("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${i}, registered.`),i}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),De("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=_n(t),i,u=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,a=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(u||a){let m=u?this.freeBuffers:this.freeUniformBuffers,h=m.get(o);h||(h=[],m.set(o,h)),h.length>0?i=h.pop():i=this.backend.device.createBuffer({size:o,usage:r})}else i=this.backend.device.createBuffer({size:o,usage:r});let p={id:na(),type:0,buffer:i};return this.storageCache.set(p.id,{gpuData:p,originalSize:t}),De("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${p.id}`),p}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return De("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await go(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},ia=(...e)=>new ho(...e)});var yo,xe,Ye=Q(()=>{"use strict";yo=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},xe=e=>new yo(e)});var bo,vt,W,Xt,Sn,xn,Cn,Ce=Q(()=>{"use strict";bo=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},vt=class{static calcShape(t,r,o=!1){let i=t.length,u=r.length;if(i===0)return r;if(u===0)return t;let a=Math.max(t.length,r.length),p=new Array(a);if(o){if(i<2||u<2)return;let m=bo.calcMatMulShape([t[i-2],t[i-1]],[r[u-2],r[u-1]]);if(m===void 0)return;[p[a-2],p[a-1]]=m}for(let m=o?3:1;m<=a;m++){let h=i-m<0?1:t[i-m],d=u-m<0?1:r[u-m];if(h!==d&&h>1&&d>1)return;p[a-m]=Math.max(h,d)}return p}static isValidBroadcast(t,r){let o=t.length,i=r.length;if(o>i)return!1;for(let u=1;u<=o;u++)if(t[o-u]!==1&&t[o-u]!==r[i-u])return!1;return!0}},W=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let i=1;for(let u=r;u<o;u++){if(t[u]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");i*=t[u]}return i}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let i=r-3;i>=0;--i)o[i]=o[i+1]*t[i+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((i,u)=>i+r[u]+r[u+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,i)=>o===r[i])}},Xt=class e{static adjustPoolAttributes(t,r,o,i,u,a){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let p=0;p<r.length-2;p++)p>=o.length?o.push(r[p+2]):o[p]=r[p+2];for(let p=0;p<o.length;p++)if(p<i.length){if(i[p]<0)throw new Error("strides should be greater than or equal to 1")}else i.push(1);for(let p=0;p<o.length;p++)if(p<u.length){if(u[p]<0)throw new Error("dilations should be greater than or equal to 1")}else u.push(1);for(let p=0;p<o.length*2;p++)if(p<a.length){if(a[p]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let p=0;p<o.length;p++){if(o[p]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[p]>=o[p]||a[p+o.length]>=o[p])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,i,u,a,p){if(p){if(u.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(i.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let m=0;m<t.length-2;m++)e.adjustPadAndReturnShape(t[m+(a?1:2)],r[m],o[m],i[m],u,m,m+t.length-2,p)}}static computePoolOutputShape(t,r,o,i,u,a,p){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let m=[r[0],r[1]];return e.computeShapeHelper(t,r,m,o,i,u,a,p),m}static computeConvOutputShape(t,r,o,i,u,a,p){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let m=[t[0],r[0]];return e.computeShapeHelper(!1,t,m,o,i,u,a,p),m}static computeShapeHelper(t,r,o,i,u,a,p,m){if(t)for(let h=0;h<r.length-2;h++)o.push(1);else for(let h=0;h<r.length-2;h++)o.push(e.adjustPadAndReturnShape(r[h+2],i[h],u[h],a[h],p,h,h+r.length-2,m))}static adjustPadAndReturnShape(t,r,o,i,u,a,p,m){let h=o*(i-1)+1;if(m&&m!=="NOTSET")switch(m){case"VALID":return u[a]=0,u[p]=0,Math.floor((t-h)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let y=((t+r-1)/r-1)*r+i-t;return u[a]=Math.floor(m==="SAME_LOWER"?(y+1)/2:y/2),u[p]=y-u[a],Math.floor((t+y-i)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+u[a]+u[p]-h)/r+1)}},Sn=class{static getShapeOfGemmResult(t,r,o,i,u){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let a,p,m;r?(a=t[1],p=t[0]):(a=t[0],p=t[1]);let h=-1;if(i?(m=o[0],h=1):(m=o[1],h=0),o[h]!==p)throw new Error("dimension mismatch");if(a<=0||m<=0||p<=0)throw new Error("invalid shape specified");if(u&&!vt.isValidBroadcast(u,[a,m]))throw new Error("gemm: invalid bias shape for broadcast");return[a,m,p]}},xn=-34028234663852886e22,Cn=34028234663852886e22});var td,vo,Ne,ht,G,He,Ze,gt,ut,ce,$o,V,J,An,wo,sa,cr,_e=Q(()=>{"use strict";Ve();Ce();td=64,vo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ne=(e,t=1)=>{let r=vo(e,t);return typeof r=="string"?r:r[0]},ht=(e,t=1)=>{let r=vo(e,t);return typeof r=="string"?r:r[1]},G=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:W.computeStrides(e)}],He=e=>e%4===0?4:e%2===0?2:1,Ze=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,gt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,ut=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,ce=(e,t,r,o)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?o==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:o==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,$o=(e,t,r,o,i)=>{let u=typeof r=="number",a=u?r:r.length,p=[...new Array(a).keys()],m=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,h=vo(t,i),d=typeof h=="string"?h:h[1],y=typeof h=="string"?h:h[0],w={indices:m,value:d,storage:y,tensor:t},_=F=>typeof F=="string"?F:`${F}u`,v={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},x=u?"uniforms.":"",T=`${x}${e}_shape`,C=`${x}${e}_strides`,S="";for(let F=0;F<a-1;F++)S+=`\n    let dim${F} = current / ${ce(C,F,a)};\n    let rest${F} = current % ${ce(C,F,a)};\n    indices[${F}] = dim${F};\n    current = rest${F};\n    `;S+=`indices[${a-1}] = current;`;let E=a<2?"":`\n  fn o2i_${e}(offset: u32) -> ${w.indices} {\n    var indices: ${w.indices};\n    var current = offset;\n    ${S}\n    return indices;\n  }`,O=F=>(v.offsetToIndices=!0,a<2?F:`o2i_${e}(${F})`),U=[];if(a>=2)for(let F=a-1;F>=0;F--)U.push(`${ce(C,F,a)} * (indices[${F}])`);let M=a<2?"":`\n  fn i2o_${e}(indices: ${w.indices}) -> u32 {\n    return ${U.join("+")};\n  }`,N=F=>(v.indicesToOffset=!0,a<2?F:`i2o_${e}(${F})`),Y=(...F)=>a===0?"0u":`${w.indices}(${F.map(_).join(",")})`,se=(F,ie)=>a<2?`${F}`:`${ce(F,ie,a)}`,B=(F,ie,he)=>a<2?`${F}=${he};`:`${ce(F,ie,a)}=${he};`,te={},Pe=(F,ie)=>{v.broadcastedIndicesToOffset=!0;let he=`${ie.name}broadcastedIndicesTo${e}Offset`;if(he in te)return`${he}(${F})`;let Xe=[];for(let nt=a-1;nt>=0;nt--){let ke=ie.indicesGet("outputIndices",nt+ie.rank-a);Xe.push(`${se(C,nt)} * (${ke} % ${se(T,nt)})`)}return te[he]=`fn ${he}(outputIndices: ${ie.type.indices}) -> u32 {\n             return ${Xe.length>0?Xe.join("+"):"0u"};\n           }`,`${he}(${F})`},Ee=(F,ie)=>(()=>{if(w.storage===w.value)return`${e}[${F}]=${ie};`;if(w.storage==="vec2<u32>"&&w.value==="i32")return`${e}[${F}]=vec2<u32>(u32(${ie}), select(0u, 0xFFFFFFFFu, ${ie} < 0));`;if(w.storage==="vec2<u32>"&&w.value==="u32")return`${e}[${F}]=vec2<u32>(u32(${ie}), 0u);`;if(w.storage==="u32"&&w.value==="vec4<bool>")return`${e}[${F}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ie}));`;throw new Error(`not supported combination of storage type ${w.storage} and value type ${w.value} yet`)})(),ee=F=>(()=>{if(w.storage===w.value)return`${e}[${F}]`;if(w.storage==="vec2<u32>"&&w.value==="i32")return`i32(${e}[${F}].x)`;if(w.storage==="vec2<u32>"&&w.value==="u32")return`u32(${e}[${F}].x)`;if(w.storage==="u32"&&w.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${F}] & 0xFFu), bool(${e}[${F}] & 0xFF00u), bool(${e}[${F}] & 0xFF0000u), bool(${e}[${F}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${w.storage} and value type ${w.value} yet`)})(),be=a<2?"":`\n  fn get_${e}ByIndices(indices: ${w.indices}) -> ${d} {\n    return ${ee(`i2o_${e}(indices)`)};\n  }`,Me=a<2?"":(()=>{let F=p.map(he=>`d${he}: u32`).join(", "),ie=p.map(he=>`d${he}`).join(", ");return`\n  fn get_${e}(${F}) -> ${d} {\n    return get_${e}ByIndices(${Y(ie)});\n  }`})(),pe=(...F)=>{if(F.length!==a)throw new Error(`indices length must be ${a}`);let ie=F.map(_).join(",");return a===0?ee("0u"):a===1?ee(ie[0]):(v.get=!0,v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}(${ie})`)},ye=F=>a<2?ee(F):(v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}ByIndices(${F})`),de=a<2?"":`\n  fn set_${e}ByIndices(indices: ${w.indices}, value: ${d}) {\n    ${Ee(`i2o_${e}(indices)`,"value")}\n  }`,we=a<2?"":(()=>{let F=p.map(he=>`d${he}: u32`).join(", "),ie=p.map(he=>`d${he}`).join(", ");return`\n  fn set_${e}(${F}, value: ${d}) {\n    set_${e}ByIndices(${Y(ie)}, value);\n  }`})();return{impl:()=>{let F=[],ie=!1;return v.offsetToIndices&&(F.push(E),ie=!0),v.indicesToOffset&&(F.push(M),ie=!0),v.broadcastedIndicesToOffset&&(Object.values(te).forEach(he=>F.push(he)),ie=!0),v.set&&(F.push(we),ie=!0),v.setByIndices&&(F.push(de),ie=!0),v.get&&(F.push(Me),ie=!0),v.getByIndices&&(F.push(be),ie=!0),!u&&ie&&F.unshift(`const ${T} = ${w.indices}(${r.join(",")});`,`const ${C} = ${w.indices}(${W.computeStrides(r).join(",")});`),F.join(`\n`)},type:w,offsetToIndices:O,indicesToOffset:N,broadcastedIndicesToOffset:Pe,indices:Y,indicesGet:se,indicesSet:B,set:(...F)=>{if(F.length!==a+1)throw new Error(`indices length must be ${a}`);let ie=F[a];if(typeof ie!="string")throw new Error("value must be string");let he=F.slice(0,a).map(_).join(",");return a===0?Ee("0u",ie):a===1?Ee(he[0],ie):(v.set=!0,v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}(${he}, ${ie})`)},setByOffset:Ee,setByIndices:(F,ie)=>a<2?Ee(F,ie):(v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}ByIndices(${F}, ${ie});`),get:pe,getByOffset:ee,getByIndices:ye,usage:o,name:e,strides:C,shape:T,rank:a}},V=(e,t,r,o=1)=>$o(e,t,r,"input",o),J=(e,t,r,o=1)=>$o(e,t,r,"output",o),An=(e,t,r,o=1)=>$o(e,t,r,"internal",o),wo=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=td){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],i=typeof t=="number"?1:t[2],u=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,a=u?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,p=u?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*i}u + local_idx;`;return`@compute @workgroup_size(${r}, ${o}, ${i})\n  fn main(${a}) {\n    ${p}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",i=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${i}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:i}of this.uniforms)if(i&&i>4)o==="f16"?t.push(`@align(16) ${r}:array<mat2x4<${o}>, ${Math.ceil(i/8)}>`):t.push(`${r}:array<vec4<${o}>, ${Math.ceil(i/4)}>`);else{let u=i==null||i===1?o:`vec${i}<${o}>`;t.push(`${r}:${u}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},sa=e=>new wo(e),cr=(e,t)=>{let r=e.length,o=[];for(let i=0;i<r;i++){let u=r-1-i,a=e[u]||1;(t[t.length-1-i]||1)>1&&a===1&&o.unshift(u)}return o}});var rd,ua,nd,od,yt,la,da,pr=Q(()=>{"use strict";Ce();Ye();_e();rd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},ua=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,nd=(e,t)=>W.sortBasedOnPerm(e,ua(e.length,t)),od=(e,t,r,o)=>{let i=[];i.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let u=0;u<t;++u)i.push(r.indicesSet("a",e[u],`i[${u}]`));return i.push("return a;}"),i.join(`\n`)},yt=(e,t)=>{let r=e.dataType,o=e.dims.length,i=ua(o,t),u=nd(e.dims,i),a=J("output",r,u.length),p=V("a",r,o),m=h=>`\n  ${h.registerUniform("output_size","u32").declareVariables(p,a)}\n\n  ${od(i,o,p,a)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${a.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${a.setByOffset("global_idx",p.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:h=>{let d=W.size(u);return{outputs:[{dims:u,dataType:h[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:[{type:"uint32",data:d},...G(h[0].dims),...G(u)]}},getShaderSource:m}},la=(e,t)=>{rd(e.inputs),e.compute(yt(e.inputs[0],t.perm))},da=e=>xe({perm:e.perm})});var id,ad,sd,ud,ld,dd,cd,pd,md,fd,$t,ca,pa,ma,fa,ha,ga,ya,ba,wa,va,$a=Q(()=>{"use strict";Ce();_e();In();pr();id={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},ad={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},sd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},ud={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},ld=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},dd=(e,t)=>{let r=[],o=e.length;for(let u=0;u<o;u++)t.indexOf(u)===-1&&r.push(e[u]);let i=t.map(u=>e[u]);return[r,i]},cd=(e,t)=>{let r=e.length+t.length,o=[],i=0;for(let u=0;u<r;u++)t.indexOf(u)===-1?o.push(e[i++]):o.push(1);return o},pd=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},md=(e,t)=>{let r=[];if(!pd(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},fd=(e,t,r,o,i,u,a)=>{let p=r[0].dims,m=W.size(u),h=W.size(a),d=V("_A",r[0].dataType,p),y=J("output",i,u),w=32,_=`\n          var<workgroup> aBestValues : array<${y.type.storage}, ${w}>;\n       `;return{name:e,shaderCache:t,getShaderSource:x=>`\n        ${x.registerUniform("reduceSize","u32").declareVariables(d,y)}\n        ${_}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${x.mainStart(w)}\n\n          let outputIndex = global_idx / ${w};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${y.type.storage}(${sd[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${w}) {\n           let candidate = ${y.type.storage}(${d.getByOffset("offset + k")});\n           bestValue = ${id[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${w}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${ad[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${y.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${y.type.storage}(uniforms.reduceSize)`:`${ud[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:u,dataType:i}],dispatchGroup:{x:m},programUniforms:[{type:"uint32",data:h}]})}},$t=(e,t,r,o)=>{let i=e.inputs.length===1?r:_o(e.inputs,r),u=i.axes;u.length===0&&!i.noopWithEmptyAxes&&(u=e.inputs[0].dims.map((_,v)=>v));let a=W.normalizeAxes(u,e.inputs[0].dims.length),p=a,m=e.inputs[0],h=md(p,e.inputs[0].dims.length);h.length>0&&(m=e.compute(yt(e.inputs[0],h),{inputs:[0],outputs:[-1]})[0],p=ld(p.length,m.dims.length));let[d,y]=dd(m.dims,p),w=d;i.keepDims&&(w=cd(d,a)),e.compute(fd(t,{hint:i.cacheKey,inputDependencies:["type"]},[m],o,e.inputs[0].dataType,w,y),{inputs:[m]})},ca=(e,t)=>{$t(e,"ReduceMeanShared",t,"mean")},pa=(e,t)=>{$t(e,"ReduceL1Shared",t,"l1")},ma=(e,t)=>{$t(e,"ReduceL2Shared",t,"l2")},fa=(e,t)=>{$t(e,"ReduceLogSumExpShared",t,"logSumExp")},ha=(e,t)=>{$t(e,"ReduceMaxShared",t,"max")},ga=(e,t)=>{$t(e,"ReduceMinShared",t,"min")},ya=(e,t)=>{$t(e,"ReduceProdShared",t,"prod")},ba=(e,t)=>{$t(e,"ReduceSumShared",t,"sum")},wa=(e,t)=>{$t(e,"ReduceSumSquareShared",t,"sumSquare")},va=(e,t)=>{$t(e,"ReduceLogSumShared",t,"logSum")}});var _t,hd,Tn,_o,St,gd,yd,bd,wd,vd,$d,_d,Sd,xd,Cd,xt,_a,Sa,xa,Ca,Aa,Ia,Ta,Ea,Pa,Oa,In=Q(()=>{"use strict";Ce();Ye();_e();$a();_t=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},hd=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Tn=(e,t,r,o,i,u,a=!1,p=!1)=>{let m=[],h=r[0].dims,d=h.length,y=W.normalizeAxes(i,d),w=!p&&y.length===0;h.forEach((T,C)=>{w||y.indexOf(C)>=0?a&&m.push(1):m.push(T)});let _=m.length,v=W.size(m);return{name:e,shaderCache:t,getShaderSource:T=>{let C=[],S=V("_A",r[0].dataType,d),E=J("output",u,_),O=o(S,E,y),U=O[2];for(let M=0,N=0;M<d;M++)w||y.indexOf(M)>=0?(a&&N++,U=`for(var j${M}: u32 = 0; j${M} < ${h[M]}; j${M}++) {\n                  ${O[2].includes("last_index")?`let last_index = j${M};`:""}\n                  ${S.indicesSet("input_indices",M,`j${M}`)}\n                  ${U}\n                }`):(C.push(`${S.indicesSet("input_indices",M,E.indicesGet("output_indices",N))};`),N++);return`\n\n        ${T.registerUniform("output_size","u32").declareVariables(S,E)}\n\n        ${T.mainStart()}\n          ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${S.type.indices};\n          let output_indices = ${E.offsetToIndices("global_idx")};\n\n          ${C.join(`\n`)}\n          ${O[0]}       // init ops for reduce max/min\n          ${O[1]}\n          ${U}\n          ${O[3]}\n          ${O.length===4?E.setByOffset("global_idx","value"):O.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:m,dataType:u}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:"uint32",data:v},...G(h),...G(m)]})}},_o=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),xe({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},St=(e,t,r,o)=>{let i=e.inputs,u=i.length===1?r:_o(i,r);e.compute(Tn(t,{hint:u.cacheKey,inputDependencies:["rank"]},[i[0]],u.noopWithEmptyAxes&&u.axes.length===0?hd:o,u.axes,i[0].dataType,u.keepDims,u.noopWithEmptyAxes),{inputs:[0]})},gd=(e,t)=>{_t(e.inputs),St(e,"ReduceLogSum",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,"value = log(value);"])},yd=(e,t)=>{_t(e.inputs),St(e,"ReduceL1",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += abs(${o.getByIndices("input_indices")});`,""])},bd=(e,t)=>{_t(e.inputs),St(e,"ReduceL2",t,(o,i)=>[`var t = ${i.type.value}(0); var value = ${i.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},wd=(e,t)=>{_t(e.inputs),St(e,"ReduceLogSumExp",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += exp(${o.getByIndices("input_indices")});`,"value = log(value);"])},vd=(e,t)=>{_t(e.inputs),St(e,"ReduceMax",t,(o,i,u)=>{let a=[];for(let p=0;p<o.rank;p++)(u.indexOf(p)>=0||u.length===0)&&a.push(o.indicesSet("input_indices",p,0));return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = max(value, ${o.getByIndices("input_indices")});`,""]})},$d=(e,t)=>{_t(e.inputs),St(e,"ReduceMean",t,(o,i,u)=>{let a=1;for(let p=0;p<o.rank;p++)(u.indexOf(p)>=0||u.length===0)&&(a*=e.inputs[0].dims[p]);return["var sum = f32(0);","",`sum += f32(${o.getByIndices("input_indices")});`,`let value = ${i.type.value}(sum / ${a});`]})},_d=(e,t)=>{_t(e.inputs),St(e,"ReduceMin",t,(o,i,u)=>{let a=[];for(let p=0;p<o.rank;p++)(u.indexOf(p)>=0||u.length===0)&&a.push(`input_indices[${p}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = min(value, ${o.getByIndices("input_indices")});`,""]})},Sd=(e,t)=>{_t(e.inputs),St(e,"ReduceProd",t,(o,i)=>[`var value = ${i.type.storage}(1);`,"",`value *= ${o.getByIndices("input_indices")};`,""])},xd=(e,t)=>{_t(e.inputs),St(e,"ReduceSum",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,""])},Cd=(e,t)=>{_t(e.inputs),St(e,"ReduceSumSquare",t,(o,i)=>[`var t = ${i.type.value}(0); var value = ${i.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += t * t;`,""])},xt=(e,t,r)=>{if(t.length===0)return r;let o=1,i=1;for(let u=0;u<t.length;u++)t.indexOf(u)===-1?o*=e[u]:i*=e[u];return i<32&&o>1024},_a=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$d(e,t):ca(e,t)},Sa=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yd(e,t):pa(e,t)},xa=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bd(e,t):ma(e,t)},Ca=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wd(e,t):fa(e,t)},Aa=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vd(e,t):ha(e,t)},Ia=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_d(e,t):ga(e,t)},Ta=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sd(e,t):ya(e,t)},Ea=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xd(e,t):ba(e,t)},Pa=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cd(e,t):wa(e,t)},Oa=(e,t)=>{xt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?gd(e,t):va(e,t)}});var ka,Ra,Ba,So,Da=Q(()=>{"use strict";Ve();Ye();In();ka=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Ra=(e,t)=>{ka(e.inputs);let r=(o,i,u)=>{let a=[];for(let p=0;p<o.rank;p++)(u.indexOf(p)>=0||u.length===0)&&a.push(`input_indices[${p}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(Tn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ba=(e,t)=>{ka(e.inputs);let r=(o,i,u)=>{let a=[];for(let p=0;p<o.rank;p++)(u.indexOf(p)>=0||u.length===0)&&a.push(`input_indices[${p}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(Tn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},So=e=>xe(e)});var Ad,Id,Td,Ed,En,Pd,Ma,xo=Q(()=>{"use strict";Ve();$n();_e();Ad=(e,t)=>{let r=e[0],o=e[1],i=e[2],u=e[3],a=e[4],p=e[5];if(a&&p)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let m=r.dims[0],h=r.dims[1],d=r.dims[2];if(i.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==d)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(i.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let y=i.dims[0]/3,w=y,_=w;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let E of t.qkvHiddenSizes)if(E%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],w=t.qkvHiddenSizes[1],_=t.qkvHiddenSizes[2]}let v=h;if(y!==w)throw new Error("qkv_hidden_sizes first element should be same as the second");if(i.dims[0]!==y+w+_)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let x=0;if(a){if(w!==_)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(a.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(a.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(a.dims[1]!==m)throw new Error(\'Input "past" second dimension must be batch_size\');if(a.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(a.dims[4]!==w/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(x=a.dims[3])}let T=v+x,C=-1,S=0;if(u)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(p)throw new Error("relativePositionBias is not supported");return{batchSize:m,sequenceLength:h,pastSequenceLength:x,kvSequenceLength:v,totalSequenceLength:T,maxSequenceLength:C,inputHiddenSize:d,hiddenSize:y,vHiddenSize:_,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor(_/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:S,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Id=(e,t,r,o)=>{let i=He(o),u=64,a=o/i;a<u?u=1:a/8<64&&(u=Math.ceil(a/8));let p=Math.ceil(o/i/u),h=[{type:st(t.dataType),data:1/o},{type:"uint32",data:a},{type:"uint32",data:p}],d=Ne(t.dataType,i),y=w=>{let _=J("x",t.dataType,t.dims,i),v="thread_max_vector";i===2?v="max(thread_max_vector.x, thread_max_vector.y)":i===4&&(v="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let x=ht(t.dataType),T=[{name:"d_inv",type:x},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${u}>;\n  var<workgroup> wgSum: array<f32, ${u}>;\n  ${w.registerUniforms(T).declareVariables(_)}\n  ${w.mainStart([u,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${Ze("f32",i,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${gt(x,i,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${v};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${u}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Ze("f32",i,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${gt(x,i,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${ut("sumVector",i)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${u}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${Ze(x,i,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${gt(x,i,"x[offset + i]")};\n        x[offset + i] = ${_.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${u};${d};${i}`},getShaderSource:y,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:h})},{inputs:[t],outputs:[]})},Td=(e,t,r,o,i,u)=>{let a=[i.batchSize,i.numHeads,i.sequenceLength,i.kvSequenceLength+i.pastSequenceLength],p=u.scale===0?1/Math.sqrt(i.headSize):u.scale,m=He(i.headSize),h=i.headSize/m,d=12,y={x:Math.ceil(i.totalSequenceLength/d),y:Math.ceil(i.sequenceLength/d),z:i.batchSize*i.numHeads},w=st(t.dataType),_=[{type:"uint32",data:i.sequenceLength},{type:"uint32",data:h},{type:"uint32",data:i.totalSequenceLength},{type:"uint32",data:i.kvSequenceLength},{type:w,data:p}],v=[t,r],x=C=>{let S=V("q",t.dataType,t.dims,m),E=V("key",r.dataType,r.dims,m),O=J("output",t.dataType,a),U=Ne(t.dataType),M=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:U}];return`\n  const beta: ${U} = 1.0;\n  const TILE_SIZE = ${d}u;\n\n  var<workgroup> tileQ: array<${S.type.storage}, ${d*d}>;\n  var<workgroup> tileK: array<${S.type.storage}, ${d*d}>;\n  ${C.registerUniforms(M).declareVariables(S,E,O)}\n  ${C.mainStart([d,d,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${Ze(U,m)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (lm < uniforms.M && ln < uniforms.N) {\n      let outputIdx = headOffset + lm * uniforms.N + ln;\n      output[outputIdx] = ${ut("value",m)} * uniforms.alpha;\n    }\n  }`},T=e.compute({name:"AttentionProbs",shaderCache:{hint:`${m}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType,gpuDataType:0}],dispatchGroup:y,programUniforms:_}),getShaderSource:x},{inputs:v,outputs:[-1]})[0];return Id(e,T,i.batchSize*i.numHeads*i.sequenceLength,i.totalSequenceLength),T},Ed=(e,t,r,o)=>{let i=[o.batchSize,o.sequenceLength,o.vHiddenSize],u=12,a={x:Math.ceil(o.vHeadSize/u),y:Math.ceil(o.sequenceLength/u),z:o.batchSize*o.numHeads},p=[{type:"uint32",data:o.sequenceLength},{type:"uint32",data:o.totalSequenceLength},{type:"uint32",data:o.vHeadSize},{type:"uint32",data:o.numHeads},{type:"uint32",data:o.vHiddenSize}],m=h=>{let d=V("probs",t.dataType,t.dims),y=V("v",r.dataType,r.dims),w=J("output",t.dataType,i),_=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`\n  const TILE_SIZE = ${u}u;\n  var<workgroup> tileQ: array<${d.type.value}, ${u*u}>;\n  var<workgroup> tileK: array<${d.type.value}, ${u*u}>;\n  ${h.registerUniforms(_).declareVariables(d,y,w)}\n  ${h.mainStart([u,u,1])}\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${d.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType,gpuDataType:0}],dispatchGroup:a,programUniforms:p}),getShaderSource:m},{inputs:[t,r],outputs:[0]})[0]},En=(e,t,r,o,i,u,a,p,m,h,d)=>{let y=Td(e,t,r,m,h,d);Ed(e,y,o,h)},Pd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=t.sequenceLength,i=t.inputHiddenSize,u=t.headSize,a=12,p={x:Math.ceil(t.headSize/a),y:Math.ceil(t.sequenceLength/a),z:t.batchSize*t.numHeads},m=[e.inputs[0],e.inputs[1],e.inputs[2]],h=[{type:"uint32",data:o},{type:"uint32",data:i},{type:"uint32",data:u},{type:"uint32",data:t.numHeads},{type:"uint32",data:t.headSize},{type:"uint32",data:t.hiddenSize},{type:"uint32",data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],d=y=>{let w=J("output_q",m[0].dataType,r),_=J("output_k",m[0].dataType,r),v=J("output_v",m[0].dataType,r),x=V("input",m[0].dataType,m[0].dims),T=V("weight",m[1].dataType,m[1].dims),C=V("bias",m[2].dataType,m[2].dims),S=x.type.storage,E=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`\n  const TILE_SIZE = ${a}u;\n  var<workgroup> tileInput: array<${S}, ${a*a}>;\n  var<workgroup> tileWeightQ: array<${S}, ${a*a}>;\n  var<workgroup> tileWeightK: array<${S}, ${a*a}>;\n  var<workgroup> tileWeightV: array<${S}, ${a*a}>;\n  ${y.registerUniforms(E).declareVariables(x,T,C,w,_,v)}\n  ${y.mainStart([a,a,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${S}(0);\n    var valueK = ${S}(0);\n    var valueV = ${S}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:p,programUniforms:h}),getShaderSource:d},{inputs:m,outputs:[-1,-1,-1]})},Ma=(e,t)=>{let r=Ad(e.inputs,t),[o,i,u]=Pd(e,r);return En(e,o,i,u,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Od,kd,Rd,za,Ua=Q(()=>{"use strict";dr();Ce();Ye();_e();Od=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,i,u)=>{let a=i.length;if(a!==o.length)throw new Error(`${u}: num dimensions != ${a}`);i.forEach((p,m)=>{if(p!==o[m])throw new Error(`${u}: dim[${m}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},kd=(e,t)=>{let{epsilon:r,spatial:o,format:i}=t,u=e[0].dims,a=o?He(u[u.length-1]):1,p=i==="NHWC"&&u.length>1?a:1,m=W.size(u)/a,h=o,d=h?u.length:u,y=V("x",e[0].dataType,e[0].dims,a),w=V("scale",e[1].dataType,e[1].dims,p),_=V("bias",e[2].dataType,e[2].dims,p),v=V("inputMean",e[3].dataType,e[3].dims,p),x=V("inputVar",e[4].dataType,e[4].dims,p),T=J("y",e[0].dataType,d,a),C=()=>{let E="";if(o)E=`let cOffset = ${u.length===1?"0u":i==="NHWC"?`outputIndices[${u.length-1}] / ${a}`:"outputIndices[1]"};`;else if(i==="NCHW")E=`\n            ${T.indicesSet("outputIndices","0","0")}\n            let cOffset = ${T.indicesToOffset("outputIndices")};`;else{E=`var cIndices = ${w.type.indices}(0);\n                       cIndices[0] = outputIndices[${u.length-1}];`;for(let O=1;O<w.rank;O++)E+=`cIndices[${O}] = outputIndices[${O}];`;E+=`let cOffset = ${w.indicesToOffset("cIndices")};`}return E},S=E=>`\n  const epsilon = ${r};\n  ${E.registerUniform("outputSize","u32").declareVariables(y,w,_,v,x,T)}\n  ${E.mainStart()}\n  ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${T.offsetToIndices(`global_idx * ${a}`)};\n    ${C()}\n    let scale = ${w.getByOffset("cOffset")};\n    let bias = ${_.getByOffset("cOffset")};\n    let inputMean = ${v.getByOffset("cOffset")};\n    let inputVar = ${x.getByOffset("cOffset")};\n    let x = ${y.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${T.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${a}`,inputDependencies:h?["rank","type","type","type","type"]:void 0},getShaderSource:S,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:h?[{type:"uint32",data:m},...G(u)]:[{type:"uint32",data:m}]})}},Rd=e=>xe(e),za=(e,t)=>{let{inputs:r,outputCount:o}=e,i=Rd({...t,outputCount:o});if(lr.webgpu.validateInputContent&&Od(r,i),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(kd(r,i))}});var Bd,Dd,Va,Wa=Q(()=>{"use strict";Ce();_e();Bd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Dd=e=>{let t=e[0].dims,r=e[0].dims[2],o=W.size(t)/4,i=e[0].dataType,u=V("input",i,t,4),a=V("bias",i,[r],4),p=V("residual",i,t,4),m=J("output",i,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:d=>`\n  const channels = ${r}u / 4;\n  ${d.declareVariables(u,a,p,m)}\n\n  ${d.mainStart()}\n    ${d.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${u.getByOffset("global_idx")}\n      + ${a.getByOffset("global_idx % channels")} + ${p.getByOffset("global_idx")};\n    ${m.setByOffset("global_idx","value")}\n  }`}},Va=e=>{Bd(e.inputs),e.compute(Dd(e.inputs))}});var Md,Te,Na,Ha,Ga,La,Fa,ja,qa,Ka,Ya,zd,Za,Xa,Ja,Qa,Pn,es,On,ts,rs,ns,os,is,as,ss,us,ls,ds,cs,ps,ms,fs,hs,gs,ys,bs,ws,Co=Q(()=>{"use strict";Ve();Ce();Ye();_e();Md=(e,t,r,o,i,u)=>{let a=Math.ceil(t/4),p="";typeof i=="string"?p=`${i}(a)`:p=i("a");let m=V("inputData",r,[a],4),h=J("outputData",o,[a],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(m,h)}\n\n  ${u??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${m.getByOffset("global_idx")};\n    ${h.setByOffset("global_idx",p)}\n  }`},Te=(e,t,r,o,i,u=e.dataType)=>({name:t,shaderCache:{hint:i,inputDependencies:["type"]},getShaderSource:a=>Md(a,W.size(e.dims),e.dataType,u,r,o),getRunData:a=>({outputs:[{dims:e.dims,dataType:u}],dispatchGroup:{x:Math.ceil(W.size(a[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(W.size(e.dims)/4)}]})}),Na=e=>{e.compute(Te(e.inputs[0],"Abs","abs"))},Ha=e=>{e.compute(Te(e.inputs[0],"Acos","acos"))},Ga=e=>{e.compute(Te(e.inputs[0],"Acosh","acosh"))},La=e=>{e.compute(Te(e.inputs[0],"Asin","asin"))},Fa=e=>{e.compute(Te(e.inputs[0],"Asinh","asinh"))},ja=e=>{e.compute(Te(e.inputs[0],"Atan","atan"))},qa=e=>{e.compute(Te(e.inputs[0],"Atanh","atanh"))},Ka=e=>xe(e),Ya=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Te(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},zd=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:xn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:Cn;return xe({min:t,max:r})},Za=(e,t)=>{let r=e.inputs.length===1?t:zd(e.inputs),o=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Clip",i=>`clamp(${i}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},Xa=e=>{e.compute(Te(e.inputs[0],"Ceil","ceil"))},Ja=e=>{e.compute(Te(e.inputs[0],"Cos","cos"))},Qa=e=>{e.compute(Te(e.inputs[0],"Cosh","cosh"))},Pn=e=>xe(e),es=(e,t)=>{let r=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Elu",o=>`elu_vf32(${o})`,`\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},On=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,ts=e=>{let t=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,On(`vec4<${t}>`,t)))},rs=e=>{e.compute(Te(e.inputs[0],"Exp","exp"))},ns=e=>{e.compute(Te(e.inputs[0],"Floor","floor"))},os=e=>{let t=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,On(`vec4<${t}>`,t)))},is=(e,t)=>{let r=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"LeakyRelu",o=>`select(leaky_relu_alpha_ * ${o}, ${o}, ${o} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},as=e=>{e.compute(Te(e.inputs[0],"Not",t=>`!${t}`))},ss=e=>{e.compute(Te(e.inputs[0],"Neg",t=>`-${t}`))},us=e=>{e.compute(Te(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ls=e=>{let t=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},ds=e=>{e.compute(Te(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},cs=e=>xe(e),ps=(e,t)=>{let r=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"HardSigmoid",o=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${o} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},ms=e=>{e.compute(Te(e.inputs[0],"Sin","sin"))},fs=e=>{e.compute(Te(e.inputs[0],"Sinh","sinh"))},hs=e=>{e.compute(Te(e.inputs[0],"Sqrt","sqrt"))},gs=e=>{e.compute(Te(e.inputs[0],"Tan","tan"))},ys=e=>{e.compute(Te(e.inputs[0],"Tanh",t=>`sign(${t}) * (1 - exp(-2 * abs(${t}))) / (1 + exp(-2 * abs(${t})))`))},bs=(e,t)=>{let r=ht(e.inputs[0].dataType);return e.compute(Te(e.inputs[0],"ThresholdedRelu",o=>`select(vec4<${r}>(0.0), ${o}, ${o} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},ws=e=>{e.compute(Te(e.inputs[0],"Log","log"))}});var Vd,Wd,vs,$s=Q(()=>{"use strict";Ce();_e();Co();Vd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Wd=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=V("input",e[0].dataType,e[0].dims,4),o=V("bias",e[0].dataType,[e[0].dims[2]],4),i=J("output",e[0].dataType,t,4),u=W.size(t)/4,a=Ne(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)}}),getShaderSource:m=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${m.declareVariables(r,o,i)}\n\n  ${On(`vec4<${a}>`,a)}\n\n  ${m.mainStart()}\n    ${m.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${i.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},vs=e=>{Vd(e.inputs),e.compute(Wd(e.inputs))}});var Nd,Hd,Ct,_s,Ss,xs,Cs,As,Is,Ts,Es,Ps,Os,ks=Q(()=>{"use strict";Ve();Ce();_e();Nd=(e,t,r,o,i,u,a,p,m,h,d,y)=>{let w,_;typeof p=="string"?w=_=(S,E)=>`${p}((${S}),(${E}))`:typeof p=="function"?w=_=p:(w=p.scalar,_=p.vector);let v=J("outputData",d,o.length,4),x=V("aData",m,t.length,4),T=V("bData",h,r.length,4),C;if(i)if(u){let S=W.size(t)===1,E=W.size(r)===1,O=t.length>0&&t[t.length-1]%4===0,U=r.length>0&&r[r.length-1]%4===0;S||E?C=v.setByOffset("global_idx",_(S?`${x.type.value}(${x.getByOffset("0")}.x)`:x.getByOffset("global_idx"),E?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"))):C=`\n            let outputIndices = ${v.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${x.broadcastedIndicesToOffset("outputIndices",v)};\n            let offsetB = ${T.broadcastedIndicesToOffset("outputIndices",v)};\n            ${v.setByOffset("global_idx",_(a||O?x.getByOffset("offsetA / 4u"):`${x.type.value}(${x.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||U?T.getByOffset("offsetB / 4u"):`${T.type.value}(${T.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else C=v.setByOffset("global_idx",_(x.getByOffset("global_idx"),T.getByOffset("global_idx")));else{if(!u)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let S=(E,O,U="")=>{let M=`aData[indexA${O}][componentA${O}]`,N=`bData[indexB${O}][componentB${O}]`;return`\n            let outputIndices${O} = ${v.offsetToIndices(`global_idx * 4u + ${O}u`)};\n            let offsetA${O} = ${x.broadcastedIndicesToOffset(`outputIndices${O}`,v)};\n            let offsetB${O} = ${T.broadcastedIndicesToOffset(`outputIndices${O}`,v)};\n            let indexA${O} = offsetA${O} / 4u;\n            let indexB${O} = offsetB${O} / 4u;\n            let componentA${O} = offsetA${O} % 4u;\n            let componentB${O} = offsetB${O} % 4u;\n            ${E}[${O}] = ${U}(${w(M,N)});\n          `};d===9?C=`\n            var data = vec4<u32>(0);\n            ${S("data",0,"u32")}\n            ${S("data",1,"u32")}\n            ${S("data",2,"u32")}\n            ${S("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:C=`\n            ${S("outputData[global_idx]",0)}\n            ${S("outputData[global_idx]",1)}\n            ${S("outputData[global_idx]",2)}\n            ${S("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(x,T,v)}\n\n        ${y??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${C}\n      }`},Hd=(e,t,r,o,i,u,a=r.dataType)=>{let p=!W.areEqual(r.dims,o.dims),m=r.dims,h=W.size(r.dims),d=!1,y=!1,w=[p];if(p){let _=vt.calcShape(r.dims,o.dims,!1);if(!_)throw new Error("Can\'t perform binary op on the given tensors");m=_,h=W.size(m);let v=W.size(r.dims)===1,x=W.size(o.dims)===1,T=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,C=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;w.push(v),w.push(x),w.push(T),w.push(C);let S=1;for(let E=1;E<m.length;E++){let O=r.dims[r.dims.length-E]??1,U=o.dims[o.dims.length-E]??1;if(O===U)S*=O;else break}S%4===0?(y=!0,d=!0):(v||x||T||C)&&(d=!0)}else d=!0;return w.push(d),{name:e,shaderCache:{hint:t+w.map(_=>_.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:_=>Nd(_,r.dims,o.dims,m,d,p,y,i,r.dataType,o.dataType,a,u),getRunData:()=>({outputs:[{dims:m,dataType:a}],dispatchGroup:{x:Math.ceil(h/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(W.size(m)/4)},...G(r.dims),...G(o.dims),...G(m)]})}},Ct=(e,t,r,o,i,u)=>{e.compute(Hd(t,i??"",e.inputs[0],e.inputs[1],r,o,u))},_s=e=>{Ct(e,"Add",(t,r)=>`${t}+${r}`)},Ss=e=>{Ct(e,"Div",(t,r)=>`${t}/${r}`)},xs=e=>{Ct(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Cs=e=>{Ct(e,"Mul",(t,r)=>`${t}*${r}`)},As=e=>{let t=V("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Ct(e,"Pow",{scalar:(o,i)=>`pow_custom(${o},${i})`,vector:(o,i)=>`pow_vector_custom(${o},${i})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Is=e=>{Ct(e,"Sub",(t,r)=>`${t}-${r}`)},Ts=e=>{Ct(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Es=e=>{Ct(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Ps=e=>{Ct(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Os=e=>{Ct(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Ld,Fd,jd,qd,Rs,Bs,Ds=Q(()=>{"use strict";Ce();Ye();_e();Ld=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},Fd=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,jd=(e,t)=>{let r=e.length,o=[];for(let i=0;i<r;++i){let u=t.setByOffset("global_idx",e[i].getByIndices("indices"));r===1?o.push(u):i===0?o.push(`if (inputIndex == ${i}u) { ${u} }`):i===r-1?o.push(`else { ${u} }`):o.push(`else if (inputIndex == ${i}) { ${u} }`)}return o.join(`\n`)},qd=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,i=r.slice(0);for(let C=1;C<e.length;C++){let S=e[C].dims.slice();for(let E=0;E<r.length;E++)if(E===o)i[o]+=S[E];else if(r[E]!==S[E])throw new Error("non concat dimensions must match")}let u=W.size(i),a=new Array(e.length),p=new Array(e.length),m=e[0].dataType,h=0,d=[],y=[],w=[{type:"uint32",data:u}];for(let C=0;C<e.length;++C)h+=e[C].dims[o],a[C]=h,y.push(e[C].dims.length),p[C]=V(`input${C}`,m,y[C]),d.push("rank"),w.push({type:"uint32",data:a[C]});for(let C=0;C<e.length;++C)w.push(...G(e[C].dims));w.push(...G(i));let _=J("output",m,i.length),v=_.indicesGet("indices",o),x=Array.from(Array(a.length).keys()).map(C=>`uniforms.sizeInConcatAxis${C}`).join(","),T=C=>`\n\n  ${(()=>{C.registerUniform("outputSize","u32");for(let S=0;S<e.length;S++)C.registerUniform(`sizeInConcatAxis${S}`,"u32");return C.declareVariables(...p,_)})()}\n\n  ${Fd(a.length,x)}\n\n  ${C.mainStart()}\n    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${_.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${v});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${a.length}u>(${x});\n      ${v} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${jd(p,_)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:w}),getShaderSource:T}},Rs=(e,t)=>{Ld(e.inputs),e.compute(qd(e.inputs,t.axis))},Bs=e=>xe({axis:e.axis})});var At,kn,Ut=Q(()=>{"use strict";Ce();At=(e,t)=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(uniforms.clip_min), ${t}(uniforms.clip_max));`;default:return""}},kn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[xn,Cn];return{activation:t,clipMax:o,clipMin:r}}return{activation:t}}});var je,Rn,Bn=Q(()=>{"use strict";je=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Rn=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Dn,Ao=Q(()=>{"use strict";Dn=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var Kd,Yd,Ur,Ms,Zd,Vr,Xd,Mn,Wr=Q(()=>{"use strict";Ce();_e();Ut();Bn();Kd=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,Yd=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,Ur=(e,t,r="f32",o,i=!1,u=32,a=!1,p=32)=>{let m=t[1]*e[1],h=t[0]*e[0],d=i?m:u,y=i?u:m,w=d/t[0],_=u/t[1];if(!((i&&w===4&&e[1]===4||!i&&(w===3||w===4))&&d%t[0]===0&&u%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${i} is true, innerElementSize ${w} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${w} must be 3 or 4.\n  tileAWidth ${d} must be divisible by workgroupSize[0]${t[0]}. tileInner ${u} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${w}<${r}>, ${d/w}>, ${y}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${h/e[0]}>, ${u}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${w};\nconst tileInner = ${u};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${a?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${m};\n\n  let num_tiles = ${a?`${Math.ceil(p/u)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n  var kStart = ${a?`i32(globalId.z) * ${p}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${_};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${Kd(i,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${w===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${Yd(i,w)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Ms=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,Zd=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Vr=(e,t,r="f32",o,i=!1,u=32,a=!1,p=32,m=!1)=>{let h=e[1]*t[1],d=e[0]*t[0],y=i?h:u,w=i?u:h;if(!(w%t[1]===0&&y%t[0]===0&&u%t[1]===0))throw new Error(`tileAHight ${w} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${u} must be divisible by workgroupSize[1]${t[1]}`);let _=w/t[1],v=y/t[0],x=u/t[1],T=m?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${h};\n    let globalColStart = i32(workgroupId.x) * ${d};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${w}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {\n          ${Ms(i,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${u}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${i?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${h};\n\nlet tileRowA = i32(localId.y) * ${_};\nlet tileColA = i32(localId.x) * ${v};\nlet tileRowB = i32(localId.y) * ${x};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${v}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Ms(i,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${x}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Zd(i)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${w}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${d}>, ${u}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${u};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${a?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let num_tiles = ${a?`${Math.ceil(p/u)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n    var kStart = ${a?`i32(globalId.z) * ${p}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${T}\n  }\n`},Xd=(e,t,r,o,i,u=!1)=>{let[a,p,m]=i,[h,d,y,w]=o,_=cr(a,m),v=cr(p,m),x=Ne(o[0].type.tensor),T=()=>{let E=d.rank,O=h.rank,U=`var aIndices: ${d.type.indices};`;for(let M=E-2-1,N=O-1;M>=0;M--,N--)U+=`\naIndices[${M}] = ${O>1?`batchIndices[${N}]`:"batchIndices"};`;return _.forEach(M=>{U+=`\naIndices[${M}] = 0;`}),U+=`\naIndices[${E-2}] = u32(row);\n                   aIndices[${E-1}] = u32(colIn);`,U},C=()=>{let E=y.rank,O=h.rank,U=`var bIndices: ${y.type.indices};`;for(let M=E-2-1,N=O-1;M>=0;M--,N--)U+=`\nbIndices[${M}] = ${O>1?`batchIndices[${N}]`:"batchIndices"};`;return v.forEach(M=>{U+=`\nbIndices[${M}] = 0;`}),U+=`\nbIndices[${E-2}] = u32(row);\n                   bIndices[${E-1}] = u32(colIn);`,U};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${h.type.indices}) -> ${je(e,x)} {\n      var value = ${je(e,x)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        ${T()}\n        value = ${d.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${h.type.indices}) -> ${je(e,x)} {\n      var value = ${je(e,x)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        ${C()}\n        value = ${y.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${je(e,x)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${u?"bias[colIn]":`${je(e,x)}(bias[row])`};`:""}\n        ${r}\n        ${w.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Mn=(e,t,r,o,i=!1)=>{let u=e[0].dims,a=e[1].dims,p=u.slice(0,-2),m=a.slice(0,-2),h=o?o.slice(0,-2):r.slice(0,-2),d=W.size(h),y=u[u.length-2],w=u[u.length-1],_=a[a.length-1],v=w%4===0&&_%4===0,x=y<=8?[4,1,1]:[4,4,1],T=[8,8,1],C=[Math.ceil(_/T[0]/x[0]),Math.ceil(y/T[1]/x[1]),Math.ceil(d/T[2]/x[2])],S=v?4:1,E=[...p,y,w/S],O=E.length,U=[...m,w,_/S],M=U.length,N=[d,y,_/S],Y=[{type:"int32",data:y},{type:"int32",data:_},{type:"int32",data:w}];t.activation==="Clip"&&Y.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),Y.push(...G(h),...G(E),...G(U));let se=["rank","rank"],B=e.length>2;B&&(Y.push(...G(e[2].dims)),se.push("rank")),Y.push(...G(N));let te=Pe=>{let Ee=h.length,ee=An("batchDims",e[0].dataType,Ee,1),be=Ne(e[0].dataType),Me=V("a",e[0].dataType,O,S),pe=V("b",e[1].dataType,M,S),ye=J("result",e[0].dataType,N.length,S),de=[Me,pe];if(B){let Ge=i?S:1;de.push(V("bias",e[2].dataType,e[2].dims.length,Ge))}let we=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];t.activation==="Clip"&&we.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"});let ze=At(t,ye.type.value),Re=Xd(S,B,ze,[ee,Me,pe,ye],[p,m,h],i);return`\n  ${Pe.registerUniforms(we).registerInternalVariables(ee).declareVariables(...de,ye)}\n  ${Re}\n  ${v?Ur(x,T,be,ee):Vr(x,T,be,ee)}\n                   `};return{name:"MatMul",shaderCache:{hint:`${x};${t.activation};${v};${i}`,inputDependencies:se},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:C[0],y:C[1],z:C[2]},programUniforms:Y}),getShaderSource:te}}});var Jd,zs,Us=Q(()=>{"use strict";zt();_e();Ut();Bn();Ao();Wr();Jd=(e,t,r,o,i=!1,u,a=4,p=4,m=4,h="f32")=>{let d=B=>{switch(B){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${h}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},y=B=>{switch(B){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},w=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,_=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,v=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",x=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",T=e?"row":"col",C=e?"col":"row",S=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${T} / outWidth;\n    let outCol = ${T} % outWidth;\n\n    let WRow = ${C} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${C} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${C} % inChannels;\n    var resData = ${je(a,h)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${v} && xCol >= 0 && xCol < ${x}) {\n      ${w}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${d(a)}\n    }\n    return resData;`,E=e?t&&o?`\n    let col = colIn * ${a};\n    ${S}`:`\n    let col = colIn * ${a};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${S}\n    }\n    return ${je(a,h)}(0.0);`:o&&r?`\n    let col = colIn * ${a};\n    ${S}`:`\n    let col = colIn * ${a};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${S}\n    }\n    return ${je(a,h)}(0.0);`,O=`${y(p)}`,U=je(m,h),M=e?je(a,h):je(p,h),N=e?je(p,h):je(a,h),Y=At(u,U);return`\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${M} {\n      ${e?E:O}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${N} {\n      ${e?O:E}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${U}) {\n      let col = colIn * ${m};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${_}\n      ${Rn(i)}\n      ${Y}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},zs=(e,t,r,o,i,u,a,p)=>{let m=t.format==="NHWC",h=m?e[0].dims[3]:e[0].dims[1],d=r[0],y=m?r[2]:r[3],w=m?r[1]:r[2],_=m?r[3]:r[1],v=m&&(h%4===0||h%3===0)&&_%4===0,x=m?_:y*w,T=m?y*w:_,C=[8,8,1],S=o<=8?[4,1,1]:[4,4,1],E=[Math.ceil(x/C[0]/S[0]),Math.ceil(T/C[1]/S[1]),Math.ceil(d/C[2]/S[2])];De("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${E}`);let O=v?m&&h%4!==0?3:4:1,U=C[1]*S[1],M=C[0]*S[0],N=Math.max(C[0]*O,C[1]),Y=o%U===0,se=i%M===0,B=u%N===0,te=v?[O,4,4]:[1,1,1],Pe=[{type:"int32",data:o},{type:"int32",data:i},{type:"int32",data:u},{type:"int32",data:[t.pads[0],t.pads[1]]},{type:"int32",data:t.strides},{type:"int32",data:t.dilations}];t.activation==="Clip"&&Pe.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),Pe.push(...G(e[0].dims),...G(e[1].dims));let Ee=["rank","rank"];a&&(Pe.push(...G(e[2].dims)),Ee.push("rank")),Pe.push(...G(r));let ee=be=>{let Me=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];t.activation==="Clip"&&Me.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"});let pe=v?4:1,ye=Ne(e[0].dataType),de=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${v?`vec4<${ye}>`:ye}) {\n        result[flatIndex] = ${v?`vec4<${ye}>`:ye}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${v?`vec4<${ye}>`:ye}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${v?"/ 4":""}, value);\n      }`,we=V("x",e[0].dataType,e[0].dims.length,O===3?1:O),ze=V("w",e[1].dataType,e[1].dims.length,pe),Re=[we,ze],Ge=J("result",e[0].dataType,r.length,pe);if(a){let F=V("bias",e[2].dataType,e[2].dims.length,pe);Re.push(F),de+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?`vec4<${ye}>`:ye} {\n          return bias[coords.${m?"w":"y"}${v?"/ 4":""}];\n        }`}return`\n        ${Dn("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${be.registerUniforms(Me).declareVariables(...Re,Ge)}\n        ${de}\n        ${Jd(m,Y,se,B,a,t,te[0],te[1],te[2],ye)}\n        ${v?Ur(S,C,ye,void 0,!m,N):Vr(S,C,ye,void 0,!m,N,!1,void 0,p)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${O};${v};${Y};${se};${B};${U};${M};${N}`,inputDependencies:Ee},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Pe}),getShaderSource:ee}}});var Io,Vs=Q(()=>{"use strict";Ce();_e();Eo();Ut();Io=(e,t,r)=>{let o=e.length>2,i=o?"value += b[output_channel];":"",u=e[0].dims,a=e[1].dims,p=a[0]/t.group,m=t.format==="NHWC",h=To(u,a,t.dilations,t.pads,t.strides,m),d=W.size(h),y=[{type:"uint32",data:d},{type:"uint32",data:t.dilations},{type:"uint32",data:[t.strides[0],t.strides[1]]},{type:"uint32",data:[t.pads[0],t.pads[1]]},{type:"uint32",data:p}];t.activation==="Clip"&&y.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),y.push(...G(u),...G(a),...G(h));let w=["rank","rank"];o&&(y.push(...G(e[2].dims)),w.push("rank")),y.push(...G(h));let _=v=>{let x=J("output",e[0].dataType,h.length),T=At(t,x.type.value),C=V("x",e[0].dataType,u.length),S=V("w",e[1].dataType,a.length),E=[C,S];o&&E.push(V("b",e[2].dataType,e[2].dims));let O=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return t.activation==="Clip"&&O.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}),`\n  ${v.registerUniforms(O).declareVariables(...E,x)}\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let outputIndices = ${x.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${m?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${m?1:2}], outputIndices[${m?2:3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel / uniforms.output_channels_per_group;\n\n    var value: ${x.type.value} = ${x.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[${m?1:2}]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[${m?2:3}]) {\n            continue;\n          }\n\n          let xVal = ${m?C.get("batch","xHeight","xWidth","input_channel"):C.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${S.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${i}\n    ${T}\n    ${x.setByOffset("global_idx","value")}\n  }`};return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:w},getRunData:()=>({outputs:[{dims:r?r(h):h,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:y}),getShaderSource:_}}});var Po,Qd,Ws,Oo=Q(()=>{"use strict";Ce();Wr();_e();Ut();Po=(e,t,r,o,i=!1)=>{let u=e[0].dims,a=e[1].dims,p=u[u.length-2],m=a[a.length-1],h=u[u.length-1],d=He(m),y=He(h),w=He(p),_=W.size(r)/d/w,v=e.length>2,x=o?o.slice(0,-2):r.slice(0,-2),C=[W.size(x),p,m],S=[{type:"uint32",data:_},{type:"uint32",data:p},{type:"uint32",data:m},{type:"uint32",data:h}];t.activation==="Clip"&&S.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),S.push(...G(x),...G(u),...G(a)),v&&S.push(...G(e[2].dims)),S.push(...G(C));let E=O=>{let U=An("batch_dims",e[0].dataType,x.length),M=V("a",e[0].dataType,u.length,y),N=V("b",e[1].dataType,a.length,d),Y=J("output",e[0].dataType,C.length,d),se=At(t,Y.type.value),B=[M,N],te="";if(v){let de=i?d:1;B.push(V("bias",e[2].dataType,e[2].dims.length,de)),te=`${i?`value += bias[col / ${de}];`:`value += ${Y.type.value}(bias[row + i]);`}`}let Pe=u.slice(0,-2),Ee=a.slice(0,-2),ee=cr(Pe,x),be=cr(Ee,x),Me=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];t.activation==="Clip"&&Me.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"});let pe=(de,we)=>{let ze=de.rank,Re=de.name;if(ze===2)return`var ${Re}_indices = ${de.type.indices}(0u, 0u);`;let Ge=U.rank,F=`var ${Re}_indices: ${de.type.indices};`;for(let ie=ze-2-1,he=Ge-1;ie>=0;ie--,he--)F+=`\n${Re}_indices[${ie}] = ${Ge>1?`batch_indices[${he}]`:"batch_indices"};`;return we.forEach(ie=>{F+=`\n${Re}_indices[${ie}] = 0;`}),F+=`${Re}_indices[${ze-2}] = 0u;\n                     ${Re}_indices[${ze-1}] = 0u;`,F},ye=()=>{let de=`var a_data: ${M.type.value};`;for(let we=0;we<y;we++)de+=`\n              let b_data${we} = b[(b_offset + (k + ${we}) * uniforms.N + col) / ${d}];`;for(let we=0;we<w;we++){de+=`a_data = a[(a_offset + (row + ${we}) * uniforms.K + k) / ${y}];`;for(let ze=0;ze<y;ze++)de+=`\n            values[${we}] = fma(${N.type.value}(a_data${y===1?"":`[${ze}]`}), b_data${ze}, values[${we}]);\n`}return de};return`\n  ${O.registerUniforms(Me).registerInternalVariables(U).declareVariables(...B,Y)}\n  ${O.mainStart()}\n    ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let col = (global_idx % (uniforms.N / ${d})) * ${d};\n    var index1 = global_idx / (uniforms.N / ${d});\n    let stride1 = uniforms.M / ${w};\n    let row = (index1 % stride1) * ${w};\n    let batch = index1 / stride1;\n\n    ${r.length===2?"":`let batch_indices = ${U.offsetToIndices("batch")};`}\n    ${pe(M,ee)}\n    let a_offset = ${M.indicesToOffset("a_indices")};\n    ${pe(N,be)}\n    let b_offset = ${N.indicesToOffset("b_indices")};\n    var values: array<${Y.type.value}, ${w}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${y}) {\n      ${ye()}\n    }\n    for (var i = 0u; i < ${w}u; i++) {\n      var value = values[i];\n      ${te}\n      ${se}\n      let cur_indices = ${Y.type.indices}(batch, row + i, col);\n      let offset = ${Y.indicesToOffset("cur_indices")};\n      ${Y.setByOffset(`offset / ${d}`,"value")};\n    }\n  }\n  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${d};${y};${w};${i}`,inputDependencies:v?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:S}),getShaderSource:E}},Qd=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Ws=e=>{Qd(e.inputs);let t=vt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");let r=t[t.length-1],o=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&o<8?e.compute(Po(e.inputs,{activation:""},t)):e.compute(Mn(e.inputs,{activation:""},t))}});var To,Ns,ec,Hs,ko,tc,rc,Ro,Eo=Q(()=>{"use strict";Ce();Us();Wr();Vs();Ut();Oo();pr();To=(e,t,r,o,i,u)=>{let a=e[0],p=e.slice(u?1:2,u?3:4),m=p.length,h=t[0],y=t.slice(2).map((v,x)=>v+(v-1)*(r[x]-1)),_=p.map((v,x)=>v+o[x]+o[x+m]).map((v,x)=>Math.floor((v-y[x]+i[x])/i[x]));return _.splice(0,0,a),_.splice(u?3:1,0,h),_},Ns=[2,3,1,0],ec=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Hs=(e,t)=>{let r=e.kernelShape.slice();for(let u=2;u<t[1].dims.length;++u)r[u-2]===0&&(r[u-2]=t[1].dims[u]);let o=e.pads.slice();Xt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let i=Object.assign({},e);return Object.assign(i,{kernelShape:r,pads:o}),i},ko=e=>{let t=kn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],i=e.dilations,u=e.group,a=e.kernel_shape,p=e.pads,m=e.strides,h=e.w_is_const();return{autoPad:o,format:r,dilations:i,group:u,kernelShape:a,pads:p,strides:m,wIsConst:h,...t,cacheKey:`${e.format};${t.activation};`}},tc=(e,t,r)=>{let o=Hs(r,t),i=r.format==="NHWC";if(r.group!==1){e.compute(Io(t,o));return}let u=t.length===3,a=t[0].dims[i?1:2],p=t[0].dims[i?2:3],m=t[0].dims[i?3:1],h=t[1].dims[2],d=t[1].dims[3],y=To(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,i),w=y[i?1:2],_=y[i?2:3],v=y[i?3:1],x=i&&h===a&&d===p&&r.pads[0]===0&&r.pads[1]===0;if(x||h===1&&d===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let M=y[0],N,Y,se,B=[];if(i){let Ee=e.kernelCustomData.wT??e.compute(yt(t[1],Ns),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Ee),x){let ee=a*p*m;N=t[0].reshape([1,M,ee]),Y=Ee.reshape([1,ee,v]),se=[1,M,v]}else N=t[0].reshape([M,a*p,m]),Y=Ee.reshape([1,m,v]),se=[M,w*_,v];B.push(N),B.push(Y)}else N=t[0].reshape([M,m,a*p]),Y=t[1].reshape([1,v,m]),se=[M,v,w*_],B.push(Y),B.push(N);u&&B.push(t[2]);let te=se[2],Pe=B[0].dims[B[0].dims.length-1];te<8&&Pe<8?e.compute(Po(B,o,y,se,i),{inputs:B}):e.compute(Mn(B,o,y,se,i),{inputs:B});return}let T=!0,C=e.kernelCustomData.wT??e.compute(yt(t[1],Ns),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=C);let S=[t[0],C];u&&S.push(t[2]);let E=i?w*_:v,O=i?v:w*_,U=h*d*m;e.compute(zs(S,o,y,E,O,U,u,T),{inputs:S})},rc=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let i=[0,t.pads[0],0,t.pads[1]],u=[1].concat(t.strides),a=[1].concat(t.dilations),p=[1].concat(t.kernelShape),m=Hs({...t,pads:i,strides:u,dilations:a,kernelShape:p},o);e.compute(Io(o,m,h=>r?[h[0],h[2],h[3]]:[]))},Ro=(e,t)=>{ec(e.inputs,t),e.inputs[0].dims.length===3?rc(e,t):tc(e,e.inputs,t)}});var nc,Gs,Ls=Q(()=>{"use strict";zt();_e();Ut();Bn();Ao();Wr();nc=(e,t=!1,r,o=4)=>{let i=je(o,"f32"),u=C=>{switch(C){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${C} is not supported.`)}},a=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,p=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,m=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",h=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",d=e?"row":"col",y=e?"col":"row",w=`\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${d} / outWidth;\n      let outCol = ${d} % outWidth;\n\n      let WRow = ${y} / (uniforms.filter_dims[1] * inChannels);\n      let WCol = ${y} / inChannels % uniforms.filter_dims[1];\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(${m}) || fract(xR) > 0.0) {\n        return ${i}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${h}) || fract(xC) > 0.0) {\n        return ${i}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${y} % inChannels;\n      ${a}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,_=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n        ${w}\n      }\n      return ${i}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n        ${w}\n      }\n      return ${i}(0.0);`,v=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\n      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${u(o)}\n      }\n      return ${i}(0.0);\n      `,x=At(r,i);return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${i} {\n    ${e?_:v}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${i} {\n    ${e?v:_}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${i}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${p}\n      ${Rn(t)}\n      ${x}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},Gs=(e,t,r,o,i,u,a,p)=>{let m=t.format==="NHWC",h=m?e[0].dims[3]:e[0].dims[1],d=r[0],y=m?r[2]:r[3],w=m?r[1]:r[2],_=m?r[3]:r[1],v=m?h%4===0&&_%4===0:y%4===0&&_%4===0,x=m?_:y*w,T=m?y*w:_,C=v?[8,8,1]:[x<=4||T<=4?4:16,x>4&&T<=4?4:16,1],S=v?[4,4,1]:[x<=4?1:4,x>4&&T<=4?1:4,1],E=[Math.ceil(x/C[0]/S[0]),Math.ceil(T/C[1]/S[1]),Math.ceil(d/C[2]/S[2])];De("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${E}`);let O=v?4:1,U=Math.max(C[0]*O,C[1]),M=v?4:1,N=[t.kernelShape[m?1:2],t.kernelShape[m?2:3]],Y=[N[0]+(t.dilations[0]<=1?0:(N[0]-1)*(t.dilations[0]-1)),N[1]+(t.dilations[1]<=1?0:(N[1]-1)*(t.dilations[1]-1))],se=[Y[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),Y[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],B=[{type:"int32",data:o},{type:"int32",data:i},{type:"int32",data:u},{type:"int32",data:t.strides},{type:"int32",data:t.dilations},{type:"int32",data:N},{type:"int32",data:se}];t.activation==="Clip"&&B.push({type:"float32",data:t.clipMax},{type:"float32",data:t.clipMin}),B.push(...G(e[0].dims),...G(e[1].dims));let te=["rank","rank"];a&&(B.push(...G(e[2].dims)),te.push("rank")),B.push(...G(r));let Pe=Ee=>{let ee=V("x",e[0].dataType,e[0].dims.length,M),be=V("w",e[1].dataType,e[1].dims.length,1),Me=J("result",e[0].dataType,r.length,M),pe=[ee,be],ye="";if(a){let we=V("bias",e[2].dataType,e[2].dims.length,M);pe.push(we),ye+=`\n          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?"vec4<f32>":"f32"} {\n            return bias[coords.${m?"w":"y"}${v?"/ 4":""}];\n          }`}let de=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:N.length},{name:"pads",type:"i32",length:se.length}];return t.activation==="Clip"&&de.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}),`\n        ${Dn("uniforms.result_strides")}\n        ${Ee.registerUniforms(de).declareVariables(...pe,Me)};\n        ${ye}\n        ${nc(m,a,t,O)}\n        ${v?Ur(S,C,"f32",void 0,!m,U):Vr(S,C,"f32",void 0,!m,U,!1,void 0,p)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${S};${C};${v}`,inputDependencies:te},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:B}),getShaderSource:Pe}}});var oc,Bo,Fs=Q(()=>{"use strict";zt();Ce();_e();oc=(e,t,r,o,i,u=!1,a,p,m=!1)=>{let h=m?1:2,d=m?2:3,y=m?3:1,w=u?2:1,_=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${a}>`:a}) {\n    result[flatIndex] = ${u?`vec4<${a}>`:a}(value);\n  }`;o&&(_+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${a}>`:a} {\n      return bias[coords.${m?"w":"y"}${u?"/ 4":""}];\n    }`);let v=u?4:1,x=V("W",t[1].dataType,t[1].dims.length,v),T=V("Dy",t[0].dataType,t[0].dims.length,v),C=[T,x];o&&C.push(V("bias",t[2].dataType,[r[y]].length,v));let S=J("result",t[0].dataType,r.length,v),E=`{\n        let batch: u32 = ${i?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];\n        let r = ${i?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];\n        let c = ${i?"global_id.y":"workgroup_id.y"} * ${w};\n        let d1: u32 = ${i?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${a}>, ${w}>;\n        for (var i = 0; i < ${w}; i++) {\n          dotProd[i] = vec4<${a}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\n          var dyR = (${a}(dyCorner.x) + ${a}(wR)) / ${a}(uniforms.strides.x);\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${a}(uniforms.Dy_shape[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\n            let dyC = (${a}(dyCorner.y) + ${a}(wC)) / ${a}(uniforms.strides.y);\n            let dyC2 = (${a}(dyCorner.y) + 1.0 + ${a}(wC)) / ${a}(uniforms.strides.y);\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${a}(uniforms.Dy_shape[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${a}(uniforms.Dy_shape[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${T.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${a}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${T.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${a}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = uniforms.Dy_shape[${y}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${T.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${a}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${x.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${T.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${a}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${w}; i = i + 1) {\n          let value = dotProd[i] + ${o?"bias[c+i]":`vec4<${a}>(0.0)`};\n          ${S.set("batch","r","c + i","d1","value")};\n        }\n      }`,O=`\n          let outputIndices = ${S.offsetToIndices("global_idx")};\n          let batch = ${S.indicesGet("outputIndices",0)};\n          let d1 = ${S.indicesGet("outputIndices",y)};\n          let r = ${S.indicesGet("outputIndices",h)};\n          let c = ${S.indicesGet("outputIndices",d)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / uniforms.output_channels_per_group;\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${a}(0.0);\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n            if (wR % uniforms.dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${a}(dyRCorner) + ${a}(wR)) / ${a}(uniforms.strides[0]);\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n            if (dyR < 0.0 || dyR >= ${a}(uniforms.Dy_shape[${h}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n              if (wC % uniforms.dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${a}(dyCCorner) + ${a}(wC)) / ${a}(uniforms.strides.y);\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n              if (dyC < 0.0 || dyC >= ${a}(uniforms.Dy_shape[${d}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * uniforms.input_channels_per_group;\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\n                let xValue = ${m?T.get("batch","idyR","idyC","inputChannel"):T.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${x.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${o?"bias[d1]":`${a}(0.0)`};\n          ${S.setByOffset("global_idx","value")};\n        `;return`\n  ${e.registerUniforms(p).declareVariables(...C,S)}\n  ${_}\n\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};\n  ${u?E:O}}`},Bo=(e,t,r)=>{let o=e.length>2,i=t.outputShape,u=W.size(i),a=[Math.ceil(u/64),1,1];De("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${a}`);let p=t.format==="NHWC",m=["rank","rank"],h=[t.strides[0],t.strides[1]],d=[t.kernelShape[p?1:2],t.kernelShape[p?2:3]],y=[t.dilations[0],t.dilations[1]],w=[d[0]+(t.dilations[0]<=1?0:(t.kernelShape[p?1:2]-1)*(t.dilations[0]-1)),d[1]+(t.dilations[1]<=1?0:(t.kernelShape[p?2:3]-1)*(t.dilations[1]-1))],_=[w[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),w[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],v=!1,x=t.group,T=e[1].dims,C=T[0]/x,S=T[1],E=[{type:"int32",data:u},{type:"uint32",data:h},{type:"uint32",data:d},{type:"uint32",data:y},{type:"uint32",data:w},{type:"int32",data:_},{type:"uint32",data:C},{type:"uint32",data:S},...G(e[0].dims),...G(e[1].dims)];o&&(E.push(...G(e[2].dims)),m.push("rank")),E.push(...G(i));let O=a[1]===1&&a[2]===1,U=M=>{let N=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:h.length},{name:"filter_dims",type:"u32",length:d.length},{name:"dilations",type:"u32",length:d.length},{name:"effective_filter_dims",type:"u32",length:w.length},{name:"pads",type:"i32",length:_.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],Y=Ne(e[0].dataType);return`${oc(M,e,i,o,O,v,Y,N,p)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:m},getRunData:()=>({dispatchGroup:{x:a[0],y:a[1],z:a[2]},outputs:[{dims:r?r(i):i,dataType:e[0].dataType}],programUniforms:E}),getShaderSource:U}}});var ic,ac,sc,js,qs,uc,lc,dc,cc,Ks,Ys=Q(()=>{"use strict";Ls();Fs();Ut();pr();ic=(e,t,r,o,i,u)=>(e-1)*t+r+(o-1)*i+1-u,ac=(e,t,r,o,i)=>{let u=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=u,r[i]=e-u):t==="SAME_LOWER"&&(r[o]=e-u,r[i]=u)},sc=(e,t,r,o,i,u,a,p,m,h)=>{let d=e.length-2,y=h.length===0;if(m.length===0)for(let v=0;v<d;++v)m.push(0);let w=e[0],_=t[p?3:1]*i;for(let v=0,x=e.length-d-(p?1:0);v<d;++v,++x){let T=e[x],C=y?T*a[v]:h[v],S=ic(T,a[v],u[v],t[x],r[v],C);ac(S,o,u,v,v+d),y&&h.push(a[v]*(T-1)+m[v]+(t[x]-1)*r[v]+1-u[v]-u[v+d])}h.splice(0,0,w),h.splice(p?3:1,0,_)},js=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((y,w)=>y*w,1)===0){r.length=0;for(let y=2;y<t[1].dims.length;++y)r.push(t[1].dims[y])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let i=e.pads.slice(),u=e.outputShape.slice(),a=e.outputPadding.slice(),p=t[0].dims,m=e.dilations.slice();if(m.reduce((y,w)=>y+w,0)===0){let y=t[0].dims.length-2;m=new Array(y).fill(1)}let h=e.strides.slice();if(h.reduce((y,w)=>y+w,0)===0){let y=t[0].dims.length-2;h=new Array(y).fill(1)}sc(p,r,m,e.autoPad,e.group,i,h,o,a,u);let d=Object.assign({},e);return Object.assign(d,{kernelShape:r,pads:i,outputPadding:a,outputShape:u,dilations:m,strides:h}),d},qs=e=>{let t=kn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],i=e.dilations,u=e.group,a=e.kernelShape,p=e.pads,m=e.strides,h=e.wIsConst(),d=e.outputPadding,y=e.outputShape;return{autoPad:o,format:r,dilations:i,group:u,kernelShape:a,outputPadding:d,outputShape:y,pads:p,strides:m,wIsConst:h,...t,cacheKey:`${e.format};${t.activation};`}},uc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let i=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==i))throw new Error("invalid bias");let u=e[0].dims.length-2;if(t.dilations.reduce((d,y)=>d+y,0)>0&&t.dilations.length!==u)throw new Error(`dilations should be ${u}D`);if(t.strides.reduce((d,y)=>d+y,0)>0&&t.strides.length!==u)throw new Error(`strides should be ${u}D`);if(t.pads.reduce((d,y)=>d+y,0)>0&&t.pads.length!==u*2)throw new Error(`pads should be ${u*2}D`);if(t.outputPadding.length!==u&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${u}D`);if(t.kernelShape.reduce((d,y)=>d+y,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},lc=[2,3,1,0],dc=(e,t,r)=>{let o=js(r,t),i=r.format==="NHWC",u=o.outputShape,a=u[i?3:1],p=t[0].dims[i?3:1];if(o.group!==1||a===1&&p===1){e.compute(Bo(t,o));return}let m=u[i?1:2],h=u[i?2:3],d=t[1].dims[2],y=t[1].dims[3],w=i?m*h:a,_=i?a:m*h,v=d*y*p,x=!0,T=e.kernelCustomData.wT??e.compute(yt(t[1],lc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=T);let C=[t[0],T],S=t.length===3;S&&(!i&&t[2].dims.length===1?C.push(t[2].reshape([t[2].dims[0],1,1])):C.push(t[2])),e.compute(Gs(C,o,u,w,_,v,S,x),{inputs:C})},cc=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let i=t.kernelShape;(i.length===0||i[0]===0)&&(i=[e.inputs[1].dims[2]]);let u=t.dilations;(u.length===0||u[0]===0)&&(u=[1]);let a=t.strides;(a.length===0||a[0]===0)&&(a=[1]);let p=t.pads;p.length===0&&(p=[0,0]),p=[0,p[0],0,p[1]],a=[1].concat(a),u=[1].concat(u),i=[1].concat(i);let m=js({...t,pads:p,strides:a,dilations:u,kernelShape:i},o);e.compute(Bo(o,m,h=>r?[h[0],h[2],h[3]]:[h[0],h[1],h[3]]))},Ks=(e,t)=>{uc(e.inputs,t),e.inputs[0].dims.length===3?cc(e,t):dc(e,e.inputs,t)}});var pc,Zs,Xs,Js=Q(()=>{"use strict";Ve();Ce();Ye();_e();pc=(e,t,r,o)=>{let i=W.size(t),u=t.length,a=V("input",e,u),p=J("output",e,u),m=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),h=W.normalizeAxis(m,u),d=y=>{let w=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,_=ce("uniforms.input_shape","uniforms.axis",u),v=o.reverse?w+(o.exclusive?" + 1":""):"0",x=o.reverse?_:w+(o.exclusive?"":" + 1");return`\n                ${y.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,p)}\n                ${y.mainStart()}\n                  ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${p.offsetToIndices("global_idx")};\n                  var sum = ${p.type.value}(0);\n                  let first : i32 = ${v};\n                  let last : i32 = ${x};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${a.getByIndices("inputIndices")};\n                  }\n                  ${p.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:"uint32",data:i},{type:"int32",data:h},...G(t),...G(t)]}),getShaderSource:d}},Zs=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,i=e.inputs[1];e.compute(pc(o,r,i,t),{inputs:[0]})},Xs=e=>{let t=e.exclusive===1,r=e.reverse===1;return xe({exclusive:t,reverse:r})}});var Do,zn,Qs,mc,fc,Mo,zo,eu,hc,tu,ru,nu=Q(()=>{"use strict";Ce();Ye();_e();Do="[a-zA-Z]|\\\\.\\\\.\\\\.",zn="("+Do+")+",Qs="^"+zn+"$",mc="("+zn+",)*"+zn,fc="^"+mc+"$",Mo=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},zo=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,i]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(fc)))throw new Error("Invalid LHS term");if(o.split(",").forEach((p,m)=>{let h=t[m].dims.slice();if(!p.match(RegExp(Qs)))throw new Error("Invalid LHS term");let d=this.processTerm(p,!0,h,m);this.lhs.push(d)}),i==="")i+=[...this.symbolToInfo.entries()].filter(([p,m])=>m.count===1||p==="...").map(([p])=>p).join("");else if(!i.match(RegExp(zn)))throw new Error("Invalid RHS");i.match(RegExp(Do,"g"))?.forEach(p=>{if(p==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let m=this.symbolToInfo.get(p);if(m===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(m.dimValue)}}),this.rhs=this.processTerm(i,!1,this.outputDims)}addSymbol(t,r,o){let i=this.symbolToInfo.get(t);if(i!==void 0){if(i.dimValue!==r&&i.count!==1)throw new Error("Dimension mismatch");i.count++,i.inputIndices.push(o)}else i={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,i)}processTerm(t,r,o,i=-1){let u=o.length,a=!1,p=[],m=0;if(!t.match(RegExp(Qs))&&!r&&t!=="")throw new Error("Invalid LHS term");let h=t.match(RegExp(Do,"g")),d=new Mo(i);return h?.forEach((y,w)=>{if(y==="..."){if(a)throw new Error("Only one ellipsis is allowed per input term");a=!0;let _=u-h.length+1;if(_<0)throw new Error("Ellipsis out of bounds");if(p=o.slice(m,m+_),this.hasEllipsis){if(this.ellipsisDims.length!==p.length||this.ellipsisDims.toString()!==p.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=p;else throw new Error("Ellipsis must be specified in the LHS");for(let v=0;v<p.length;v++){let x=String.fromCharCode("0".charCodeAt(0)+v);d.addSymbol(x,w+v),this.addSymbol(x,o[m++],i)}}else d.addSymbol(y,w+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(y,o[m++],i)}),d}},eu=e=>e+"_max",hc=(e,t,r,o)=>{let u=e.map(d=>d.length).map((d,y)=>V(`input${y}`,t,d)),a=W.size(o),p=J("output",t,o.length),m=[...r.symbolToInfo.keys()].filter(d=>!r.rhs.symbolToIndices.has(d)),h=d=>{let y=[],w="var prod = 1.0;",_="var sum = 0.0;",v="sum += prod;",x=[],T=[],C=[],S=[],E=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((U,M)=>{if(r.rhs.symbolToIndices.has(M)){let N=r.rhs.symbolToIndices.get(M)?.[0];N!==void 0&&r.lhs.forEach((Y,se)=>{if(U.inputIndices.includes(se)){let B=Y.symbolToIndices.get(M);if(B===void 0)throw new Error("Invalid symbol error");B.forEach(te=>{y.push(`${u[se].indicesSet(`input${se}Indices`,te,p.indicesGet("outputIndices",N))}`)})}})}else r.lhs.forEach((N,Y)=>{if(U.inputIndices.includes(Y)){let se=N.symbolToIndices.get(M);if(se===void 0)throw new Error("Invalid symbol error");se.forEach(B=>{x.push(`${u[Y].indicesSet(`input${Y}Indices`,B,`${M}`)}`)}),S.push(`prod *= ${u[Y].getByIndices(`input${Y}Indices`)};`)}}),T.push(`for(var ${M}: u32 = 0; ${M} < uniforms.${eu(M)}; ${M}++) {`),C.push("}")});let O=E?[...y,`let sum = ${u.map((U,M)=>U.getByIndices(`input${M}Indices`)).join(" * ")};`]:[...y,_,...T,...x,w,...S,v,...C];return`\n            ${d.registerUniforms(m.map(U=>({name:`${eu(U)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,p)}\n\n            ${d.mainStart()}\n            ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${p.offsetToIndices("global_idx")};\n            ${u.map((U,M)=>`var input${M}Indices: ${u[M].type.indices};`).join(`\n`)}\n            ${O.join(`\n`)};\n            ${p.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let d=m.filter(w=>r.symbolToInfo.has(w)).map(w=>({type:"uint32",data:r.symbolToInfo.get(w)?.dimValue||0}));d.push({type:"uint32",data:a});let y=e.map((w,_)=>[...G(w)]).reduce((w,_)=>w.concat(_),d);return y.push(...G(o)),{outputs:[{dims:o,dataType:t}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:y}},getShaderSource:h}},tu=(e,t)=>{let r=new zo(e.inputs,t.equation),o=r.outputDims,i=e.inputs.map((u,a)=>u.dims);e.compute(hc(i,e.inputs[0].dataType,r,o))},ru=e=>{let t=e.equation.replace(/\\s+/g,"");return xe({equation:t})}});var gc,ou,yc,bc,iu,au=Q(()=>{"use strict";Ve();Ce();_e();gc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,i=t.length<r.length?0:t.length-r.length;for(;o<r.length&&i<t.length;++o,++i)if(r[o]!==t[i]&&r[o]!==1&&t[i]!==1)throw new Error("Expand requires shape to be broadcastable to input")},ou=(e,t)=>{let r=e.length-t.length,o=[];for(let i=0;i<r;++i)o.push(e[i]);for(let i=0;i<t.length;++i)o.push(t[i]===1?e[i+r]:t[i]);return o},yc=(e,t)=>e.length>t.length?ou(e,t):ou(t,e),bc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=yc(t,r),i=e[0].dataType,u=i===9?4:1,a=Math.ceil(W.size(o)/u),p=h=>{let d=V("input",i,t.length,u),y=J("output",i,o.length,u),w;if(i===9){let _=(v,x,T="")=>`\n          let outputIndices${x} = ${y.offsetToIndices(`outputOffset + ${x}u`)};\n          let offset${x} = ${d.broadcastedIndicesToOffset(`outputIndices${x}`,y)};\n          let index${x} = offset${x} / 4u;\n          let component${x} = offset${x} % 4u;\n          ${v}[${x}] = ${T}(${d.getByOffset(`index${x}`)}[component${x}]);\n        `;w=`\n        let outputOffset = global_idx * ${u};\n        var data = vec4<u32>(0);\n        ${_("data",0,"u32")}\n        ${_("data",1,"u32")}\n        ${_("data",2,"u32")}\n        ${_("data",3,"u32")}\n        ${y.setByOffset("global_idx","data")}\n      }`}else w=`\n        let outputIndices = ${y.offsetToIndices("global_idx")};\n        let inputOffset = ${d.broadcastedIndicesToOffset("outputIndices",y)};\n        ${y.setByOffset("global_idx",d.getByOffset("inputOffset"))}\n      }`;return`\n    ${h.registerUniform("vec_size","u32").declareVariables(d,y)}\n    ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${w}`},m=[{type:"uint32",data:a},...G(t),...G(o)];return{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:["rank"]},getShaderSource:p,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:m})}},iu=e=>{gc(e.inputs),e.compute(bc(e.inputs),{inputs:[0]})}});var wc,vc,su,uu,lu=Q(()=>{"use strict";Ve();Ce();Ye();_e();wc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},vc=(e,t)=>{let r=e[0].dims,o=e[1].dims,i=r.length,u=W.normalizeAxis(t.axis,i),a=r.slice(0);a.splice(u,1,...o);let p=r[u],m=e[0].dataType===9?4:1,h=Math.ceil(W.size(a)/m),d=[{type:"uint32",data:h},{type:"int32",data:p},{type:"uint32",data:u},...G(e[0].dims),...G(e[1].dims),...G(a)],y=w=>{let _=V("data",e[0].dataType,e[0].dims.length,m),v=V("inputIndices",e[1].dataType,e[1].dims.length),x=J("output",e[0].dataType,a.length,m),T=S=>{let E=o.length,O=`var indicesIndices${S}  = ${v.type.indices}(0);`;for(let U=0;U<E;U++)O+=`${E>1?`indicesIndices${S}[${U}]`:`indicesIndices${S}`} = ${a.length>1?`outputIndices${S}[uniforms.axis + ${U}]`:`outputIndices${S}`};`;O+=`\n          var idx${S} = ${v.getByIndices(`indicesIndices${S}`)};\n          if (idx${S} < 0) {\n            idx${S} = idx${S} + uniforms.axisDimLimit;\n          }\n          var dataIndices${S} = ${_.type.indices}(0);\n        `;for(let U=0,M=0;U<i;U++)U===u?(O+=`${i>1?`dataIndices${S}[${U}]`:`dataIndices${S}`} = u32(idx${S});`,M+=E):(O+=`${i>1?`dataIndices${S}[${U}]`:`dataIndices${S}`} = ${a.length>1?`outputIndices${S}[${M}]`:`outputIndices${S}`};`,M++);return O},C;if(e[0].dataType===9){let S=(E,O,U="")=>`\n          let outputIndices${O} = ${x.offsetToIndices(`outputOffset + ${O}u`)};\n          ${T(O)};\n          let offset${O} = ${_.indicesToOffset(`dataIndices${O}`)};\n          let index${O} = offset${O} / 4u;\n          let component${O} = offset${O} % 4u;\n          ${E}[${O}] = ${U}(${_.getByOffset(`index${O}`)}[component${O}]);\n        `;C=`\n        let outputOffset = global_idx * ${m};\n        var value = vec4<u32>(0);\n        ${S("value",0,"u32")}\n        ${S("value",1,"u32")}\n        ${S("value",2,"u32")}\n        ${S("value",3,"u32")}\n        ${x.setByOffset("global_idx","value")}\n      `}else C=`\n      let outputIndices = ${x.offsetToIndices("global_idx")};\n      ${T("")};\n      let value = ${_.getByIndices("dataIndices")};\n      ${x.setByOffset("global_idx","value")};\n      `;return`\n      ${w.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(_,v,x)}\n      ${w.mainStart()}\n        ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${C}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:d}),getShaderSource:y}},su=e=>xe({axis:e.axis}),uu=(e,t)=>{let r=e.inputs;wc(r),e.compute(vc(e.inputs,t))}});var $c,_c,du,cu,pu=Q(()=>{"use strict";Ce();Ye();_e();$c=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},_c=(e,t)=>{let r=e[0].dims,o=e[0].dataType,i=r.length,u=e[1].dims,a=e[1].dataType,p=W.normalizeAxis(t.axis,i),m=r[p],h=u.slice(0),d=W.size(h),y=V("input",o,i),w=V("indicesInput",a,u.length),_=J("output",o,h.length),v=[{type:"uint32",data:d},{type:"int32",data:m},{type:"uint32",data:p}];return v.push(...G(r)),v.push(...G(u)),v.push(...G(h)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:h,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:v}),getShaderSource:C=>`\n      ${C.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(y,w,_)}\n      ${C.mainStart()}\n      ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${_.offsetToIndices("global_idx")};\n\n      var idx = ${w.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${y.type.indices}(outputIndices);\n      ${y.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${y.getByIndices("inputIndices")};\n\n      ${_.setByOffset("global_idx","value")};\n  }`}},du=e=>xe({axis:e.axis}),cu=(e,t)=>{let r=e.inputs;$c(r),e.compute(_c(e.inputs,t))}});var Sc,xc,mu,fu,hu=Q(()=>{"use strict";Ce();_e();Sc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},xc=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[i,u,a]=Sn.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),p=[i,u];if(!p)throw new Error("Can\'t use gemm on the given tensors");let m=W.size(p),h=[{type:"uint32",data:m},{type:"uint32",data:i},{type:"uint32",data:u},{type:"uint32",data:a},{type:"float32",data:t.alpha},{type:"float32",data:t.beta}],d=["type","type"];e.length===3&&(h.push(...G(e[2].dims)),d.push("rank")),h.push(...G(p));let y=w=>{let _="";t.transA&&t.transB?_="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?_="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?_="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(_="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let v=t.alpha===1?"":"value *= uniforms.alpha;",x=V("a",e[0].dataType,e[0].dims),T=V("b",e[1].dataType,e[1].dims),C=x.type.value,S=null,E=[x,T];e.length===3&&(S=V("c",e[2].dataType,e[2].dims.length),E.push(S));let O=J("output",e[0].dataType,p.length);E.push(O);let U=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`\n  ${w.registerUniforms(U).declareVariables(...E)}\n\n  ${w.mainStart()}\n    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${C}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${_}\n    }\n\n    ${v}\n    ${(()=>S!=null?`let cOffset = ${S.broadcastedIndicesToOffset("vec2(m, n)",O)}; value += ${C}(uniforms.beta) * ${S.getByOffset("cOffset")};`:"")()}\n    output[global_idx] = value;\n  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:h}),getShaderSource:y}},mu=e=>{let t=e.transA,r=e.transB,o=e.alpha,i=e.beta;return{transA:t,transB:r,alpha:o,beta:i,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},fu=(e,t)=>{Sc(e.inputs),e.compute(xc(e.inputs,t))}});var Cc,Ac,Ic,gu,yu=Q(()=>{"use strict";Ve();Ce();_e();Cc=(e,t)=>{let r=e[0].dims,o=r,i=2,u=W.sizeToDimension(r,i),a=W.sizeFromDimension(r,i),p=He(a),m=a/p,h=[r[0],r[1],m],d=["rank","type","type"],y=[{type:"uint32",data:a},{type:"uint32",data:m}];y.push(...G(h),...G(h));let w=_=>{let v=V("x",e[0].dataType,h.length,p),x=V("scale",e[1].dataType,e[1].dims),T=V("bias",e[2].dataType,e[2].dims),C=J("output",e[0].dataType,h.length,p),S=[v,x,T,C],E=v.type.value,O=p===1?"f32":`vec${p}<f32>`,U=64,M=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${O}, ${U}>;\n  const workgroupSize = ${U}u;\n  ${_.registerUniforms(M).declareVariables(...S)}\n  ${_.mainStart(U)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${O}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${O}(${v.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${ut("workgroupShared[0]",p)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${O}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${O}(${v.get("batch","channel","h")}) - ${O}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${ut("workgroupShared[0]",p)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${x.getByOffset("channel")});\n    let channelShift = f32(${T.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${v.get("batch","channel","h")} * ${E}(${O}(channelScale)) + ${E}(${O}(channelShift));\n      ${C.set("batch","channel","h","value")};\n    }\n  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${p}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:u},programUniforms:y}),getShaderSource:w}},Ac=(e,t,r,o,i,u,a,p)=>{let m=He(a),h=64,d=m===1?"vec2f":`mat2x${m}f`,y=m===1?"f32":`vec${m}f`,w=(M,N)=>`${d}(${M}, ${N})`,_=i*a/m,v=Math.ceil(u/h),x=["type"],T=[{type:"uint32",data:v},{type:"uint32",data:u},{type:"uint32",data:Math.floor(a/m)},{type:"uint32",data:Math.floor(u*a/m)}],C=M=>{let N=V("input",t.dataType,t.dims,m);return`\n  ${M.declareVariables(N)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${d}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${M.mainStart(h)}\n    let currentImageNumber = global_idx / ${h} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${h}) % uniforms.C;\n    let wgId = global_idx % ${h};\n    let wgOffset = wgId * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${Ze("f32",m)};\n    var squaredSum = ${Ze("f32",m)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${y}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${w("sum","squaredSum")};\n  }`},S=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${m}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:[i,a,h,2],dataType:1}],dispatchGroup:{x:i*a/m},programUniforms:T}),getShaderSource:C},{inputs:[t],outputs:[-1]})[0],E=[{type:"uint32",data:_},{type:"uint32",data:u},{type:"uint32",data:Math.floor(a/m)},{type:"uint32",data:Math.floor(h*a/m)}],O=["type","type","type"],U=M=>{let N=V("scale",r.dataType,r.dims,m),Y=V("bias",o.dataType,o.dims,m);return`\n  @group(0) @binding(0) var<storage, read> input : array<${d}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${N.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${Y.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${d}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${M.mainStart()}\n    ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${Ze("f32",m)};\n    var squaredSum = ${Ze("f32",m)};\n    for (var i: u32 = 0; i < ${h}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${h}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${p}));\n    let channelScale = invStdDev * ${y}(scale[currentChannelNumber]);\n    let channelShift = ${y}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${w("channelScale","channelShift")};\n  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${m};${p}`,inputDependencies:O},getRunData:()=>({outputs:[{dims:[i,a,2],dataType:1}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:E}),getShaderSource:U},{inputs:[S,r,o],outputs:[-1]})[0]},Ic=(e,t,r)=>{let o=t[0].dims,i=o,u=o[0],a=o[o.length-1],p=W.sizeFromDimension(o,1)/a,m=He(a),h=W.size(i)/m,d=[{type:"uint32",data:p},{type:"uint32",data:Math.floor(a/m)}],y=["type","type"],w=Ac(e,t[0],t[1],t[2],u,p,a,r.epsilon),_=v=>{let x=Ne(t[0].dataType),T=m===1?"vec2f":`mat2x${m}f`,C=m===1?x:`vec${m}<${x}>`,S=V("input",t[0].dataType,t[0].dims,m),E=J("output",t[0].dataType,i,m);return`\n  @group(0) @binding(0) var<storage, read> input : array<${S.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${T}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${E.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${v.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${C}(scale[0]), ${C}(scale[1]));\n  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${m}`,inputDependencies:y},getRunData:()=>({outputs:[{dims:i,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:d}),getShaderSource:_},{inputs:[t[0],w]})},gu=(e,t)=>{t.format==="NHWC"?Ic(e,e.inputs,t):e.compute(Cc(e.inputs,t))}});var Tc,Ec,bu,wu=Q(()=>{"use strict";Ve();Ce();_e();Tc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Ec=(e,t,r)=>{let o=e[0].dims,i=e[1],u=e[2],a=o,p=W.normalizeAxis(t.axis,o.length),m=W.sizeToDimension(o,p),h=W.sizeFromDimension(o,p),d=W.size(i.dims),y=u?W.size(u.dims):0;if(d!==h||u&&y!==h)throw new Error(`Size of X.shape()[axis:] == ${h}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${d} and bias size of ${y}`);let w=[];for(let O=0;O<o.length;++O)O<p?w.push(o[O]):w.push(1);let _=He(h),v=["type","type"],x=[{type:"uint32",data:m},{type:"float32",data:h},{type:"uint32",data:Math.floor(h/_)},{type:"float32",data:t.epsilon}];u&&v.push("type");let T=r>1,C=r>2,S=O=>{let U=Ne(e[0].dataType),M=[V("x",e[0].dataType,e[0].dims,_),V("scale",i.dataType,i.dims,_)];u&&M.push(V("bias",u.dataType,u.dims,_)),M.push(J("output",e[0].dataType,a,_)),T&&M.push(J("mean_data_output",1,w)),C&&M.push(J("inv_std_output",1,w));let N=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`\n  ${O.registerUniforms(N).declareVariables(...M)}\n  ${O.mainStart()}\n    ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var meanVector = ${Ze("f32",_)};\n    var meanSquareVector = ${Ze("f32",_)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${gt(U,_,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${ut("meanVector",_)} / uniforms.norm_size;\n    let invStdDev =\n        inverseSqrt(${ut("meanSquareVector",_)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${gt(U,_,"x[j + offset]")};\n      let f32scale = ${gt(U,_,"scale[j]")};\n      output[j + offset] = ${M[0].type.value}((f32input - mean) * invStdDev * f32scale\n        ${u?`+ ${gt(U,_,"bias[j]")}`:""}\n      );\n    }\n\n    ${T?"mean_data_output[global_idx] = mean":""};\n    ${C?"inv_std_output[global_idx] = invStdDev":""};\n  }`},E=[{dims:a,dataType:e[0].dataType}];return T&&E.push({dims:w,dataType:1}),C&&E.push({dims:w,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${_};${r}`,inputDependencies:v},getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(m/64)},programUniforms:x}),getShaderSource:S}},bu=(e,t)=>{Tc(e.inputs),e.compute(Ec(e.inputs,t,e.outputCount))}});var Pc,$u,vu,Oc,Uo,_u,Su=Q(()=>{"use strict";Ce();Ye();$n();xo();_e();pr();Pc=(e,t)=>{let r=e[0],o=e[1],i=e[2],u=e[3],a=e[4],p=e[5],m=e[6],h=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let d=!1,y=r.dims[0],w=r.dims[1],_=r.dims.length===3?d?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],v=w,x=0,T=0,C=Math.floor(_/t.numHeads);if(m&&h){if(m.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(h.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');x=m.dims[2],T=m.dims[2]}else if(m||h)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let S;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');S=2,v=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==C)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(i)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');S=5,v=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==C)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');S=0,v=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');S=3}if(u){if(u.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(i&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let E=0;if(a){E=8;let Y=a.dims;throw Y.length===1?Y[0]===y?E=1:Y[0]===3*y+2&&(E=3):Y.length===2&&Y[0]===y&&Y[1]===v&&(E=5),E===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let O=!1,U=_;if(i){if(i.dims.length!==3&&i.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==i.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(i.dims.length===3){if(v!==i.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');U=i.dims[2]}else{if(v!==i.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');U=i.dims[1]*i.dims[3],O=!0}}let M=x+v,N=!1;if(a)throw new Error("Key padding mask is not supported");if(p)throw new Error("extraAddQk is not supported");if(m)throw new Error("pastKey is not supported");if(h)throw new Error("pastValue is not supported");return{batchSize:y,sequenceLength:w,pastSequenceLength:x,kvSequenceLength:v,totalSequenceLength:M,maxSequenceLength:T,inputHiddenSize:0,hiddenSize:_,vHiddenSize:U,headSize:C,vHeadSize:Math.floor(U/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:E,scale:t.scale,broadcastResPosBias:N,passPastInKv:O,qkvFormat:S}},$u=e=>xe({...e}),vu=xe({perm:[0,2,1,3]}),Oc=(e,t,r,o,i,u,a)=>{let p=[o,i,u],m=W.size(p),h=[{type:"uint32",data:m},{type:"uint32",data:a},{type:"uint32",data:u}],d=y=>{let w=J("qkv_with_bias",t.dataType,p),_=V("qkv",t.dataType,p),v=V("bias",r.dataType,p),x=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`\n  ${y.registerUniforms(x).declareVariables(_,v,w)}\n  ${y.mainStart()}\n    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:p,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:h}),getShaderSource:d},{inputs:[t,r],outputs:[-1]})[0]},Uo=(e,t,r,o,i,u,a,p)=>{let m=u;if(a){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return m=Oc(e,u,a,t,o,r*i,p),m=m.reshape([t,o,r,i]),e.compute(yt(m,vu.perm),{inputs:[m],outputs:[-1]})[0]}else return u.dims.length===3&&(m=u.reshape([t,o,r,i])),e.compute(yt(m,vu.perm),{inputs:[m],outputs:[-1]})[0]},_u=(e,t)=>{let r=Pc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,i=Uo(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return En(e,i,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let u=Uo(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),a=Uo(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);En(e,i,u,a,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var kc,Rc,Bc,Dc,Mc,zc,Uc,Vc,xu,Cu=Q(()=>{"use strict";Ve();Ce();_e();kc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Rc=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n            k = i32(${e.indicesGet("indices",i)}) - ${ce("uniforms.pads",i,r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${ce("uniforms.x_shape",i,t)})) {\n              break;\n            }\n            offset += k * i32(${ce("uniforms.x_strides",i,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${o}\n            value = x[offset];\n          }\n      `},Bc=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n                k = i32(${e.indicesGet("indices",i)}) - ${ce("uniforms.pads",i,r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${ce("uniforms.x_shape",i,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${ce("uniforms.x_shape",i,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${ce("uniforms.x_strides",i,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Dc=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n                k = i32(${e.indicesGet("indices",i)}) - ${ce("uniforms.pads",i,r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${ce("uniforms.x_shape",i,t)})) {\n                  k = i32(${ce("uniforms.x_shape",i,t)}) - 1;\n                }\n                offset += k * i32(${ce("uniforms.x_strides",i,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Mc=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n                k = i32(${e.indicesGet("indices",i)}) - ${ce("uniforms.pads",i,r)};\n                if (k < 0)  {\n                  k += i32(${ce("uniforms.x_shape",i,t)}]);\n                }\n                if (k >= i32(${ce("uniforms.x_shape",i,t)})) {\n                  k -= i32(${ce("uniforms.x_shape",i,t)});\n                }\n                offset += k * i32(${ce("uniforms.x_strides",i,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},zc=(e,t,r)=>{switch(r.mode){case 0:return Rc(e,t,r.pads.length);case 1:return Bc(e,t,r.pads.length);case 2:return Dc(e,t,r.pads.length);case 3:return Mc(e,t,r.pads.length);default:throw new Error("Invalid mode")}},Uc=(e,t)=>{let r=W.padShape(e[0].dims.slice(),t.pads),o=e[0].dims,u=[{type:"uint32",data:W.size(r)},{type:"uint32",data:t.pads}];if(t.mode===0){let m=st(e[0].dataType);u.push({type:m,data:t.value})}u.push(...G(e[0].dims),...G(r));let a=["rank"],p=m=>{let h=J("output",e[0].dataType,r.length),d=V("x",e[0].dataType,o.length),y=d.type.value,w=zc(h,o.length,t),_=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&_.push({name:"constant_value",type:y}),`\n            ${m.registerUniforms(_).declareVariables(d,h)}\n            ${m.mainStart()}\n            ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${h.offsetToIndices("global_idx")};\n\n            var value = ${y}(0);\n            ${w}\n            output[global_idx] = value;\n        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:a},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(W.size(r)/64)},programUniforms:u}),getShaderSource:p}},Vc=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,i=e[0].dims.length,u=new Int32Array(2*i).fill(0);if(e.length>=4){let p=e[3].getBigInt64Array();for(let m=0;m<p.length;m++)u[Number(p[m])]=Number(r[m]),u[Number(p[m])+i]=Number(r[m+p.length])}else r.forEach((p,m)=>u[Number(m)]=Number(p));let a=[];return u.forEach(p=>a.push(p)),{mode:t.mode,value:o,pads:a}}else return t},xu=(e,t)=>{kc(e.inputs);let r=Vc(e.inputs,t);e.compute(Uc(e.inputs,r),{inputs:[0]})}});var Un,Au,Iu,Tu,Eu,Wc,Nc,Pu,Ou,ku,Ru,Bu,Du,Mu,zu,Uu,Vu,Wu,Nu,Hu=Q(()=>{"use strict";dr();Ce();_e();Un=e=>{if(lr.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Au=(e,t,r)=>{let o=t.format==="NHWC",i=e.dims.slice();o&&i.splice(1,0,i.pop());let u=Object.hasOwnProperty.call(t,"dilations"),a=t.kernelShape.slice(),p=t.strides.slice(),m=u?t.dilations.slice():[],h=t.pads.slice();Xt.adjustPoolAttributes(r,i,a,p,m,h);let d=Xt.computePoolOutputShape(r,i,p,m,a,h,t.autoPad),y=Object.assign({},t);u?Object.assign(y,{kernelShape:a,strides:p,pads:h,dilations:m,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:a,strides:p,pads:h,cacheKey:t.cacheKey});let w=d.slice();return w.push(w.splice(1,1)[0]),[y,o?w:d]},Iu=(e,t)=>{let r=t.format==="NHWC",o=W.size(e),i=W.size(t.kernelShape),u=[{type:"uint32",data:o},{type:"uint32",data:i}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let p=t.kernelShape[t.kernelShape.length-1],m=t.strides[t.strides.length-1],h=t.pads[t.pads.length/2-1],d=t.pads[t.pads.length-1],y=!!(h+d);u.push({type:"uint32",data:p},{type:"uint32",data:m},{type:"uint32",data:h},{type:"uint32",data:d}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let w=!1;if(t.kernelShape.length===2){let _=t.kernelShape[t.kernelShape.length-2],v=t.strides[t.strides.length-2],x=t.pads[t.pads.length/2-2],T=t.pads[t.pads.length-2];w=!!(x+T),u.push({type:"uint32",data:_},{type:"uint32",data:v},{type:"uint32",data:x},{type:"uint32",data:T}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[u,a,!0,y,w]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let p=W.computeStrides(t.kernelShape);u.push({type:"uint32",data:p},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),a.push({name:"kernelStrides",type:"u32",length:p.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let m=t.pads.reduce((h,d)=>h+d);return[u,a,!!m,!1,!1]}},Tu=(e,t,r,o,i,u,a,p,m,h,d,y)=>{let w=i.format==="NHWC",_=t.type.value,v=J("output",t.type.tensor,o);if(i.kernelShape.length<=2){let x="",T="",C="",S=r-(w?2:1);if(d?x=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${S}] < 0 || xIndices[${S}]\n                      >= uniforms.x_shape[${S}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${u}\n                }`:x=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${u}\n                }`,i.kernelShape.length===2){let O=r-(w?3:2);y?T=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${O}] = indices[${O}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${O}] < 0 || xIndices[${O}] >= uniforms.x_shape[${O}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:T=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${O}] = indices[${O}] * uniforms.sh - uniforms.phStart + j;\n                `,C=`\n              }\n            `}return`\n            ${e.registerUniforms(m).declareVariables(t,v)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${v.offsetToIndices("global_idx")};\n              var xIndices = ${v.offsetToIndices("global_idx")};\n\n              var value = ${_}(${p});\n              var pad = 0;\n              ${T}\n              ${x}\n              ${C}\n              ${a}\n\n              output[global_idx] = value;\n            }`}else{if(w)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let x=i.kernelShape.length,T=i.pads.length,C="";return h?C=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${u}\n              }`:C=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${u}\n            `,`\n            ${e.registerUniforms(m).declareVariables(t,v)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${v.offsetToIndices("global_idx")};\n              var xIndices = ${v.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${x}>;\n\n              var value = ${_}(${p});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${x-1}u; j++) {\n                  offsets[j] = offset / ${ce("uniforms.kernelStrides","j",x)};\n                  offset -= offsets[j] * ${ce("uniforms.kernelStrides","j",x)};\n                }\n                offsets[${x-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-x}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${ce("uniforms.strides",`j - ${r-x}u`,x)}\n                    + offsets[j - ${r-x}u] - ${ce("uniforms.pads","j - 2u",T)};\n                  ${C}\n              }\n              ${a}\n\n              output[global_idx] = value;\n            }`}},Eu=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Wc=e=>`${Eu(e)};${e.countIncludePad}`,Nc=e=>`${Eu(e)};${e.storageOrder};${e.dilations}`,Pu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Ou=(e,t,r,o)=>{let[i,u]=Au(t,o,r),a=V("x",t.dataType,t.dims.length),p=a.type.value,m="value += x_val;",h="";i.countIncludePad?h+=`value /= ${p}(uniforms.kernelSize);`:h+=`value /= ${p}(i32(uniforms.kernelSize) - pad);`;let[d,y,w,_,v]=Iu(u,i);d.push(...G(t.dims),...G(u));let x=["rank"];return{name:e,shaderCache:{hint:`${o.cacheKey};${w};${_};${v}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(u)/64)},programUniforms:d}),getShaderSource:T=>Tu(T,a,t.dims.length,u.length,i,m,h,0,y,w,_,v)}},ku=e=>{let t=e.count_include_pad!==0,r=Pu(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let o={countIncludePad:t,...r,cacheKey:""};return{...o,cacheKey:Wc(o)}},Ru=(e,t)=>{Un(e.inputs),e.compute(Ou("AveragePool",e.inputs[0],!1,t))},Bu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Du=e=>{let t=e.format;return{format:t,...Bu,cacheKey:t}},Mu=(e,t)=>{Un(e.inputs),e.compute(Ou("GlobalAveragePool",e.inputs[0],!0,t))},zu=(e,t,r,o)=>{let[i,u]=Au(t,o,r),a=`\n      value = max(x_val, value);\n    `,p="",m=V("x",t.dataType,t.dims.length),h=["rank"],[d,y,w,_,v]=Iu(u,i);return d.push(...G(t.dims),...G(u)),{name:e,shaderCache:{hint:`${o.cacheKey};${w};${_};${v}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(u)/64)},programUniforms:d}),getShaderSource:x=>Tu(x,m,t.dims.length,u.length,i,a,p,-1e5,y,w,_,v)}},Uu=(e,t)=>{Un(e.inputs),e.compute(zu("MaxPool",e.inputs[0],!1,t))},Vu=e=>{let t=e.storage_order,r=e.dilations,o=Pu(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let i={storageOrder:t,dilations:r,...o,cacheKey:""};return{...i,cacheKey:Nc(i)}},Wu=e=>{let t=e.format;return{format:t,...Bu,cacheKey:t}},Nu=(e,t)=>{Un(e.inputs),e.compute(zu("GlobalMaxPool",e.inputs[0],!0,t))}});var Gc,Lc,Gu,Lu=Q(()=>{"use strict";dr();Ve();_e();Gc=(e,t,r)=>{let o=e===t,i=e<t&&r<0,u=e>t&&r>0;if(o||i||u)throw new Error("Range these inputs\' contents are invalid.")},Lc=(e,t,r,o)=>{let i=Math.abs(Math.ceil((t-e)/r)),u=[i],a=i,p=st(o),m=[{type:"uint32",data:a},{type:p,data:e},{type:p,data:r},...G(u)],h=d=>{let y=J("output",o,u.length),w=y.type.value,_=[{name:"outputSize",type:"u32"},{name:"start",type:w},{name:"delta",type:w}];return`\n        ${d.registerUniforms(_).declareVariables(y)}\n        ${d.mainStart()}\n        ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${w}(global_idx) * uniforms.delta;\n      }`};return{name:"Range",shaderCache:{hint:`${o}`},getShaderSource:h,getRunData:()=>({outputs:[{dims:u,dataType:o}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:m})}},Gu=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),lr.webgpu.validateInputContent&&Gc(t,r,o),e.compute(Lc(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var Fc,jc,qc,Kc,Yc,Zc,Xc,Jc,Qc,ep,tp,Fu,rp,np,op,ip,ap,ju,qu,Ku=Q(()=>{"use strict";Ce();Ye();_e();Fc=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},jc=(e,t,r)=>{t.every(i=>i>=0&&i<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((i,u)=>o[i]=e[u]),o},qc=(e,t,r,o,i,u)=>{let[a,p,m]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],h=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(d=>u.push(d));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(p>0&&e.length>p&&e[p].dims.length>0){if(e[p].getFloat32Array().forEach(d=>o.push(d)),o.length!==0&&o.length!==h&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Fc(o,t),t.axes.length>0&&jc(o,t.axes,h).forEach((d,y)=>o[y]=d)}if(m>0&&e.length>m&&(e[m].getBigInt64Array().forEach(d=>i.push(Number(d))),i.length!==h||r>=18&&i.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(i.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof i<"u"&&o.length>0&&i.length>h)throw new Error("Resize requires only of scales or sizes to be specified")},Kc=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Yc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Zc=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),i=e.length===0?o:e.slice();return t.length>0?(t.forEach((u,a)=>{o[u]=i[a],o[a+r]=i[t.length+a]}),o):i},Xc=(e,t,r,o)=>{let i=[];if(r.length>0)if(o.length>0){if(e.forEach(u=>i.push(u)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((u,a)=>i[u]=r[a])}else r.forEach(u=>i.push(u));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");i=e.map((u,a)=>Math.round(u*t[a]))}return i},Jc=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(u=>t[u]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(u=>t[u]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let i=e.slice();return r.axes.length>0?(r.axes.forEach(u=>t[u]=o),r.axes.forEach(u=>i[u]=Math.round(e[u]*t[u]))):(t.fill(o,0,t.length),i.forEach((u,a)=>i[a]=Math.round(u*t[a]))),i},Qc=(e,t,r,o,i)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${ce("uniforms.scales","i",o)};\n        var roi_low = ${ce("uniforms.roi","i",i)};\n        var roi_hi = ${ce("uniforms.roi",`i + ${t.length}`,i)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${ce("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${ce("uniforms.output_shape","i",r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,ep=(e,t,r,o,i,u,a)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${o.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${ce("uniforms.scales","i",i)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${ce("uniforms.roi","i",u)};\n          var roi_hi = ${ce("uniforms.roi",`i + ${r.length}`,u)};\n          var input_shape_i = ${ce("uniforms.input_shape","i",r.length)};\n          var output_shape_i = ${ce("uniforms.output_shape","i",o.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${a} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,tp=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${ce("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,Fu=(e,t,r,o)=>e.rank>o?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",r,"batch")};\n`:"",rp=(e,t,r,o,i)=>{let[a,p,m,h]=r.length===2?[-1,0,1,-1]:[0,2,3,1],d=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${d} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",p,`max(0, min(row, ${r[p]} - 1))`)};\n      ${e.indicesSet("input_indices",m,`max(0, min(col, ${r[m]} - 1))`)};\n      ${Fu(e,h,a,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${d} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${d} = originalIndices[${p}];\n      var col:${d} = originalIndices[${m}];\n      ${o?`if (row < 0 || row > (${r[p]} - 1) || col < 0 || col > (${r[m]} - 1)) {\n        return ${i};\n      }`:""};\n      row = max(0, min(row, ${r[p]} - 1));\n      col = max(0, min(col, ${r[m]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length>2?`u32(originalIndices[${h}])`:"0"};\n      var batch: u32 =  ${r.length>2?`u32(originalIndices[${a}])`:"0"};\n      var x11: ${d} = getInputValue(batch, channel, row1, col1);\n      var x12: ${d} = getInputValue(batch, channel, row1, col2);\n      var x21: ${d} = getInputValue(batch, channel, row2, col1);\n      var x22: ${d} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${d} = abs(row - ${d}(row1));\n      var dx2: ${d} = abs(${d}(row2) - row);\n      var dy1: ${d} = abs(col - ${d}(col1));\n      var dy2: ${d} = abs(${d}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},np=(e,t,r,o,i,u,a,p,m,h)=>{let d=r.length===2,y=!0,[w,_]=d?[0,1]:y?[2,3]:[1,2],v=e.type.value,x=T=>{let C=T===w?"row":"col";return`\n      fn ${C}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${v} {\n        var output_index = ${t.indicesGet("output_indices",T)};\n        var originalIdx: ${v} = getOriginalCoordinateFromResizedCoordinate(output_index, ${i[T]},\n        ${o[T]}, ${r[T]}, ${u[T]}, ${u[T]} + ${r.length});\n        var fractOriginalIdx: ${v} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${p} && (originalIdx < 0 || originalIdx > (${r[T]} - 1))) {\n          return ${m};\n        }\n        var data: array<${v}, 4> = array<${v}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${C}: ${v} = originalIdx + ${v}(i);\n          if (${C} < 0 || ${C} >= ${r[T]}) {\n            ${(()=>h?`coefs[i + 1] = 0.0;\n                        continue;`:p?`return ${m};`:`${C} = max(0, min(${C}, ${r[T]} - 1));`)()};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",T,`u32(${C})`)};\n          data[i + 1] = ${T===w?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${x(w)};\n    ${x(_)};\n  fn getCubicInterpolationCoefs(s: ${v}) -> array<${v}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${v}, 4> = array<${v}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${v} = 1.0 - absS;\n    var twoMinusAbsS: ${v} = 2.0 - absS;\n    var onePlusAbsS: ${v} = 1.0 + absS;\n    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};\n    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${v}, 4>, coefs: array<${v}, 4>) -> ${v} {\n    var coefsSum: ${v} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${v} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},op=(e,t,r,o,i)=>{let[a,p,m,h,d]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],y=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${y} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",p,`max(0, min(depth, ${r[p]} - 1))`)};\n      ${e.indicesSet("input_indices",m,`max(0, min(height, ${r[m]} - 1))`)};\n      ${e.indicesSet("input_indices",h,`max(0, min(width, ${r[h]} - 1))`)};\n      ${Fu(e,d,a,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${y} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${y} = originalIndices[${p}];\n      var height:${y} = originalIndices[${m}];\n      var width:${y} = originalIndices[${h}];\n      ${o?`if (depth < 0 || depth > (${r[p]} - 1) || height < 0 || height > (${r[m]} - 1) || width < 0 || (width > ${r[h]} - 1)) {\n      return ${i};\n        }`:""};\n\n    depth = max(0, min(depth, ${r[p]} - 1));\n      height = max(0, min(height, ${r[m]} - 1));\n      width = max(0, min(width, ${r[h]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length>3?`u32(originalIndices[${d}])`:"0"};\n      var batch: u32 =  ${r.length>3?`u32(originalIndices[${a}])`:"0"};\n\n      var x111: ${y} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${y} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${y} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${y} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${y} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${y} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${y} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${y} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${y} = abs(depth - ${y}(depth1));\n      var dx2: ${y} = abs(${y}(depth2) - depth);\n      var dy1: ${y} = abs(height - ${y}(height1));\n      var dy2: ${y} = abs(${y}(height2) - height);\n      var dz1: ${y} = abs(width - ${y}(width1));\n      var dz2: ${y} = abs(${y}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},ip=(e,t,r,o,i,u)=>{let a=e.dims,p=Zc(u,t.axes,a.length),m=Xc(a,o,i,t.axes),h=o.slice();o.length===0&&(h=a.map((S,E)=>S===0?1:m[E]/S),t.keepAspectRatioPolicy!=="stretch"&&(m=Jc(a,h,t)));let d=J("output",e.dataType,m.length),y=V("input",e.dataType,a.length),w=W.size(m),_=a.length===m.length&&a.every((S,E)=>S===m[E]),v=t.coordinateTransformMode==="tf_crop_and_resize",x=t.extrapolationValue,T=y.type.value,C=S=>`\n      ${_?"":`\n      ${Kc(t.coordinateTransformMode,T)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${tp(y,a)};\n              ${Yc(t.nearestMode,r,T)};\n              ${ep(y,d,a,m,h.length,p.length,v)};\n              `;case"linear":return`\n              ${Qc(d,a,m,h.length,p.length)};\n              ${(()=>{if(a.length===2||a.length===4)return`${rp(y,d,a,v,x)}`;if(a.length===3||a.length===5)return`${op(y,d,a,v,x)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(a.length===2||a.length===4)return`${np(y,d,a,m,h,p,t.cubicCoeffA,v,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${S.registerUniform("output_size","u32").registerUniform("scales","f32",h.length).registerUniform("roi","f32",p.length).declareVariables(y,d)}\n      ${S.mainStart()}\n        ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${_?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${d.offsetToIndices("global_idx")};\n        var input_indices: ${y.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${y.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${h.length>0?h:""}|${i.length>0?i:""}|${p.length>0?p:""}|${_}|${a}`,inputDependencies:["rank"]},getShaderSource:C,getRunData:()=>({outputs:[{dims:m,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:[{type:"uint32",data:w},{type:"float32",data:h},{type:"float32",data:p},...G(a),...G(m)]})}},ap=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},ju=(e,t)=>{let r=[],o=[],i=[],u=ap(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");qc(e.inputs,t,u,r,o,i),e.compute(ip(e.inputs[0],t,u,r,o,i),{inputs:[0]})},qu=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,i=e.cubicCoeffA,u=e.excludeOutside!==0,a=e.extrapolationValue,p=e.keepAspectRatioPolicy,m=e.mode,h=e.nearestMode===""?"simple":e.nearestMode;return xe({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:i,excludeOutside:u,extrapolationValue:a,keepAspectRatioPolicy:p,mode:m,nearestMode:h})}});var sp,up,Yu,Zu=Q(()=>{"use strict";Ve();Ce();_e();sp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let i=t.dims[t.dims.length-1],u=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==i)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==u)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==i)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Bias must have the same hidden size as input")}},up=(e,t,r,o)=>{let i=e[0].dims,u=W.size(i),a=i,p=u,m=i.slice(-1)[0],h=o?i.slice(0,-1).concat(1):[],d=e.length>3,y=e.length>4,w=o&&r>1,_=o&&r>2,v=r>3,x=He(m),T=[{type:"uint32",data:p},{type:"uint32",data:x},{type:"uint32",data:m},{type:"float32",data:t.epsilon}],C=E=>{let O=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],U=[V("x",e[0].dataType,e[0].dims,x),V("skip",e[1].dataType,e[1].dims,x),V("gamma",e[2].dataType,e[2].dims,x)];d&&U.push(V("beta",e[3].dataType,e[3].dims,x)),y&&U.push(V("bias",e[4].dataType,e[4].dims,x)),U.push(J("output",e[0].dataType,a,x)),w&&U.push(J("mean_output",1,h)),_&&U.push(J("inv_std_output",1,h)),v&&U.push(J("input_skip_bias_sum",e[0].dataType,a,x));let M=Ne(e[0].dataType);return`\n\n      ${E.registerUniforms(O).declareVariables(...U)}\n\n      ${E.mainStart()}\n        ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        let offset = global_idx * hidden_size_vectorized;\n        var sum = ${Ze("f32",x)};\n        var squareSum = ${Ze("f32",x)};\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${y?"bias[i]":"0.0"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${v?"input_skip_bias_sum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32_value = ${gt(M,x,"value")};\n          sum += f32_value;\n          squareSum += f32_value * f32_value;\n        }\n        let mean = ${ut("sum",x)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${ut("squareSum",x)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);\n        ${w?"mean_output[global_idx] = mean;":""}\n        ${_?"inv_std_output[global_idx] = inv_std_dev;":""}\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${M}(mean)) * ${M}(inv_std_dev) * gamma[i] + ${d?"beta[i]":"0.0"};\n        }\n      }`},S=[{dims:a,dataType:e[0].dataType}];return r>1&&S.push({dims:h,dataType:1}),r>2&&S.push({dims:h,dataType:1}),r>3&&S.push({dims:i,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${x};${w};${_};${v}`,inputDependencies:e.map((E,O)=>"type")},getShaderSource:C,getRunData:()=>({outputs:S,dispatchGroup:{x:Math.ceil(p/m/64)},programUniforms:T})}},Yu=(e,t)=>{sp(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(up(e.inputs,t,e.outputCount,!1),{outputs:o})}});var lp,Vn,dp,Xu,cp,pp,Ju,Qu,el=Q(()=>{"use strict";Ve();Ce();Ye();_e();lp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},Vn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},dp=(e,t)=>{if(e.length>1){let r=Vn(e,1),o=Vn(e,2),i=Vn(e,3);return i.length===0&&(i=[...Array(e[0].dims.length).keys()]),xe({starts:r,ends:o,axes:i})}else return t},Xu=(e,t,r,o,i)=>{let u=e;return e<0&&(u+=r[o[t]]),i[t]<0?Math.max(0,Math.min(u,r[o[t]]-1)):Math.max(0,Math.min(u,r[o[t]]))},cp=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${ce("uniforms.input_shape","i",r.length)};\n            let steps_i = ${ce("uniforms.steps","i",r.length)};\n            let signs_i = ${ce("uniforms.signs","i",r.length)};\n            let starts_i = ${ce("uniforms.starts","i",r.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,pp=(e,t)=>{let r=e[0].dims,o=W.size(r),i=t.axes.length>0?W.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],u=Vn(e,4);u.forEach(C=>C!==0||(()=>{throw new Error("step cannot be 0")})),u.length===0&&(u=Array(i.length).fill(1));let a=t.starts.map((C,S)=>Xu(C,S,r,i,u)),p=t.ends.map((C,S)=>Xu(C,S,r,i,u));if(i.length!==a.length||i.length!==p.length)throw new Error("start, ends and axes should have the same number of elements");if(i.length!==r.length)for(let C=0;C<r.length;++C)i.includes(C)||(a.splice(C,0,0),p.splice(C,0,r[C]),u.splice(C,0,1));let m=u.map(C=>Math.sign(C));u.forEach((C,S,E)=>{if(C<0){let O=(p[S]-a[S])/C,U=a[S],M=U+O*u[S];a[S]=M,p[S]=U,E[S]=-C}});let h=r.slice(0);i.forEach((C,S)=>{h[C]=Math.ceil((p[C]-a[C])/u[C])});let d={dims:h,dataType:e[0].dataType},y=J("output",e[0].dataType,h.length),w=V("input",e[0].dataType,e[0].dims.length),_=W.size(h),v=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:m.length},{name:"steps",type:"u32",length:u.length}],x=[{type:"uint32",data:_},{type:"uint32",data:a},{type:"int32",data:m},{type:"uint32",data:u},...G(e[0].dims),...G(h)],T=C=>`\n      ${C.registerUniforms(v).declareVariables(w,y)}\n        ${cp(w,y,r)}\n        ${C.mainStart()}\n          ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${y.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${y.setByOffset("global_idx",w.getByIndices("input_indices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${m.length}_${a.length}_${u.length}`,inputDependencies:["rank"]},getShaderSource:T,getRunData:()=>({outputs:[d],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:x})}},Ju=(e,t)=>{lp(e.inputs,t);let r=dp(e.inputs,t);e.compute(pp(e.inputs,r),{inputs:[0]})},Qu=e=>{let t=e.starts,r=e.ends,o=e.axes;return xe({starts:t,ends:r,axes:o})}});var mp,fp,tl,rl,nl=Q(()=>{"use strict";Ce();Ye();_e();mp=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},fp=(e,t)=>{let r=e.dims,o=W.size(r),i=64,u=t.axis;if(u<0&&(u=r.length+u),u<r.length-1)throw new Error("softmax only supports last axis for now.");let a=r[u],p=o/a,m=He(a),h=a/m,d=(T,C)=>C===4?`max(max(${T}.x, ${T}.y), max(${T}.z, ${T}.w))`:C===2?`max(${T}.x, ${T}.y)`:C===3?`max(max(${T}.x, ${T}.y), ${T}.z)`:T,y=V("x",e.dataType,e.dims,m),w=J("result",e.dataType,e.dims,m),_=y.type.value,v=Ne(e.dataType)==="f32"?`var threadMax = ${_}(-3.402823e+38f);`:`var threadMax = ${_}(-65504.0h);`,x=T=>`\n      var<workgroup> rowMaxShared : ${_};\n      var<workgroup> rowSumShared : ${_};\n      var<workgroup> threadShared : array<${_}, ${i}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${_} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${_}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${T.registerUniform("packedCols","i32").declareVariables(y,w)}\n      ${T.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${i};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${v}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${_}(${d("threadShared[0]",m)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${_}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${_}(${ut("threadShared[0]",m)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${m}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:p},programUniforms:[{type:"uint32",data:h}]}),getShaderSource:x}},tl=(e,t)=>{mp(e.inputs),e.compute(fp(e.inputs[0],t))},rl=e=>xe({axis:e.axis})});var hp,gp,yp,bp,wp,ol,il,al=Q(()=>{"use strict";Ce();Ye();_e();hp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},gp=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(i=>r.push(Number(i))),o=r.length),xe({numOutputs:o,axis:t.axis,splitSizes:r})},yp=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${ce("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,bp=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let i=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(i):o===0?r.push(`if (output_number == ${o}u) { ${i} }`):o===t-1?r.push(`else { ${i} }`):r.push(`else if (output_number == ${o}) { ${i} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},wp=(e,t)=>{let r=e[0].dims,o=W.size(r),i=e[0].dataType,u=W.normalizeAxis(t.axis,r.length),a=new Array(t.numOutputs),p=V("input",i,r),m=new Array(t.numOutputs),h=[],d=[],y=0,w=[{type:"uint32",data:o}];for(let v=0;v<t.numOutputs;v++){y+=t.splitSizes[v],m[v]=y;let x=r.slice();x[t.axis]=t.splitSizes[v],d.push(x),a[v]=J(`output${v}`,i,x),h.push({dims:d[v],dataType:e[0].dataType})}w.push({type:"uint32",data:m}),w.push(...G(r)),d.forEach(v=>w.push(...G(v)));let _=v=>`\n  ${v.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",m.length).declareVariables(p,...a)}\n  ${yp(m.length)}\n  ${bp(a)}\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${p.offsetToIndices("global_idx")};\n    var index = ${p.indicesGet("indices",u)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${ce("uniforms.size_in_split_axis","output_number - 1u",m.length)};\n      ${p.indicesSet("indices",u,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:_,getRunData:()=>({outputs:h,dispatchGroup:{x:Math.ceil(o/64)},programUniforms:w})}},ol=(e,t)=>{hp(e.inputs);let r=e.inputs.length===1?t:gp(e.inputs,t);e.compute(wp(e.inputs,r),{inputs:[0]})},il=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return xe({axis:t,numOutputs:o,splitSizes:r})}});var sl,vp,$p,_p,ul,ll=Q(()=>{"use strict";Ve();Ce();_e();sl=e=>Array.from(e.getBigInt64Array(),Number),vp=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(sl(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},$p=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},_p=e=>{let t=e[0].dims,r=sl(e[1]),o=$p(t,r),i=W.size(o),u=e[0].dataType,a=V("input",u,t.length),p=J("output",u,o.length),m=h=>`\n      const inputShape = ${a.indices(...t)};\n      ${h.registerUniform("output_size","u32").declareVariables(a,p)}\n      ${h.mainStart()}\n      ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${p.offsetToIndices("global_idx")};\n      var input_indices: ${a.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${a.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${p.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${a.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${p.setByOffset("global_idx",a.getByIndices("input_indices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:"uint32",data:i},...G(e[0].dims),...G(o)]}),getShaderSource:m}},ul=e=>{vp(e.inputs),e.compute(_p(e.inputs),{inputs:[0]})}});var Sp,xp,dl,cl=Q(()=>{"use strict";Ve();Ce();_e();Sp=(e,t,r,o,i)=>{let u=J("output_data",i,r.length,4),a=V("a_data",t[1].dataType,t[1].dims.length,4),p=V("b_data",t[2].dataType,t[2].dims.length,4),m=V("c_data",t[0].dataType,t[0].dims.length,4),h,d=(y,w,_)=>`select(${w}, ${y}, ${_})`;if(!o)h=u.setByOffset("global_idx",d(a.getByOffset("global_idx"),p.getByOffset("global_idx"),m.getByOffset("global_idx")));else{let y=(w,_,v="")=>{let x=`a_data[index_a${_}][component_a${_}]`,T=`b_data[index_b${_}][component_b${_}]`,C=`bool(c_data[index_c${_}] & ${4278190080>>>(3-_)*8}u)`;return`\n            let output_indices${_} = ${u.offsetToIndices(`global_idx * 4u + ${_}u`)};\n            let offset_a${_} = ${a.broadcastedIndicesToOffset(`output_indices${_}`,u)};\n            let offset_b${_} = ${p.broadcastedIndicesToOffset(`output_indices${_}`,u)};\n            let offset_c${_} = ${m.broadcastedIndicesToOffset(`output_indices${_}`,u)};\n            let index_a${_} = offset_a${_} / 4u;\n            let index_b${_} = offset_b${_} / 4u;\n            let index_c${_} = offset_c${_} / 4u;\n            let component_a${_} = offset_a${_} % 4u;\n            let component_b${_} = offset_b${_} % 4u;\n            ${w}[${_}] = ${v}(${d(x,T,C)});\n          `};i===9?h=`\n            var data = vec4<u32>(0);\n            ${y("data",0,"u32")}\n            ${y("data",1,"u32")}\n            ${y("data",2,"u32")}\n            ${y("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:h=`\n            ${y("output_data[global_idx]",0)}\n            ${y("output_data[global_idx]",1)}\n            ${y("output_data[global_idx]",2)}\n            ${y("output_data[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(m,a,p,u)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${h}\n      }`},xp=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,i=e[1].dataType,u=!(W.areEqual(t,r)&&W.areEqual(r,o)),a=t,p=W.size(t);if(u){let h=vt.calcShape(vt.calcShape(t,r,!1),o,!1);if(!h)throw new Error("Can\'t perform where op on the given tensors");a=h,p=W.size(a)}let m=Math.ceil(p/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:h=>Sp(h,e,a,u,i),getRunData:()=>({outputs:[{dims:a,dataType:i}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:[{type:"uint32",data:m},...G(o),...G(t),...G(r),...G(a)]})}},dl=e=>{e.compute(xp(e.inputs))}});var pl,ml=Q(()=>{"use strict";Da();xo();Ua();Wa();$s();ks();Ds();Eo();Ys();Js();nu();au();lu();pu();hu();yu();wu();Oo();Su();Cu();Hu();Lu();In();Ku();Zu();el();nl();al();ll();pr();Co();cl();pl=new Map([["Abs",[Na]],["Acos",[Ha]],["Acosh",[Ga]],["Add",[_s]],["ArgMax",[Ba,So]],["ArgMin",[Ra,So]],["Asin",[La]],["Asinh",[Fa]],["Atan",[ja]],["Atanh",[qa]],["Attention",[Ma]],["AveragePool",[Ru,ku]],["BatchNormalization",[za]],["BiasAdd",[Va]],["BiasSplitGelu",[vs]],["Cast",[Ya,Ka]],["Ceil",[Xa]],["Clip",[Za]],["Concat",[Rs,Bs]],["Conv",[Ro,ko]],["ConvTranspose",[Ks,qs]],["Cos",[Ja]],["Cosh",[Qa]],["CumSum",[Zs,Xs]],["Div",[Ss]],["Einsum",[tu,ru]],["Elu",[es,Pn]],["Equal",[xs]],["Erf",[ts]],["Exp",[rs]],["Expand",[iu]],["Floor",[ns]],["FusedConv",[Ro,ko]],["Gather",[uu,su]],["GatherElements",[cu,du]],["Gelu",[os]],["Gemm",[fu,mu]],["GlobalAveragePool",[Mu,Du]],["GlobalMaxPool",[Nu,Wu]],["Greater",[Ts]],["GreaterOrEqual",[Ps]],["HardSigmoid",[ps,cs]],["InstanceNormalization",[gu]],["LayerNormalization",[bu]],["LeakyRelu",[is,Pn]],["Less",[Es]],["LessOrEqual",[Os]],["Log",[ws]],["MatMul",[Ws]],["MaxPool",[Uu,Vu]],["Mul",[Cs]],["MultiHeadAttention",[_u,$u]],["Neg",[ss]],["Not",[as]],["Pad",[xu]],["Pow",[As]],["Range",[Gu]],["Reciprocal",[us]],["ReduceMin",[Ia]],["ReduceMean",[_a]],["ReduceMax",[Aa]],["ReduceSum",[Ea]],["ReduceProd",[Ta]],["ReduceL1",[Sa]],["ReduceL2",[xa]],["ReduceLogSum",[Oa]],["ReduceLogSumExp",[Ca]],["ReduceSumSquare",[Pa]],["Relu",[ls]],["Resize",[ju,qu]],["Sigmoid",[ds]],["Sin",[ms]],["Sinh",[fs]],["Slice",[Ju,Qu]],["SkipLayerNormalization",[Yu]],["Split",[ol,il]],["Sqrt",[hs]],["Softmax",[tl,rl]],["Sub",[Is]],["Tan",[gs]],["Tanh",[ys]],["ThresholdedRelu",[bs,Pn]],["Tile",[ul]],["Transpose",[la,da]],["Where",[dl]]])});var Wn,fl=Q(()=>{"use strict";dr();zt();_e();Wn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,i,u){Yt(t.programInfo.name);let a=this.backend.device,p=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2),p.setPipeline(t.computePipeline);let m=[];for(let d of r)m.push({binding:m.length,resource:{buffer:d.buffer}});for(let d of o)m.push({binding:m.length,resource:{buffer:d.buffer}});u&&m.push({binding:m.length,resource:u});let h=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:m,label:t.programInfo.name});p.setBindGroup(0,h),p.dispatchWorkgroups(...i),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Zt(t.programInfo.name)}dispose(){}build(t,r){Yt(t.name);let o=this.backend.device,i=[];o.features.has("shader-f16")&&i.push("enable f16;");let u=sa(r),a=t.getShaderSource(u),p=`${i.join(`\n`)}\n${u.additionalImplementations}\n${a}`,m=o.createShaderModule({code:p,label:t.name});De("verbose",()=>`[WebGPU] ${t.name} shader code: ${p}`);let h=o.createComputePipeline({compute:{module:m,entryPoint:"main"},layout:"auto",label:t.name});return Zt(t.name),{programInfo:t,computePipeline:h}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,i=typeof t=="number"?1:t.z||1,u=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=u&&o<=u&&i<=u)return[r,o,i];let a=r*o*i,p=Math.ceil(Math.sqrt(a));if(p>u){if(p=Math.ceil(Math.cbrt(a)),p>u)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[p,p,p]}else return[p,p,1]}}});var Cp,Ap,Nn,hl=Q(()=>{"use strict";dr();Ve();zt();ra();aa();ml();fl();Cp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let i=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${i}`);break}case"rank":{let u=e[o].dims.length;r.push(`${i};${u}`);break}case"dims":{let u=e[o].dims.join(",");r.push(`${i};${u}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Ap=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${Cp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},Nn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let o=[],i={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("chromium-experimental-timestamp-query-inside-passes")?o.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(i),this.gpuDataManager=ia(this),this.programManager=new Wn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ea(t.logLevel,!!t.debug),this.device.onuncapturederror=u=>{u.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${u.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Yt(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),o=this.pendingQueries.get(t);for(let i=0;i<r.length/2;i++){let u=o[i],a=u.kernelId,p=this.kernels.get(a),m=p.kernelType,h=p.kernelName,d=u.programName,y=u.inputTensorViews,w=u.outputTensorViews,_=r[i*2],v=r[i*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=_);let x=Number(_-this.queryTimeBase),T=Number(v-this.queryTimeBase);if(!Number.isSafeInteger(x)||!Number.isSafeInteger(T))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:y.map(C=>({dims:C.dims,dataType:st(C.dataType)})),outputsMetadata:w.map(C=>({dims:C.dims,dataType:st(C.dataType)})),kernelId:a,kernelType:m,kernelName:h,programName:d,startTime:x,endTime:T});else{let C="";y.forEach((E,O)=>{C+=`input[${O}]: [${E.dims}] | ${st(E.dataType)}, `});let S="";w.forEach((E,O)=>{S+=`output[${O}]: [${E.dims}] | ${st(E.dataType)}, `}),console.log(`[profiling] kernel "${a}|${m}|${h}|${d}" ${C}${S}execution time: ${T-x} ns`)}mo("GPU",`${d}::${_}::${v}`)}t.unmap(),this.pendingQueries.delete(t)}),Zt()}run(t,r,o,i,u){Yt(t.name);let a=[];for(let S=0;S<r.length;++S){let E=this.gpuDataManager.get(r[S].data);if(!E)throw new Error(`no GPU data for input: ${r[S].data}`);a[S]=E}let{outputs:p,dispatchGroup:m,programUniforms:h}=t.getRunData(r),d=o.length===0?p.map((S,E)=>E):o;if(d.length!==p.length)throw new Error(`Output size ${d.length} must be equal to ${p.length}.`);let y=[],w=[];for(let S=0;S<p.length;++S){if(!Number.isInteger(d[S])||d[S]<-3||d[S]>=p.length)throw new Error(`Invalid output index: ${d[S]}`);if(d[S]===-3)continue;let E=d[S]===-1,O=d[S]===-2,U=E||O?u(p[S].dataType,p[S].dims):i(d[S],p[S].dataType,p[S].dims),M=this.gpuDataManager.get(U.data);if(!M)throw new Error(`no GPU data for output: ${U.data}`);if(E&&this.temporaryData.push(M),O){let N=this.kernelPersistentData.get(this.currentKernelId);N||(N=[],this.kernelPersistentData.set(this.currentKernelId,N)),N.push(M)}y.push(U),w.push(M)}let _;if(h){let S=0,E=[];h.forEach(N=>{let Y=typeof N.data=="number"?[N.data]:N.data;if(Y.length===0)return;let se=N.type==="float16"?2:4,B,te;N.type==="float16"?(te=Y.length>4?16:Y.length>2?8:Y.length*se,B=Y.length>4?16:se*Y.length):(te=Y.length<=2?Y.length*se:16,B=16),S=Math.ceil(S/te)*te,E.push(S);let Pe=N.type==="float16"?8:4;S+=Y.length>4?Math.ceil(Y.length/Pe)*B:Y.length*se});let O=16;S=Math.ceil(S/O)*O;let U=new ArrayBuffer(S);h.forEach((N,Y)=>{let se=E[Y],B=typeof N.data=="number"?[N.data]:N.data;N.type==="int32"?new Int32Array(U,se,B.length).set(B):N.type==="uint32"?new Uint32Array(U,se,B.length).set(B):N.type==="float16"?new Uint16Array(U,se,B.length).set(B):new Float32Array(U,se,B.length).set(B)});let M=this.gpuDataManager.create(S,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(M.buffer,0,U,0,S),this.gpuDataManager.release(M.id),_={offset:0,size:S,buffer:M.buffer}}let v=this.programManager.normalizeDispatchGroupSize(m),x=v[1]===1&&v[2]===1,T=Ap(t,r,x),C=this.programManager.getArtifact(T);if(C||(C=this.programManager.build(t,v),this.programManager.setArtifact(T,C),De("info",()=>`[artifact] key: ${T}, programName: ${t.name}`)),De("info",()=>`[ProgramManager] run "${t.name}" (key=${T}) with ${v[0]}x${v[1]}x${v[2]}`),this.queryType!=="none"){let S={kernelId:this.currentKernelId,programName:C.programInfo.name,inputTensorViews:r,outputTensorViews:y};this.pendingKernels.push(S)}return this.programManager.run(C,a,w,v,_),Zt(t.name),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,i){let u=pl.get(t);if(!u)throw new Error(`kernel not implemented: ${t}`);let a={kernelType:t,kernelName:i,kernelEntry:u[0],attributes:[u[1],o]};this.kernels.set(r,a)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let i=this.kernels.get(t);if(!i)throw new Error(`kernel not created: ${t}`);let u=i.kernelType,a=i.kernelName,p=i.kernelEntry,m=i.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${u}] ${a}" is not allowed to be called recursively`);this.currentKernelId=t,m[0]&&(m[1]=m[0](m[1]),m[0]=void 0),De("info",()=>`[WebGPU] Start to run kernel "[${u}] ${a}"...`);let h=this.env.debug;this.temporaryData=[];try{return h&&this.device.pushErrorScope("validation"),p(r,m[1]),0}catch(d){return o.push(Promise.resolve(`[WebGPU] Kernel "[${u}] ${a}" failed. ${d}`)),1}finally{h&&o.push(this.device.popErrorScope().then(d=>d?`GPU validation error for kernel "[${u}] ${a}": ${d.message}`:null));for(let d of this.temporaryData)this.gpuDataManager.release(d.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,i){let u=this.sessionExternalDataMapping.get(t);u||(u=new Map,this.sessionExternalDataMapping.set(t,u));let a=u.get(r),p=this.gpuDataManager.registerExternalBuffer(o,i,a?.[1]);return u.set(r,[p,o]),p}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let i=await go(this,t,r);return ta(i.buffer,o)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}onRunStart(){this.setQueryType()}}});var gl={};hn(gl,{init:()=>Ip});var Nr,Vo,Ip,yl=Q(()=>{"use strict";Ve();hl();zt();Ce();Nr=class e{constructor(t,r,o,i){this.module=t;this.dataType=r;this.data=o;this.dims=i}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(W.size(t)!==W.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Vo=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let i=t.HEAPU32,u=o>>>2;this.opKernelContext=i[u++];let a=i[u++];this.outputCount=i[u++],this.customDataOffset=i[u++],this.customDataSize=i[u++];let p=[];for(let m=0;m<a;m++){let h=i[u++],d=i[u++],y=i[u++],w=[];for(let _=0;_<y;_++)w.push(i[u++]);p.push(new Nr(t,h,d,w))}this.inputs=p}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(p=>typeof p=="number"?this.inputs[p]:p)??this.inputs,i=r?.outputs??[],u=(p,m,h)=>new Nr(this.module,m,this.output(p,h),h),a=(p,m)=>{let h=Mr(p);if(!h)throw new Error(`Unsupported data type: ${p}`);let d=h*W.size(m);return new Nr(this.module,p,this.backend.gpuDataManager.create(d).id,m)};return this.backend.run(t,o,i,u,a)}output(t,r){let o=this.module.stackSave();try{let i=this.module.stackAlloc((1+r.length)*4),u=i>>2;this.module.HEAPU32[u++]=r.length;for(let a=0;a<r.length;a++)this.module.HEAPU32[u++]=r[a];return this.module._JsepOutput(this.opKernelContext,t,i)}catch(i){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${i}`)}finally{this.module.stackRestore(o)}}},Ip=async(e,t,r)=>{let o=e.jsepInit;if(!o)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let i=new Nn;await i.initialize(t,r),o(i,u=>i.alloc(u),u=>i.free(u),(u,a,p,m=!1)=>{if(m)De("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${u}, dst=${a}, size=${p}`),i.memcpy(u,a);else{De("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${u}, gpuDataId=${a}, size=${p}`);let h=e.HEAPU8.subarray(u>>>0,(u>>>0)+p);i.upload(a,h)}},async(u,a,p)=>{De("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${u}, dataOffset=${a}, size=${p}`),await i.download(u,()=>e.HEAPU8.subarray(a>>>0,(a>>>0)+p))},(u,a,p)=>i.createKernel(u,a,p,e.UTF8ToString(e._JsepGetNodeName(a))),u=>i.releaseKernel(u),(u,a,p,m)=>{De("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${p}, kernel=${u}, contextDataOffset=${a}`);let h=new Vo(e,i,a);return i.computeKernel(u,h,m)})}});var Pi;Pi=vi();var Nl=Ii(),so,uo=!1,gn=!1,Ei=!1,Hl=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Gl=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Ll=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Oi=async e=>{if(uo)return Promise.resolve();if(gn)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(Ei)throw new Error("previous call to \'initializeWebAssembly()\' failed.");gn=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,i=Hl(r),u=o&&Gl(),a=e.wasmPaths,p=typeof a=="string"?a:void 0,m=Ll(u,i),h=typeof a=="object"?a[m]:void 0,d=!1,y=[];if(t>0&&y.push(new Promise(w=>{setTimeout(()=>{d=!0,w()},t)})),y.push(new Promise((w,_)=>{let v=i?Nl:Pi,x={locateFile:(T,C)=>{if(i&&T.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Ti()],{type:"text/javascript"}));if(T.endsWith(".wasm")){if(h)return h;let S=p??C;return m==="ort-wasm-simd.wasm"?S+"ort-wasm-simd.jsep.wasm":m==="ort-wasm-simd-threaded.wasm"?S+"ort-wasm-simd-threaded.jsep.wasm":S+m}return C+T}};if(i)if(x.numThreads=r,typeof Blob>"u")x.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let T=`var ortWasmThreaded=${v.toString()};`;x.mainScriptUrlOrBlob=new Blob([T],{type:"text/javascript"})}v(x).then(T=>{gn=!1,uo=!0,so=T,w()},T=>{gn=!1,Ei=!0,_(T)})})),await Promise.race(y),d)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Ue=()=>{if(uo&&so)return so;throw new Error("WebAssembly is not initialized yet.")};var We=(e,t)=>{let r=Ue(),o=r.lengthBytesUTF8(e)+1,i=r._malloc(o);return r.stringToUTF8(e,i,o),t.push(i),i},Dr=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([i,u])=>{let a=t?t+i:i;if(typeof u=="object")Dr(u,a+".",r,o);else if(typeof u=="string"||typeof u=="number")o(a,u.toString());else if(typeof u=="boolean")o(a,u?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof u}`)})},Be=e=>{let t=Ue(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let i=t.HEAP32[o/4],u=t.HEAPU32[o/4+1],a=u?t.UTF8ToString(u):"";throw new Error(`${e} ERROR_CODE: ${i}, ERROR_MESSAGE: ${a}`)}finally{t.stackRestore(r)}};var ki=e=>{let t=Ue(),r=0,o=[],i=e||{};try{if(e?.logSeverityLevel===void 0)i.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)i.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(i.terminate=!1);let u=0;return e?.tag!==void 0&&(u=We(e.tag,o)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,u),r===0&&Be("Can\'t create run options."),e?.extra!==void 0&&Dr(e.extra,"",new WeakSet,(a,p)=>{let m=We(a,o),h=We(p,o);t._OrtAddRunConfigEntry(r,m,h)!==0&&Be(`Can\'t set a run config entry: ${a} - ${p}.`)}),[r,o]}catch(u){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(a=>t._free(a)),u}};var Fl=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},jl=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},ql=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Kl=(e,t,r)=>{for(let o of t){let i=typeof o=="string"?o:o.name;switch(i){case"webnn":if(i="WEBNN",typeof o!="string"){let a=o;if(a?.deviceType){let p=We("deviceType",r),m=We(a.deviceType,r);Ue()._OrtAddSessionConfigEntry(e,p,m)!==0&&Be(`Can\'t set a session config entry: \'deviceType\' - ${a.deviceType}.`)}if(a?.numThreads){let p=a.numThreads;(typeof p!="number"||!Number.isInteger(p)||p<0)&&(p=0);let m=We("numThreads",r),h=We(p.toString(),r);Ue()._OrtAddSessionConfigEntry(e,m,h)!==0&&Be(`Can\'t set a session config entry: \'numThreads\' - ${a.numThreads}.`)}if(a?.powerPreference){let p=We("powerPreference",r),m=We(a.powerPreference,r);Ue()._OrtAddSessionConfigEntry(e,p,m)!==0&&Be(`Can\'t set a session config entry: \'powerPreference\' - ${a.powerPreference}.`)}}break;case"webgpu":if(i="JS",typeof o!="string"){let a=o;if(a?.preferredLayout){if(a.preferredLayout!=="NCHW"&&a.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${a.preferredLayout}`);let p=We("preferredLayout",r),m=We(a.preferredLayout,r);Ue()._OrtAddSessionConfigEntry(e,p,m)!==0&&Be(`Can\'t set a session config entry: \'preferredLayout\' - ${a.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${i}`)}let u=We(i,r);Ue()._OrtAppendExecutionProvider(e,u)!==0&&Be(`Can\'t append execution provider: ${i}.`)}},Ri=e=>{let t=Ue(),r=0,o=[],i=e||{};ql(i);try{let u=Fl(i.graphOptimizationLevel??"all"),a=jl(i.executionMode??"sequential"),p=typeof i.logId=="string"?We(i.logId,o):0,m=i.logSeverityLevel??2;if(!Number.isInteger(m)||m<0||m>4)throw new Error(`log serverity level is not valid: ${m}`);let h=i.logVerbosityLevel??0;if(!Number.isInteger(h)||h<0||h>4)throw new Error(`log verbosity level is not valid: ${h}`);let d=typeof i.optimizedModelFilePath=="string"?We(i.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(u,!!i.enableCpuMemArena,!!i.enableMemPattern,a,!!i.enableProfiling,0,p,m,h,d),r===0&&Be("Can\'t create session options."),i.executionProviders&&Kl(r,i.executionProviders,o),i.freeDimensionOverrides)for(let[y,w]of Object.entries(i.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof w!="number"||!Number.isInteger(w)||w<0)throw new Error(`free dimension override value must be a non-negative integer: ${w}`);let _=We(y,o);t._OrtAddFreeDimensionOverride(r,_,w)!==0&&Be(`Can\'t set a free dimension override: ${y} - ${w}.`)}return i.extra!==void 0&&Dr(i.extra,"",new WeakSet,(y,w)=>{let _=We(y,o),v=We(w,o);t._OrtAddSessionConfigEntry(r,_,v)!==0&&Be(`Can\'t set a session config entry: ${y} - ${w}.`)}),[r,o]}catch(u){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(a=>t._free(a)),u}};Ve();var Di=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),o=[];for await(let i of r)o.push(i);return new Uint8Array(Buffer.concat(o))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),o=r?parseInt(r,10):0;if(o<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let i=t.body.getReader(),u;try{u=new ArrayBuffer(o)}catch(p){if(p instanceof RangeError){let m=Math.ceil(o/65536);u=new WebAssembly.Memory({initial:m,maximum:m}).buffer}else throw p}let a=0;for(;;){let{done:p,value:m}=await i.read();if(p)break;let h=m.byteLength;new Uint8Array(u,a,h).set(m),a+=h}return new Uint8Array(u,0,o)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)};var Tp=(e,t)=>{Ue()._OrtInit(e,t)!==0&&Be("Can\'t initialize onnxruntime.")},wl=async e=>{Tp(e.wasm.numThreads,zr(e.logLevel))},vl=async(e,t)=>{if(t==="webgpu"||t==="webnn"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error(\'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let o=(yl(),ur(gl)).init;await o(Ue(),e,r)}},Hr=new Map,Ep=e=>{let t=Ue(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Be("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},Wo=e=>{let t=Ue(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},$l=async(e,t)=>{let r,o,i=Ue();Array.isArray(e)?[r,o]=e:e.buffer===i.HEAPU8.buffer?[r,o]=[e.byteOffset,e.byteLength]:[r,o]=Wo(e);let u=0,a=0,p=0,m=[],h=[],d=[];try{if([a,m]=Ri(t),t?.externalData&&i.mountExternalData){let C=[];for(let S of t.externalData){let E=typeof S=="string"?S:S.path;C.push(Di(typeof S=="string"?S:S.data).then(O=>{i.mountExternalData(E,O)}))}await Promise.all(C)}u=await i._OrtCreateSession(r,o,a),u===0&&Be("Can\'t create a session.");let[y,w]=Ep(u),_=[],v=[],x=[];for(let C=0;C<y;C++){let S=i._OrtGetInputName(u,C);S===0&&Be("Can\'t get an input name."),h.push(S),_.push(i.UTF8ToString(S))}for(let C=0;C<w;C++){let S=i._OrtGetOutputName(u,C);S===0&&Be("Can\'t get an output name."),d.push(S);let E=i.UTF8ToString(S);v.push(E);{let O=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[E]??"cpu";if(O!=="cpu"&&O!=="cpu-pinned"&&O!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${O}.`);x.push(O)}}let T=null;return x.some(C=>C==="gpu-buffer")&&(p=i._OrtCreateBinding(u),p===0&&Be("Can\'t create IO binding."),T={handle:p,outputPreferredLocations:x,outputPreferredLocationsEncoded:x.map(C=>co(C))}),Hr.set(u,[u,h,d,T]),[u,_,v]}catch(y){throw h.forEach(w=>i._OrtFree(w)),d.forEach(w=>i._OrtFree(w)),p!==0&&i._OrtReleaseBinding(p),u!==0&&i._OrtReleaseSession(u),y}finally{i._free(r),a!==0&&i._OrtReleaseSessionOptions(a),m.forEach(y=>i._free(y)),i.unmountExternalData?.()}},_l=e=>{let t=Ue(),r=Hr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,i,u,a]=r;a&&t._OrtReleaseBinding(a.handle),t.jsepUnregisterBuffers?.(e),i.forEach(p=>t._OrtFree(p)),u.forEach(p=>t._OrtFree(p)),t._OrtReleaseSession(o),Hr.delete(e)},bl=(e,t,r,o,i)=>{if(!e){t.push(0);return}let u=Ue(),a=e[0],p=e[1],m=e[3],h,d;if(a==="string"&&m==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(m==="gpu-buffer"){let _=e[2].gpuBuffer,v=Mr(lo(a));d=p.reduce((x,T)=>x*T,1)*v,h=u.jsepRegisterBuffer(o,i,_,d)}else{let _=e[2];if(Array.isArray(_)){d=4*_.length,h=u._malloc(d),r.push(h);let v=h/4;for(let x=0;x<_.length;x++){if(typeof _[x]!="string")throw new TypeError(`tensor data at index ${x} is not a string`);u.HEAPU32[v++]=We(_[x],r)}}else d=_.byteLength,h=u._malloc(d),r.push(h),u.HEAPU8.set(new Uint8Array(_.buffer,_.byteOffset,d),h)}let y=u.stackSave(),w=u.stackAlloc(4*p.length);try{let _=w/4;p.forEach(x=>u.HEAP32[_++]=x);let v=u._OrtCreateTensor(lo(a),h,d,w,p.length,co(m));v===0&&Be(`Can\'t create tensor for input/output. session=${o}, index=${i}.`),t.push(v)}finally{u.stackRestore(y)}},Sl=async(e,t,r,o,i,u)=>{let a=Ue(),p=Hr.get(e);if(!p)throw new Error(`cannot run inference. invalid session id: ${e}`);let[m,h,d,y]=p,w=t.length,_=o.length,v=0,x=[],T=[],C=[],S=[],E=a.stackSave(),O=a.stackAlloc(w*4),U=a.stackAlloc(w*4),M=a.stackAlloc(_*4),N=a.stackAlloc(_*4);try{[v,x]=ki(u);for(let ee=0;ee<w;ee++)bl(r[ee],T,S,e,t[ee]);for(let ee=0;ee<_;ee++)bl(i[ee],C,S,e,w+o[ee]);let Y=O/4,se=U/4,B=M/4,te=N/4;for(let ee=0;ee<w;ee++)a.HEAPU32[Y++]=T[ee],a.HEAPU32[se++]=h[t[ee]];for(let ee=0;ee<_;ee++)a.HEAPU32[B++]=C[ee],a.HEAPU32[te++]=d[o[ee]];if(y){let{handle:ee,outputPreferredLocations:be,outputPreferredLocationsEncoded:Me}=y;if(h.length!==w)throw new Error(`input count from feeds (${w}) is expected to be always equal to model\'s input count (${h.length}).`);for(let pe=0;pe<w;pe++){let ye=t[pe];await a._OrtBindInput(ee,h[ye],T[pe])!==0&&Be(`Can\'t bind input[${pe}] for session=${e}.`)}for(let pe=0;pe<_;pe++){let ye=o[pe];i[pe]?.[3]?a._OrtBindOutput(ee,d[ye],C[pe],0)!==0&&Be(`Can\'t bind pre-allocated output[${pe}] for session=${e}.`):a._OrtBindOutput(ee,d[ye],0,Me[ye])!==0&&Be(`Can\'t bind output[${pe}] to ${be[pe]} for session=${e}.`)}}a.jsepOnRunStart?.();let Pe;y?Pe=await a._OrtRunWithBinding(m,y.handle,_,M,v):Pe=await a._OrtRun(m,U,O,w,N,_,M,v),Pe!==0&&Be("failed to call OrtRun().");let Ee=[];for(let ee=0;ee<_;ee++){let be=a.HEAPU32[M/4+ee];if(be===C[ee]){Ee.push(i[ee]);continue}let Me=a.stackSave(),pe=a.stackAlloc(4*4),ye=!1,de,we=0;try{a._OrtGetTensorData(be,pe,pe+4,pe+8,pe+12)!==0&&Be(`Can\'t access output tensor data on index ${ee}.`);let Re=pe/4,Ge=a.HEAPU32[Re++];we=a.HEAPU32[Re++];let F=a.HEAPU32[Re++],ie=a.HEAPU32[Re++],he=[];for(let ke=0;ke<ie;ke++)he.push(a.HEAPU32[F/4+ke]);a._OrtFree(F);let Xe=he.reduce((ke,Le)=>ke*Le,1);de=st(Ge);let nt=y?.outputPreferredLocations[o[ee]];if(de==="string"){if(nt==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let ke=[],Le=we/4;for(let It=0;It<Xe;It++){let Tt=a.HEAPU32[Le++],Vt=It===Xe-1?void 0:a.HEAPU32[Le]-Tt;ke.push(a.UTF8ToString(Tt,Vt))}Ee.push([de,he,ke,"cpu"])}else if(nt==="gpu-buffer"&&Xe>0){let ke=a.jsepGetBuffer(we),Le=Mr(Ge);if(Le===void 0||!Bi(de))throw new Error(`Unsupported data type: ${de}`);ye=!0,Ee.push([de,he,{gpuBuffer:ke,download:a.jsepCreateDownloader(ke,Xe*Le,de),dispose:()=>{a._OrtReleaseTensor(be)}},"gpu-buffer"])}else{let ke=yn(de),Le=new ke(Xe);new Uint8Array(Le.buffer,Le.byteOffset,Le.byteLength).set(a.HEAPU8.subarray(we,we+Le.byteLength)),Ee.push([de,he,Le,"cpu"])}}finally{a.stackRestore(Me),de==="string"&&we&&a._free(we),ye||a._OrtReleaseTensor(be)}}return y&&a._OrtClearBoundOutputs(y.handle),Ee}finally{a.stackRestore(E),T.forEach(Y=>a._OrtReleaseTensor(Y)),C.forEach(Y=>a._OrtReleaseTensor(Y)),S.forEach(Y=>a._free(Y)),v!==0&&a._OrtReleaseRunOptions(v),x.forEach(Y=>a._free(Y))}},xl=e=>{let t=Ue(),r=Hr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],i=t._OrtEndProfiling(o);i===0&&Be("Can\'t get an profile file name."),t._OrtFree(i)},Cl=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":Oi(r.wasm).then(()=>{wl(r).then(()=>{postMessage({type:t})},o=>{postMessage({type:t,err:o})})},o=>{postMessage({type:t,err:o})});break;case"init-ep":{let{epName:o,env:i}=r;vl(i,o).then(()=>{postMessage({type:t})},u=>{postMessage({type:t,err:u})});break}case"copy-from":{let{buffer:o}=r,i=Wo(o);postMessage({type:t,out:i});break}case"create":{let{model:o,options:i}=r;$l(o,i).then(u=>{postMessage({type:t,out:u})},u=>{postMessage({type:t,err:u})});break}case"release":_l(r),postMessage({type:t});break;case"run":{let{sessionId:o,inputIndices:i,inputs:u,outputIndices:a,options:p}=r;Sl(o,i,u,a,new Array(a.length).fill(null),p).then(m=>{m.some(h=>h[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:m},Cl(m))},m=>{postMessage({type:t,err:m})});break}case"end-profiling":xl(r),postMessage({type:t});break;default:}}catch(o){postMessage({type:t,err:o})}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'})),ul=U((()=>{ue(),ol(),ys(),Mu=()=>!!p.wasm.proxy&&typeof document<"u",Nu=!1,Wu=!1,Uu=!1,Hu=new Map,Lu=(e,t)=>{let n=Hu.get(e);n?n.push(t):Hu.set(e,[t])},Fu=()=>{if(Nu||!Wu||Uu||!Du)throw new Error("worker not ready")},Gu=e=>{switch(e.data.type){case"init-wasm":Nu=!1,e.data.err?(Uu=!0,Vu[1](e.data.err)):(Wu=!0,Vu[0]());break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=Hu.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},ju=typeof document<"u"?document?.currentScript?.src:void 0,qu=async()=>{if(!Wu){if(Nu)throw new Error("multiple calls to 'initWasm()' detected.");if(Uu)throw new Error("previous call to 'initWasm()' failed.");if(Nu=!0,Mu())return void 0===p.wasm.wasmPaths&&ju&&0!==ju.indexOf("blob:")&&(p.wasm.wasmPaths=ju.substr(0,+ju.lastIndexOf("/")+1)),new Promise(((e,t)=>{Du?.terminate();let n=URL.createObjectURL(new Blob([sl()],{type:"text/javascript"}));(Du=new Worker(n,{name:"ort-wasm-proxy-worker"})).onerror=e=>t(e),Du.onmessage=Gu,URL.revokeObjectURL(n),Vu=[e,t];let r={type:"init-wasm",in:p};Du.postMessage(r)}));try{await Oe(p.wasm),await Cu(p),Wu=!0}catch(e){throw Uu=!0,e}finally{Nu=!1}}},Ku=async e=>{if(Mu())return Fu(),new Promise(((t,n)=>{Lu("init-ep",[t,n]);let r={type:"init-ep",in:{epName:e,env:p}};Du.postMessage(r)}));await Eu(p,e)},Yu=async e=>Mu()?(Fu(),new Promise(((t,n)=>{Lu("copy-from",[t,n]);let r={type:"copy-from",in:{buffer:e}};Du.postMessage(r,[e.buffer])}))):Au(e),Zu=async(e,t)=>{if(Mu()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Fu(),new Promise(((n,r)=>{Lu("create",[n,r]);let a={type:"create",in:{model:e,options:t}},i=[];e instanceof Uint8Array&&i.push(e.buffer),Du.postMessage(a,i)}))}return ku(e,t)},Qu=async e=>{if(Mu())return Fu(),new Promise(((t,n)=>{Lu("release",[t,n]);let r={type:"release",in:e};Du.postMessage(r)}));Ou(e)},Xu=async(e,t,n,r,a,i)=>{if(Mu()){if(n.some((e=>"cpu"!==e[3])))throw new Error("input tensor on GPU is not supported for proxy.");if(a.some((e=>e)))throw new Error("pre-allocated output tensor is not supported for proxy.");return Fu(),new Promise(((a,o)=>{Lu("run",[a,o]);let s=n,u={type:"run",in:{sessionId:e,inputIndices:t,inputs:s,outputIndices:r,options:i}};Du.postMessage(u,Pu(s))}))}return zu(e,t,n,r,a,i)},Ju=async e=>{if(Mu())return Fu(),new Promise(((t,n)=>{Lu("end-profiling",[t,n]);let r={type:"end-profiling",in:e};Du.postMessage(r)}));Bu(e)}})),ll=U((()=>{ue(),ul(),$s(),_s(),el=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},tl=e=>{switch(e[3]){case"cpu":return new E(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!qe(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:n,download:r,dispose:a}=e[2];return E.fromGpuBuffer(n,{dataType:t,dims:e[1],download:r,dispose:a})}default:throw new Error(`invalid data location: ${e[3]}`)}},nl=class{async fetchModelAndCopyToWasmMemory(e){return Yu(await Ye(e))}async loadModel(e,t){let n;A(),n="string"==typeof e?typeof process<"u"&&process.versions&&process.versions.node?await Ye(e):await this.fetchModelAndCopyToWasmMemory(e):e,[this.sessionId,this.inputNames,this.outputNames]=await Zu(n,t),k()}async dispose(){return Qu(this.sessionId)}async run(e,t,n){A();let r=[],a=[];Object.entries(e).forEach((e=>{let t=e[0],n=e[1],i=this.inputNames.indexOf(t);if(-1===i)throw new Error(`invalid input '${t}'`);r.push(n),a.push(i)}));let i=[],o=[];Object.entries(t).forEach((e=>{let t=e[0],n=e[1],r=this.outputNames.indexOf(t);if(-1===r)throw new Error(`invalid output '${t}'`);i.push(n),o.push(r)}));let s=r.map(((e,t)=>el(e,(()=>`input "${this.inputNames[a[t]]}"`)))),u=i.map(((e,t)=>e?el(e,(()=>`output "${this.outputNames[o[t]]}"`)):null)),l=await Xu(this.sessionId,a,s,o,u,n),d={};for(let e=0;e<l.length;e++)d[this.outputNames[o[e]]]=i[e]??tl(l[e]);return k(),d}startProfiling(){}endProfiling(){Ju(this.sessionId)}}})),dl=U((()=>{ue(),ul(),ll(),rl=()=>{if(("number"!=typeof p.wasm.initTimeout||p.wasm.initTimeout<0)&&(p.wasm.initTimeout=0),"boolean"!=typeof p.wasm.simd&&(p.wasm.simd=!0),"boolean"!=typeof p.wasm.proxy&&(p.wasm.proxy=!1),"boolean"!=typeof p.wasm.trace&&(p.wasm.trace=!1),"number"!=typeof p.wasm.numThreads||!Number.isInteger(p.wasm.numThreads)||p.wasm.numThreads<=0){(typeof self<"u"&&!self.crossOriginIsolated||typeof process<"u"&&process.versions&&process.versions.node)&&(p.wasm.numThreads=1);let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;p.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},al=class{async init(e){rl(),await qu(),await Ku(e)}async createInferenceSessionHandler(e,t){let n=new nl;return await n.loadModel(e,t),Promise.resolve(n)}}})),pl={};H(pl,{wasmBackend:()=>cl});var cl,fl=U((()=>{dl(),cl=new al})),hl={};H(hl,{InferenceSession:()=>R,TRACE:()=>I,TRACE_FUNC_BEGIN:()=>A,TRACE_FUNC_END:()=>k,Tensor:()=>E,TrainingSession:()=>B,default:()=>ml,env:()=>p,registerBackend:()=>o}),e.exports=L(hl),ue(),ue(),ue();var ml=se;{let e=(fl(),L(pl)).wasmBackend;o("webgpu",e,5),o("webnn",e,5),o("cpu",e,10),o("wasm",e,10)}Object.defineProperty(p.versions,"web",{value:"1.18.0-dev.20240130-9f68a27c7a",enumerable:!0})}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}return n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{const e=n(122),t=500,r=500,a=1024,i=1024,o={sam_b:["https://huggingface.co/schmuell/sam-b-fp16/resolve/main/sam_vit_b_01ec64.encoder-fp16.onnx","https://huggingface.co/schmuell/sam-b-fp16/resolve/main/sam_vit_b_01ec64.decoder.onnx"],sam_b_local:["models/sam_vit_b_01ec64.encoder-fp16.onnx","models/sam_vit_b_01ec64.decoder.onnx"]},s=function(){var e={model:"sam_b",provider:"webgpu",device:"gpu",threads:"1"};let t=window.location.search.substring(1).split("&");for(var n=0;n<t.length;n++){let r=t[n].split("=");if(r[0]in e)e[r[0]]=decodeURIComponent(r[1]);else if(r[0].length>0)throw new Error("unknown argument: "+r[0])}return e.threads=parseInt(e.threads),e}();let u,l,d;var p;e.env.wasm.numThreads=s.threads,e.env.wasm.proxy=!0;var c,f=[],h=[],m=[],g=!1;function y(e){document.getElementById("status").innerText+=`\n${e}`}async function b(t){if(!g)try{g=!0,u.style.cursor="wait";const n=u.getBoundingClientRect(),r=t.clientX-n.left,o=t.clientY-n.top,s=t.shiftKey?0:1;void 0===p&&await f[0];const l=await p;t.ctrlKey||(h=[],m=[]),h.push(r,o),m.push(s);let y=u.getContext("2d");y.clearRect(0,0,u.width,u.height),u.width=c.width,u.height=c.height,y.putImageData(c,0,0),y.fillStyle="blue",y.fillRect(r,o,10,10);const b=new e.Tensor(new Float32Array(h),[1,h.length/2,2]),w=new e.Tensor(new Float32Array(m),[1,m.length]),v=new e.Tensor(new Float32Array(65536),[1,1,256,256]),$=new e.Tensor(new Float32Array([0]),[1]),_=new e.Tensor(new Float32Array([i,a]),[2]),x=await f[1],S={image_embeddings:new e.Tensor(l.image_embeddings.type,Float32Array.from(l.image_embeddings.data),l.image_embeddings.dims),point_coords:b,point_labels:w,mask_input:v,has_mask_input:$,orig_im_size:_},C=performance.now(),E=await x.run(S);d.innerText=`${(performance.now()-C).toFixed(1)}ms`;const I=E.masks.toImageData();y.globalAlpha=.3,y.drawImage(await createImageBitmap(I),0,0)}finally{u.style.cursor="default",g=!1}}async function w(n){const o=document.getElementById("encoder_latency");o.innerText="",l.disabled=!0,d.innerText="",u.style.cursor="wait",p=void 0;var s=n.width,h=n.height;s>h?s>t&&(h*=t/s,s=t):h>r&&(s*=r/h,h=r),s=Math.round(s),h=Math.round(h),u.width=s,u.height=h;var m=u.getContext("2d");m.drawImage(n,0,0,s,h),c=m.getImageData(0,0,s,h);const g={input_image:await e.Tensor.fromImage(c,options={resizedWidth:a,resizedHeight:i})},y=await f[0],b=performance.now();(p=y.run(g)).then((()=>{o.innerText=`${(performance.now()-b).toFixed(1)}ms`,u.style.cursor="default"})),l.disabled=!1}async function v(t,n,r){let a=s.provider;switch(a){case"webnn":if(!("ml"in navigator))throw new Error("webnn is NOT supported");a={name:"webnn",deviceType:s.device,powerPreference:"default"};break;case"webgpu":if(!navigator.gpu)throw new Error("webgpu is NOT supported")}const i={executionProviders:[a]};(async function(e){try{const t=await caches.open("onnx");s.clear_cache&&t.delete(e);let n=await t.match(e);return null==n?(await t.add(e),n=await t.match(e),y(`${e} (from network)`)):y(`${e} (from cache)`),await n.arrayBuffer()}catch(t){return y(`${e} (from network)`),await fetch(e).then((e=>e.arrayBuffer()))}})(t[n]).then((a=>{f[n]=e.InferenceSession.create(a,i),f[n].then((()=>{y(`${t[n]} loaded.`),0==n&&v(t,1)}),(e=>{throw y(`${t[n]} failed with ${e}.`),e})),void 0!==r&&w(r)}))}document.addEventListener("DOMContentLoaded",(()=>{!async function(){const e=o[s.model];u=document.getElementById("img_canvas"),u.addEventListener("click",b),u.style.cursor="wait",l=document.getElementById("file-in"),d=document.getElementById("decoder_latency");let t=document.getElementById("original-image");v(e,0,t).then((()=>{}),(e=>{y(e)})),l.onchange=function(e){let n=(e.target||window.event.src).files;if(FileReader&&n&&n.length){let e=new FileReader;e.onload=()=>{t.onload=()=>w(t),t.src=e.result},e.readAsDataURL(n[0])}}}()}))})(),{}})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,