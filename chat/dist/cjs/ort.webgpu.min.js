/*!
 * ONNX Runtime Web v1.18.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ei=Object.defineProperty;var mp=Object.getOwnPropertyDescriptor;var hp=Object.getOwnPropertyNames;var gp=Object.prototype.hasOwnProperty;var F=(e,t)=>()=>(e&&(t=e(e=0)),t);var xr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),ir=(e,t)=>{for(var r in t)ei(e,r,{get:t[r],enumerable:!0})},yp=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of hp(t))!gp.call(e,n)&&n!==r&&ei(e,n,{get:()=>t[n],enumerable:!(a=mp(t,n))||a.enumerable});return e};var Vt=e=>yp(ei({},"__esModule",{value:!0}),e);var Jn,or,Kt,bp,ea,ta=F(()=>{"use strict";Jn=new Map,or=[],Kt=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=Jn.get(e);if(a===void 0)Jn.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=or.indexOf(e);n!==-1&&or.splice(n,1);for(let s=0;s<or.length;s++)if(Jn.get(or[s]).priority<=r){or.splice(s,0,e);return}or.push(e)}return}throw new TypeError("not a valid backend")},bp=async e=>{let t=Jn.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(a){return r||(t.error=`${a}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},ea=async e=>{let t=e.executionProviders||[],r=t.map(i=>typeof i=="string"?i:i.name),a=r.length===0?or:r,n,s=[],u=new Set;for(let i of a){let p=await bp(i);typeof p=="string"?s.push({name:i,err:p}):(n||(n=p),n===p&&u.add(i))}if(!n)throw new Error(`no available backend found. ERR: ${s.map(i=>`[${i.name}] ${i.err}`).join(", ")}`);for(let{name:i,err:p}of s)r.includes(i)&&console.warn(`removing requested execution provider "${i}" from session options because it is not available: ${p}`);let d=t.filter(i=>u.has(typeof i=="string"?i:i.name));return[n,new Proxy(e,{get:(i,p)=>p==="executionProviders"?d:Reflect.get(i,p)})]}});var fo=F(()=>{"use strict";ta()});var mo,ho=F(()=>{"use strict";mo="1.18.0"});var go,kt,ti=F(()=>{"use strict";ho();go="warning",kt={wasm:{},webgl:{},webgpu:{},versions:{common:mo},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);go=e}},get logLevel(){return go}};Object.defineProperty(kt,"logLevel",{enumerable:!0})});var Pe,yo=F(()=>{"use strict";ti();Pe=kt});var bo,vo,wo=F(()=>{"use strict";bo=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,s;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[3]):(n=e.dims[3],s=e.dims[2]);let u=t?.format!==void 0?t.format:"RGB",d=t?.norm,i,p;d===void 0||d.mean===void 0?i=[255,255,255,255]:typeof d.mean=="number"?i=[d.mean,d.mean,d.mean,d.mean]:(i=[d.mean[0],d.mean[1],d.mean[2],0],d.mean[3]!==void 0&&(i[3]=d.mean[3])),d===void 0||d.bias===void 0?p=[0,0,0,0]:typeof d.bias=="number"?p=[d.bias,d.bias,d.bias,d.bias]:(p=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(p[3]=d.bias[3]));let h=s*n,g=0,y=h,w=h*2,v=-1;u==="RGBA"?(g=0,y=h,w=h*2,v=h*3):u==="RGB"?(g=0,y=h,w=h*2):u==="RBG"&&(g=0,w=h,y=h*2);for(let $=0;$<s;$++)for(let C=0;C<n;C++){let S=(e.data[g++]-p[0])*i[0],x=(e.data[y++]-p[1])*i[1],T=(e.data[w++]-p[2])*i[2],E=v===-1?255:(e.data[v++]-p[3])*i[3];a.fillStyle="rgba("+S+","+x+","+T+","+E+")",a.fillRect(C,$,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},vo=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),a;if(r!=null){let n,s,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[1],u=e.dims[3]):(n=e.dims[3],s=e.dims[2],u=e.dims[1]);let d=t!==void 0&&t.format!==void 0?t.format:"RGB",i=t?.norm,p,h;i===void 0||i.mean===void 0?p=[255,255,255,255]:typeof i.mean=="number"?p=[i.mean,i.mean,i.mean,i.mean]:(p=[i.mean[0],i.mean[1],i.mean[2],255],i.mean[3]!==void 0&&(p[3]=i.mean[3])),i===void 0||i.bias===void 0?h=[0,0,0,0]:typeof i.bias=="number"?h=[i.bias,i.bias,i.bias,i.bias]:(h=[i.bias[0],i.bias[1],i.bias[2],0],i.bias[3]!==void 0&&(h[3]=i.bias[3]));let g=s*n;if(t!==void 0&&(t.format!==void 0&&u===4&&t.format!=="RGBA"||u===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let y=4,w=0,v=1,$=2,C=3,S=0,x=g,T=g*2,E=-1;d==="RGBA"?(S=0,x=g,T=g*2,E=g*3):d==="RGB"?(S=0,x=g,T=g*2):d==="RBG"&&(S=0,T=g,x=g*2),a=r.createImageData(n,s);for(let k=0;k<s*n;w+=y,v+=y,$+=y,C+=y,k++)a.data[w]=(e.data[S++]-h[0])*p[0],a.data[v]=(e.data[x++]-h[1])*p[1],a.data[$]=(e.data[T++]-h[2])*p[2],a.data[C]=E===-1?255:(e.data[E++]-h[3])*p[3]}else throw new Error("Can not access image data");return a}});var ri,_o,$o,xo,So,Co=F(()=>{"use strict";ra();ri=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},s,u;typeof n.mean=="number"?s=[n.mean,n.mean,n.mean,n.mean]:s=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?u=[n.bias,n.bias,n.bias,n.bias]:u=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let d=t.format!==void 0?t.format:"RGBA",i=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",p=r*a,h=i==="RGBA"?new Float32Array(p*4):new Float32Array(p*3),g=4,y=0,w=1,v=2,$=3,C=0,S=p,x=p*2,T=-1;d==="RGB"&&(g=3,y=0,w=1,v=2,$=-1),i==="RGBA"?T=p*3:i==="RBG"?(C=0,x=p,S=p*2):i==="BGR"&&(x=0,S=p,C=p*2);for(let k=0;k<p;k++,y+=g,v+=g,w+=g,$+=g)h[C++]=(e[y]+u[0])/s[0],h[S++]=(e[w]+u[1])/s[1],h[x++]=(e[v]+u[2])/s[2],T!==-1&&$!==-1&&(h[T++]=(e[$]+u[3])/s[3]);return i==="RGBA"?new st("float32",h,[1,4,r,a]):new st("float32",h,[1,3,r,a])},_o=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string",u,d=t??{},i=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},p=h=>h instanceof HTMLCanvasElement||h instanceof OffscreenCanvas?h.getContext("2d"):null;if(r){let h=i();h.width=e.width,h.height=e.height;let g=p(h);if(g!=null){let y=e.height,w=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(y=t.resizedHeight,w=t.resizedWidth),t!==void 0){if(d=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");d.tensorFormat="RGBA",d.height=y,d.width=w}else d.tensorFormat="RGBA",d.height=y,d.width=w;g.drawImage(e,0,0),u=g.getImageData(0,0,w,y).data}else throw new Error("Can not access image data")}else if(a){let h,g;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(h=t.resizedHeight,g=t.resizedWidth):(h=e.height,g=e.width),t!==void 0&&(d=t),d.format="RGBA",d.height=h,d.width=g,t!==void 0){let y=i();y.width=g,y.height=h;let w=p(y);if(w!=null)w.putImageData(e,0,0),u=w.getImageData(0,0,g,h).data;else throw new Error("Can not access image data")}else u=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let h=i();h.width=e.width,h.height=e.height;let g=p(h);if(g!=null){let y=e.height,w=e.width;return g.drawImage(e,0,0,w,y),u=g.getImageData(0,0,w,y).data,d.height=y,d.width=w,ri(u,d)}else throw new Error("Can not access image data")}else{if(s)return new Promise((h,g)=>{let y=i(),w=p(y);if(!e||!w)return g();let v=new Image;v.crossOrigin="Anonymous",v.src=e,v.onload=()=>{y.width=v.width,y.height=v.height,w.drawImage(v,0,0,y.width,y.height);let $=w.getImageData(0,0,y.width,y.height);d.height=y.height,d.width=y.width,h(ri($.data,d))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(u!==void 0)return ri(u,d);throw new Error("Input data provided is not supported - aborted tensor creation")},$o=(e,t)=>{let{width:r,height:a,download:n,dispose:s}=t,u=[1,a,r,4];return new st({location:"texture",type:"float32",texture:e,dims:u,download:n,dispose:s})},xo=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:s}=t;return new st({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:s})},So=(e,t,r)=>new st({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var sr,Qr,Io,Ao,To=F(()=>{"use strict";sr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Qr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Io=!1,Ao=()=>{if(!Io){Io=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=typeof Float16Array<"u"&&Float16Array.from;e&&(sr.set("int64",BigInt64Array),Qr.set(BigInt64Array,"int64")),t&&(sr.set("uint64",BigUint64Array),Qr.set(BigUint64Array,"uint64")),r?(sr.set("float16",Float16Array),Qr.set(Float16Array,"float16")):sr.set("float16",Uint16Array)}}});var Eo,ko,Oo=F(()=>{"use strict";ra();Eo=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},ko=(e,t)=>{switch(e.location){case"cpu":return new st(e.type,e.data,t);case"cpu-pinned":return new st({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new st({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new st({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var st,ra=F(()=>{"use strict";wo();Co();To();Oo();st=class{constructor(t,r,a){Ao();let n,s;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,s=t.dims,t.location){case"cpu-pinned":{let d=sr.get(n);if(!d)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof d))throw new TypeError(`buffer should be of type ${d.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let d,i;if(typeof t=="string")if(n=t,i=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");d=r}else{let p=sr.get(t);if(p===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16"&&p===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?d=p.from(r,BigInt):d=p.from(r)}else if(r instanceof p)d=r;else throw new TypeError(`A ${n} tensor's data must be type of ${p}`)}else if(i=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let p=typeof t[0];if(p==="string")n="string",d=t;else if(p==="boolean")n="bool",d=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${p}.`)}else{let p=Qr.get(t.constructor);if(p===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=p,d=t}if(i===void 0)i=[d.length];else if(!Array.isArray(i))throw new TypeError("A tensor's dims must be a number array");s=i,this.cpuData=d,this.dataLocation="cpu"}let u=Eo(s);if(this.cpuData&&u!==this.cpuData.length)throw new Error(`Tensor's size(${u}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=s,this.size=u}static async fromImage(t,r){return _o(t,r)}static fromTexture(t,r){return $o(t,r)}static fromGpuBuffer(t,r){return xo(t,r)}static fromPinnedBuffer(t,r,a){return So(t,r,a)}toDataURL(t){return bo(this,t)}toImageData(t){return vo(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return ko(this,t)}}});var tt,na=F(()=>{"use strict";ra();tt=st});var aa,Po,ct,ut,ni=F(()=>{"use strict";ti();aa=(e,t)=>{},Po=(e,t)=>{},ct=e=>{(typeof kt.trace>"u"?!kt.wasm.trace:!kt.trace)||Po("BEGIN",e)},ut=e=>{(typeof kt.trace>"u"?!kt.wasm.trace:!kt.trace)||Po("END",e)}});var ia,Ro=F(()=>{"use strict";ta();na();ni();ia=class e{constructor(t){this.handler=t}async run(t,r,a){ct();let n={},s={};if(typeof t!="object"||t===null||t instanceof tt||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof tt)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let p of r){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);n[p]=null}if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,h=Object.getOwnPropertyNames(r);for(let g of this.outputNames)if(h.indexOf(g)!==-1){let y=r[g];(y===null||y instanceof tt)&&(p=!0,u=!1,n[g]=y)}if(p){if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of this.inputNames)if(typeof t[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(u)for(let p of this.outputNames)n[p]=null;let d=await this.handler.run(t,n,s),i={};for(let p in d)if(Object.hasOwnProperty.call(d,p)){let h=d[p];h instanceof tt?i[p]=h:i[p]=new tt(h.type,h.data,h.dims)}return ut(),i}async release(){return this.handler.dispose()}static async create(t,r,a,n){ct();let s,u={};if(typeof t=="string"){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let h=t,g=0,y=t.byteLength;if(typeof r=="object"&&r!==null)u=r;else if(typeof r=="number"){if(g=r,!Number.isSafeInteger(g))throw new RangeError("'byteOffset' must be an integer.");if(g<0||g>=h.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${h.byteLength}).`);if(y=t.byteLength-g,typeof a=="number"){if(y=a,!Number.isSafeInteger(y))throw new RangeError("'byteLength' must be an integer.");if(y<=0||g+y>h.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${h.byteLength-g}].`);if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(h,g,y)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[d,i]=await ea(u),p=await d.createInferenceSessionHandler(s,i);return ut(),new e(p)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var zo,Do=F(()=>{"use strict";Ro();zo=ia});var Bo=F(()=>{"use strict"});var Mo=F(()=>{"use strict"});var Uo=F(()=>{"use strict"});var No=F(()=>{"use strict"});var vp,oa,Wo=F(()=>{"use strict";ta();na();vp="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",oa=class e{constructor(t,r,a){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=a}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",s=r||{},[u,d]=await ea(s);if(u.createTrainingSessionHandler){let i=await u.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,d);return new e(i,!!t.optimizerModel,!!t.evalModel)}else throw new Error(vp)}typeNarrowingForRunStep(t,r,a,n,s){let u={},d={};if(typeof a!="object"||a===null||a instanceof tt||Array.isArray(a))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if(typeof n=="object"){if(n===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof tt)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(n.length===0)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(let p of n){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);u[p]=null}if(typeof s=="object"&&s!==null)d=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,h=Object.getOwnPropertyNames(n);for(let g of r)if(h.indexOf(g)!==-1){let y=n[g];(y===null||y instanceof tt)&&(p=!0,i=!1,u[g]=y)}if(p){if(typeof s=="object"&&s!==null)d=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else d=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of t)if(typeof a[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(i)for(let p of r)u[p]=null;return[u,d]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof tt?r[a]=n:r[a]=new tt(n.type,n.data,n.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,a){let[n,s]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,a),u=await this.handler.runTrainStep(t,n,s);return this.convertHandlerReturnTypeToMapOfTensors(u)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,a){if(this.hasEvalModel){let[n,s]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,a),u=await this.handler.runEvalStep(t,n,s);return this.convertHandlerReturnTypeToMapOfTensors(u)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let a=await this.getParametersSize(r);if(t.length!==4*a)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var Vo,Ho=F(()=>{"use strict";Wo();Vo=oa});var ai={};ir(ai,{InferenceSession:()=>zo,TRACE:()=>aa,TRACE_FUNC_BEGIN:()=>ct,TRACE_FUNC_END:()=>ut,Tensor:()=>tt,TrainingSession:()=>Vo,env:()=>Pe,registerBackend:()=>Kt});var vt=F(()=>{"use strict";fo();yo();Do();na();Bo();Mo();ni();Uo();No();Ho()});var sa={};ir(sa,{createReadStream:()=>Lo,readFile:()=>wp,readFileSync:()=>_p});var wp,_p,Lo,ua=F(()=>{wp=void 0,_p=void 0,Lo=void 0});var ii={};ir(ii,{join:()=>$p});var $p,oi=F(()=>{$p=void 0});var Ko=xr((Fo,si)=>{"use strict";var jo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((o,c)=>{a=o,n=c}),r.mountExternalData=(o,c)=>{(r.MountedFiles||(r.MountedFiles=new Map)).set(o,c)},r.unmountExternalData=()=>{delete r.MountedFiles};let s=()=>{let o=(f,b,A)=>(...O)=>{let z=ae.currData,W=b?.(),j=f(...O),J=b?.();return W!==J&&(f=J,A(W),A=null,b=null),ae.currData!=z?ae.whenDone():j},c=f=>async(...b)=>{try{if(r.jsepSessionState)throw new Error("Session already started");let A=r.jsepSessionState={sessionHandle:b[0],errors:[]},O=await f(...b);if(r.jsepSessionState!==A)throw new Error("Session mismatch");r.jsepBackend?.flush();let z=A.errors;if(z.length>0){let W=await Promise.all(z);if(W=W.filter(j=>j),W.length>0)throw new Error(W.join(`
`))}return O}finally{r.jsepSessionState=null}};r._OrtCreateSession=o(r._OrtCreateSession,()=>r._OrtCreateSession,f=>r._OrtCreateSession=f),r._OrtRun=c(o(r._OrtRun,()=>r._OrtRun,f=>r._OrtRun=f)),r._OrtRunWithBinding=c(o(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,f=>r._OrtRunWithBinding=f)),r._OrtBindInput=o(r._OrtBindInput,()=>r._OrtBindInput,f=>r._OrtBindInput=f),s=void 0};r.jsepInit=(o,c)=>{if(s?.(),o==="webgpu"){[r.jsepBackend,r.jsepAlloc,r.jsepFree,r.jsepCopy,r.jsepCopyAsync,r.jsepCreateKernel,r.jsepReleaseKernel,r.jsepRunKernel,r.jsepCaptureBegin,r.jsepCaptureEnd,r.jsepReplay]=c;let f=r.jsepBackend;r.jsepRegisterBuffer=(b,A,O,z)=>f.registerBuffer(b,A,O,z),r.jsepGetBuffer=b=>f.getBuffer(b),r.jsepCreateDownloader=(b,A,O)=>f.createDownloader(b,A,O),r.jsepOnReleaseSession=b=>{f.onReleaseSession(b)},r.jsepOnRunStart=b=>f.onRunStart(b)}};var u=Object.assign({},r),d=[],i="./this.program",p=(o,c)=>{throw c},h=typeof window=="object",g=typeof importScripts=="function",y=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",w="";function v(o){return r.locateFile?r.locateFile(o,w):w+o}var $,C,S;if(y){var x=(ua(),Vt(sa)),T=(oi(),Vt(ii));g?w=T.dirname(w)+"/":w=__dirname+"/",$=(o,c)=>(o=ht(o)?new URL(o):T.normalize(o),x.readFileSync(o,c?void 0:"utf8")),S=o=>{var c=$(o,!0);return c.buffer||(c=new Uint8Array(c)),c},C=(o,c,f,b=!0)=>{o=ht(o)?new URL(o):T.normalize(o),x.readFile(o,b?void 0:"utf8",(A,O)=>{A?f(A):c(b?O.buffer:O)})},!r.thisProgram&&process.argv.length>1&&(i=process.argv[1].replace(/\\/g,"/")),d=process.argv.slice(2),p=(o,c)=>{throw process.exitCode=o,c},r.inspect=()=>"[Emscripten Module object]"}else(h||g)&&(g?w=self.location.href:typeof document<"u"&&document.currentScript&&(w=document.currentScript.src),e&&(w=e),w.indexOf("blob:")!==0?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",$=o=>{var c=new XMLHttpRequest;return c.open("GET",o,!1),c.send(null),c.responseText},g&&(S=o=>{var c=new XMLHttpRequest;return c.open("GET",o,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),C=(o,c,f)=>{var b=new XMLHttpRequest;b.open("GET",o,!0),b.responseType="arraybuffer",b.onload=()=>{if(b.status==200||b.status==0&&b.response){c(b.response);return}f()},b.onerror=f,b.send(null)});var E=console.log.bind(console),k=console.error.bind(console);Object.assign(r,u),u=null,r.arguments&&(d=r.arguments);var M;typeof WebAssembly!="object"&&mt("no native wasm support detected");var G,q=!1,re,Y,ce,xe,Re,U,X,V,Ce,we,he;function ne(){var o=G.buffer;r.HEAP8=Y=new Int8Array(o),r.HEAP16=xe=new Int16Array(o),r.HEAPU8=ce=new Uint8Array(o),r.HEAPU16=Re=new Uint16Array(o),r.HEAP32=U=new Int32Array(o),r.HEAPU32=X=new Uint32Array(o),r.HEAPF32=V=new Float32Array(o),r.HEAPF64=he=new Float64Array(o),r.HEAP64=Ce=new BigInt64Array(o),r.HEAPU64=we=new BigUint64Array(o)}var be=[],fe=[],qe=[],H=!1;function ee(){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)Ye(r.preRun.shift());Xt(be)}function _e(){H=!0,Xt(fe)}function Xe(){Xt(qe)}function Ye(o){be.unshift(o)}function Je(o){fe.unshift(o)}var Le=0,Ke=null,Ge=null;function rt(o){Le++}function Ht(o){if(Le--,Le==0&&(Ke!==null&&(clearInterval(Ke),Ke=null),Ge)){var c=Ge;Ge=null,c()}}function mt(o){o="Aborted("+o+")",k(o),q=!0,re=1,o+=". Build with -sASSERTIONS for more info.";var c=new WebAssembly.RuntimeError(o);throw n(c),c}var sn="data:application/octet-stream;base64,",Er=o=>o.startsWith(sn),ht=o=>o.startsWith("file://"),Mt;Mt="ort-wasm-simd.wasm",Er(Mt)||(Mt=v(Mt));function Ut(o){if(o==Mt&&M)return new Uint8Array(M);if(S)return S(o);throw"both async and sync fetching of the wasm failed"}function un(o){if(!M&&(h||g)){if(typeof fetch=="function"&&!ht(o))return fetch(o,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at '"+o+"'";return c.arrayBuffer()}).catch(()=>Ut(o));if(C)return new Promise((c,f)=>{C(o,b=>c(new Uint8Array(b)),f)})}return Promise.resolve().then(()=>Ut(o))}function ln(o,c,f){return un(o).then(b=>WebAssembly.instantiate(b,c)).then(b=>b).then(f,b=>{k(`failed to asynchronously prepare wasm: ${b}`),mt(b)})}function dn(o,c,f,b){return!o&&typeof WebAssembly.instantiateStreaming=="function"&&!Er(c)&&!ht(c)&&!y&&typeof fetch=="function"?fetch(c,{credentials:"same-origin"}).then(A=>{var O=WebAssembly.instantiateStreaming(A,f);return O.then(b,function(z){return k(`wasm streaming compile failed: ${z}`),k("falling back to ArrayBuffer instantiation"),ln(c,f,b)})}):ln(c,f,b)}function Va(){var o={a:Pc};function c(b,A){return se=b.exports,se=ae.instrumentWasmExports(se),se=pp(se),G=se.ja,ne(),Je(se.ka),Ht("wasm-instantiate"),se}rt("wasm-instantiate");function f(b){c(b.instance)}if(r.instantiateWasm)try{return r.instantiateWasm(o,c)}catch(b){k(`Module.instantiateWasm callback failed with error: ${b}`),n(b)}return dn(M,Mt,o,f).catch(n),{}}var Gt={1377320:(o,c,f,b)=>{if(typeof r>"u"||!r.MountedFiles)return 1;let A=Ze(o>>>0);A.startsWith("./")&&(A=A.substring(2));let O=r.MountedFiles.get(A);if(!O)return 2;let z=c>>>0,W=f>>>0,j=b>>>0;if(z+W>O.byteLength)return 3;try{return ce.set(O.subarray(z,z+W),j>>>0),0}catch{return 4}},1377821:(o,c,f)=>{let b=o,A=c,O=Ze(f),z=new Uint8Array(A);if(z.set(ce.subarray(b>>>0,b+A>>>0)),typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string")(ua(),Vt(sa)).writeFileSync(O,z);else{let W=new File([z],O,{type:"application/octet-stream"}),j=URL.createObjectURL(W);window.open(j,"_blank")}},1378329:()=>{r.jsepCaptureBegin()},1378360:()=>{r.jsepCaptureEnd()},1378389:()=>{r.jsepReplay()},1378414:o=>r.jsepAlloc(o),1378447:o=>r.jsepFree(o),1378479:(o,c,f)=>{r.jsepCopy(o,c,f,!0)},1378518:(o,c,f)=>{r.jsepCopy(o,c,f)},1378551:o=>{r.jsepCreateKernel("Abs",o,void 0)},1378602:o=>{r.jsepCreateKernel("Neg",o,void 0)},1378653:o=>{r.jsepCreateKernel("Floor",o,void 0)},1378706:o=>{r.jsepCreateKernel("Ceil",o,void 0)},1378758:o=>{r.jsepCreateKernel("Reciprocal",o,void 0)},1378816:o=>{r.jsepCreateKernel("Sqrt",o,void 0)},1378868:o=>{r.jsepCreateKernel("Exp",o,void 0)},1378919:o=>{r.jsepCreateKernel("Erf",o,void 0)},1378970:o=>{r.jsepCreateKernel("Sigmoid",o,void 0)},1379025:(o,c,f)=>{r.jsepCreateKernel("HardSigmoid",o,{alpha:c,beta:f})},1379104:o=>{r.jsepCreateKernel("Log",o,void 0)},1379155:o=>{r.jsepCreateKernel("Sin",o,void 0)},1379206:o=>{r.jsepCreateKernel("Cos",o,void 0)},1379257:o=>{r.jsepCreateKernel("Tan",o,void 0)},1379308:o=>{r.jsepCreateKernel("Asin",o,void 0)},1379360:o=>{r.jsepCreateKernel("Acos",o,void 0)},1379412:o=>{r.jsepCreateKernel("Atan",o,void 0)},1379464:o=>{r.jsepCreateKernel("Sinh",o,void 0)},1379516:o=>{r.jsepCreateKernel("Cosh",o,void 0)},1379568:o=>{r.jsepCreateKernel("Asinh",o,void 0)},1379621:o=>{r.jsepCreateKernel("Acosh",o,void 0)},1379674:o=>{r.jsepCreateKernel("Atanh",o,void 0)},1379727:o=>{r.jsepCreateKernel("Tanh",o,void 0)},1379779:o=>{r.jsepCreateKernel("Not",o,void 0)},1379830:(o,c,f)=>{r.jsepCreateKernel("Clip",o,{min:c,max:f})},1379899:o=>{r.jsepCreateKernel("Clip",o,void 0)},1379951:(o,c)=>{r.jsepCreateKernel("Elu",o,{alpha:c})},1380009:o=>{r.jsepCreateKernel("Relu",o,void 0)},1380061:(o,c)=>{r.jsepCreateKernel("LeakyRelu",o,{alpha:c})},1380125:(o,c)=>{r.jsepCreateKernel("ThresholdedRelu",o,{alpha:c})},1380195:(o,c)=>{r.jsepCreateKernel("Cast",o,{to:c})},1380253:o=>{r.jsepCreateKernel("Add",o,void 0)},1380304:o=>{r.jsepCreateKernel("Sub",o,void 0)},1380355:o=>{r.jsepCreateKernel("Mul",o,void 0)},1380406:o=>{r.jsepCreateKernel("Div",o,void 0)},1380457:o=>{r.jsepCreateKernel("Pow",o,void 0)},1380508:o=>{r.jsepCreateKernel("Equal",o,void 0)},1380561:o=>{r.jsepCreateKernel("Greater",o,void 0)},1380616:o=>{r.jsepCreateKernel("GreaterOrEqual",o,void 0)},1380678:o=>{r.jsepCreateKernel("Less",o,void 0)},1380730:o=>{r.jsepCreateKernel("LessOrEqual",o,void 0)},1380789:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceMean",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1380948:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceMax",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1381106:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceMin",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1381264:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceProd",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1381423:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceSum",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1381581:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceL1",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1381738:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceL2",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1381895:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceLogSum",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1382056:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceSumSquare",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1382220:(o,c,f,b,A)=>{r.jsepCreateKernel("ReduceLogSumExp",o,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1382384:o=>{r.jsepCreateKernel("Where",o,void 0)},1382437:(o,c,f)=>{r.jsepCreateKernel("Transpose",o,{perm:c?Array.from(U.subarray(c>>>0,f>>>0)):[]})},1382545:(o,c,f,b,A,O,z,W,j,J,te,le,ye,De,He)=>{r.jsepCreateKernel("ConvTranspose",o,{format:j?"NHWC":"NCHW",autoPad:c,dilations:[f],group:b,kernelShape:[A],pads:[O,z],strides:[W],wIsConst:()=>!!Y[J>>>0],outputPadding:te?Array.from(U.subarray(te>>>0,le>>>0)):[],outputShape:ye?Array.from(U.subarray(ye>>>0,De>>>0)):[],activation:Ze(He)})},1382946:(o,c,f,b,A,O,z,W,j,J,te,le,ye,De)=>{r.jsepCreateKernel("ConvTranspose",o,{format:W?"NHWC":"NCHW",autoPad:c,dilations:Array.from(U.subarray(f>>>0,(f>>>0)+2>>>0)),group:b,kernelShape:Array.from(U.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(U.subarray(O>>>0,(O>>>0)+4>>>0)),strides:Array.from(U.subarray(z>>>0,(z>>>0)+2>>>0)),wIsConst:()=>!!Y[j>>>0],outputPadding:J?Array.from(U.subarray(J>>>0,te>>>0)):[],outputShape:le?Array.from(U.subarray(le>>>0,ye>>>0)):[],activation:Ze(De)})},1383511:(o,c,f,b,A,O,z,W,j,J,te,le,ye,De,He)=>{r.jsepCreateKernel("ConvTranspose",o,{format:j?"NHWC":"NCHW",autoPad:c,dilations:[f],group:b,kernelShape:[A],pads:[O,z],strides:[W],wIsConst:()=>!!Y[J>>>0],outputPadding:te?Array.from(U.subarray(te>>>0,le>>>0)):[],outputShape:ye?Array.from(U.subarray(ye>>>0,De>>>0)):[],activation:Ze(He)})},1383912:(o,c,f,b,A,O,z,W,j,J,te,le,ye,De)=>{r.jsepCreateKernel("ConvTranspose",o,{format:W?"NHWC":"NCHW",autoPad:c,dilations:Array.from(U.subarray(f>>>0,(f>>>0)+2>>>0)),group:b,kernelShape:Array.from(U.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(U.subarray(O>>>0,(O>>>0)+4>>>0)),strides:Array.from(U.subarray(z>>>0,(z>>>0)+2>>>0)),wIsConst:()=>!!Y[j>>>0],outputPadding:J?Array.from(U.subarray(J>>>0,te>>>0)):[],outputShape:le?Array.from(U.subarray(le>>>0,ye>>>0)):[],activation:Ze(De)})},1384477:(o,c)=>{r.jsepCreateKernel("GlobalAveragePool",o,{format:c?"NHWC":"NCHW"})},1384568:(o,c,f,b,A,O,z,W,j,J,te,le,ye,De,He,et)=>{r.jsepCreateKernel("AveragePool",o,{format:et?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:b,storage_order:A,dilations:[O,z],kernel_shape:[W,j],pads:[J,te,le,ye],strides:[De,He]})},1384852:(o,c)=>{r.jsepCreateKernel("GlobalAveragePool",o,{format:c?"NHWC":"NCHW"})},1384943:(o,c,f,b,A,O,z,W,j,J,te,le,ye,De,He,et)=>{r.jsepCreateKernel("AveragePool",o,{format:et?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:b,storage_order:A,dilations:[O,z],kernel_shape:[W,j],pads:[J,te,le,ye],strides:[De,He]})},1385227:(o,c)=>{r.jsepCreateKernel("GlobalMaxPool",o,{format:c?"NHWC":"NCHW"})},1385314:(o,c,f,b,A,O,z,W,j,J,te,le,ye,De,He,et)=>{r.jsepCreateKernel("MaxPool",o,{format:et?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:b,storage_order:A,dilations:[O,z],kernel_shape:[W,j],pads:[J,te,le,ye],strides:[De,He]})},1385594:(o,c)=>{r.jsepCreateKernel("GlobalMaxPool",o,{format:c?"NHWC":"NCHW"})},1385681:(o,c,f,b,A,O,z,W,j,J,te,le,ye,De,He,et)=>{r.jsepCreateKernel("MaxPool",o,{format:et?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:b,storage_order:A,dilations:[O,z],kernel_shape:[W,j],pads:[J,te,le,ye],strides:[De,He]})},1385961:(o,c,f,b,A)=>{r.jsepCreateKernel("Gemm",o,{alpha:c,beta:f,transA:b,transB:A})},1386065:o=>{r.jsepCreateKernel("MatMul",o,void 0)},1386119:(o,c,f,b)=>{r.jsepCreateKernel("ArgMax",o,{keepDims:!!c,selectLastIndex:!!f,axis:b})},1386227:(o,c,f,b)=>{r.jsepCreateKernel("ArgMin",o,{keepDims:!!c,selectLastIndex:!!f,axis:b})},1386335:(o,c)=>{r.jsepCreateKernel("Softmax",o,{axis:c})},1386398:(o,c)=>{r.jsepCreateKernel("Concat",o,{axis:c})},1386458:(o,c,f,b,A)=>{r.jsepCreateKernel("Split",o,{axis:c,numOutputs:f,splitSizes:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1386598:o=>{r.jsepCreateKernel("Expand",o,void 0)},1386652:(o,c)=>{r.jsepCreateKernel("Gather",o,{axis:Number(c)})},1386723:(o,c)=>{r.jsepCreateKernel("GatherElements",o,{axis:Number(c)})},1386802:(o,c,f,b,A,O,z,W,j,J,te)=>{r.jsepCreateKernel("Resize",o,{antialias:c,axes:f?Array.from(U.subarray(f>>>0,b>>>0)):[],coordinateTransformMode:Ze(A),cubicCoeffA:O,excludeOutside:z,extrapolationValue:W,keepAspectRatioPolicy:Ze(j),mode:Ze(J),nearestMode:Ze(te)})},1387148:(o,c,f,b,A,O,z)=>{r.jsepCreateKernel("Slice",o,{starts:c?Array.from(U.subarray(c>>>0,f>>>0)):[],ends:b?Array.from(U.subarray(b>>>0,A>>>0)):[],axes:O?Array.from(U.subarray(O>>>0,z>>>0)):[]})},1387364:o=>{r.jsepCreateKernel("Tile",o,void 0)},1387416:(o,c,f)=>{r.jsepCreateKernel("LayerNormalization",o,{axis:Number(c),epsilon:Number(f)})},1387523:(o,c,f)=>{r.jsepCreateKernel("InstanceNormalization",o,{epsilon:c,format:f?"NHWC":"NCHW"})},1387637:(o,c,f)=>{r.jsepCreateKernel("InstanceNormalization",o,{epsilon:c,format:f?"NHWC":"NCHW"})},1387751:o=>{r.jsepCreateKernel("Range",o,void 0)},1387804:(o,c)=>{r.jsepCreateKernel("Einsum",o,{equation:Ze(c)})},1387885:(o,c,f,b,A)=>{r.jsepCreateKernel("Pad",o,{mode:c,value:f,pads:b?Array.from(U.subarray(b>>>0,A>>>0)):[]})},1388012:(o,c,f,b,A,O)=>{r.jsepCreateKernel("BatchNormalization",o,{epsilon:c,momentum:f,spatial:!!A,trainingMode:!!b,format:O?"NHWC":"NCHW"})},1388181:(o,c,f,b,A,O)=>{r.jsepCreateKernel("BatchNormalization",o,{epsilon:c,momentum:f,spatial:!!A,trainingMode:!!b,format:O?"NHWC":"NCHW"})},1388350:(o,c,f)=>{r.jsepCreateKernel("CumSum",o,{exclusive:Number(c),reverse:Number(f)})},1388447:(o,c,f,b,A,O,z,W,j)=>{r.jsepCreateKernel("Attention",o,{numHeads:c,isUnidirectional:f,maskFilterValue:b,scale:A,doRotary:O,qkvHiddenSizes:z?Array.from(U.subarray(Number(W)>>>0,Number(W)+z>>>0)):[],pastPresentShareBuffer:!!j})},1388719:o=>{r.jsepCreateKernel("BiasAdd",o,void 0)},1388774:o=>{r.jsepCreateKernel("BiasSplitGelu",o,void 0)},1388835:o=>{r.jsepCreateKernel("FastGelu",o,void 0)},1388891:(o,c,f,b,A,O,z,W,j,J,te,le,ye)=>{r.jsepCreateKernel("Conv",o,{format:j?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:b,kernel_shape:[A],pads:O?Array.from(U.subarray(O>>>0,z>>>0)):[],strides:[W],w_is_const:()=>!!Y[J>>>0],activation:Ze(te),activation_params:le?Array.from(V.subarray(le>>>0,ye>>>0)):[]})},1389261:(o,c,f,b,A,O,z,W,j,J,te,le,ye,De,He,et)=>{r.jsepCreateKernel("Conv",o,{format:le?"NHWC":"NCHW",auto_pad:c,dilations:[f,b],group:A,kernel_shape:[O,z],pads:W?Array.from(U.subarray(W>>>0,j>>>0)):[],strides:[J,te],w_is_const:()=>!!Y[ye>>>0],activation:Ze(De),activation_params:He?Array.from(V.subarray(He>>>0,et>>>0)):[]})},1389652:o=>{r.jsepCreateKernel("Gelu",o,void 0)},1389704:(o,c,f,b,A,O)=>{r.jsepCreateKernel("MatMulNBits",o,{k:c,n:f,accuracyLevel:b,bits:A,blockSize:O})},1389831:(o,c,f,b,A,O)=>{r.jsepCreateKernel("MultiHeadAttention",o,{numHeads:c,isUnidirectional:f,maskFilterValue:b,scale:A,doRotary:O})},1389990:(o,c,f,b,A)=>{r.jsepCreateKernel("RotaryEmbedding",o,{interleaved:!!c,numHeads:f,rotaryEmbeddingDim:b,scale:A})},1390129:(o,c)=>{r.jsepCreateKernel("SkipLayerNormalization",o,{epsilon:c})},1390210:o=>{r.jsepReleaseKernel(o)},1390244:(o,c)=>r.jsepRunKernel(o,c,r.jsepSessionState.sessionHandle,r.jsepSessionState.errors)};function kr(o,c,f){return ae.handleAsync(async()=>{await r.jsepCopyAsync(o,c,f)})}function Qt(o){this.name="ExitStatus",this.message=`Program terminated with exit(${o})`,this.status=o}var Xt=o=>{for(;o.length>0;)o.shift()(r)};function cn(o){this.excPtr=o,this.ptr=o-24,this.set_type=function(c){X[this.ptr+4>>>2>>>0]=c},this.get_type=function(){return X[this.ptr+4>>>2>>>0]},this.set_destructor=function(c){X[this.ptr+8>>>2>>>0]=c},this.get_destructor=function(){return X[this.ptr+8>>>2>>>0]},this.set_caught=function(c){c=c?1:0,Y[this.ptr+12>>>0>>>0]=c},this.get_caught=function(){return Y[this.ptr+12>>>0>>>0]!=0},this.set_rethrown=function(c){c=c?1:0,Y[this.ptr+13>>>0>>>0]=c},this.get_rethrown=function(){return Y[this.ptr+13>>>0>>>0]!=0},this.init=function(c,f){this.set_adjusted_ptr(0),this.set_type(c),this.set_destructor(f)},this.set_adjusted_ptr=function(c){X[this.ptr+16>>>2>>>0]=c},this.get_adjusted_ptr=function(){return X[this.ptr+16>>>2>>>0]},this.get_exception_ptr=function(){var c=oo(this.get_type());if(c)return X[this.excPtr>>>2>>>0];var f=this.get_adjusted_ptr();return f!==0?f:this.excPtr}}var Or=0,pn=0,fn=9007199254740992,nt=-9007199254740992,Lt=o=>o<nt||o>fn?NaN:Number(o);function Pr(o,c,f){o>>>=0,c>>>=0,f>>>=0;var b=new cn(o);throw b.init(c,f),Or=o,pn++,Or}var ge=o=>(U[to()>>>2>>>0]=o,o),Jt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Rr=(o,c,f)=>{c>>>=0;for(var b=c+f,A=c;o[A]&&!(A>=b);)++A;if(A-c>16&&o.buffer&&Jt)return Jt.decode(o.subarray(c,A));for(var O="";c<A;){var z=o[c++];if(!(z&128)){O+=String.fromCharCode(z);continue}var W=o[c++]&63;if((z&224)==192){O+=String.fromCharCode((z&31)<<6|W);continue}var j=o[c++]&63;if((z&240)==224?z=(z&15)<<12|W<<6|j:z=(z&7)<<18|W<<12|j<<6|o[c++]&63,z<65536)O+=String.fromCharCode(z);else{var J=z-65536;O+=String.fromCharCode(55296|J>>10,56320|J&1023)}}return O},Ze=(o,c)=>(o>>>=0,o?Rr(ce,o,c):""),Nt={varargs:void 0,get(){var o=U[+Nt.varargs>>>2>>>0];return Nt.varargs+=4,o},getp(){return Nt.get()},getStr(o){var c=Ze(o);return c}};function Ha(o,c,f){return f>>>=0,Nt.varargs=f,0}function mn(o,c){c>>>=0}var er=o=>{for(var c=0,f=0;f<o.length;++f){var b=o.charCodeAt(f);b<=127?c++:b<=2047?c+=2:b>=55296&&b<=57343?(c+=4,++f):c+=3}return c},zr=(o,c,f,b)=>{if(f>>>=0,!(b>0))return 0;for(var A=f,O=f+b-1,z=0;z<o.length;++z){var W=o.charCodeAt(z);if(W>=55296&&W<=57343){var j=o.charCodeAt(++z);W=65536+((W&1023)<<10)|j&1023}if(W<=127){if(f>=O)break;c[f++>>>0]=W}else if(W<=2047){if(f+1>=O)break;c[f++>>>0]=192|W>>6,c[f++>>>0]=128|W&63}else if(W<=65535){if(f+2>=O)break;c[f++>>>0]=224|W>>12,c[f++>>>0]=128|W>>6&63,c[f++>>>0]=128|W&63}else{if(f+3>=O)break;c[f++>>>0]=240|W>>18,c[f++>>>0]=128|W>>12&63,c[f++>>>0]=128|W>>6&63,c[f++>>>0]=128|W&63}}return c[f>>>0]=0,f-A},fr=(o,c,f)=>zr(o,ce,c,f);function Dr(o,c){o>>>=0,c>>>=0}function hn(o,c,f){c>>>=0,f>>>=0}function gn(o,c,f){return f>>>=0,Nt.varargs=f,0}function yn(o,c){o>>>=0,c>>>=0}function bn(o,c,f){c>>>=0}function vn(o,c,f,b){c>>>=0,f>>>=0}function wn(o,c,f,b){c>>>=0,b>>>=0,Nt.varargs=b}function _n(o,c,f,b){c>>>=0,f>>>=0,b>>>=0}function $n(o){o>>>=0}function xn(o,c){o>>>=0,c>>>=0}function Sn(o,c,f){c>>>=0}var Br=o=>{if(o===null)return"null";var c=typeof o;return c==="object"||c==="array"||c==="function"?o.toString():""+o},Cn=()=>{for(var o=new Array(256),c=0;c<256;++c)o[c]=String.fromCharCode(c);Mr=o},Mr,lt=o=>{for(var c="",f=o;ce[f>>>0];)c+=Mr[ce[f++>>>0]];return c},tr={},jt={},Ft={},Ur,It=o=>{throw new Ur(o)},In;function An(o,c,f={}){var b=c.name;if(o||It(`type "${b}" must have a positive integer typeid pointer`),jt.hasOwnProperty(o)){if(f.ignoreDuplicateRegistrations)return;It(`Cannot register type '${b}' twice`)}if(jt[o]=c,delete Ft[o],tr.hasOwnProperty(o)){var A=tr[o];delete tr[o],A.forEach(O=>O())}}function gt(o,c,f={}){if(!("argPackAdvance"in c))throw new TypeError("registerType registeredInstance requires argPackAdvance");return An(o,c,f)}var mr=(o,c,f)=>{switch(c){case 1:return f?b=>Y[b>>>0>>>0]:b=>ce[b>>>0>>>0];case 2:return f?b=>xe[b>>>1>>>0]:b=>Re[b>>>1>>>0];case 4:return f?b=>U[b>>>2>>>0]:b=>X[b>>>2>>>0];case 8:return f?b=>Ce[b>>>3]:b=>we[b>>>3];default:throw new TypeError(`invalid integer width (${c}): ${o}`)}};function Tn(o,c,f,b,A){o>>>=0,c>>>=0,f>>>=0,c=lt(c);var O=c.indexOf("u")!=-1;O&&(A=(1n<<64n)-1n),gt(o,{name:c,fromWireType:z=>z,toWireType:function(z,W){if(typeof W!="bigint"&&typeof W!="number")throw new TypeError(`Cannot convert "${Br(W)}" to ${this.name}`);if(W<b||W>A)throw new TypeError(`Passing a number "${Br(W)}" from JS side to C/C++ side to an argument of type "${c}", which is outside the valid range [${b}, ${A}]!`);return W},argPackAdvance:At,readValueFromPointer:mr(c,f,!O),destructorFunction:null})}var At=8;function Ve(o,c,f,b){o>>>=0,c>>>=0,c=lt(c),gt(o,{name:c,fromWireType:function(A){return!!A},toWireType:function(A,O){return O?f:b},argPackAdvance:At,readValueFromPointer:function(A){return this.fromWireType(ce[A>>>0])},destructorFunction:null})}function Nr(){Object.assign(hr.prototype,{get(o){return this.allocated[o]},has(o){return this.allocated[o]!==void 0},allocate(o){var c=this.freelist.pop()||this.allocated.length;return this.allocated[c]=o,c},free(o){this.allocated[o]=void 0,this.freelist.push(o)}})}function hr(){this.allocated=[void 0],this.freelist=[]}var ot=new hr;function rr(o){o>>>=0,o>=ot.reserved&&--ot.get(o).refcount===0&&ot.free(o)}var En=()=>{for(var o=0,c=ot.reserved;c<ot.allocated.length;++c)ot.allocated[c]!==void 0&&++o;return o},kn=()=>{ot.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),ot.reserved=ot.allocated.length,r.count_emval_handles=En},Me={toValue:o=>(o||It("Cannot use deleted val. handle = "+o),ot.get(o).value),toHandle:o=>{switch(o){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ot.allocate({refcount:1,value:o})}}};function Wr(o){return this.fromWireType(U[o>>>2>>>0])}var On=function(o,c){o>>>=0,c>>>=0,c=lt(c),gt(o,{name:c,fromWireType:f=>{var b=Me.toValue(f);return rr(f),b},toWireType:(f,b)=>Me.toHandle(b),argPackAdvance:At,readValueFromPointer:Wr,destructorFunction:null})},Ga=(o,c)=>{switch(c){case 4:return function(f){return this.fromWireType(V[f>>>2>>>0])};case 8:return function(f){return this.fromWireType(he[f>>>3>>>0])};default:throw new TypeError(`invalid float width (${c}): ${o}`)}},Pn=function(o,c,f){o>>>=0,c>>>=0,f>>>=0,c=lt(c),gt(o,{name:c,fromWireType:b=>b,toWireType:(b,A)=>A,argPackAdvance:At,readValueFromPointer:Ga(c,f),destructorFunction:null})};function Rn(o,c,f,b,A){o>>>=0,c>>>=0,f>>>=0,c=lt(c),A===-1&&(A=4294967295);var O=te=>te;if(b===0){var z=32-8*f;O=te=>te<<z>>>z}var W=c.includes("unsigned"),j=(te,le)=>{},J;W?J=function(te,le){return j(le,this.name),le>>>0}:J=function(te,le){return j(le,this.name),le},gt(o,{name:c,fromWireType:O,toWireType:J,argPackAdvance:At,readValueFromPointer:mr(c,f,b!==0),destructorFunction:null})}function zn(o,c,f){o>>>=0,f>>>=0;var b=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array],A=b[c];function O(z){var W=X[z>>>2>>>0],j=X[z+4>>>2>>>0];return new A(Y.buffer,j,W)}f=lt(f),gt(o,{name:f,fromWireType:O,argPackAdvance:At,readValueFromPointer:O},{ignoreDuplicateRegistrations:!0})}function La(o){return this.fromWireType(X[o>>>2>>>0])}function ja(o,c){o>>>=0,c>>>=0,c=lt(c);var f=c==="std::string";gt(o,{name:c,fromWireType(b){var A=X[b>>>2>>>0],O=b+4,z;if(f)for(var W=O,j=0;j<=A;++j){var J=O+j;if(j==A||ce[J>>>0]==0){var te=J-W,le=Ze(W,te);z===void 0?z=le:(z+=String.fromCharCode(0),z+=le),W=J+1}}else{for(var ye=new Array(A),j=0;j<A;++j)ye[j]=String.fromCharCode(ce[O+j>>>0]);z=ye.join("")}return Et(b),z},toWireType(b,A){A instanceof ArrayBuffer&&(A=new Uint8Array(A));var O,z=typeof A=="string";z||A instanceof Uint8Array||A instanceof Uint8ClampedArray||A instanceof Int8Array||It("Cannot pass non-string to std::string"),f&&z?O=er(A):O=A.length;var W=Yr(4+O+1),j=W+4;if(X[W>>>2>>>0]=O,f&&z)fr(A,j,O+1);else if(z)for(var J=0;J<O;++J){var te=A.charCodeAt(J);te>255&&(Et(j),It("String has UTF-16 code units that do not fit in 8 bits")),ce[j+J>>>0]=te}else for(var J=0;J<O;++J)ce[j+J>>>0]=A[J];return b!==null&&b.push(Et,W),W},argPackAdvance:At,readValueFromPointer:La,destructorFunction(b){Et(b)}})}var Vr=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,gr=(o,c)=>{for(var f=o,b=f>>1,A=b+c/2;!(b>=A)&&Re[b>>>0];)++b;if(f=b<<1,f-o>32&&Vr)return Vr.decode(ce.subarray(o>>>0,f>>>0));for(var O="",z=0;!(z>=c/2);++z){var W=xe[o+z*2>>>1>>>0];if(W==0)break;O+=String.fromCharCode(W)}return O},Fa=(o,c,f)=>{if(f??=2147483647,f<2)return 0;f-=2;for(var b=c,A=f<o.length*2?f/2:o.length,O=0;O<A;++O){var z=o.charCodeAt(O);xe[c>>>1>>>0]=z,c+=2}return xe[c>>>1>>>0]=0,c-b},Tt=o=>o.length*2,yt=(o,c)=>{for(var f=0,b="";!(f>=c/4);){var A=U[o+f*4>>>2>>>0];if(A==0)break;if(++f,A>=65536){var O=A-65536;b+=String.fromCharCode(55296|O>>10,56320|O&1023)}else b+=String.fromCharCode(A)}return b},Dn=(o,c,f)=>{if(c>>>=0,f??=2147483647,f<4)return 0;for(var b=c,A=b+f-4,O=0;O<o.length;++O){var z=o.charCodeAt(O);if(z>=55296&&z<=57343){var W=o.charCodeAt(++O);z=65536+((z&1023)<<10)|W&1023}if(U[c>>>2>>>0]=z,c+=4,c+4>A)break}return U[c>>>2>>>0]=0,c-b},yr=o=>{for(var c=0,f=0;f<o.length;++f){var b=o.charCodeAt(f);b>=55296&&b<=57343&&++f,c+=4}return c},Bn=function(o,c,f){o>>>=0,c>>>=0,f>>>=0,f=lt(f);var b,A,O,z,W;c===2?(b=gr,A=Fa,z=Tt,O=()=>Re,W=1):c===4&&(b=yt,A=Dn,z=yr,O=()=>X,W=2),gt(o,{name:f,fromWireType:j=>{for(var J=X[j>>>2>>>0],te=O(),le,ye=j+4,De=0;De<=J;++De){var He=j+4+De*c;if(De==J||te[He>>>W]==0){var et=He-ye,Zr=b(ye,et);le===void 0?le=Zr:(le+=String.fromCharCode(0),le+=Zr),ye=He+c}}return Et(j),le},toWireType:(j,J)=>{typeof J!="string"&&It(`Cannot pass non-string to C++ string type ${f}`);var te=z(J),le=Yr(4+te+c);return X[le>>>2]=te>>W,A(J,le+4,te+c),j!==null&&j.push(Et,le),le},argPackAdvance:At,readValueFromPointer:Wr,destructorFunction(j){Et(j)}})},Mn=function(o,c){o>>>=0,c>>>=0,c=lt(c),gt(o,{isVoid:!0,name:c,argPackAdvance:0,fromWireType:()=>{},toWireType:(f,b)=>{}})},Ka=1,Hr=()=>Ka,qa=o=>{var c=ro(o),f=lt(c);return Et(c),f},Gr=(o,c)=>{var f=jt[o];return f===void 0&&It(c+" has unknown type "+qa(o)),f},Un=(o,c,f)=>{var b=[],A=o.toWireType(b,f);return b.length&&(X[c>>>2>>>0]=Me.toHandle(b)),A};function Ya(o,c,f){return o>>>=0,c>>>=0,f>>>=0,o=Me.toValue(o),c=Gr(c,"emval::as"),Un(c,f,o)}var br=o=>{try{return o()}catch(c){mt(c)}},Nn=o=>{if(o instanceof Qt||o=="unwind")return re;p(1,o)},Za=0,Wn=()=>Za>0,vr=o=>{re=o,Wn()||(r.onExit?.(o),q=!0),p(o,new Qt(o))},Lr=(o,c)=>{re=o,vr(o)},Vn=Lr,Hn=()=>{if(!Wn())try{Vn(re)}catch(o){Nn(o)}},Gn=o=>{if(!q)try{o(),Hn()}catch(c){Nn(c)}},ae={instrumentWasmImports(o){var c=/^(invoke_.*|__asyncjs__.*)$/;for(let[f,b]of Object.entries(o)){let A=b.sig;if(typeof b=="function"){let O=b.isAsync||c.test(f)}}},instrumentWasmExports(o){var c={};for(let[f,b]of Object.entries(o))typeof b=="function"?c[f]=function(){ae.exportCallStack.push(f);try{return b.apply(null,arguments)}finally{if(!q){var A=ae.exportCallStack.pop();ae.maybeStopUnwind()}}}:c[f]=b;return c},State:{Normal:0,Unwinding:1,Rewinding:2,Disabled:3},state:0,StackSize:65536,currData:null,handleSleepReturnValue:0,exportCallStack:[],callStackNameToId:{},callStackIdToName:{},callStackId:0,asyncPromiseHandlers:null,sleepCallbacks:[],getCallStackId(o){var c=ae.callStackNameToId[o];return c===void 0&&(c=ae.callStackId++,ae.callStackNameToId[o]=c,ae.callStackIdToName[c]=o),c},maybeStopUnwind(){ae.currData&&ae.state===ae.State.Unwinding&&ae.exportCallStack.length===0&&(ae.state=ae.State.Normal,br(uo),typeof Fibers<"u"&&Fibers.trampoline())},whenDone(){return new Promise((o,c)=>{ae.asyncPromiseHandlers={resolve:o,reject:c}})},allocateData(){var o=Yr(12+ae.StackSize);return ae.setDataHeader(o,o+12,ae.StackSize),ae.setDataRewindFunc(o),o},setDataHeader(o,c,f){X[o>>>2>>>0]=c,X[o+4>>>2>>>0]=c+f},setDataRewindFunc(o){var c=ae.exportCallStack[0],f=ae.getCallStackId(c);U[o+8>>>2>>>0]=f},getDataRewindFunc(o){var c=U[o+8>>>2>>>0],f=ae.callStackIdToName[c],b=se[f];return b},doRewind(o){var c=ae.getDataRewindFunc(o);return c()},handleSleep(o){if(!q){if(ae.state===ae.State.Normal){var c=!1,f=!1;o((b=0)=>{if(!q&&(ae.handleSleepReturnValue=b,c=!0,!!f)){ae.state=ae.State.Rewinding,br(()=>lo(ae.currData)),typeof Browser<"u"&&Browser.mainLoop.func&&Browser.mainLoop.resume();var A,O=!1;try{A=ae.doRewind(ae.currData)}catch(j){A=j,O=!0}var z=!1;if(!ae.currData){var W=ae.asyncPromiseHandlers;W&&(ae.asyncPromiseHandlers=null,(O?W.reject:W.resolve)(A),z=!0)}if(O&&!z)throw A}}),f=!0,c||(ae.state=ae.State.Unwinding,ae.currData=ae.allocateData(),typeof Browser<"u"&&Browser.mainLoop.func&&Browser.mainLoop.pause(),br(()=>so(ae.currData)))}else ae.state===ae.State.Rewinding?(ae.state=ae.State.Normal,br(co),Et(ae.currData),ae.currData=null,ae.sleepCallbacks.forEach(b=>Gn(b))):mt(`invalid state: ${ae.state}`);return ae.handleSleepReturnValue}},handleAsync(o){return ae.handleSleep(c=>{o().then(c)})}},wr=function(o){return o>>>=0,ae.handleAsync(()=>(o=Me.toValue(o),o.then(Me.toHandle)))};wr.isAsync=!0;var nr=[];function Ln(o,c,f,b){return o>>>=0,c>>>=0,f>>>=0,b>>>=0,o=nr[o],c=Me.toValue(c),o(null,c,f,b)}var jn={},ar=o=>{var c=jn[o];return c===void 0?lt(o):c};function _r(o,c,f,b,A){return o>>>=0,c>>>=0,f>>>=0,b>>>=0,A>>>=0,o=nr[o],c=Me.toValue(c),f=ar(f),o(c,c[f],b,A)}function jr(o,c){return o>>>=0,c>>>=0,o=Me.toValue(o),c=Me.toValue(c),o==c}var Fr=()=>typeof globalThis=="object"?globalThis:function(){return Function}()("return this")();function Fn(o){return o>>>=0,o===0?Me.toHandle(Fr()):(o=ar(o),Me.toHandle(Fr()[o]))}var Kn=o=>{var c=nr.length;return nr.push(o),c},qn=(o,c)=>{for(var f=new Array(o),b=0;b<o;++b)f[b]=Gr(X[c+b*4>>>2>>>0],"parameter "+b);return f},Kr=(o,c)=>Object.defineProperty(c,"name",{value:o}),Ki=Reflect.construct;function $r(o,c){if(!(o instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof o} which is not a function`);var f=Kr(o.name||"unknownFunctionName",function(){});f.prototype=o.prototype;var b=new f,A=o.apply(b,c);return A instanceof Object?A:b}function Yn(o,c,f){c>>>=0;var b=qn(o,c),A=b.shift();o--;var O=`return function (obj, func, destructorsRef, args) {
`,z=0,W=[];f===0&&W.push("obj");for(var j=["retType"],J=[A],te=0;te<o;++te)W.push("arg"+te),j.push("argType"+te),J.push(b[te]),O+=`  var arg${te} = argType${te}.readValueFromPointer(args${z?"+"+z:""});
`,z+=b[te].argPackAdvance;var le=f===1?"new func":"func.call";O+=`  var rv = ${le}(${W.join(", ")});
`;for(var te=0;te<o;++te)b[te].deleteObject&&(O+=`  argType${te}.deleteObject(arg${te});
`);A.isVoid||(j.push("emval_returnValue"),J.push(Un),O+=`  return emval_returnValue(retType, destructorsRef, rv);
`),O+=`};
`,j.push(O);var ye=$r(Function,j).apply(null,J),De=`methodCaller<(${b.map(He=>He.name).join(", ")}) => ${A.name}>`;return Kn(Kr(De,ye))}function l(o,c){return o>>>=0,c>>>=0,o=Me.toValue(o),c=Me.toValue(c),Me.toHandle(o[c])}function m(o){o>>>=0,o>4&&(ot.get(o).refcount+=1)}function _(){return Me.toHandle([])}function I(o){o>>>=0,o=Me.toValue(o);for(var c=new Array(o.length),f=0;f<o.length;f++)c[f]=o[f];return Me.toHandle(c)}function P(o){return o>>>=0,Me.toHandle(ar(o))}function N(){return Me.toHandle({})}var L=o=>{for(;o.length;){var c=o.pop(),f=o.pop();f(c)}};function de(o){o>>>=0;var c=Me.toValue(o);L(c),rr(o)}function oe(o,c,f){o>>>=0,c>>>=0,f>>>=0,o=Me.toValue(o),c=Me.toValue(c),f=Me.toValue(f),o[c]=f}function ie(o,c){o>>>=0,c>>>=0,o=Gr(o,"_emval_take_value");var f=o.readValueFromPointer(c);return Me.toHandle(f)}function ue(o,c){o=Lt(o),c>>>=0;var f=new Date(o*1e3);U[c>>>2>>>0]=f.getUTCSeconds(),U[c+4>>>2>>>0]=f.getUTCMinutes(),U[c+8>>>2>>>0]=f.getUTCHours(),U[c+12>>>2>>>0]=f.getUTCDate(),U[c+16>>>2>>>0]=f.getUTCMonth(),U[c+20>>>2>>>0]=f.getUTCFullYear()-1900,U[c+24>>>2>>>0]=f.getUTCDay();var b=Date.UTC(f.getUTCFullYear(),0,1,0,0,0,0),A=(f.getTime()-b)/(1e3*60*60*24)|0;U[c+28>>>2>>>0]=A}var Se=o=>o%4===0&&(o%100!==0||o%400===0),Oe=[0,31,60,91,121,152,182,213,244,274,305,335],R=[0,31,59,90,120,151,181,212,243,273,304,334],pe=o=>{var c=Se(o.getFullYear()),f=c?Oe:R,b=f[o.getMonth()]+o.getDate()-1;return b};function ke(o,c){o=Lt(o),c>>>=0;var f=new Date(o*1e3);U[c>>>2>>>0]=f.getSeconds(),U[c+4>>>2>>>0]=f.getMinutes(),U[c+8>>>2>>>0]=f.getHours(),U[c+12>>>2>>>0]=f.getDate(),U[c+16>>>2>>>0]=f.getMonth(),U[c+20>>>2>>>0]=f.getFullYear()-1900,U[c+24>>>2>>>0]=f.getDay();var b=pe(f)|0;U[c+28>>>2>>>0]=b,U[c+36>>>2>>>0]=-(f.getTimezoneOffset()*60);var A=new Date(f.getFullYear(),0,1),O=new Date(f.getFullYear(),6,1).getTimezoneOffset(),z=A.getTimezoneOffset(),W=(O!=z&&f.getTimezoneOffset()==Math.min(z,O))|0;U[c+32>>>2>>>0]=W}var Wt=function(o){o>>>=0;var c=(()=>{var f=new Date(U[o+20>>>2>>>0]+1900,U[o+16>>>2>>>0],U[o+12>>>2>>>0],U[o+8>>>2>>>0],U[o+4>>>2>>>0],U[o>>>2>>>0],0),b=U[o+32>>>2>>>0],A=f.getTimezoneOffset(),O=new Date(f.getFullYear(),0,1),z=new Date(f.getFullYear(),6,1).getTimezoneOffset(),W=O.getTimezoneOffset(),j=Math.min(W,z);if(b<0)U[o+32>>>2>>>0]=+(z!=W&&j==A);else if(b>0!=(j==A)){var J=Math.max(W,z),te=b>0?j:J;f.setTime(f.getTime()+(te-A)*6e4)}U[o+24>>>2>>>0]=f.getDay();var le=pe(f)|0;U[o+28>>>2>>>0]=le,U[o>>>2>>>0]=f.getSeconds(),U[o+4>>>2>>>0]=f.getMinutes(),U[o+8>>>2>>>0]=f.getHours(),U[o+12>>>2>>>0]=f.getDate(),U[o+16>>>2>>>0]=f.getMonth(),U[o+20>>>2>>>0]=f.getYear();var ye=f.getTime();return isNaN(ye)?(ge(61),-1):ye/1e3})();return BigInt(c)};function Zn(o,c,f,b,A,O,z){return o>>>=0,A=Lt(A),O>>>=0,z>>>=0,-52}function sc(o,c,f,b,A,O){o>>>=0,c>>>=0,O=Lt(O)}var qi=o=>{var c=er(o)+1,f=Yr(c);return f&&fr(o,f,c),f};function uc(o,c,f){o>>>=0,c>>>=0,f>>>=0;var b=new Date().getFullYear(),A=new Date(b,0,1),O=new Date(b,6,1),z=A.getTimezoneOffset(),W=O.getTimezoneOffset(),j=Math.max(z,W);X[o>>>2>>>0]=j*60,U[c>>>2>>>0]=+(z!=W);function J(He){var et=He.toTimeString().match(/\(([A-Za-z ]+)\)$/);return et?et[1]:"GMT"}var te=J(A),le=J(O),ye=qi(te),De=qi(le);W<z?(X[f>>>2>>>0]=ye,X[f+4>>>2>>>0]=De):(X[f>>>2>>>0]=De,X[f+4>>>2>>>0]=ye)}var lc=()=>{mt("")},Qa=[],dc=(o,c)=>{Qa.length=0;for(var f;f=ce[o++>>>0];){var b=f!=105;b&=f!=112,c+=b&&c%8?4:0,Qa.push(f==112?X[c>>>2>>>0]:f==106?Ce[c>>>3]:f==105?U[c>>>2>>>0]:he[c>>>3>>>0]),c+=b?8:4}return Qa},Yi=(o,c,f)=>{var b=dc(c,f);return Gt[o].apply(null,b)};function cc(o,c,f){return o>>>=0,c>>>=0,f>>>=0,Yi(o,c,f)}function pc(o,c,f){return o>>>=0,c>>>=0,f>>>=0,Yi(o,c,f)}var fc=()=>Date.now(),Zi=()=>4294901760;function mc(){return Zi()}var Qi;Qi=()=>performance.now();var hc=o=>{var c=G.buffer,f=(o-c.byteLength+65535)/65536;try{return G.grow(f),ne(),1}catch{}};function gc(o){o>>>=0;var c=ce.length,f=Zi();if(o>f)return!1;for(var b=(j,J)=>j+(J-j%J)%J,A=1;A<=4;A*=2){var O=c*(1+.2/A);O=Math.min(O,o+100663296);var z=Math.min(f,b(Math.max(o,O),65536)),W=hc(z);if(W)return!0}return!1}var Xa={},yc=()=>i||"./this.program",qr=()=>{if(!qr.strings){var o=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",c={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:o,_:yc()};for(var f in Xa)Xa[f]===void 0?delete c[f]:c[f]=Xa[f];var b=[];for(var f in c)b.push(`${f}=${c[f]}`);qr.strings=b}return qr.strings},bc=(o,c)=>{for(var f=0;f<o.length;++f)Y[c++>>>0>>>0]=o.charCodeAt(f);Y[c>>>0>>>0]=0},vc=function(o,c){o>>>=0,c>>>=0;var f=0;return qr().forEach((b,A)=>{var O=c+f;X[o+A*4>>>2>>>0]=O,bc(b,O),f+=b.length+1}),0},wc=function(o,c){o>>>=0,c>>>=0;var f=qr();X[o>>>2>>>0]=f.length;var b=0;return f.forEach(A=>b+=A.length+1),X[c>>>2>>>0]=b,0},_c=o=>52;function $c(o,c,f,b){return c>>>=0,f>>>=0,b>>>=0,52}function xc(o,c,f,b){return c=Lt(c),b>>>=0,70}var Sc=[null,[],[]],Cc=(o,c)=>{var f=Sc[o];c===0||c===10?((o===1?E:k)(Rr(f,0)),f.length=0):f.push(c)};function Ic(o,c,f,b){c>>>=0,f>>>=0,b>>>=0;for(var A=0,O=0;O<f;O++){var z=X[c>>>2>>>0],W=X[c+4>>>2>>>0];c+=8;for(var j=0;j<W;j++)Cc(o,ce[z+j>>>0]);A+=W}return X[b>>>2>>>0]=A,0}var Ac=(o,c)=>{for(var f=0,b=0;b<=c;f+=o[b++]);return f},Xi=[31,29,31,30,31,30,31,31,30,31,30,31],Ji=[31,28,31,30,31,30,31,31,30,31,30,31],Tc=(o,c)=>{for(var f=new Date(o.getTime());c>0;){var b=Se(f.getFullYear()),A=f.getMonth(),O=(b?Xi:Ji)[A];if(c>O-f.getDate())c-=O-f.getDate()+1,f.setDate(1),A<11?f.setMonth(A+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else return f.setDate(f.getDate()+c),f}return f};function Ec(o,c,f){var b=f>0?f:er(o)+1,A=new Array(b),O=zr(o,A,0,A.length);return c&&(A.length=O),A}var kc=(o,c)=>{Y.set(o,c>>>0)};function eo(o,c,f,b){o>>>=0,c>>>=0,f>>>=0,b>>>=0;var A=X[b+40>>>2>>>0],O={tm_sec:U[b>>>2>>>0],tm_min:U[b+4>>>2>>>0],tm_hour:U[b+8>>>2>>>0],tm_mday:U[b+12>>>2>>>0],tm_mon:U[b+16>>>2>>>0],tm_year:U[b+20>>>2>>>0],tm_wday:U[b+24>>>2>>>0],tm_yday:U[b+28>>>2>>>0],tm_isdst:U[b+32>>>2>>>0],tm_gmtoff:U[b+36>>>2>>>0],tm_zone:A?Ze(A):""},z=Ze(f),W={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var j in W)z=z.replace(new RegExp(j,"g"),W[j]);var J=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],te=["January","February","March","April","May","June","July","August","September","October","November","December"];function le(Z,$e,bt){for(var dt=typeof Z=="number"?Z.toString():Z||"";dt.length<$e;)dt=bt[0]+dt;return dt}function ye(Z,$e){return le(Z,$e,"0")}function De(Z,$e){function bt(Xn){return Xn<0?-1:Xn>0?1:0}var dt;return(dt=bt(Z.getFullYear()-$e.getFullYear()))===0&&(dt=bt(Z.getMonth()-$e.getMonth()))===0&&(dt=bt(Z.getDate()-$e.getDate())),dt}function He(Z){switch(Z.getDay()){case 0:return new Date(Z.getFullYear()-1,11,29);case 1:return Z;case 2:return new Date(Z.getFullYear(),0,3);case 3:return new Date(Z.getFullYear(),0,2);case 4:return new Date(Z.getFullYear(),0,1);case 5:return new Date(Z.getFullYear()-1,11,31);case 6:return new Date(Z.getFullYear()-1,11,30)}}function et(Z){var $e=Tc(new Date(Z.tm_year+1900,0,1),Z.tm_yday),bt=new Date($e.getFullYear(),0,4),dt=new Date($e.getFullYear()+1,0,4),Xn=He(bt),fp=He(dt);return De(Xn,$e)<=0?De(fp,$e)<=0?$e.getFullYear()+1:$e.getFullYear():$e.getFullYear()-1}var Zr={"%a":Z=>J[Z.tm_wday].substring(0,3),"%A":Z=>J[Z.tm_wday],"%b":Z=>te[Z.tm_mon].substring(0,3),"%B":Z=>te[Z.tm_mon],"%C":Z=>{var $e=Z.tm_year+1900;return ye($e/100|0,2)},"%d":Z=>ye(Z.tm_mday,2),"%e":Z=>le(Z.tm_mday,2," "),"%g":Z=>et(Z).toString().substring(2),"%G":Z=>et(Z),"%H":Z=>ye(Z.tm_hour,2),"%I":Z=>{var $e=Z.tm_hour;return $e==0?$e=12:$e>12&&($e-=12),ye($e,2)},"%j":Z=>ye(Z.tm_mday+Ac(Se(Z.tm_year+1900)?Xi:Ji,Z.tm_mon-1),3),"%m":Z=>ye(Z.tm_mon+1,2),"%M":Z=>ye(Z.tm_min,2),"%n":()=>`
`,"%p":Z=>Z.tm_hour>=0&&Z.tm_hour<12?"AM":"PM","%S":Z=>ye(Z.tm_sec,2),"%t":()=>"	","%u":Z=>Z.tm_wday||7,"%U":Z=>{var $e=Z.tm_yday+7-Z.tm_wday;return ye(Math.floor($e/7),2)},"%V":Z=>{var $e=Math.floor((Z.tm_yday+7-(Z.tm_wday+6)%7)/7);if((Z.tm_wday+371-Z.tm_yday-2)%7<=2&&$e++,$e){if($e==53){var dt=(Z.tm_wday+371-Z.tm_yday)%7;dt!=4&&(dt!=3||!Se(Z.tm_year))&&($e=1)}}else{$e=52;var bt=(Z.tm_wday+7-Z.tm_yday-1)%7;(bt==4||bt==5&&Se(Z.tm_year%400-1))&&$e++}return ye($e,2)},"%w":Z=>Z.tm_wday,"%W":Z=>{var $e=Z.tm_yday+7-(Z.tm_wday+6)%7;return ye(Math.floor($e/7),2)},"%y":Z=>(Z.tm_year+1900).toString().substring(2),"%Y":Z=>Z.tm_year+1900,"%z":Z=>{var $e=Z.tm_gmtoff,bt=$e>=0;return $e=Math.abs($e)/60,$e=$e/60*100+$e%60,(bt?"+":"-")+("0000"+$e).slice(-4)},"%Z":Z=>Z.tm_zone,"%%":()=>"%"};z=z.replace(/%%/g,"\0\0");for(var j in Zr)z.includes(j)&&(z=z.replace(new RegExp(j,"g"),Zr[j](O)));z=z.replace(/\0\0/g,"%");var Ja=Ec(z,!1);return Ja.length>c?0:(kc(Ja,o),Ja.length-1)}function Oc(o,c,f,b,A){return o>>>=0,c>>>=0,f>>>=0,b>>>=0,A>>>=0,eo(o,c,f,b)}Cn(),Ur=r.BindingError=class extends Error{constructor(c){super(c),this.name="BindingError"}},In=r.InternalError=class extends Error{constructor(c){super(c),this.name="InternalError"}},Nr(),kn();var Pc={K:kr,a:Pr,A:Ha,ia:mn,ha:Dr,ga:hn,fa:gn,ea:yn,da:bn,ca:vn,I:wn,ba:_n,aa:$n,$:xn,_:Sn,F:Tn,W:Ve,V:On,E:Pn,t:Rn,o:zn,D:ja,y:Bn,U:Mn,T:Hr,u:Ya,x:wr,n:Ln,k:_r,b:rr,w:jr,m:Fn,i:Yn,r:l,f:m,s:_,l:I,e:P,j:N,h:de,g:oe,c:ie,S:ue,R:ke,Q:Wt,P:Zn,O:sc,N:uc,v:lc,d:cc,C:pc,B:fc,M:mc,q:Qi,L:gc,Z:vc,Y:wc,z:_c,H:$c,X:xc,G:Ic,J:eo,p:Oc},se=Va(),Rc=()=>(Rc=se.ka)(),zc=r._OrtInit=(o,c)=>(zc=r._OrtInit=se.la)(o,c),Dc=r._OrtGetLastError=(o,c)=>(Dc=r._OrtGetLastError=se.ma)(o,c),Bc=r._OrtCreateSessionOptions=(o,c,f,b,A,O,z,W,j,J)=>(Bc=r._OrtCreateSessionOptions=se.na)(o,c,f,b,A,O,z,W,j,J),Mc=r._OrtAppendExecutionProvider=(o,c)=>(Mc=r._OrtAppendExecutionProvider=se.oa)(o,c),Uc=r._OrtAddFreeDimensionOverride=(o,c,f)=>(Uc=r._OrtAddFreeDimensionOverride=se.pa)(o,c,f),Nc=r._OrtAddSessionConfigEntry=(o,c,f)=>(Nc=r._OrtAddSessionConfigEntry=se.qa)(o,c,f),Wc=r._OrtReleaseSessionOptions=o=>(Wc=r._OrtReleaseSessionOptions=se.ra)(o),Vc=r._OrtCreateSession=(o,c,f)=>(Vc=r._OrtCreateSession=se.sa)(o,c,f),Hc=r._OrtReleaseSession=o=>(Hc=r._OrtReleaseSession=se.ta)(o),Gc=r._OrtGetInputOutputCount=(o,c,f)=>(Gc=r._OrtGetInputOutputCount=se.ua)(o,c,f),Lc=r._OrtGetInputName=(o,c)=>(Lc=r._OrtGetInputName=se.va)(o,c),jc=r._OrtGetOutputName=(o,c)=>(jc=r._OrtGetOutputName=se.wa)(o,c),Fc=r._OrtFree=o=>(Fc=r._OrtFree=se.xa)(o),Kc=r._OrtCreateTensor=(o,c,f,b,A,O)=>(Kc=r._OrtCreateTensor=se.ya)(o,c,f,b,A,O),qc=r._OrtGetTensorData=(o,c,f,b,A)=>(qc=r._OrtGetTensorData=se.za)(o,c,f,b,A),Yc=r._OrtReleaseTensor=o=>(Yc=r._OrtReleaseTensor=se.Aa)(o),Zc=r._OrtCreateRunOptions=(o,c,f,b)=>(Zc=r._OrtCreateRunOptions=se.Ba)(o,c,f,b),Qc=r._OrtAddRunConfigEntry=(o,c,f)=>(Qc=r._OrtAddRunConfigEntry=se.Ca)(o,c,f),Xc=r._OrtReleaseRunOptions=o=>(Xc=r._OrtReleaseRunOptions=se.Da)(o),Jc=r._OrtCreateBinding=o=>(Jc=r._OrtCreateBinding=se.Ea)(o),ep=r._OrtBindInput=(o,c,f)=>(ep=r._OrtBindInput=se.Fa)(o,c,f),tp=r._OrtBindOutput=(o,c,f,b)=>(tp=r._OrtBindOutput=se.Ga)(o,c,f,b),rp=r._OrtClearBoundOutputs=o=>(rp=r._OrtClearBoundOutputs=se.Ha)(o),np=r._OrtReleaseBinding=o=>(np=r._OrtReleaseBinding=se.Ia)(o),ap=r._OrtRunWithBinding=(o,c,f,b,A)=>(ap=r._OrtRunWithBinding=se.Ja)(o,c,f,b,A),ip=r._OrtRun=(o,c,f,b,A,O,z,W)=>(ip=r._OrtRun=se.Ka)(o,c,f,b,A,O,z,W),op=r._OrtEndProfiling=o=>(op=r._OrtEndProfiling=se.La)(o),sp=r._JsepOutput=(o,c,f)=>(sp=r._JsepOutput=se.Ma)(o,c,f),up=r._JsepGetNodeName=o=>(up=r._JsepGetNodeName=se.Na)(o),to=()=>(to=se.Oa)(),Yr=r._malloc=o=>(Yr=r._malloc=se.Pa)(o),Et=r._free=o=>(Et=r._free=se.Qa)(o),ro=o=>(ro=se.Ra)(o),lp=(o,c)=>(lp=se.setThrew)(o,c),no=()=>(no=se.Ta)(),ao=o=>(ao=se.Ua)(o),io=o=>(io=se.Va)(o),dp=o=>(dp=se.__cxa_decrement_exception_refcount)(o),cp=o=>(cp=se.__cxa_increment_exception_refcount)(o),oo=o=>(oo=se.Wa)(o),so=o=>(so=se.Xa)(o),uo=()=>(uo=se.Ya)(),lo=o=>(lo=se.Za)(o),co=()=>(co=se._a)(),Sh=r.___start_em_js=1390356,Ch=r.___stop_em_js=1390517;function pp(o){o=Object.assign({},o);var c=b=>()=>b()>>>0,f=b=>A=>b(A)>>>0;return o.Oa=c(o.Oa),o.Pa=f(o.Pa),o.Ra=f(o.Ra),o.Ta=c(o.Ta),o.Va=f(o.Va),o}r.stackAlloc=io,r.stackSave=no,r.stackRestore=ao,r.UTF8ToString=Ze,r.stringToUTF8=fr,r.lengthBytesUTF8=er;var Qn;Ge=function o(){Qn||po(),Qn||(Ge=o)};function po(){if(Le>0||(ee(),Le>0))return;function o(){Qn||(Qn=!0,r.calledRun=!0,!q&&(_e(),a(r),Xe()))}o()}return po(),t.ready}})();typeof Fo=="object"&&typeof si=="object"?si.exports=jo:typeof define=="function"&&define.amd&&define([],()=>jo)});var qo=xr(()=>{});var Yo=xr(()=>{});var Zo={};ir(Zo,{cpus:()=>xp});var xp,Qo=F(()=>{xp=void 0});var es=xr((Jo,ui)=>{"use strict";var Xo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return X.buffer!=ne.buffer&&_e(),ne}function a(){return X.buffer!=ne.buffer&&_e(),be}function n(){return X.buffer!=ne.buffer&&_e(),fe}function s(){return X.buffer!=ne.buffer&&_e(),qe}function u(){return X.buffer!=ne.buffer&&_e(),H}function d(){return X.buffer!=ne.buffer&&_e(),ee}var i=t,p,h;i.ready=new Promise((l,m)=>{p=l,h=m}),i.jsepInit=(l,m,_,I,P,N,L,de)=>{i.Qb=l,i.wb=m,i.yb=_,i.jb=I,i.xb=P,i.Ea=N,i.zb=L,i.Ab=de,m=(oe,ie,ue)=>(...Se)=>{let Oe=yt,R=ie?.();Se=oe(...Se);let pe=ie?.();return R!==pe&&(oe=pe,ue(R),ie=ue=null),yt!=Oe?Gr():Se},_=oe=>async(...ie)=>{try{if(i.bb)throw Error("Session already started");let ue=i.bb={Fb:ie[0],errors:[]},Se=await oe(...ie);if(i.bb!==ue)throw Error("Session mismatch");l.flush();let Oe=ue.errors;if(0<Oe.length){let R=await Promise.all(Oe);if(R=R.filter(pe=>pe),0<R.length)throw Error(R.join(`
`))}return Se}finally{i.bb=null}},i._OrtRun=_(m(i._OrtRun,()=>i._OrtRun,oe=>i._OrtRun=oe)),i._OrtRunWithBinding=_(m(i._OrtRunWithBinding,()=>i._OrtRunWithBinding,oe=>i._OrtRunWithBinding=oe)),i._OrtBindInput=m(i._OrtBindInput,()=>i._OrtBindInput,oe=>i._OrtBindInput=oe),i.jsepRegisterBuffer=(oe,ie,ue,Se)=>l.registerBuffer(oe,ie,ue,Se),i.jsepUnregisterBuffers=oe=>{l.unregisterBuffers(oe)},i.jsepGetBuffer=oe=>l.getBuffer(oe),i.jsepCreateDownloader=(oe,ie,ue)=>l.createDownloader(oe,ie,ue)};var g=Object.assign({},i),y="./this.program",w=(l,m)=>{throw m},v=typeof window=="object",$=typeof importScripts=="function",C=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",S=i.ENVIRONMENT_IS_PTHREAD||!1,x="";function T(l){return i.locateFile?i.locateFile(l,x):x+l}var E,k,M;if(C){var G=(ua(),Vt(sa)),q=(oi(),Vt(ii));x=$?q.dirname(x)+"/":__dirname+"/",E=(m,_)=>(m=m.startsWith("file://")?new URL(m):q.normalize(m),G.readFileSync(m,_?void 0:"utf8")),M=m=>(m=E(m,!0),m.buffer||(m=new Uint8Array(m)),m),k=(m,_,I,P=!0)=>{m=m.startsWith("file://")?new URL(m):q.normalize(m),G.readFile(m,P?void 0:"utf8",(N,L)=>{N?I(N):_(P?L.buffer:L)})},!i.thisProgram&&1<process.argv.length&&(y=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),w=(m,_)=>{throw process.exitCode=m,_},i.inspect=()=>"[Emscripten Module object]";let l;try{l=qo()}catch(m){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),m}global.Worker=l.Worker}else(v||$)&&($?x=self.location.href:typeof document<"u"&&document.currentScript&&(x=document.currentScript.src),typeof e<"u"&&e&&(x=e),x.indexOf("blob:")!==0?x=x.substr(0,x.replace(/[?#].*/,"").lastIndexOf("/")+1):x="",C||(E=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.send(null),m.responseText},$&&(M=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),k=(l,m,_)=>{var I=new XMLHttpRequest;I.open("GET",l,!0),I.responseType="arraybuffer",I.onload=()=>{I.status==200||I.status==0&&I.response?m(I.response):_()},I.onerror=_,I.send(null)}));C&&typeof performance>"u"&&(global.performance=Yo().performance);var re=console.log.bind(console),Y=console.error.bind(console);C&&(re=(...l)=>G.writeSync(1,l.join(" ")+`
`),Y=(...l)=>G.writeSync(2,l.join(" ")+`
`));var ce=i.print||re,xe=i.printErr||Y;Object.assign(i,g),g=null,i.thisProgram&&(y=i.thisProgram),i.quit&&(w=i.quit);var Re;i.wasmBinary&&(Re=i.wasmBinary);var U=i.noExitRuntime||!0;typeof WebAssembly!="object"&&ht("no native wasm support detected");var X,V,Ce,we=!1,he,ne,be,fe,qe,H,ee;function _e(){var l=X.buffer;i.HEAP8=ne=new Int8Array(l),i.HEAP16=new Int16Array(l),i.HEAP32=fe=new Int32Array(l),i.HEAPU8=be=new Uint8Array(l),i.HEAPU16=new Uint16Array(l),i.HEAPU32=qe=new Uint32Array(l),i.HEAPF32=H=new Float32Array(l),i.HEAPF64=ee=new Float64Array(l)}var Xe=i.INITIAL_MEMORY||16777216;if(5242880<=Xe||ht("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Xe+"! (STACK_SIZE=5242880)"),S)X=i.wasmMemory;else if(i.wasmMemory)X=i.wasmMemory;else if(X=new WebAssembly.Memory({initial:Xe/65536,maximum:65536,shared:!0}),!(X.buffer instanceof SharedArrayBuffer))throw xe("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),C&&xe("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");_e(),Xe=X.buffer.byteLength;var Ye=[],Je=[],Le=[],Ke=0;function Ge(){return U||0<Ke}var rt=0,Ht=null,mt=null;function sn(){rt++,i.monitorRunDependencies&&i.monitorRunDependencies(rt)}function Er(){if(rt--,i.monitorRunDependencies&&i.monitorRunDependencies(rt),rt==0&&(Ht!==null&&(clearInterval(Ht),Ht=null),mt)){var l=mt;mt=null,l()}}function ht(l){throw i.onAbort&&i.onAbort(l),l="Aborted("+l+")",xe(l),we=!0,he=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),h(l),l}function Mt(l){return l.startsWith("data:application/octet-stream;base64,")}var Ut;Ut="ort-wasm-simd-threaded.wasm",Mt(Ut)||(Ut=T(Ut));function un(l){if(l==Ut&&Re)return new Uint8Array(Re);if(M)return M(l);throw"both async and sync fetching of the wasm failed"}function ln(l){if(!Re&&(v||$)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at '"+l+"'";return m.arrayBuffer()}).catch(()=>un(l));if(k)return new Promise((m,_)=>{k(l,I=>m(new Uint8Array(I)),_)})}return Promise.resolve().then(()=>un(l))}function dn(l,m,_){return ln(l).then(I=>WebAssembly.instantiate(I,m)).then(I=>I).then(_,I=>{xe("failed to asynchronously prepare wasm: "+I),ht(I)})}function Va(l,m){var _=Ut;return Re||typeof WebAssembly.instantiateStreaming!="function"||Mt(_)||_.startsWith("file://")||C||typeof fetch!="function"?dn(_,l,m):fetch(_,{credentials:"same-origin"}).then(I=>WebAssembly.instantiateStreaming(I,l).then(m,function(P){return xe("wasm streaming compile failed: "+P),xe("falling back to ArrayBuffer instantiation"),dn(_,l,m)}))}var Gt,kr={912252:l=>{i.Ea("Abs",l,void 0)},912303:l=>{i.Ea("Neg",l,void 0)},912354:l=>{i.Ea("Floor",l,void 0)},912407:l=>{i.Ea("Ceil",l,void 0)},912459:l=>{i.Ea("Reciprocal",l,void 0)},912517:l=>{i.Ea("Sqrt",l,void 0)},912569:l=>{i.Ea("Exp",l,void 0)},912620:l=>{i.Ea("Erf",l,void 0)},912671:l=>{i.Ea("Sigmoid",l,void 0)},912726:l=>{i.Ea("Log",l,void 0)},912777:l=>{i.Ea("Sin",l,void 0)},912828:l=>{i.Ea("Cos",l,void 0)},912879:l=>{i.Ea("Tan",l,void 0)},912930:l=>{i.Ea("Asin",l,void 0)},912982:l=>{i.Ea("Acos",l,void 0)},913034:l=>{i.Ea("Atan",l,void 0)},913086:l=>{i.Ea("Sinh",l,void 0)},913138:l=>{i.Ea("Cosh",l,void 0)},913190:l=>{i.Ea("Asinh",l,void 0)},913243:l=>{i.Ea("Acosh",l,void 0)},913296:l=>{i.Ea("Atanh",l,void 0)},913349:l=>{i.Ea("Tanh",l,void 0)},913401:l=>{i.Ea("Not",l,void 0)},913452:(l,m,_)=>{i.Ea("ClipV10",l,{min:m,max:_})},913524:l=>{i.Ea("Clip",l,void 0)},913576:(l,m)=>{i.Ea("Elu",l,{alpha:m})},913634:l=>{i.Ea("Relu",l,void 0)},913686:(l,m)=>{i.Ea("LeakyRelu",l,{alpha:m})},913750:(l,m)=>{i.Ea("ThresholdedRelu",l,{alpha:m})},913820:(l,m)=>{i.Ea("Cast",l,{to:m})},913878:l=>{i.Ea("Add",l,void 0)},913929:l=>{i.Ea("Sub",l,void 0)},913980:l=>{i.Ea("Mul",l,void 0)},914031:l=>{i.Ea("Div",l,void 0)},914082:l=>{i.Ea("Pow",l,void 0)},914133:l=>{i.Ea("Equal",l,void 0)},914186:l=>{i.Ea("Greater",l,void 0)},914241:l=>{i.Ea("GreaterOrEqual",l,void 0)},914303:l=>{i.Ea("Less",l,void 0)},914355:l=>{i.Ea("LessOrEqual",l,void 0)},914414:(l,m,_,I,P)=>{i.Ea("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},914578:(l,m,_,I,P)=>{i.Ea("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},914741:(l,m,_,I,P)=>{i.Ea("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},914904:(l,m,_,I,P)=>{i.Ea("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915068:(l,m,_,I,P)=>{i.Ea("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915231:(l,m,_,I,P)=>{i.Ea("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915393:(l,m,_,I,P)=>{i.Ea("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915555:(l,m,_,I,P)=>{i.Ea("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915721:(l,m,_,I,P)=>{i.Ea("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915890:(l,m,_,I,P)=>{i.Ea("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!_,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},916059:l=>{i.Ea("Where",l,void 0)},916112:(l,m,_)=>{i.Ea("Transpose",l,{perm:m?Array.from(n().subarray(_>>>0,_+m>>>0)):[]})},916225:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe,R,pe)=>{i.Ea("ConvTranspose",l,{format:oe?"NHWC":"NCHW",autoPad:m,dilations:[_],group:I,kernel_shape:[P],pads:[N,L],strides:[de],wIsConst:()=>!!r()[ie>>>0],outputPadding:ue?Array.from(n().subarray(Se>>>0,Se+ue>>>0)):[],outputShape:Oe?Array.from(n().subarray(R>>>0,R+Oe>>>0)):[],activation:nt(pe)})},916639:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe,R)=>{i.Ea("ConvTranspose",l,{format:de?"NHWC":"NCHW",autoPad:m,dilations:Array.from(n().subarray(_>>>0,_+2>>>0)),group:I,kernelShape:Array.from(n().subarray(P>>>0,P+2>>>0)),pads:Array.from(n().subarray(N>>>0,N+4>>>0)),strides:Array.from(n().subarray(L>>>0,L+2>>>0)),wIsConst:()=>!!r()[oe>>>0],outputPadding:0<ie?Array.from(n().subarray(ue>>>0,ue+ie>>>0)):[],outputShape:0<Se?Array.from(n().subarray(Oe>>>0,Oe+Se>>>0)):[],activation:nt(R)})},917196:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe,R,pe)=>{i.Ea("ConvTranspose",l,{format:oe?"NHWC":"NCHW",autoPad:m,dilations:[_],group:I,kernel_shape:[P],pads:[N,L],strides:[de],wIsConst:()=>!!r()[ie>>>0],outputPadding:ue?Array.from(n().subarray(Se>>>0,Se+ue>>>0)):[],outputShape:Oe?Array.from(n().subarray(R>>>0,R+Oe>>>0)):[],activation:nt(pe)})},917610:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe,R)=>{i.Ea("ConvTranspose",l,{format:de?"NHWC":"NCHW",autoPad:m,dilations:Array.from(n().subarray(_>>>0,_+2>>>0)),group:I,kernelShape:Array.from(n().subarray(P>>>0,P+2>>>0)),pads:Array.from(n().subarray(N>>>0,N+4>>>0)),strides:Array.from(n().subarray(L>>>0,L+2>>>0)),wIsConst:()=>!!r()[oe>>>0],outputPadding:0<ie?Array.from(n().subarray(ue>>>0,ue+ie>>>0)):[],outputShape:0<Se?Array.from(n().subarray(Oe>>>0,Oe+Se>>>0)):[],activation:nt(R)})},918167:(l,m)=>{i.Ea("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},918258:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe,R,pe,ke)=>{i.Ea("AveragePool",l,{format:ke?"NHWC":"NCHW",auto_pad:m,ceil_mode:_,count_include_pad:I,storage_order:P,dilations:[N,L],kernel_shape:[de,oe],pads:[ie,ue,Se,Oe],strides:[R,pe]})},918542:(l,m)=>{i.Ea("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},918633:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe,R,pe,ke)=>{i.Ea("AveragePool",l,{format:ke?"NHWC":"NCHW",auto_pad:m,ceil_mode:_,count_include_pad:I,storage_order:P,dilations:[N,L],kernel_shape:[de,oe],pads:[ie,ue,Se,Oe],strides:[R,pe]})},918917:(l,m)=>{i.Ea("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919004:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe,R,pe,ke)=>{i.Ea("MaxPool",l,{format:ke?"NHWC":"NCHW",auto_pad:m,ceil_mode:_,count_include_pad:I,storage_order:P,dilations:[N,L],kernel_shape:[de,oe],pads:[ie,ue,Se,Oe],strides:[R,pe]})},919284:(l,m)=>{i.Ea("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919371:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe,R,pe,ke)=>{i.Ea("MaxPool",l,{format:ke?"NHWC":"NCHW",auto_pad:m,ceil_mode:_,count_include_pad:I,storage_order:P,dilations:[N,L],kernel_shape:[de,oe],pads:[ie,ue,Se,Oe],strides:[R,pe]})},919651:(l,m,_,I,P)=>{i.Ea("Gemm",l,{alpha:m,beta:_,transA:I,transB:P})},919755:l=>{i.Ea("MatMul",l,void 0)},919809:(l,m,_,I)=>{i.Ea("ArgMax",l,{keepDims:!!m,selectLastIndex:!!_,axis:I})},919917:(l,m,_,I)=>{i.Ea("ArgMin",l,{keepDims:!!m,selectLastIndex:!!_,axis:I})},920025:(l,m)=>{i.Ea("Softmax",l,{axis:m})},920088:(l,m)=>{i.Ea("Concat",l,{axis:m})},920148:(l,m,_,I,P)=>{i.Ea("Split",l,{axis:m,numOutputs:_,splitSizes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},920293:l=>{i.Ea("Expand",l,void 0)},920347:(l,m)=>{i.Ea("Gather",l,{axis:Number(m)})},920418:(l,m)=>{i.Ea("GatherElements",l,{axis:Number(m)})},920497:(l,m,_,I,P,N,L,de,oe,ie,ue)=>{i.Ea("Resize",l,{antialias:m,axes:_?Array.from(n().subarray(I>>>0,I+_>>>0)):[],coordinateTransformMode:nt(P),cubicCoeffA:N,excludeOutside:L,extrapolationValue:de,keepAspectRatioPolicy:nt(oe),mode:nt(ie),nearestMode:nt(ue)})},920848:(l,m,_,I,P,N,L)=>{i.Ea("Slice",l,{starts:m?Array.from(n().subarray(_>>>0,_+m>>>0)):[],ends:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[],axes:N?Array.from(n().subarray(L>>>0,L+N>>>0)):[]})},921079:l=>{i.Ea("Tile",l,void 0)},921131:(l,m,_)=>{i.Ea("LayerNormalization",l,{axis:Number(m),epsilon:Number(_)})},921238:(l,m,_)=>{i.Ea("InstanceNormalization",l,{epsilon:m,format:_?"NHWC":"NCHW"})},921352:(l,m,_)=>{i.Ea("InstanceNormalization",l,{epsilon:m,format:_?"NHWC":"NCHW"})},921466:l=>{i.Ea("Range",l,void 0)},921519:(l,m)=>{i.Ea("Einsum",l,{equation:nt(m)})},921600:(l,m,_,I,P)=>{i.Ea("Pad",l,{mode:m,value:_,pads:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},921732:l=>{i.Ea("Gelu",l,void 0)},921784:l=>{i.Ea("BiasAdd",l,void 0)},921839:l=>{i.Ea("BiasSplitGelu",l,void 0)},921900:(l,m)=>{i.Ea("SkipLayerNormalization",l,{epsilon:m})},921981:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe)=>{i.Ea("Conv",l,{format:oe?"NHWC":"NCHW",auto_pad:m,dilations:[_],group:I,kernel_shape:[P],pads:N?Array.from(n().subarray(L>>>0,L+N>>>0)):[],strides:[de],w_is_const:()=>!!r()[ie>>>0],activation:nt(ue),activation_params:Se?Array.from(u().subarray(Oe>>>0,Oe+Se>>>0)):[]})},922362:(l,m,_,I,P,N,L,de,oe,ie,ue,Se,Oe,R,pe,ke)=>{i.Ea("Conv",l,{format:Se?"NHWC":"NCHW",auto_pad:m,dilations:[_,I],group:P,kernel_shape:[N,L],pads:de?Array.from(n().subarray(oe>>>0,oe+de>>>0)):[],strides:[ie,ue],w_is_const:()=>!!r()[Oe>>>0],activation:nt(R),activation_params:pe?Array.from(u().subarray(ke>>>0,ke+pe>>>0)):[]})},922764:l=>{i.zb(l)},922798:(l,m)=>i.Ab(l,m,i.bb.Fb,i.bb.errors),922910:l=>i.wb(l),922943:l=>i.yb(l),922975:(l,m,_)=>{i.jb(l,m,_,!0)},923014:(l,m,_)=>{i.jb(l,m,_)}};function Qt(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}function Xt(l){l.terminate(),l.onmessage=()=>{}}function cn(l){(l=ge.Qa[l])||ht(),ge.Eb(l)}function Or(l){var m=ge.tb();if(!m)return 6;ge.Ya.push(m),ge.Qa[l.Xa]=m,m.Xa=l.Xa;var _={cmd:"run",start_routine:l.Gb,arg:l.rb,pthread_ptr:l.Xa};return C&&m.unref(),m.postMessage(_,l.Mb),0}var pn=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,fn=(l,m,_)=>{m>>>=0;var I=m+_;for(_=m;l[_]&&!(_>=I);)++_;if(16<_-m&&l.buffer&&pn)return pn.decode(l.buffer instanceof SharedArrayBuffer?l.slice(m,_):l.subarray(m,_));for(I="";m<_;){var P=l[m++];if(P&128){var N=l[m++]&63;if((P&224)==192)I+=String.fromCharCode((P&31)<<6|N);else{var L=l[m++]&63;P=(P&240)==224?(P&15)<<12|N<<6|L:(P&7)<<18|N<<12|L<<6|l[m++]&63,65536>P?I+=String.fromCharCode(P):(P-=65536,I+=String.fromCharCode(55296|P>>10,56320|P&1023))}}else I+=String.fromCharCode(P)}return I},nt=(l,m)=>(l>>>=0)?fn(a(),l,m):"";function Lt(l){if(S)return Ve(1,1,l);he=l,Ge()||(ge.Hb(),i.onExit&&i.onExit(l),we=!0),w(l,new Qt(l))}var Pr=l=>{if(he=l,S)throw Rr(l),"unwind";Lt(l)},ge={ab:[],Ya:[],mb:[],Qa:{},gb:function(){S?ge.vb():ge.ub()},ub:function(){Ye.unshift(()=>{sn(),ge.Bb(()=>Er())})},vb:function(){ge.receiveObjectTransfer=ge.Db,ge.threadInitTLS=ge.lb,ge.setExitStatus=ge.kb,U=!1},kb:function(l){he=l},Sb:["$terminateWorker"],Hb:function(){for(var l of ge.Ya)Xt(l);for(l of ge.ab)Xt(l);ge.ab=[],ge.Ya=[],ge.Qa=[]},Eb:function(l){var m=l.Xa;delete ge.Qa[m],ge.ab.push(l),ge.Ya.splice(ge.Ya.indexOf(l),1),l.Xa=0,ae(m)},Db:function(){},lb:function(){ge.mb.forEach(l=>l())},Cb:l=>new Promise(m=>{l.onmessage=N=>{N=N.data;var L=N.cmd;if(N.targetThread&&N.targetThread!=vr()){var de=ge.Qa[N.Rb];de?de.postMessage(N,N.transferList):xe('Internal error! Worker sent a message "'+L+'" to target pthread '+N.targetThread+", but that thread no longer exists!")}else L==="checkMailbox"?jt():L==="spawnThread"?Or(N):L==="cleanupThread"?cn(N.thread):L==="killThread"?(N=N.thread,L=ge.Qa[N],delete ge.Qa[N],Xt(L),ae(N),ge.Ya.splice(ge.Ya.indexOf(L),1),L.Xa=0):L==="cancelThread"?ge.Qa[N.thread].postMessage({cmd:"cancel"}):L==="loaded"?(l.loaded=!0,m(l)):L==="alert"?alert("Thread "+N.threadId+": "+N.text):N.target==="setimmediate"?l.postMessage(N):L==="callHandler"?i[N.handler](...N.args):L&&xe("worker sent an unknown command "+L)},l.onerror=N=>{throw xe("worker sent an error! "+N.filename+":"+N.lineno+": "+N.message),N},C&&(l.on("message",function(N){l.onmessage({data:N})}),l.on("error",function(N){l.onerror(N)}));var _=[],I=["onExit","onAbort","print","printErr"],P;for(P of I)i.hasOwnProperty(P)&&_.push(P);l.postMessage({cmd:"load",handlers:_,urlOrBlob:i.mainScriptUrlOrBlob||e,wasmMemory:X,wasmModule:Ce})}),Bb:function(l){l()},qb:function(){var l=T("ort-wasm-simd-threaded.worker.js");l=new Worker(l),ge.ab.push(l)},tb:function(){return ge.ab.length==0&&(ge.qb(),ge.Cb(ge.ab[0])),ge.ab.pop()}};i.PThread=ge;var Jt=l=>{for(;0<l.length;)l.shift()(i)};i.establishStackSpace=function(){var l=vr(),m=n()[l+52>>2>>>0];l=n()[l+56>>2>>>0],jn(m,m-l),_r(m)};function Rr(l){if(S)return Ve(2,0,l);Pr(l)}i.invokeEntryPoint=function(l,m){l=Fr.apply(null,[l,m]),Ge()?ge.kb(l):wr(l)};function Ze(l){this.fb=l-24,this.pb=function(m){s()[this.fb+4>>2>>>0]=m},this.ob=function(m){s()[this.fb+8>>2>>>0]=m},this.gb=function(m,_){this.nb(),this.pb(m),this.ob(_)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Nt=0,Ha=0;function mn(l,m,_,I){return S?Ve(3,1,l,m,_,I):er(l,m,_,I)}function er(l,m,_,I){if(l>>>=0,m>>>=0,_>>>=0,I>>>=0,typeof SharedArrayBuffer>"u")return xe("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var P=[];return S&&P.length===0?mn(l,m,_,I):(l={Gb:_,Xa:l,rb:I,Mb:P},S?(l.Ob="spawnThread",postMessage(l,P),0):Or(l))}function zr(l,m,_){return S?Ve(4,1,l,m,_):0}function fr(l,m){if(S)return Ve(5,1,l,m)}var Dr=l=>{for(var m=0,_=0;_<l.length;++_){var I=l.charCodeAt(_);127>=I?m++:2047>=I?m+=2:55296<=I&&57343>=I?(m+=4,++_):m+=3}return m},hn=(l,m,_,I)=>{if(_>>>=0,!(0<I))return 0;var P=_;I=_+I-1;for(var N=0;N<l.length;++N){var L=l.charCodeAt(N);if(55296<=L&&57343>=L){var de=l.charCodeAt(++N);L=65536+((L&1023)<<10)|de&1023}if(127>=L){if(_>=I)break;m[_++>>>0]=L}else{if(2047>=L){if(_+1>=I)break;m[_++>>>0]=192|L>>6}else{if(65535>=L){if(_+2>=I)break;m[_++>>>0]=224|L>>12}else{if(_+3>=I)break;m[_++>>>0]=240|L>>18,m[_++>>>0]=128|L>>12&63}m[_++>>>0]=128|L>>6&63}m[_++>>>0]=128|L&63}}return m[_>>>0]=0,_-P},gn=(l,m,_)=>hn(l,a(),m,_);function yn(l,m){if(S)return Ve(6,1,l,m)}function bn(l,m,_){if(S)return Ve(7,1,l,m,_)}function vn(l,m,_){return S?Ve(8,1,l,m,_):0}function wn(l,m){if(S)return Ve(9,1,l,m)}function _n(l,m,_){if(S)return Ve(10,1,l,m,_)}function $n(l,m,_,I){if(S)return Ve(11,1,l,m,_,I)}function xn(l,m,_,I){if(S)return Ve(12,1,l,m,_,I)}function Sn(l,m,_,I){if(S)return Ve(13,1,l,m,_,I)}function Br(l){if(S)return Ve(14,1,l)}function Cn(l,m){if(S)return Ve(15,1,l,m)}function Mr(l,m,_){if(S)return Ve(16,1,l,m,_)}var lt=l=>{if(!we)try{if(l(),!Ge())try{S?wr(he):Pr(he)}catch(m){m instanceof Qt||m=="unwind"||w(1,m)}}catch(m){m instanceof Qt||m=="unwind"||w(1,m)}};function tr(l){l>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),l>>2,l).value.then(jt),l+=128,Atomics.store(n(),l>>2,1))}i.__emscripten_thread_mailbox_await=tr;function jt(){var l=vr();l&&(tr(l),lt(()=>nr()))}i.checkMailbox=jt;var Ft=l=>l%4===0&&(l%100!==0||l%400===0),Ur=[0,31,60,91,121,152,182,213,244,274,305,335],It=[0,31,59,90,120,151,181,212,243,273,304,334];function In(l,m,_,I,P,N,L,de){return S?Ve(17,1,l,m,_,I,P,N,L,de):-52}function An(l,m,_,I,P,N,L){if(S)return Ve(18,1,l,m,_,I,P,N,L)}var gt=l=>{var m=Dr(l)+1,_=Lr(m);return _&&gn(l,_,m),_},mr=[],Tn=(l,m)=>{mr.length=0;var _;for(m>>=2;_=a()[l++>>>0];)m+=_!=105&m,mr.push(_==105?n()[m>>>0]:d()[m++>>>1]),++m;return mr},At=l=>{var m=ar();return l=l(),_r(m),l};function Ve(l,m){var _=arguments.length-2,I=arguments;return At(()=>{for(var P=jr(8*_),N=P>>3,L=0;L<_;L++){var de=I[2+L];d()[N+L>>>0]=de}return Gn(l,_,P,m)})}var Nr=[],hr={},ot=()=>{if(!rr){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:y||"./this.program"},m;for(m in hr)hr[m]===void 0?delete l[m]:l[m]=hr[m];var _=[];for(m in l)_.push(`${m}=${l[m]}`);rr=_}return rr},rr;function En(l,m){if(S)return Ve(19,1,l,m);l>>>=0,m>>>=0;var _=0;return ot().forEach(function(I,P){var N=m+_;for(P=s()[l+4*P>>2>>>0]=N,N=0;N<I.length;++N)r()[P++>>0>>>0]=I.charCodeAt(N);r()[P>>0>>>0]=0,_+=I.length+1}),0}function kn(l,m){if(S)return Ve(20,1,l,m);l>>>=0,m>>>=0;var _=ot();s()[l>>2>>>0]=_.length;var I=0;return _.forEach(function(P){I+=P.length+1}),s()[m>>2>>>0]=I,0}function Me(l){return S?Ve(21,1,l):52}function Wr(l,m,_,I){return S?Ve(22,1,l,m,_,I):52}function On(l,m,_,I,P){return S?Ve(23,1,l,m,_,I,P):70}var Ga=[null,[],[]];function Pn(l,m,_,I){if(S)return Ve(24,1,l,m,_,I);m>>>=0,_>>>=0,I>>>=0;for(var P=0,N=0;N<_;N++){var L=s()[m>>2>>>0],de=s()[m+4>>2>>>0];m+=8;for(var oe=0;oe<de;oe++){var ie=a()[L+oe>>>0],ue=Ga[l];ie===0||ie===10?((l===1?ce:xe)(fn(ue,0)),ue.length=0):ue.push(ie)}P+=de}return s()[I>>2>>>0]=P,0}var Rn=[31,29,31,30,31,30,31,31,30,31,30,31],zn=[31,28,31,30,31,30,31,31,30,31,30,31];function La(l){var m=Array(Dr(l)+1);return hn(l,m,0,m.length),m}var ja=(l,m)=>{r().set(l,m>>>0)};function Vr(l,m,_,I){function P(R,pe,ke){for(R=typeof R=="number"?R.toString():R||"";R.length<pe;)R=ke[0]+R;return R}function N(R,pe){return P(R,pe,"0")}function L(R,pe){function ke(Zn){return 0>Zn?-1:0<Zn?1:0}var Wt;return(Wt=ke(R.getFullYear()-pe.getFullYear()))===0&&(Wt=ke(R.getMonth()-pe.getMonth()))===0&&(Wt=ke(R.getDate()-pe.getDate())),Wt}function de(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function oe(R){var pe=R.Za;for(R=new Date(new Date(R.$a+1900,0,1).getTime());0<pe;){var ke=R.getMonth(),Wt=(Ft(R.getFullYear())?Rn:zn)[ke];if(pe>Wt-R.getDate())pe-=Wt-R.getDate()+1,R.setDate(1),11>ke?R.setMonth(ke+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+pe);break}}return ke=new Date(R.getFullYear()+1,0,4),pe=de(new Date(R.getFullYear(),0,4)),ke=de(ke),0>=L(pe,R)?0>=L(ke,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}l>>>=0,m>>>=0,_>>>=0,I>>>=0;var ie=n()[I+40>>2>>>0];I={Kb:n()[I>>2>>>0],Jb:n()[I+4>>2>>>0],cb:n()[I+8>>2>>>0],ib:n()[I+12>>2>>>0],eb:n()[I+16>>2>>>0],$a:n()[I+20>>2>>>0],Wa:n()[I+24>>2>>>0],Za:n()[I+28>>2>>>0],Tb:n()[I+32>>2>>>0],Ib:n()[I+36>>2>>>0],Lb:ie?nt(ie):""},_=nt(_),ie={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ue in ie)_=_.replace(new RegExp(ue,"g"),ie[ue]);var Se="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Oe="January February March April May June July August September October November December".split(" ");ie={"%a":R=>Se[R.Wa].substring(0,3),"%A":R=>Se[R.Wa],"%b":R=>Oe[R.eb].substring(0,3),"%B":R=>Oe[R.eb],"%C":R=>N((R.$a+1900)/100|0,2),"%d":R=>N(R.ib,2),"%e":R=>P(R.ib,2," "),"%g":R=>oe(R).toString().substring(2),"%G":R=>oe(R),"%H":R=>N(R.cb,2),"%I":R=>(R=R.cb,R==0?R=12:12<R&&(R-=12),N(R,2)),"%j":R=>{for(var pe=0,ke=0;ke<=R.eb-1;pe+=(Ft(R.$a+1900)?Rn:zn)[ke++]);return N(R.ib+pe,3)},"%m":R=>N(R.eb+1,2),"%M":R=>N(R.Jb,2),"%n":()=>`
`,"%p":R=>0<=R.cb&&12>R.cb?"AM":"PM","%S":R=>N(R.Kb,2),"%t":()=>"	","%u":R=>R.Wa||7,"%U":R=>N(Math.floor((R.Za+7-R.Wa)/7),2),"%V":R=>{var pe=Math.floor((R.Za+7-(R.Wa+6)%7)/7);if(2>=(R.Wa+371-R.Za-2)%7&&pe++,pe)pe==53&&(ke=(R.Wa+371-R.Za)%7,ke==4||ke==3&&Ft(R.$a)||(pe=1));else{pe=52;var ke=(R.Wa+7-R.Za-1)%7;(ke==4||ke==5&&Ft(R.$a%400-1))&&pe++}return N(pe,2)},"%w":R=>R.Wa,"%W":R=>N(Math.floor((R.Za+7-(R.Wa+6)%7)/7),2),"%y":R=>(R.$a+1900).toString().substring(2),"%Y":R=>R.$a+1900,"%z":R=>{R=R.Ib;var pe=0<=R;return R=Math.abs(R)/60,(pe?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Lb,"%%":()=>"%"},_=_.replace(/%%/g,"\0\0");for(ue in ie)_.includes(ue)&&(_=_.replace(new RegExp(ue,"g"),ie[ue](I)));return _=_.replace(/\0\0/g,"%"),ue=La(_),ue.length>m?0:(ja(ue,l),ue.length-1)}function gr(l){try{l()}catch(m){ht(m)}}function Fa(l){var m={},_;for(_ in l)(function(I){var P=l[I];m[I]=typeof P=="function"?function(){yr.push(I);try{return P.apply(null,arguments)}finally{we||(yr.pop()===I||ht(),yt&&Tt===1&&yr.length===0&&(Tt=0,Ke+=1,gr(Kn),typeof Fibers<"u"&&Fibers.Ub()))}}:P})(_);return m}var Tt=0,yt=null,Dn=0,yr=[],Bn={},Mn={},Ka=0,Hr=null,qa=[];function Gr(){return new Promise((l,m)=>{Hr={resolve:l,reject:m}})}function Un(){var l=Lr(65548),m=l+12;s()[l>>2>>>0]=m,s()[l+4>>2>>>0]=m+65536,m=yr[0];var _=Bn[m];return _===void 0&&(_=Ka++,Bn[m]=_,Mn[_]=m),m=_,n()[l+8>>2>>>0]=m,l}function Ya(){var l=n()[yt+8>>2>>>0];return l=V[Mn[l]],--Ke,l()}function br(l){if(!we){if(Tt===0){var m=!1,_=!1;l((I=0)=>{if(!we&&(Dn=I,m=!0,_)){Tt=2,gr(()=>qn(yt)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),I=!1;try{var P=Ya()}catch(de){P=de,I=!0}var N=!1;if(!yt){var L=Hr;L&&(Hr=null,(I?L.reject:L.resolve)(P),N=!0)}if(I&&!N)throw P}}),_=!0,m||(Tt=1,yt=Un(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),gr(()=>Fn(yt)))}else Tt===2?(Tt=0,gr(Kr),Vn(yt),yt=null,qa.forEach(I=>lt(I))):ht(`invalid state: ${Tt}`);return Dn}}function Nn(l){return br(m=>{l().then(m)})}ge.gb();var Za=[null,Lt,Rr,mn,zr,fr,yn,bn,vn,wn,_n,$n,xn,Sn,Br,Cn,Mr,In,An,En,kn,Me,Wr,On,Pn],Wn={r:function(l,m,_){return Nn(async()=>{await i.xb(l,m,_)})},b:function(l,m,_){throw l>>>=0,new Ze(l).gb(m>>>0,_>>>0),Nt=l,Ha++,Nt},O:function(l){Hn(l>>>0,!$,1,!v,131072,!1),ge.lb()},l:function(l){l>>>=0,S?postMessage({cmd:"cleanupThread",thread:l}):cn(l)},I:er,i:zr,U:fr,E:yn,G:bn,V:vn,S:wn,K:_n,R:$n,p:xn,F:Sn,C:Br,T:Cn,D:Mr,q:()=>!0,A:function(l,m){l>>>=0,l==m>>>0?setTimeout(()=>jt()):S?postMessage({targetThread:l,cmd:"checkMailbox"}):(l=ge.Qa[l])&&l.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:tr,X:function(l){C&&ge.Qa[l>>>0].ref()},u:function(l,m,_){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,_>>>=0,l=new Date(1e3*l),n()[_>>2>>>0]=l.getUTCSeconds(),n()[_+4>>2>>>0]=l.getUTCMinutes(),n()[_+8>>2>>>0]=l.getUTCHours(),n()[_+12>>2>>>0]=l.getUTCDate(),n()[_+16>>2>>>0]=l.getUTCMonth(),n()[_+20>>2>>>0]=l.getUTCFullYear()-1900,n()[_+24>>2>>>0]=l.getUTCDay(),l=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[_+28>>2>>>0]=l},v:function(l,m,_){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,_>>>=0,l=new Date(1e3*l),n()[_>>2>>>0]=l.getSeconds(),n()[_+4>>2>>>0]=l.getMinutes(),n()[_+8>>2>>>0]=l.getHours(),n()[_+12>>2>>>0]=l.getDate(),n()[_+16>>2>>>0]=l.getMonth(),n()[_+20>>2>>>0]=l.getFullYear()-1900,n()[_+24>>2>>>0]=l.getDay(),m=(Ft(l.getFullYear())?Ur:It)[l.getMonth()]+l.getDate()-1|0,n()[_+28>>2>>>0]=m,n()[_+36>>2>>>0]=-(60*l.getTimezoneOffset()),m=new Date(l.getFullYear(),6,1).getTimezoneOffset();var I=new Date(l.getFullYear(),0,1).getTimezoneOffset();l=(m!=I&&l.getTimezoneOffset()==Math.min(I,m))|0,n()[_+32>>2>>>0]=l},w:function(l){l>>>=0;var m=new Date(n()[l+20>>2>>>0]+1900,n()[l+16>>2>>>0],n()[l+12>>2>>>0],n()[l+8>>2>>>0],n()[l+4>>2>>>0],n()[l>>2>>>0],0),_=n()[l+32>>2>>>0],I=m.getTimezoneOffset(),P=new Date(m.getFullYear(),6,1).getTimezoneOffset(),N=new Date(m.getFullYear(),0,1).getTimezoneOffset(),L=Math.min(N,P);return 0>_?n()[l+32>>2>>>0]=+(P!=N&&L==I):0<_!=(L==I)&&(P=Math.max(N,P),m.setTime(m.getTime()+6e4*((0<_?L:P)-I))),n()[l+24>>2>>>0]=m.getDay(),_=(Ft(m.getFullYear())?Ur:It)[m.getMonth()]+m.getDate()-1|0,n()[l+28>>2>>>0]=_,n()[l>>2>>>0]=m.getSeconds(),n()[l+4>>2>>>0]=m.getMinutes(),n()[l+8>>2>>>0]=m.getHours(),n()[l+12>>2>>>0]=m.getDate(),n()[l+16>>2>>>0]=m.getMonth(),n()[l+20>>2>>>0]=m.getYear(),l=m.getTime()/1e3,Ln((Gt=l,1<=+Math.abs(Gt)?0<Gt?+Math.floor(Gt/4294967296)>>>0:~~+Math.ceil((Gt-+(~~Gt>>>0))/4294967296)>>>0:0)),l>>>0},s:In,t:An,z:function(l,m,_){function I(ie){return(ie=ie.toTimeString().match(/\(([A-Za-z ]+)\)$/))?ie[1]:"GMT"}l>>>=0,m>>>=0,_>>>=0;var P=new Date().getFullYear(),N=new Date(P,0,1),L=new Date(P,6,1);P=N.getTimezoneOffset();var de=L.getTimezoneOffset(),oe=Math.max(P,de);s()[l>>2>>>0]=60*oe,n()[m>>2>>>0]=+(P!=de),l=I(N),m=I(L),l=gt(l),m=gt(m),de<P?(s()[_>>2>>>0]=l,s()[_+4>>2>>>0]=m):(s()[_>>2>>>0]=m,s()[_+4>>2>>>0]=l)},d:()=>{ht("")},c:function(l,m,_){return l>>>=0,m=Tn(m>>>0,_>>>0),kr[l].apply(null,m)},k:function(l,m,_){return l>>>=0,m=Tn(m>>>0,_>>>0),kr[l].apply(null,m)},m:function(){},j:function(){return Date.now()},W:()=>{throw Ke+=1,"unwind"},B:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return C?(Qo(),Vt(Zo)).cpus().length:navigator.hardwareConcurrency},L:function(l,m,_,I){for(ge.Pb=m>>>0,Nr.length=_,m=I>>>0>>3,I=0;I<_;I++)Nr[I]=d()[m+I>>>0];return(0>l?kr[-l-1]:Za[l]).apply(null,Nr)},y:function(l){l>>>=0;var m=a().length;if(l<=m||4294901760<l)return!1;for(var _=1;4>=_;_*=2){var I=m*(1+.2/_);I=Math.min(I,l+100663296);var P=Math;I=Math.max(l,I);e:{P=P.min.call(P,4294901760,I+(65536-I%65536)%65536)-X.buffer.byteLength+65535>>>16;try{X.grow(P),_e();var N=1;break e}catch{}N=void 0}if(N)return!0}return!1},P:En,Q:kn,H:Pr,h:Me,o:Wr,x:On,n:Pn,a:X||i.wasmMemory,J:Vr,e:function(l,m,_,I){return Vr(l>>>0,m>>>0,_>>>0,I>>>0)}};(function(){function l(_,I){return _=_.exports,_=Fa(_),V=_=Ki(_),ge.mb.push(V.Da),Je.unshift(V.Y),Ce=I,Er(),_}var m={a:Wn};if(sn(),i.instantiateWasm)try{return i.instantiateWasm(m,l)}catch(_){xe("Module.instantiateWasm callback failed with error: "+_),h(_)}return Va(m,function(_){l(_.instance,_.module)}).catch(h),{}})(),i._OrtInit=(l,m)=>(i._OrtInit=V.Z)(l,m),i._OrtGetLastError=(l,m)=>(i._OrtGetLastError=V._)(l,m),i._OrtCreateSessionOptions=(l,m,_,I,P,N,L,de,oe,ie)=>(i._OrtCreateSessionOptions=V.$)(l,m,_,I,P,N,L,de,oe,ie),i._OrtAppendExecutionProvider=(l,m)=>(i._OrtAppendExecutionProvider=V.aa)(l,m),i._OrtAddFreeDimensionOverride=(l,m,_)=>(i._OrtAddFreeDimensionOverride=V.ba)(l,m,_),i._OrtAddSessionConfigEntry=(l,m,_)=>(i._OrtAddSessionConfigEntry=V.ca)(l,m,_),i._OrtReleaseSessionOptions=l=>(i._OrtReleaseSessionOptions=V.da)(l),i._OrtCreateSession=(l,m,_)=>(i._OrtCreateSession=V.ea)(l,m,_),i._OrtReleaseSession=l=>(i._OrtReleaseSession=V.fa)(l),i._OrtGetInputOutputCount=(l,m,_)=>(i._OrtGetInputOutputCount=V.ga)(l,m,_),i._OrtGetInputName=(l,m)=>(i._OrtGetInputName=V.ha)(l,m),i._OrtGetOutputName=(l,m)=>(i._OrtGetOutputName=V.ia)(l,m),i._OrtFree=l=>(i._OrtFree=V.ja)(l),i._OrtCreateTensor=(l,m,_,I,P,N)=>(i._OrtCreateTensor=V.ka)(l,m,_,I,P,N),i._OrtGetTensorData=(l,m,_,I,P)=>(i._OrtGetTensorData=V.la)(l,m,_,I,P),i._OrtReleaseTensor=l=>(i._OrtReleaseTensor=V.ma)(l),i._OrtCreateRunOptions=(l,m,_,I)=>(i._OrtCreateRunOptions=V.na)(l,m,_,I),i._OrtAddRunConfigEntry=(l,m,_)=>(i._OrtAddRunConfigEntry=V.oa)(l,m,_),i._OrtReleaseRunOptions=l=>(i._OrtReleaseRunOptions=V.pa)(l),i._OrtCreateBinding=l=>(i._OrtCreateBinding=V.qa)(l),i._OrtBindInput=(l,m,_)=>(i._OrtBindInput=V.ra)(l,m,_),i._OrtBindOutput=(l,m,_,I)=>(i._OrtBindOutput=V.sa)(l,m,_,I),i._OrtClearBoundOutputs=l=>(i._OrtClearBoundOutputs=V.ta)(l),i._OrtReleaseBinding=l=>(i._OrtReleaseBinding=V.ua)(l),i._OrtRunWithBinding=(l,m,_,I,P)=>(i._OrtRunWithBinding=V.va)(l,m,_,I,P),i._OrtRun=(l,m,_,I,P,N,L,de)=>(i._OrtRun=V.wa)(l,m,_,I,P,N,L,de),i._OrtEndProfiling=l=>(i._OrtEndProfiling=V.xa)(l),i._JsepOutput=(l,m,_)=>(i._JsepOutput=V.ya)(l,m,_),i._JsepGetNodeName=l=>(i._JsepGetNodeName=V.za)(l);var vr=i._pthread_self=()=>(vr=i._pthread_self=V.Aa)(),Lr=i._malloc=l=>(Lr=i._malloc=V.Ba)(l),Vn=i._free=l=>(Vn=i._free=V.Ca)(l);i.__emscripten_tls_init=()=>(i.__emscripten_tls_init=V.Da)();var Hn=i.__emscripten_thread_init=(l,m,_,I,P,N)=>(Hn=i.__emscripten_thread_init=V.Fa)(l,m,_,I,P,N);i.__emscripten_thread_crashed=()=>(i.__emscripten_thread_crashed=V.Ga)();var Gn=(l,m,_,I)=>(Gn=V.Ha)(l,m,_,I),ae=l=>(ae=V.Ia)(l),wr=i.__emscripten_thread_exit=l=>(wr=i.__emscripten_thread_exit=V.Ja)(l),nr=i.__emscripten_check_mailbox=()=>(nr=i.__emscripten_check_mailbox=V.Ka)(),Ln=l=>(Ln=V.La)(l),jn=(l,m)=>(jn=V.Ma)(l,m),ar=()=>(ar=V.Na)(),_r=l=>(_r=V.Oa)(l),jr=l=>(jr=V.Pa)(l),Fr=i.dynCall_ii=(l,m)=>(Fr=i.dynCall_ii=V.Ra)(l,m),Fn=l=>(Fn=V.Sa)(l),Kn=()=>(Kn=V.Ta)(),qn=l=>(qn=V.Ua)(l),Kr=()=>(Kr=V.Va)();i.___start_em_js=923047,i.___stop_em_js=923208;function Ki(l){l=Object.assign({},l);var m=I=>()=>I()>>>0,_=I=>P=>I(P)>>>0;return l.__errno_location=m(l.__errno_location),l.pthread_self=m(l.pthread_self),l.malloc=_(l.malloc),l.stackSave=m(l.stackSave),l.stackAlloc=_(l.stackAlloc),l}i.keepRuntimeAlive=Ge,i.wasmMemory=X,i.stackAlloc=jr,i.stackSave=ar,i.stackRestore=_r,i.UTF8ToString=nt,i.stringToUTF8=gn,i.lengthBytesUTF8=Dr,i.ExitStatus=Qt,i.PThread=ge;var $r;mt=function l(){$r||Yn(),$r||(mt=l)};function Yn(){function l(){if(!$r&&($r=!0,i.calledRun=!0,!we)&&(S||Jt(Je),p(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!S)){if(i.postRun)for(typeof i.postRun=="function"&&(i.postRun=[i.postRun]);i.postRun.length;){var m=i.postRun.shift();Le.unshift(m)}Jt(Le)}}if(!(0<rt))if(S)p(i),S||Jt(Je),startWorker(i);else{if(i.preRun)for(typeof i.preRun=="function"&&(i.preRun=[i.preRun]);i.preRun.length;)Ye.unshift(i.preRun.shift());Jt(Ye),0<rt||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),l()},1)):l())}}if(i.preInit)for(typeof i.preInit=="function"&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return Yn(),t.ready}})();typeof Jo=="object"&&typeof ui=="object"?ui.exports=Xo:typeof define=="function"&&define.amd&&define([],()=>Xo)});var ts=xr((Sg,Sp)=>{Sp.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\n'});var ns,Cp,li,di,la,rs,Ip,Ap,Tp,as,je,Sr=F(()=>{"use strict";ns=Ko();Cp=es(),di=!1,la=!1,rs=!1,Ip=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Ap=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Tp=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",as=async e=>{if(di)return Promise.resolve();if(la)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(rs)throw new Error("previous call to 'initializeWebAssembly()' failed.");la=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=Ip(r),s=a&&Ap(),u=e.wasmPaths,d=typeof u=="string"?u:void 0,i=Tp(s,n),p=typeof u=="object"?u[i]:void 0,h=!1,g=[];if(t>0&&g.push(new Promise(y=>{setTimeout(()=>{h=!0,y()},t)})),g.push(new Promise((y,w)=>{let v=n?Cp:ns,$={locateFile:(C,S)=>{if(n&&C.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([ts()],{type:"text/javascript"}));if(C.endsWith(".wasm")){if(p)return p;let x=d??S;return i==="ort-wasm-simd.wasm"?x+"ort-wasm-simd.jsep.wasm":i==="ort-wasm-simd-threaded.wasm"?x+"ort-wasm-simd-threaded.jsep.wasm":x+i}return S+C}};if(n)if($.numThreads=r,typeof Blob>"u")$.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let C=`var ortWasmThreaded=${v.toString()};`;$.mainScriptUrlOrBlob=new Blob([C],{type:"text/javascript"})}v($).then(C=>{la=!1,di=!0,li=C,y()},C=>{la=!1,rs=!0,w(C)})})),await Promise.race(g),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},je=()=>{if(di&&li)return li;throw new Error("WebAssembly is not initialized yet.")}});var Fe,Xr,Ue,da=F(()=>{"use strict";Sr();Fe=(e,t)=>{let r=je(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},Xr=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")Xr(s,u+".",r,a);else if(typeof s=="string"||typeof s=="number")a(u,s.toString());else if(typeof s=="boolean")a(u,s?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof s}`)})},Ue=e=>{let t=je(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],s=t.HEAPU32[a/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}}});var is,os=F(()=>{"use strict";Sr();da();is=e=>{let t=je(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=Fe(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Ue("Can't create run options."),e?.extra!==void 0&&Xr(e.extra,"",new WeakSet,(u,d)=>{let i=Fe(u,a),p=Fe(d,a);t._OrtAddRunConfigEntry(r,i,p)!==0&&Ue(`Can't set a run config entry: ${u} - ${d}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),s}}});var Ep,kp,Op,Pp,ss,us=F(()=>{"use strict";Sr();da();Ep=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},kp=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Op=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Pp=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let d=Fe("deviceType",r),i=Fe(u.deviceType,r);je()._OrtAddSessionConfigEntry(e,d,i)!==0&&Ue(`Can't set a session config entry: 'deviceType' - ${u.deviceType}.`)}if(u?.numThreads){let d=u.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let i=Fe("numThreads",r),p=Fe(d.toString(),r);je()._OrtAddSessionConfigEntry(e,i,p)!==0&&Ue(`Can't set a session config entry: 'numThreads' - ${u.numThreads}.`)}if(u?.powerPreference){let d=Fe("powerPreference",r),i=Fe(u.powerPreference,r);je()._OrtAddSessionConfigEntry(e,d,i)!==0&&Ue(`Can't set a session config entry: 'powerPreference' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${u.preferredLayout}`);let d=Fe("preferredLayout",r),i=Fe(u.preferredLayout,r);je()._OrtAddSessionConfigEntry(e,d,i)!==0&&Ue(`Can't set a session config entry: 'preferredLayout' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=Fe(n,r);je()._OrtAppendExecutionProvider(e,s)!==0&&Ue(`Can't append execution provider: ${n}.`)}},ss=e=>{let t=je(),r=0,a=[],n=e||{};Op(n);try{let s=Ep(n.graphOptimizationLevel??"all"),u=kp(n.executionMode??"sequential"),d=typeof n.logId=="string"?Fe(n.logId,a):0,i=n.logSeverityLevel??2;if(!Number.isInteger(i)||i<0||i>4)throw new Error(`log serverity level is not valid: ${i}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?Fe(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,d,i,p,h),r===0&&Ue("Can't create session options."),n.executionProviders&&Pp(r,n.executionProviders,a),n.enableGraphCapture!==void 0){if(typeof n.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${n.enableGraphCapture}`);let g=Fe("enableGraphCapture",a),y=Fe(n.enableGraphCapture.toString(),a);t._OrtAddSessionConfigEntry(r,g,y)!==0&&Ue(`Can't set a session config entry: 'enableGraphCapture' - ${n.enableGraphCapture}.`)}if(n.freeDimensionOverrides)for(let[g,y]of Object.entries(n.freeDimensionOverrides)){if(typeof g!="string")throw new Error(`free dimension override name must be a string: ${g}`);if(typeof y!="number"||!Number.isInteger(y)||y<0)throw new Error(`free dimension override value must be a non-negative integer: ${y}`);let w=Fe(g,a);t._OrtAddFreeDimensionOverride(r,w,y)!==0&&Ue(`Can't set a free dimension override: ${g} - ${y}.`)}return n.extra!==void 0&&Xr(n.extra,"",new WeakSet,(g,y)=>{let w=Fe(g,a),v=Fe(y,a);t._OrtAddSessionConfigEntry(r,w,v)!==0&&Ue(`Can't set a session config entry: ${g} - ${y}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),s}}});var ci,qt,ur,ca,Jr,pa,pi,ve=F(()=>{"use strict";ci=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},qt=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},ur=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],ca=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Jr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},pa=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool",pi=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var en,fi=F(()=>{"use strict";en=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),a=[];for await(let n of r)a.push(n);return new Uint8Array(Buffer.concat(a))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),a=r?parseInt(r,10):0;if(a<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n=t.body.getReader(),s;try{s=new ArrayBuffer(a)}catch(d){if(d instanceof RangeError){let i=Math.ceil(a/65536);s=new WebAssembly.Memory({initial:i,maximum:i}).buffer}else throw d}let u=0;for(;;){let{done:d,value:i}=await n.read();if(d)break;let p=i.byteLength;new Uint8Array(s,u,p).set(i),u+=p}return new Uint8Array(s,0,a)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}});var Rp,zp,ls,ds,cs,Dp,Ne,Yt=F(()=>{"use strict";ve();Rp=["V","I","W","E","F"],zp=(e,t)=>{console.log(`[${Rp[e]},${new Date().toISOString()}]${t}`)},cs=(e,t)=>{ls=e,ds=t},Dp=(e,t)=>{let r=Jr(e),a=Jr(ls);r>=a&&zp(r,typeof t=="function"?t():t)},Ne=(...e)=>{ds&&Dp(...e)}});var ps,fs=F(()=>{"use strict";ve();ps=(e,t)=>new(ca(t))(e)});var fa=F(()=>{"use strict"});var mi,hi,ma,Bp,ms,yi,gi,gs,ys=F(()=>{"use strict";Yt();fa();mi={64:50,128:30,256:10,512:10,2048:10,4096:10,8192:30,16384:10,32768:40,65536:40,131072:40,262144:30,524288:30,1048576:30,2097152:30},hi=[],ma=e=>{for(let t=0;t<hi.length;t++){let r=hi[t];if(e<r)return r}return Math.ceil(e/16)*16},Bp=1,ms=()=>Bp++,yi=async(e,t,r,a)=>{let n=ma(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let d=s.getMappedRange();if(a){let i=a();return i.set(new Uint8Array(d,0,r)),i}else return new Uint8Array(d.slice(0,r))}finally{s.destroy()}},gi=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map,this.backend.env.webgpu.cachealloc={},this.backend.env.webgpu.cachefree={},this.backend.env.webgpu.cachemiss={},this.backend.env.webgpu.cacheinflight={};for(let r in mi)hi.push(Number(r)),this.freeBuffers.set(Number(r),[]),this.freeUniformBuffers.set(Number(r),[])}incstats(t,r){if(this.backend.env.webgpu[t][r]?this.backend.env.webgpu[t][r]+=1:this.backend.env.webgpu[t][r]=1,t!=="cachemiss"){this.backend.env.webgpu.cacheinflight[r]||(this.backend.env.webgpu.cacheinflight[r]=0),this.backend.env.webgpu.cachefree[r]||(this.backend.env.webgpu.cachefree[r]=0);let a=this.backend.env.webgpu.cachealloc[r]-this.backend.env.webgpu.cachefree[r];this.backend.env.webgpu.cacheinflight[r]<=a&&(this.backend.env.webgpu.cacheinflight[r]=a)}}upload(t,r){let a=r.buffer,n=r.byteOffset,s=r.byteLength,u=ma(s);this.backend.env.trace&&console.timeStamp(`upload-begin-${u}`);let d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${s}`);let i=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=i.getMappedRange();new Uint8Array(p).set(new Uint8Array(a,n,s)),i.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(i,0,d.gpuData.buffer,0,u),Ne("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.backend.env.trace&&console.timeStamp(`upload-end-${u}`),this.buffersForUploadingPending.push(i)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=ma(a.originalSize);this.backend.env.trace&&console.timeStamp(`memcpy-begin-${s}`);let u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,s),this.backend.env.trace&&console.timeStamp(`memcpy-end-${s}`)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Ne("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`);this.externalBuffers.delete(a)}else n=ms();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Ne("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Ne("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=ma(t);this.incstats("cachealloc",a);let n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let p=(s?this.freeBuffers:this.freeUniformBuffers).get(a);p?p.length>0?n=p.pop():(n=this.backend.device.createBuffer({size:a,usage:r}),this.incstats("cachemiss",a)):(this.incstats("cachemiss",a),n=this.backend.device.createBuffer({size:a,usage:r}))}else n=this.backend.device.createBuffer({size:a,usage:r});let d={id:ms(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Ne("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Ne("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");this.backend.env.trace&&console.timeStamp(`download-begin-${a.originalSize}`),await yi(this.backend,a.gpuData.buffer,a.originalSize,r),this.backend.env.trace&&console.timeStamp(`download-end-${a.originalSize}`)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let t of this.buffersPending){let r=mi[t.size];if(this.incstats("cachefree",t.size),(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let a=this.freeBuffers.get(t.size)||[];r===void 0||a.length>=r?t.destroy():a.push(t)}else if((t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let a=mi[t.size],n=this.freeUniformBuffers.get(t.size)||[];a===void 0||n.length>=a?t.destroy():n.push(t)}else t.destroy()}this.buffersPending=[]}else{let t=this.capturedPendingBuffers.get(this.backend.currentSessionId);t||(t=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,t));for(let r of this.buffersPending)t.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(t){let r=this.capturedPendingBuffers.get(t);r&&(r.forEach(a=>{a.destroy()}),this.capturedPendingBuffers.delete(t))}},gs=(...e)=>new gi(...e)});var bi,Ie,Qe=F(()=>{"use strict";bi=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},Ie=e=>new bi(e)});var vi,Ot,D,lr,ha,ga,ya,Ee=F(()=>{"use strict";vi=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},Ot=class{static calcShape(t,r,a=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),d=new Array(u);if(a){if(n<2||s<2)return;let i=vi.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(i===void 0)return;[d[u-2],d[u-1]]=i}for(let i=a?3:1;i<=u;i++){let p=n-i<0?1:t[n-i],h=s-i<0?1:r[s-i];if(p!==h&&p>1&&h>1)return;let g=Math.max(p,h);if(p&&h)d[u-i]=Math.max(p,h);else{if(g>1)return;d[u-i]=0}}return d}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let s=1;s<=a;s++)if(t[a-s]!==1&&t[a-s]!==r[n-s])return!1;return!0}},D=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let a=t.length;if(a===0)return[];let n=new Array(a),s=a-1;for(;s>=0;){if(t[s]%r===0){n[s]=t[s]/r;break}if(r%t[s]!==0)throw new Error("cannot convert shape");n[s]=1,r/=t[s],s--}for(s--;s>=0;s--)n[s]=t[s];return n}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let s=r;s<a;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,s)=>n+r[s]+r[s+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},lr=class e{static adjustPoolAttributes(t,r,a,n,s,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=a.length?a.push(r[d+2]):a[d]=r[d+2];for(let d=0;d<a.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<a.length;d++)if(d<s.length){if(s[d]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let d=0;d<a.length*2;d++)if(d<u.length){if(u[d]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let d=0;d<a.length;d++){if(a[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[d]>=a[d]||u[d+a.length]>=a[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,s,u,d){if(d){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let i=0;i<t.length-2;i++)e.adjustPadAndReturnShape(t[i+(u?1:2)],r[i],a[i],n[i],s,i,i+t.length-2,d)}}static computePoolOutputShape(t,r,a,n,s,u,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let i=[r[0],r[1]];return e.computeShapeHelper(t,r,i,a,n,s,u,d),i}static computeConvOutputShape(t,r,a,n,s,u,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let i=[t[0],r[0]];return e.computeShapeHelper(!1,t,i,a,n,s,u,d),i}static computeShapeHelper(t,r,a,n,s,u,d,i){if(t)for(let p=0;p<r.length-2;p++)a.push(1);else for(let p=0;p<r.length-2;p++)a.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],d,p,p+r.length-2,i))}static adjustPadAndReturnShape(t,r,a,n,s,u,d,i){let p=a*(n-1)+1;if(i&&i!=="NOTSET")switch(i){case"VALID":return s[u]=0,s[d]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let g=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(i==="SAME_LOWER"?(g+1)/2:g/2),s[d]=g-s[u],Math.floor((t+g-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[d]-p)/r+1)}},ha=class{static getShapeOfGemmResult(t,r,a,n,s){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,d,i;r?(u=t[1],d=t[0]):(u=t[0],d=t[1]);let p=-1;if(n?(i=a[0],p=1):(i=a[1],p=0),a[p]!==d)throw new Error("dimension mismatch");if(u<=0||i<=0||d<=0)throw new Error("invalid shape specified");if(s&&!Ot.isValidBroadcast(s,[u,i]))throw new Error("gemm: invalid bias shape for broadcast");return[u,i,d]}},ga=-34028234663852886e22,ya=34028234663852886e22});var dr,_i,Be,pt,Q,We,at,$t,ft,me,$i,B,K,ba,wi,bs,Cr,Te=F(()=>{"use strict";ve();Ee();dr=64,_i=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Be=(e,t=1)=>{let r=_i(e,t);return typeof r=="string"?r:r[0]},pt=(e,t=1)=>{let r=_i(e,t);return typeof r=="string"?r:r[1]},Q=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:D.computeStrides(r)})}),t},We=(...e)=>e.map(t=>t%4===0).reduce((t,r)=>t&&r,!0)?4:e.map(t=>t%2===0).reduce((t,r)=>t&&r,!0)?2:1,at=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,$t=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,ft=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,me=(e,t,r,a)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?a==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:a==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,$i=(e,t,r,a,n)=>{let s=typeof r=="number",u=s?r:r.length,d=[...new Array(u).keys()],i=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,p=_i(t,n),h=typeof p=="string"?p:p[1],g=typeof p=="string"?p:p[0],y={indices:i,value:h,storage:g,tensor:t},w=H=>typeof H=="string"?H:`${H}u`,v={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},$=s?"uniforms.":"",C=`${$}${e}_shape`,S=`${$}${e}_strides`,x="";for(let H=0;H<u-1;H++)x+=`
    let dim${H} = current / ${me(S,H,u)};
    let rest${H} = current % ${me(S,H,u)};
    indices[${H}] = dim${H};
    current = rest${H};
    `;x+=`indices[${u-1}] = current;`;let T=u<2?"":`
  fn o2i_${e}(offset: u32) -> ${y.indices} {
    var indices: ${y.indices};
    var current = offset;
    ${x}
    return indices;
  }`,E=H=>(v.offsetToIndices=!0,u<2?H:`o2i_${e}(${H})`),k=[];if(u>=2)for(let H=u-1;H>=0;H--)k.push(`${me(S,H,u)} * (indices[${H}])`);let M=u<2?"":`
  fn i2o_${e}(indices: ${y.indices}) -> u32 {
    return ${k.join("+")};
  }`,G=H=>(v.indicesToOffset=!0,u<2?H:`i2o_${e}(${H})`),q=(...H)=>u===0?"0u":`${y.indices}(${H.map(w).join(",")})`,re=(H,ee)=>u<2?`${H}`:`${me(H,ee,u)}`,Y=(H,ee,_e)=>u<2?`${H}=${_e};`:`${me(H,ee,u)}=${_e};`,ce={},xe=(H,ee)=>{v.broadcastedIndicesToOffset=!0;let _e=`${ee.name}broadcastedIndicesTo${e}Offset`;if(_e in ce)return`${_e}(${H})`;let Xe=[];for(let Ye=u-1;Ye>=0;Ye--){let Je=ee.indicesGet("outputIndices",Ye+ee.rank-u);Xe.push(`${re(S,Ye)} * (${Je} % ${re(C,Ye)})`)}return ce[_e]=`fn ${_e}(outputIndices: ${ee.type.indices}) -> u32 {
             return ${Xe.length>0?Xe.join("+"):"0u"};
           }`,`${_e}(${H})`},Re=(H,ee)=>(()=>{if(y.storage===y.value)return`${e}[${H}]=${ee};`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`${e}[${H}]=vec2<u32>(u32(${ee}), select(0u, 0xFFFFFFFFu, ${ee} < 0));`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`${e}[${H}]=vec2<u32>(u32(${ee}), 0u);`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`${e}[${H}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ee}));`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),U=H=>(()=>{if(y.storage===y.value)return`${e}[${H}]`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`i32(${e}[${H}].x)`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`u32(${e}[${H}].x)`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${H}] & 0xFFu), bool(${e}[${H}] & 0xFF00u), bool(${e}[${H}] & 0xFF0000u), bool(${e}[${H}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),X=u<2?"":`
  fn get_${e}ByIndices(indices: ${y.indices}) -> ${h} {
    return ${U(`i2o_${e}(indices)`)};
  }`,V=u<2?"":(()=>{let H=d.map(_e=>`d${_e}: u32`).join(", "),ee=d.map(_e=>`d${_e}`).join(", ");return`
  fn get_${e}(${H}) -> ${h} {
    return get_${e}ByIndices(${q(ee)});
  }`})(),Ce=(...H)=>{if(H.length!==u)throw new Error(`indices length must be ${u}`);let ee=H.map(w).join(",");return u===0?U("0u"):u===1?U(ee[0]):(v.get=!0,v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}(${ee})`)},we=H=>u<2?U(H):(v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}ByIndices(${H})`),he=u<2?"":`
  fn set_${e}ByIndices(indices: ${y.indices}, value: ${h}) {
    ${Re(`i2o_${e}(indices)`,"value")}
  }`,ne=u<2?"":(()=>{let H=d.map(_e=>`d${_e}: u32`).join(", "),ee=d.map(_e=>`d${_e}`).join(", ");return`
  fn set_${e}(${H}, value: ${h}) {
    set_${e}ByIndices(${q(ee)}, value);
  }`})();return{impl:()=>{let H=[],ee=!1;return v.offsetToIndices&&(H.push(T),ee=!0),v.indicesToOffset&&(H.push(M),ee=!0),v.broadcastedIndicesToOffset&&(Object.values(ce).forEach(_e=>H.push(_e)),ee=!0),v.set&&(H.push(ne),ee=!0),v.setByIndices&&(H.push(he),ee=!0),v.get&&(H.push(V),ee=!0),v.getByIndices&&(H.push(X),ee=!0),!s&&ee&&H.unshift(`const ${C} = ${y.indices}(${r.join(",")});`,`const ${S} = ${y.indices}(${D.computeStrides(r).join(",")});`),H.join(`
`)},type:y,offsetToIndices:E,indicesToOffset:G,broadcastedIndicesToOffset:xe,indices:q,indicesGet:re,indicesSet:Y,set:(...H)=>{if(H.length!==u+1)throw new Error(`indices length must be ${u}`);let ee=H[u];if(typeof ee!="string")throw new Error("value must be string");let _e=H.slice(0,u).map(w).join(",");return u===0?Re("0u",ee):u===1?Re(_e[0],ee):(v.set=!0,v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}(${_e}, ${ee})`)},setByOffset:Re,setByIndices:(H,ee)=>u<2?Re(H,ee):(v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}ByIndices(${H}, ${ee});`),get:Ce,getByOffset:U,getByIndices:we,usage:a,name:e,strides:S,shape:C,rank:u}},B=(e,t,r,a=1)=>$i(e,t,r,"input",a),K=(e,t,r,a=1)=>$i(e,t,r,"output",a),ba=(e,t,r,a=1)=>$i(e,t,r,"internal",a),wi=class{constructor(t,r){this.normalizedDispatchGroup=t;this.limits=r;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=dr){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2];if(r>this.limits.maxComputeWorkgroupSizeX||a>this.limits.maxComputeWorkgroupSizeY||n>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${r}, ${a}, ${n}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(r*a*n>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${r}, ${a}, ${n}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*a*n}u + local_idx;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${u}) {
    ${d}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,a=1){return this.uniforms.push({name:t,type:r,length:a}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a,length:n}of this.uniforms)if(n&&n>4)a==="f16"?t.push(`@align(16) ${r}:array<mat2x4<${a}>, ${Math.ceil(n/8)}>`):t.push(`${r}:array<vec4<${a}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?a:`vec${n}<${a}>`;t.push(`${r}:${s}`)}return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let t=r=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(r)];return this.uniforms.map(r=>[t(r.type),r.length??1])}},bs=(e,t)=>new wi(e,t),Cr=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(s)}return a}});var Mp,vs,Up,Np,wt,ws,_s,Ir=F(()=>{"use strict";ve();Ee();Qe();Te();Mp=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},vs=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Up=(e,t)=>D.sortBasedOnPerm(e,vs(e.length,t)),Np=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`
`)},wt=(e,t)=>{let r=e.dataType,a=e.dims.length,n=vs(a,t),s=Up(e.dims,n),u=K("output",r,s.length),d=B("a",r,a),i=p=>`
  ${p.registerUniform("output_size","u32").declareVariables(d,u)}

  ${Np(n,a,d,u)}

  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${u.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${u.setByOffset("global_idx",d.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:p=>{let h=D.size(s);return{outputs:[{dims:s,dataType:p[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:[{type:12,data:h},...Q(p[0].dims,s)]}},getShaderSource:i}},ws=(e,t)=>{Mp(e.inputs),e.compute(wt(e.inputs[0],t.perm))},_s=e=>Ie({perm:e.perm})});var Wp,Vp,Hp,Gp,Lp,jp,Fp,Kp,qp,Yp,Pt,$s,xs,Ss,Cs,Is,As,Ts,Es,ks,Os,Ps=F(()=>{"use strict";ve();Ee();Te();va();Ir();Wp={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Vp={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Hp={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Gp={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Lp=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},jp=(e,t)=>{let r=[],a=e.length;for(let s=0;s<a;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},Fp=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?a.push(e[n++]):a.push(1);return a},Kp=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},qp=(e,t)=>{let r=[];if(!Kp(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},Yp=(e,t,r,a,n,s,u)=>{let d=r[0].dims,i=D.size(s),p=D.size(u),h=B("_A",r[0].dataType,d),g=K("output",n,s),y=32,w=`
          var<workgroup> aBestValues : array<f32, ${y}>;
       `;return{name:e,shaderCache:t,getShaderSource:$=>`
        ${$.registerUniform("reduceSize","u32").declareVariables(h,g)}
        ${w}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${$.mainStart(y)}

          let outputIndex = global_idx / ${y};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${Hp[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${y}) {
           let candidate = f32(${h.getByOffset("offset + k")});
           bestValue = ${Wp[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${y}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Vp[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${g.setByOffset("outputIndex",`${a==="mean"?`${g.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${g.type.storage}(${Gp[a]})`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:i},programUniforms:[{type:12,data:p}]})}},Pt=(e,t,r,a)=>{let n=e.inputs.length===1?r:xi(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((w,v)=>v));let u=D.normalizeAxes(s,e.inputs[0].dims.length),d=u,i=e.inputs[0],p=qp(d,e.inputs[0].dims.length);p.length>0&&(i=e.compute(wt(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],d=Lp(d.length,i.dims.length));let[h,g]=jp(i.dims,d),y=h;n.keepDims&&(y=Fp(h,u)),e.compute(Yp(t,{hint:n.cacheKey,inputDependencies:["type"]},[i],a,e.inputs[0].dataType,y,g),{inputs:[i]})},$s=(e,t)=>{Pt(e,"ReduceMeanShared",t,"mean")},xs=(e,t)=>{Pt(e,"ReduceL1Shared",t,"l1")},Ss=(e,t)=>{Pt(e,"ReduceL2Shared",t,"l2")},Cs=(e,t)=>{Pt(e,"ReduceLogSumExpShared",t,"logSumExp")},Is=(e,t)=>{Pt(e,"ReduceMaxShared",t,"max")},As=(e,t)=>{Pt(e,"ReduceMinShared",t,"min")},Ts=(e,t)=>{Pt(e,"ReduceProdShared",t,"prod")},Es=(e,t)=>{Pt(e,"ReduceSumShared",t,"sum")},ks=(e,t)=>{Pt(e,"ReduceSumSquareShared",t,"sumSquare")},Os=(e,t)=>{Pt(e,"ReduceLogSumShared",t,"logSum")}});var Rt,Zp,wa,xi,zt,Qp,Xp,Jp,ef,tf,rf,nf,af,of,sf,Dt,Rs,zs,Ds,Bs,Ms,Us,Ns,Ws,Vs,Hs,va=F(()=>{"use strict";ve();Ee();Qe();Te();Ps();Rt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Zp=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],wa=(e,t,r,a,n,s,u=!1,d=!1)=>{let i=[],p=r[0].dims,h=p.length,g=D.normalizeAxes(n,h),y=!d&&g.length===0;p.forEach((C,S)=>{y||g.indexOf(S)>=0?u&&i.push(1):i.push(C)});let w=i.length,v=D.size(i);return{name:e,shaderCache:t,getShaderSource:C=>{let S=[],x=B("_A",r[0].dataType,h),T=K("output",s,w),E=a(x,T,g),k=E[2];for(let M=0,G=0;M<h;M++)y||g.indexOf(M)>=0?(u&&G++,k=`for(var j${M}: u32 = 0; j${M} < ${p[M]}; j${M}++) {
                  ${E[2].includes("last_index")?`let last_index = j${M};`:""}
                  ${x.indicesSet("input_indices",M,`j${M}`)}
                  ${k}
                }`):(S.push(`${x.indicesSet("input_indices",M,T.indicesGet("output_indices",G))};`),G++);return`

        ${C.registerUniform("output_size","u32").declareVariables(x,T)}

        ${C.mainStart()}
          ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${x.type.indices};
          let output_indices = ${T.offsetToIndices("global_idx")};

          ${S.join(`
`)}
          ${E[0]}       // init ops for reduce max/min
          ${E[1]}
          ${k}
          ${E[3]}
          ${E.length===4?T.setByOffset("global_idx","value"):E.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:i,dataType:s}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:12,data:v},...Q(p,i)]})}},xi=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),Ie({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},zt=(e,t,r,a)=>{let n=e.inputs,s=n.length===1?r:xi(n,r);e.compute(wa(t,{hint:s.cacheKey,inputDependencies:["rank"]},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?Zp:a,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},Qp=(e,t)=>{Rt(e.inputs),zt(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,"value = log(value);"])},Xp=(e,t)=>{Rt(e.inputs),zt(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByIndices("input_indices")});`,""])},Jp=(e,t)=>{Rt(e.inputs),zt(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},ef=(e,t)=>{Rt(e.inputs),zt(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByIndices("input_indices")});`,"value = log(value);"])},tf=(e,t)=>{Rt(e.inputs),zt(e,"ReduceMax",t,(a,n,s)=>{let u=[];for(let d=0;d<a.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(a.indicesSet("input_indices",d,0));return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = max(value, ${a.getByIndices("input_indices")});`,""]})},rf=(e,t)=>{Rt(e.inputs),zt(e,"ReduceMean",t,(a,n,s)=>{let u=1;for(let d=0;d<a.rank;d++)(s.indexOf(d)>=0||s.length===0)&&(u*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${a.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${u});`]})},nf=(e,t)=>{Rt(e.inputs),zt(e,"ReduceMin",t,(a,n,s)=>{let u=[];for(let d=0;d<a.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = min(value, ${a.getByIndices("input_indices")});`,""]})},af=(e,t)=>{Rt(e.inputs),zt(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByIndices("input_indices")};`,""])},of=(e,t)=>{Rt(e.inputs),zt(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,""])},sf=(e,t)=>{Rt(e.inputs),zt(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += t * t;`,""])},Dt=(e,t,r)=>{if(t.length===0)return r;let a=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?a*=e[s]:n*=e[s];return n<32&&a>1024},Rs=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?rf(e,t):$s(e,t)},zs=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Xp(e,t):xs(e,t)},Ds=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Jp(e,t):Ss(e,t)},Bs=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ef(e,t):Cs(e,t)},Ms=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?tf(e,t):Is(e,t)},Us=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?nf(e,t):As(e,t)},Ns=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?af(e,t):Ts(e,t)},Ws=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?of(e,t):Es(e,t)},Vs=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?sf(e,t):ks(e,t)},Hs=(e,t)=>{Dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Qp(e,t):Os(e,t)}});var Gs,Ls,js,Si,Fs=F(()=>{"use strict";ve();Qe();va();Gs=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Ls=(e,t)=>{Gs(e.inputs);let r=(a,n,s)=>{let u=[];for(let d=0;d<a.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(wa("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},js=(e,t)=>{Gs(e.inputs);let r=(a,n,s)=>{let u=[];for(let d=0;d<a.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(wa("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Si=e=>Ie(e)});var uf,lf,df,cf,_a,pf,Ks,Ci=F(()=>{"use strict";ve();fa();Te();uf=(e,t)=>{let r=e[0],a=e[1],n=e[2],s=e[3],u=e[4],d=e[5];if(u&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let i=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(a.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(a.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==a.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let g=n.dims[0]/3,y=g,w=y;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let T of t.qkvHiddenSizes)if(T%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");g=t.qkvHiddenSizes[0],y=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let v=p;if(g!==y)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==g+y+w)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let $=0;if(u){if(y!==w)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(u.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(u.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(u.dims[1]!==i)throw new Error('Input "past" second dimension must be batch_size');if(u.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(u.dims[4]!==y/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||($=u.dims[3])}let C=v+$,S=-1,x=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:i,sequenceLength:p,pastSequenceLength:$,kvSequenceLength:v,totalSequenceLength:C,maxSequenceLength:S,inputHiddenSize:h,hiddenSize:g,vHiddenSize:w,headSize:Math.floor(g/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:x,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},lf=(e,t,r,a)=>{let n=We(a),s=64,u=a/n;u<s?s=1:u/8<64&&(s=Math.ceil(u/8));let d=Math.ceil(a/n/s),i=[{type:t.dataType,data:1/a},{type:12,data:u},{type:12,data:d}],p=Be(t.dataType,n),h=g=>{let y=K("x",t.dataType,t.dims,n),w="thread_max_vector";n===2?w="max(thread_max_vector.x, thread_max_vector.y)":n===4&&(w="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let v=pt(t.dataType),$=[{name:"d_inv",type:v},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`
  var<workgroup> wgMax: array<f32, ${s}>;
  var<workgroup> wgSum: array<f32, ${s}>;
  ${g.registerUniforms($).declareVariables(y)}
  ${g.mainStart([s,1,1])}
    let localOffset = local_idx * uniforms.elements_per_wg;
    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;

    var thread_max_vector = ${at("f32",n,"-3.402823e+38f")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      thread_max_vector = max(${$t(v,n,"x[offset + i]")}, thread_max_vector);
    }
    wgMax[local_idx] = ${w};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${s}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${at("f32",n,"0")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      sumVector += exp(${$t(v,n,"x[offset + i]")} - maxValue);
    }
    wgSum[local_idx] = ${ft("sumVector",n)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${s}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        x[offset + i] = ${at(v,n,"uniforms.d_inv")};
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        let f32input = ${$t(v,n,"x[offset + i]")};
        x[offset + i] = ${y.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${s};${p};${n}`},getShaderSource:h,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:i})},{inputs:[t],outputs:[]})},df=(e,t,r,a,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],d=s.scale===0?1/Math.sqrt(n.headSize):s.scale,i=We(n.headSize),p=n.headSize/i,h=12,g={x:Math.ceil(n.totalSequenceLength/h),y:Math.ceil(n.sequenceLength/h),z:n.batchSize*n.numHeads},y=[{type:12,data:n.sequenceLength},{type:12,data:p},{type:12,data:n.totalSequenceLength},{type:12,data:n.kvSequenceLength},{type:t.dataType,data:d}],w=[t,r],v=C=>{let S=B("q",t.dataType,t.dims,i),x=B("key",r.dataType,r.dims,i),T=K("output",t.dataType,u),E=Be(t.dataType),k=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:E}];return`
  const beta: ${E} = 1.0;
  const TILE_SIZE = ${h}u;

  var<workgroup> tileQ: array<${S.type.storage}, ${h*h}>;
  var<workgroup> tileK: array<${S.type.storage}, ${h*h}>;
  ${C.registerUniforms(k).declareVariables(S,x,T)}
  ${C.mainStart([h,h,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;

    var value = ${at(E,i)};
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      output[outputIdx] = ${ft("value",i)} * uniforms.alpha;
    }
  }`},$=e.compute({name:"AttentionProbs",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:g,programUniforms:y}),getShaderSource:v},{inputs:w,outputs:[-1]})[0];return lf(e,$,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),$},cf=(e,t,r,a)=>{let n=[a.batchSize,a.sequenceLength,a.vHiddenSize],s=12,u={x:Math.ceil(a.vHeadSize/s),y:Math.ceil(a.sequenceLength/s),z:a.batchSize*a.numHeads},d=[{type:12,data:a.sequenceLength},{type:12,data:a.totalSequenceLength},{type:12,data:a.vHeadSize},{type:12,data:a.numHeads},{type:12,data:a.vHiddenSize}],i=p=>{let h=B("probs",t.dataType,t.dims),g=B("v",r.dataType,r.dims),y=K("output",t.dataType,n),w=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`
  const TILE_SIZE = ${s}u;
  var<workgroup> tileQ: array<${h.type.value}, ${s*s}>;
  var<workgroup> tileK: array<${h.type.value}, ${s*s}>;
  ${p.registerUniforms(w).declareVariables(h,g,y)}
  ${p.mainStart([s,s,1])}
   let headIdx = workgroup_id.z;
   let m = global_id.y;
   let n = global_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;

   var value = ${h.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
     if (m < uniforms.M && w + local_id.x < uniforms.K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < uniforms.N && w + local_id.y < uniforms.K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:u,programUniforms:d}),getShaderSource:i},{inputs:[t,r],outputs:[0]})[0]},_a=(e,t,r,a,n,s,u,d,i,p,h)=>{let g=df(e,t,r,i,p,h);cf(e,g,a,p)},pf=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],a=t.sequenceLength,n=t.inputHiddenSize,s=t.headSize,u=12,d={x:Math.ceil(t.headSize/u),y:Math.ceil(t.sequenceLength/u),z:t.batchSize*t.numHeads},i=[e.inputs[0],e.inputs[1],e.inputs[2]],p=[{type:12,data:a},{type:12,data:n},{type:12,data:s},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],h=g=>{let y=K("output_q",i[0].dataType,r),w=K("output_k",i[0].dataType,r),v=K("output_v",i[0].dataType,r),$=B("input",i[0].dataType,i[0].dims),C=B("weight",i[1].dataType,i[1].dims),S=B("bias",i[2].dataType,i[2].dims),x=$.type.storage,T=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${u}u;
  var<workgroup> tileInput: array<${x}, ${u*u}>;
  var<workgroup> tileWeightQ: array<${x}, ${u*u}>;
  var<workgroup> tileWeightK: array<${x}, ${u*u}>;
  var<workgroup> tileWeightV: array<${x}, ${u*u}>;
  ${g.registerUniforms(T).declareVariables($,C,S,y,w,v)}
  ${g.mainStart([u,u,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${x}(0);
    var valueK = ${x}(0);
    var valueV = ${x}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:p}),getShaderSource:h},{inputs:i,outputs:[-1,-1,-1]})},Ks=(e,t)=>{let r=uf(e.inputs,t),[a,n,s]=pf(e,r);return _a(e,a,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var ff,mf,hf,qs,Ys=F(()=>{"use strict";vt();ve();Ee();Qe();Te();ff=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(a,n,s)=>{let u=n.length;if(u!==a.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((d,i)=>{if(d!==a[i])throw new Error(`${s}: dim[${i}] do not match`)})};if(e[0].dims.length>1){let a=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,a,"Invalid input scale"),r(e[2].dims,a,"Invalid input B"),r(e[3].dims,a,"Invalid input mean"),r(e[4].dims,a,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},mf=(e,t)=>{let{epsilon:r,spatial:a,format:n}=t,s=e[0].dims,u=a?We(s[s.length-1]):1,d=n==="NHWC"&&s.length>1?u:1,i=D.size(s)/u,p=a,h=p?s.length:s,g=B("x",e[0].dataType,e[0].dims,u),y=B("scale",e[1].dataType,e[1].dims,d),w=B("bias",e[2].dataType,e[2].dims,d),v=B("inputMean",e[3].dataType,e[3].dims,d),$=B("inputVar",e[4].dataType,e[4].dims,d),C=K("y",e[0].dataType,h,u),S=()=>{let T="";if(a)T=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")T=`
            ${C.indicesSet("outputIndices","0","0")}
            let cOffset = ${C.indicesToOffset("outputIndices")};`;else{T=`var cIndices = ${y.type.indices}(0);
                       cIndices[0] = outputIndices[${s.length-1}];`;for(let E=1;E<y.rank;E++)T+=`cIndices[${E}] = outputIndices[${E}];`;T+=`let cOffset = ${y.indicesToOffset("cIndices")};`}return T},x=T=>`
  const epsilon = ${r};
  ${T.registerUniform("outputSize","u32").declareVariables(g,y,w,v,$,C)}
  ${T.mainStart()}
  ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${C.offsetToIndices(`global_idx * ${u}`)};
    ${S()}
    let scale = ${y.getByOffset("cOffset")};
    let bias = ${w.getByOffset("cOffset")};
    let inputMean = ${v.getByOffset("cOffset")};
    let inputVar = ${$.getByOffset("cOffset")};
    let x = ${g.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${C.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${a}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:x,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p?[{type:12,data:i},...Q(s)]:[{type:12,data:i}]})}},hf=e=>Ie(e),qs=(e,t)=>{let{inputs:r,outputCount:a}=e,n=hf({...t,outputCount:a});if(Pe.webgpu.validateInputContent&&ff(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(mf(r,n))}});var gf,yf,Zs,Qs=F(()=>{"use strict";Ee();Te();gf=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},yf=e=>{let t=e[0].dims,r=e[0].dims[2],a=D.size(t)/4,n=e[0].dataType,s=B("input",n,t,4),u=B("bias",n,[r],4),d=B("residual",n,t,4),i=K("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:h=>`
  const channels = ${r}u / 4;
  ${h.declareVariables(s,u,d,i)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${s.getByOffset("global_idx")}
      + ${u.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};
    ${i.setByOffset("global_idx","value")}
  }`}},Zs=e=>{gf(e.inputs),e.compute(yf(e.inputs))}});var bf,ze,Xs,Js,eu,tu,ru,nu,au,iu,ou,vf,su,uu,lu,du,$a,cu,xa,pu,fu,mu,hu,gu,yu,bu,vu,wu,_u,$u,xu,Su,Cu,Iu,Au,Tu,Eu,Ii,Ai,ku,Ou,Pu,Sa=F(()=>{"use strict";ve();Ee();Qe();Te();bf=(e,t,r,a,n,s)=>{let u=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let i=B("inputData",r,[u],4),p=K("outputData",a,[u],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(i,p)}

  ${s??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${i.getByOffset("global_idx")};
    ${p.setByOffset("global_idx",d)}
  }`},ze=(e,t,r,a,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>bf(u,D.size(e.dims),e.dataType,s,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(D.size(u[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(D.size(e.dims)/4)}]})}),Xs=e=>{e.compute(ze(e.inputs[0],"Abs","abs"))},Js=e=>{e.compute(ze(e.inputs[0],"Acos","acos"))},eu=e=>{e.compute(ze(e.inputs[0],"Acosh","acosh"))},tu=e=>{e.compute(ze(e.inputs[0],"Asin","asin"))},ru=e=>{e.compute(ze(e.inputs[0],"Asinh","asinh"))},nu=e=>{e.compute(ze(e.inputs[0],"Atan","atan"))},au=e=>{e.compute(ze(e.inputs[0],"Atanh","atanh"))},iu=e=>Ie(e),ou=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(ze(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},vf=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:ga,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:ya;return Ie({min:t,max:r})},su=(e,t)=>{let r=e.inputs.length===1?t:vf(e.inputs),a=pt(e.inputs[0].dataType);e.compute(ze(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${a}> = vec4(${a}(${r.min}));
    const clip_max_: vec4<${a}> = vec4(${a}(${r.max}));
`,r.cacheKey),{inputs:[0]})},uu=e=>{e.compute(ze(e.inputs[0],"Ceil","ceil"))},lu=e=>{e.compute(ze(e.inputs[0],"Cos","cos"))},du=e=>{e.compute(ze(e.inputs[0],"Cosh","cosh"))},$a=e=>Ie(e),cu=(e,t)=>{let r=pt(e.inputs[0].dataType);e.compute(ze(e.inputs[0],"Elu",a=>`elu_vf32(${a})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},xa=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,pu=e=>{let t=pt(e.inputs[0].dataType);e.compute(ze(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,xa(t)))},fu=e=>{e.compute(ze(e.inputs[0],"Exp","exp"))},mu=e=>{e.compute(ze(e.inputs[0],"Floor","floor"))},hu=e=>{let t=pt(e.inputs[0].dataType);e.compute(ze(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,xa(t)))},gu=(e,t)=>{let r=pt(e.inputs[0].dataType);e.compute(ze(e.inputs[0],"LeakyRelu",a=>`select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},yu=e=>{e.compute(ze(e.inputs[0],"Not",t=>`!${t}`))},bu=e=>{e.compute(ze(e.inputs[0],"Neg",t=>`-${t}`))},vu=e=>{e.compute(ze(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},wu=e=>{let t=pt(e.inputs[0].dataType);e.compute(ze(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},_u=e=>{e.compute(ze(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},$u=e=>Ie(e),xu=(e,t)=>{let r=pt(e.inputs[0].dataType);e.compute(ze(e.inputs[0],"HardSigmoid",a=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${a} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},Su=e=>{e.compute(ze(e.inputs[0],"Sin","sin"))},Cu=e=>{e.compute(ze(e.inputs[0],"Sinh","sinh"))},Iu=e=>{e.compute(ze(e.inputs[0],"Sqrt","sqrt"))},Au=e=>{e.compute(ze(e.inputs[0],"Tan","tan"))},Tu=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Eu=e=>{e.compute(ze(e.inputs[0],"Tanh",Tu))},Ii=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${Tu("v")};
}
`,Ai=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,ku=e=>{let t=pt(e.inputs[0].dataType);e.compute(ze(e.inputs[0],"FastGelu",Ai,Ii(t),void 0,e.inputs[0].dataType))},Ou=(e,t)=>{let r=pt(e.inputs[0].dataType);return e.compute(ze(e.inputs[0],"ThresholdedRelu",a=>`select(vec4<${r}>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},Pu=e=>{e.compute(ze(e.inputs[0],"Log","log"))}});var wf,_f,zu,Du=F(()=>{"use strict";Ee();Te();Sa();wf=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},_f=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=B("input",e[0].dataType,e[0].dims,4),a=B("bias",e[0].dataType,[e[0].dims[2]],4),n=K("output",e[0].dataType,t,4),s=D.size(t)/4,u=Be(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:i=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${i.declareVariables(r,a,n)}

  ${xa(u)}

  ${i.mainStart()}
    ${i.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},zu=e=>{wf(e.inputs),e.compute(_f(e.inputs))}});var $f,xf,Bt,Bu,Mu,Uu,Nu,Wu,Vu,Hu,Gu,Lu,ju,Fu=F(()=>{"use strict";ve();Ee();Te();$f=(e,t,r,a,n,s,u,d,i,p,h,g)=>{let y,w;typeof d=="string"?y=w=(x,T)=>`${d}((${x}),(${T}))`:typeof d=="function"?y=w=d:(y=d.scalar,w=d.vector);let v=K("outputData",h,a.length,4),$=B("aData",i,t.length,4),C=B("bData",p,r.length,4),S;if(n)if(s){let x=D.size(t)===1,T=D.size(r)===1,E=t.length>0&&t[t.length-1]%4===0,k=r.length>0&&r[r.length-1]%4===0;x||T?S=v.setByOffset("global_idx",w(x?`${$.type.value}(${$.getByOffset("0")}.x)`:$.getByOffset("global_idx"),T?`${C.type.value}(${C.getByOffset("0")}.x)`:C.getByOffset("global_idx"))):S=`
            let outputIndices = ${v.offsetToIndices("global_idx * 4u")};
            let offsetA = ${$.broadcastedIndicesToOffset("outputIndices",v)};
            let offsetB = ${C.broadcastedIndicesToOffset("outputIndices",v)};
            ${v.setByOffset("global_idx",w(u||E?$.getByOffset("offsetA / 4u"):`${$.type.value}(${$.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||k?C.getByOffset("offsetB / 4u"):`${C.type.value}(${C.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else S=v.setByOffset("global_idx",w($.getByOffset("global_idx"),C.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let x=(T,E,k="")=>{let M=`aData[indexA${E}][componentA${E}]`,G=`bData[indexB${E}][componentB${E}]`;return`
            let outputIndices${E} = ${v.offsetToIndices(`global_idx * 4u + ${E}u`)};
            let offsetA${E} = ${$.broadcastedIndicesToOffset(`outputIndices${E}`,v)};
            let offsetB${E} = ${C.broadcastedIndicesToOffset(`outputIndices${E}`,v)};
            let indexA${E} = offsetA${E} / 4u;
            let indexB${E} = offsetB${E} / 4u;
            let componentA${E} = offsetA${E} % 4u;
            let componentB${E} = offsetB${E} % 4u;
            ${T}[${E}] = ${k}(${y(M,G)});
          `};h===9?S=`
            var data = vec4<u32>(0);
            ${x("data",0,"u32")}
            ${x("data",1,"u32")}
            ${x("data",2,"u32")}
            ${x("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:S=`
            ${x("outputData[global_idx]",0)}
            ${x("outputData[global_idx]",1)}
            ${x("outputData[global_idx]",2)}
            ${x("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables($,C,v)}

        ${g??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${S}
      }`},xf=(e,t,r,a,n,s,u=r.dataType)=>{let d=!D.areEqual(r.dims,a.dims),i=r.dims,p=D.size(r.dims),h=!1,g=!1,y=[d];if(d){let w=Ot.calcShape(r.dims,a.dims,!1);if(!w)throw new Error("Can't perform binary op on the given tensors");i=w,p=D.size(i);let v=D.size(r.dims)===1,$=D.size(a.dims)===1,C=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,S=a.dims.length>0&&a.dims[a.dims.length-1]%4===0;y.push(v),y.push($),y.push(C),y.push(S);let x=1;for(let T=1;T<i.length;T++){let E=r.dims[r.dims.length-T]??1,k=a.dims[a.dims.length-T]??1;if(E===k)x*=E;else break}x%4===0?(g=!0,h=!0):(v||$||C||S)&&(h=!0)}else h=!0;return y.push(h),{name:e,shaderCache:{hint:t+y.map(w=>w.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:w=>$f(w,r.dims,a.dims,i,h,d,g,n,r.dataType,a.dataType,u,s),getRunData:()=>({outputs:[{dims:i,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:[{type:12,data:Math.ceil(D.size(i)/4)},...Q(r.dims,a.dims,i)]})}},Bt=(e,t,r,a,n,s)=>{e.compute(xf(t,n??"",e.inputs[0],e.inputs[1],r,a,s))},Bu=e=>{Bt(e,"Add",(t,r)=>`${t}+${r}`)},Mu=e=>{Bt(e,"Div",(t,r)=>`${t}/${r}`)},Uu=e=>{Bt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Nu=e=>{Bt(e,"Mul",(t,r)=>`${t}*${r}`)},Wu=e=>{let t=B("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Bt(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Vu=e=>{Bt(e,"Sub",(t,r)=>`${t}-${r}`)},Hu=e=>{Bt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Gu=e=>{Bt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Lu=e=>{Bt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},ju=e=>{Bt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Cf,If,Af,Tf,Ku,qu,Yu=F(()=>{"use strict";ve();Ee();Qe();Te();Cf=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,a=e[r],n=a.dataType,s=a.dims.length;e.forEach((u,d)=>{if(d!==r){if(u.dataType!==n)throw new Error("input tensors should be one type");if(u.dims.length!==s)throw new Error("input tensors should have the same shape");u.dims.forEach((i,p)=>{if(p!==t&&i!==a.dims[p])throw new Error("non concat dimensions must match")})}})},If=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,Af=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(s):n===0?a.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?a.push(`else { ${s} }`):a.push(`else if (inputIndex == ${n}) { ${s} }`)}return a.join(`
`)},Tf=(e,t,r,a)=>{let n=D.size(r),s=new Array(e.length),u=new Array(e.length),d=0,i=[],p=[],h=[{type:12,data:n}];for(let $=0;$<e.length;++$)d+=e[$].dims[t],s[$]=d,p.push(e[$].dims.length),u[$]=B(`input${$}`,a,p[$]),i.push("rank"),h.push({type:12,data:s[$]});for(let $=0;$<e.length;++$)h.push(...Q(e[$].dims));h.push(...Q(r));let g=K("output",a,r.length),y=g.indicesGet("indices",t),w=Array.from(Array(s.length).keys()).map($=>`uniforms.sizeInConcatAxis${$}`).join(","),v=$=>`

  ${(()=>{$.registerUniform("outputSize","u32");for(let C=0;C<e.length;C++)$.registerUniform(`sizeInConcatAxis${C}`,"u32");return $.declareVariables(...u,g)})()}

  ${If(s.length,w)}

  ${$.mainStart()}
    ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${g.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${y});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${s.length}u>(${w});
      ${y} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Af(u,g)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:i},getRunData:()=>({outputs:[{dims:r,dataType:a}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:h}),getShaderSource:v}},Ku=(e,t)=>{let r=e.inputs,a=r[0].dims,n=D.normalizeAxis(t.axis,a.length);Cf(r,n);let s=a.slice();s[n]=r.reduce((d,i)=>d+(i.dims.length>n?i.dims[n]:0),0);let u=r.filter(d=>D.size(d.dims)>0);e.compute(Tf(u,n,s,r[0].dataType),{inputs:u})},qu=e=>Ie({axis:e.axis})});var xt,St,Ct,Ca,Zt=F(()=>{"use strict";ve();Ee();xt=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},St=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},Ct=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},Ca=e=>{let t=e?.activation||"";if(t==="HardSigmoid"){let[r,a]=e?.activation_params||[.2,.5];return{activation:t,alpha:r,beta:a}}else if(t==="Clip"){let[r,a]=e?.activation_params||[ga,ya];return{activation:t,clipMax:a,clipMin:r}}else if(t==="LeakyRelu"){let[r]=e?.activation_params||[.01];return{activation:t,alpha:r}}return{activation:t}}});var it,Ia,Aa=F(()=>{"use strict";it=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Ia=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var Ta,Ti=F(()=>{"use strict";Ta=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var Ef,kf,tn,Zu,Of,rn,Pf,Ea,nn=F(()=>{"use strict";ve();Ee();Te();Zt();Aa();Ef=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,kf=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,tn=(e,t,r="f32",a,n=!1,s=32,u=!1,d=32)=>{let i=t[1]*e[1],p=t[0]*e[0],h=n?i:s,g=n?s:i,y=h/t[0],w=s/t[1];if(!((n&&y===4&&e[1]===4||!n&&(y===3||y===4))&&h%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${y} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${y} must be 3 or 4.
  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${y}<${r}>, ${h/y}>, ${g}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${y};
const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${u?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${i};

  let num_tiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${w};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${Ef(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${y===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${kf(n,y)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Zu=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,Of=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",rn=(e,t,r="f32",a,n=!1,s=32,u=!1,d=32,i=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],g=n?p:s,y=n?s:p;if(!(y%t[1]===0&&g%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${y} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let w=y/t[1],v=g/t[0],$=s/t[1],C=i?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${p};
    let globalColStart = i32(workgroupId.x) * ${h};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${y}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {
          ${Zu(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${p};

let tileRowA = i32(localId.y) * ${w};
let tileColA = i32(localId.x) * ${v};
let tileRowB = i32(localId.y) * ${$};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${v}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Zu(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Of(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${g}>, ${y}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${s}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${u?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${C}
  }
`},Pf=(e,t,r,a,n,s=!1)=>{let[u,d,i]=n,[p,h,g,y]=a,w=Cr(u,i),v=Cr(d,i),$=Be(a[0].type.tensor),C=()=>{let T=h.rank,E=p.rank,k=`var aIndices: ${h.type.indices};`;for(let M=T-2-1,G=E-1;M>=0;M--,G--)k+=`
aIndices[${M}] = ${E>1?`batchIndices[${G}]`:"batchIndices"};`;return w.forEach(M=>{k+=`
aIndices[${M}] = 0;`}),k+=`
aIndices[${T-2}] = u32(row);
                   aIndices[${T-1}] = u32(colIn);`,k},S=()=>{let T=g.rank,E=p.rank,k=`var bIndices: ${g.type.indices};`;for(let M=T-2-1,G=E-1;M>=0;M--,G--)k+=`
bIndices[${M}] = ${E>1?`batchIndices[${G}]`:"batchIndices"};`;return v.forEach(M=>{k+=`
bIndices[${M}] = 0;`}),k+=`
bIndices[${T-2}] = u32(row);
                   bIndices[${T-1}] = u32(colIn);`,k};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${it(e,$)} {
      var value = ${it(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        ${C()}
        value = ${h.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${it(e,$)} {
      var value = ${it(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        ${S()}
        value = ${g.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${it(e,$)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${s?"bias[colIn]":`${it(e,$)}(bias[row])`};`:""}
        ${r}
        ${y.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},Ea=(e,t,r,a,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s.slice(0,-2),i=u.slice(0,-2),p=a?a.slice(0,-2):r.slice(0,-2),h=D.size(p),g=s[s.length-2],y=s[s.length-1],w=u[u.length-1],v=y%4===0&&w%4===0,$=g<=8?[4,1,1]:[4,4,1],C=[8,8,1],S=[Math.ceil(w/C[0]/$[0]),Math.ceil(g/C[1]/$[1]),Math.ceil(h/C[2]/$[2])],x=v?4:1,T=[...d,g,y/x],E=T.length,k=[...i,y,w/x],M=k.length,G=[h,g,w/x],q=[{type:6,data:g},{type:6,data:w},{type:6,data:y}];St(t,q),q.push(...Q(p,T,k));let re=["rank","rank"],Y=e.length>2;Y&&(q.push(...Q(e[2].dims)),re.push("rank")),q.push(...Q(G));let ce=xe=>{let Re=p.length,U=ba("batchDims",e[0].dataType,Re,1),X=Be(e[0].dataType),V=B("a",e[0].dataType,E,x),Ce=B("b",e[1].dataType,M,x),we=K("result",e[0].dataType,G.length,x),he=[V,Ce];if(Y){let H=n?x:1;he.push(B("bias",e[2].dataType,e[2].dims.length,H))}let ne=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Ct(t,ne);let be=Be(we.type.tensor),fe=xt(t,we.type.value,be),qe=Pf(x,Y,fe,[U,V,Ce,we],[d,i,p],n);return`
  ${xe.registerUniforms(ne).registerInternalVariables(U).declareVariables(...he,we)}
  ${qe}
  ${v?tn($,C,X,U):rn($,C,X,U)}
                   `};return{name:"MatMul",shaderCache:{hint:`${$};${t.activation};${v};${n}`,inputDependencies:re},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:S[0],y:S[1],z:S[2]},programUniforms:q}),getShaderSource:ce}}});var Rf,Qu,Xu=F(()=>{"use strict";ve();Yt();Te();Zt();Aa();Ti();nn();Rf=(e,t,r,a,n=!1,s,u=4,d=4,i=4,p="f32")=>{let h=Y=>{switch(Y){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${Y} is not supported.`)}},g=Y=>{switch(Y){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${Y} is not supported.`)}},y=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,w=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,v=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",$=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",C=e?"row":"col",S=e?"col":"row",x=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${C} / outWidth;
    let outCol = ${C} % outWidth;

    let WRow = ${S} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${S} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${S} % inChannels;
    var resData = ${it(u,p)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${v} && xCol >= 0 && xCol < ${$}) {
      ${y}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${h(u)}
    }
    return resData;`,T=e?t&&a?`
    let col = colIn * ${u};
    ${x}`:`
    let col = colIn * ${u};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${x}
    }
    return ${it(u,p)}(0.0);`:a&&r?`
    let col = colIn * ${u};
    ${x}`:`
    let col = colIn * ${u};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${x}
    }
    return ${it(u,p)}(0.0);`,E=`${g(d)}`,k=it(i,p),M=e?it(u,p):it(d,p),G=e?it(d,p):it(u,p),q=xt(s,k,p);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${M} {
      ${e?T:E}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${G} {
      ${e?E:T}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${k}) {
      let col = colIn * ${i};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${w}
      ${Ia(n)}
      ${q}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Qu=(e,t,r,a,n,s,u,d)=>{let i=t.format==="NHWC",p=i?e[0].dims[3]:e[0].dims[1],h=r[0],g=i?r[2]:r[3],y=i?r[1]:r[2],w=i?r[3]:r[1],v=i&&(p%4===0||p%3===0)&&w%4===0,$=i?w:g*y,C=i?g*y:w,S=[8,8,1],x=a<=8?[4,1,1]:[4,4,1],T=[Math.ceil($/S[0]/x[0]),Math.ceil(C/S[1]/x[1]),Math.ceil(h/S[2]/x[2])];Ne("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${T}`);let E=v?i&&p%4!==0?3:4:1,k=S[1]*x[1],M=S[0]*x[0],G=Math.max(S[0]*E,S[1]),q=a%k===0,re=n%M===0,Y=s%G===0,ce=v?[E,4,4]:[1,1,1],xe=[{type:6,data:a},{type:6,data:n},{type:6,data:s},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];St(t,xe),xe.push(...Q(e[0].dims,e[1].dims));let Re=["rank","rank"];u&&(xe.push(...Q(e[2].dims)),Re.push("rank")),xe.push(...Q(r));let U=X=>{let V=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Ct(t,V);let Ce=v?4:1,we=Be(e[0].dataType),he=`
      fn setOutputAtIndex(flatIndex : i32, value : ${v?`vec4<${we}>`:we}) {
        result[flatIndex] = ${v?`vec4<${we}>`:we}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${v?`vec4<${we}>`:we}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${v?"/ 4":""}, value);
      }`,ne=B("x",e[0].dataType,e[0].dims.length,E===3?1:E),be=B("w",e[1].dataType,e[1].dims.length,Ce),fe=[ne,be],qe=K("result",e[0].dataType,r.length,Ce);if(u){let H=B("bias",e[2].dataType,e[2].dims.length,Ce);fe.push(H),he+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?`vec4<${we}>`:we} {
          return bias[coords.${i?"w":"y"}${v?"/ 4":""}];
        }`}return`
        ${Ta("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${X.registerUniforms(V).declareVariables(...fe,qe)}
        ${he}
        ${Rf(i,q,re,Y,u,t,ce[0],ce[1],ce[2],we)}
        ${v?tn(x,S,we,void 0,!i,G):rn(x,S,we,void 0,!i,G,!1,void 0,d)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${E};${v};${q};${re};${Y};${k};${M};${G}`,inputDependencies:Re},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:xe}),getShaderSource:U}}});var Ei,Ju,el=F(()=>{"use strict";ve();Ee();Te();ki();Zt();Ei=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,d=u[0]/t.group,i=t.format==="NHWC",p=ka(s,u,t.dilations,t.pads,t.strides,i),h=D.size(p),g=[{type:12,data:h},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:d}];St(t,g),g.push(...Q(s,u));let y=["rank","rank"];a&&(g.push(...Q(e[2].dims)),y.push("rank")),g.push(...Q(p));let w=v=>{let $=K("output",e[0].dataType,p.length),C=Be($.type.tensor),S=xt(t,$.type.value,C),x=B("x",e[0].dataType,s.length),T=B("w",e[1].dataType,u.length),E=[x,T];a&&E.push(B("b",e[2].dataType,e[2].dims.length));let k=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return Ct(t,k),`
  ${v.registerUniforms(k).declareVariables(...E,$)}

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${$.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${i?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${i?1:2}], outputIndices[${i?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel / uniforms.output_channels_per_group;

    var value: ${$.type.value} = ${$.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[${i?1:2}]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[${i?2:3}]) {
            continue;
          }

          let xVal = ${i?x.get("batch","xHeight","xWidth","input_channel"):x.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${T.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${S}
    ${$.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:y},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:g}),getShaderSource:w}},Ju=(e,t,r)=>{let a=e.length>2,n=We(r[3]),s=We(r[2]),u=D.size(r)/n/s,d=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/n],i=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/n],p=[r[0],r[1],r[2],r[3]/n],h=[{type:12,data:u},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];St(t,h),h.push(...Q(d,i,p));let g=(s-1)*t.strides[1]+i[1],y=w=>{let v=K("output",e[0].dataType,p.length,n),$=Be(v.type.tensor),C=xt(t,v.type.value,$),S=B("x",e[0].dataType,d.length,n),x=B("w",e[1].dataType,i.length,n),T=[S,x];a&&T.push(B("b",e[2].dataType,e[2].dims,n));let E=a?"value += b[output_channel];":"",k=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Ct(t,k),`
  ${w.registerUniforms(k).declareVariables(...T,v)}
  ${w.mainStart()}
    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${s}u;
    let col = (index1 % width1) * ${s}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${S.type.value}, ${g}>;
    var values: array<${v.type.value}, ${s}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${i[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${g}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${S.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${S.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${i[1]}; w_width++) {
          let w_val = ${x.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${s}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${s}u; i++) {
      var value = values[i];
      ${E}
      ${C}
      ${v.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${n};${s};${g};${i[0]};${i[1]}`,inputDependencies:a?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:h}),getShaderSource:y}}});var Oi,zf,tl,Pi=F(()=>{"use strict";ve();Ee();nn();Te();Zt();Oi=(e,t,r,a,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s[s.length-2],i=u[u.length-1],p=s[s.length-1],h=We(i),g=We(p),y=We(d),w=D.size(r)/h/y,v=e.length>2,$=a?a.slice(0,-2):r.slice(0,-2),S=[D.size($),d,i],x=[{type:12,data:w},{type:12,data:d},{type:12,data:i},{type:12,data:p}];St(t,x),x.push(...Q($,s,u)),v&&x.push(...Q(e[2].dims)),x.push(...Q(S));let T=E=>{let k=ba("batch_dims",e[0].dataType,$.length),M=B("a",e[0].dataType,s.length,g),G=B("b",e[1].dataType,u.length,h),q=K("output",e[0].dataType,S.length,h),re=Be(q.type.tensor),Y=xt(t,q.type.value,re),ce=[M,G],xe="";if(v){let ne=n?h:1;ce.push(B("bias",e[2].dataType,e[2].dims.length,ne)),xe=`${n?`value += bias[col / ${ne}];`:`value += ${q.type.value}(bias[row + i]);`}`}let Re=s.slice(0,-2),U=u.slice(0,-2),X=Cr(Re,$),V=Cr(U,$),Ce=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Ct(t,Ce);let we=(ne,be)=>{let fe=ne.rank,qe=ne.name;if(fe===2)return`var ${qe}_indices = ${ne.type.indices}(0u, 0u);`;let H=k.rank,ee=`var ${qe}_indices: ${ne.type.indices};`;for(let _e=fe-2-1,Xe=H-1;_e>=0;_e--,Xe--)ee+=`
${qe}_indices[${_e}] = ${H>1?`batch_indices[${Xe}]`:"batch_indices"};`;return be.forEach(_e=>{ee+=`
${qe}_indices[${_e}] = 0;`}),ee+=`${qe}_indices[${fe-2}] = 0u;
                     ${qe}_indices[${fe-1}] = 0u;`,ee},he=()=>{let ne=`var a_data: ${M.type.value};`;for(let be=0;be<g;be++)ne+=`
              let b_data${be} = b[(b_offset + (k + ${be}) * uniforms.N + col) / ${h}];`;for(let be=0;be<y;be++){ne+=`a_data = a[(a_offset + (row + ${be}) * uniforms.K + k) / ${g}];`;for(let fe=0;fe<g;fe++)ne+=`
            values[${be}] = fma(${G.type.value}(a_data${g===1?"":`[${fe}]`}), b_data${fe}, values[${be}]);
`}return ne};return`
  ${E.registerUniforms(Ce).registerInternalVariables(k).declareVariables(...ce,q)}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${h})) * ${h};
    var index1 = global_idx / (uniforms.N / ${h});
    let stride1 = uniforms.M / ${y};
    let row = (index1 % stride1) * ${y};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${k.offsetToIndices("batch")};`}
    ${we(M,X)}
    let a_offset = ${M.indicesToOffset("a_indices")};
    ${we(G,V)}
    let b_offset = ${G.indicesToOffset("b_indices")};
    var values: array<${q.type.value}, ${y}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${g}) {
      ${he()}
    }
    for (var i = 0u; i < ${y}u; i++) {
      var value = values[i];
      ${xe}
      ${Y}
      let cur_indices = ${q.type.indices}(batch, row + i, col);
      let offset = ${q.indicesToOffset("cur_indices")};
      ${q.setByOffset(`offset / ${h}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${h};${g};${y};${n}`,inputDependencies:v?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:x}),getShaderSource:T}},zf=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},tl=e=>{zf(e.inputs);let t=Ot.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],a=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&a<8?e.compute(Oi(e.inputs,{activation:""},t)):e.compute(Ea(e.inputs,{activation:""},t))}});var ka,Ri,Df,rl,zi,Bf,Mf,Di,ki=F(()=>{"use strict";Ee();Xu();nn();el();Zt();Pi();Ir();ka=(e,t,r,a,n,s)=>{let u=e[0],d=e.slice(s?1:2,s?3:4),i=d.length,p=t[0],g=t.slice(2).map((v,$)=>v+(v-1)*(r[$]-1)),w=d.map((v,$)=>v+a[$]+a[$+i]).map((v,$)=>Math.floor((v-g[$]+n[$])/n[$]));return w.splice(0,0,u),w.splice(s?3:1,0,p),w},Ri=[2,3,1,0],Df=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},rl=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let a=e.pads.slice();lr.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a}),n},zi=e=>{let t=Ca(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,d=e.pads,i=e.strides,p=e.w_is_const();return{autoPad:a,format:r,dilations:n,group:s,kernelShape:u,pads:d,strides:i,wIsConst:p,...t,cacheKey:`${e.format};${t.activation};`}},Bf=(e,t,r)=>{let a=rl(r,t),n=r.format==="NHWC";if(r.group!==1){if(!e.adapterInfo.isArchitecture("ampere")&&n&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1){let G=ka(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),q=e.kernelCustomData.wT??e.compute(wt(t[1],Ri),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=q);let re=[t[0],q];t.length===3&&re.push(t[2]),e.compute(Ju(re,a,G),{inputs:re})}else e.compute(Ei(t,a));return}let s=t.length===3,u=t[0].dims[n?1:2],d=t[0].dims[n?2:3],i=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],g=ka(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),y=g[n?1:2],w=g[n?2:3],v=g[n?3:1],$=n&&p===u&&h===d&&r.pads[0]===0&&r.pads[1]===0;if($||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let M=g[0],G,q,re,Y=[];if(n){let Re=e.kernelCustomData.wT??e.compute(wt(t[1],Ri),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Re),$){let U=u*d*i;G=t[0].reshape([1,M,U]),q=Re.reshape([1,U,v]),re=[1,M,v]}else G=t[0].reshape([M,u*d,i]),q=Re.reshape([1,i,v]),re=[M,y*w,v];Y.push(G),Y.push(q)}else G=t[0].reshape([M,i,u*d]),q=t[1].reshape([1,v,i]),re=[M,v,y*w],Y.push(q),Y.push(G);s&&Y.push(t[2]);let ce=re[2],xe=Y[0].dims[Y[0].dims.length-1];ce<8&&xe<8?e.compute(Oi(Y,a,g,re,n),{inputs:Y}):e.compute(Ea(Y,a,g,re,n),{inputs:Y});return}let C=!0,S=e.kernelCustomData.wT??e.compute(wt(t[1],Ri),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=S);let x=[t[0],S];s&&x.push(t[2]);let T=n?y*w:v,E=n?v:y*w,k=p*h*i;e.compute(Qu(x,a,g,T,E,k,s,C),{inputs:x})},Mf=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),d=[1].concat(t.kernelShape),i=rl({...t,pads:n,strides:s,dilations:u,kernelShape:d},a);e.compute(Ei(a,i,p=>r?[p[0],p[2],p[3]]:[]))},Di=(e,t)=>{Df(e.inputs,t),e.inputs[0].dims.length===3?Mf(e,t):Bf(e,e.inputs,t)}});var Uf,nl,al=F(()=>{"use strict";ve();Yt();Te();Zt();Aa();Ti();nn();Uf=(e,t=!1,r,a,n=4)=>{let s=S=>{switch(S){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return ${a}(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${S} is not supported.`)}},u=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,d=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,i=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",p=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",h=e?"row":"col",g=e?"col":"row",y=`
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${h} / outWidth;
      let outCol = ${h} % outWidth;

      let WRow = ${g} / (uniforms.filter_dims[1] * inChannels);
      let WCol = ${g} / inChannels % uniforms.filter_dims[1];
      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(${i}) || fract(xR) > 0.0) {
        return ${a}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {
        return ${a}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${g} % inChannels;
      ${u}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${n}];`,w=e?`
      let col = colIn * ${n};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
        ${y}
      }
      return ${a}(0.0);`:`
      let col = colIn * ${n};
      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
        ${y}
      }
      return ${a}(0.0);`,v=`
      let col = colIn * ${n};
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);
      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];
      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${s(n)}
      }
      return ${a}(0.0);
      `,$=xt(r,a);return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${a} {
    ${e?w:v}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${a} {
    ${e?v:w}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${a}) {
    let col = colIn * ${n};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${d}
      ${Ia(t)}
      ${$}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${n}] = value;
    }
  }`},nl=(e,t,r,a,n,s,u,d)=>{let i=t.format==="NHWC",p=i?e[0].dims[3]:e[0].dims[1],h=r[0],g=i?r[2]:r[3],y=i?r[1]:r[2],w=i?r[3]:r[1],v=i&&p%4===0&&p%3&&w%4===0,$=i?w:g*y,C=i?g*y:w,S=[8,8,1],x=a<=8?[4,1,1]:[4,4,1],T=[Math.ceil($/S[0]/x[0]),Math.ceil(C/S[1]/x[1]),Math.ceil(h/S[2]/x[2])];Ne("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${T}`);let E=v?4:1,k=Math.max(S[0]*E,S[1]),M=v?4:1,G=[t.kernelShape[i?1:2],t.kernelShape[i?2:3]],q=[G[0]+(t.dilations[0]<=1?0:(G[0]-1)*(t.dilations[0]-1)),G[1]+(t.dilations[1]<=1?0:(G[1]-1)*(t.dilations[1]-1))],re=[q[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),q[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],Y=[{type:6,data:a},{type:6,data:n},{type:6,data:s},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:G},{type:6,data:re}];St(t,Y),Y.push(...Q(e[0].dims,e[1].dims));let ce=["rank","rank"];u&&(Y.push(...Q(e[2].dims)),ce.push("rank")),Y.push(...Q(r));let xe=Re=>{let U=B("x",e[0].dataType,e[0].dims.length,M),X=B("w",e[1].dataType,e[1].dims.length,1),V=K("result",e[0].dataType,r.length,M),Ce=[U,X],we="";if(u){let be=B("bias",e[2].dataType,e[2].dims.length,M);Ce.push(be),we+=`
          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${be.type.value} {
            return bias[coords.${i?"w":"y"}${v?"/ 4":""}];
          }`}let he=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:G.length},{name:"pads",type:"i32",length:re.length}];Ct(t,he);let ne=Be(e[0].dataType,1);if(ne!=="f16"&&ne!=="f32")throw new Error(`elemType ${ne} is not supported.`);return`
        ${Ta("uniforms.result_strides")}
        ${Re.registerUniforms(he).declareVariables(...Ce,V)};
        ${we}
        ${Uf(i,u,t,U.type.value,E)}
        ${v?tn(x,S,ne,void 0,!i,k):rn(x,S,ne,void 0,!i,k,!1,void 0,d)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${x};${S};${v}`,inputDependencies:ce},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:Y}),getShaderSource:xe}}});var Nf,Bi,il=F(()=>{"use strict";ve();Yt();Ee();Te();Nf=(e,t,r,a,n,s=!1,u,d,i=!1)=>{let p=i?1:2,h=i?2:3,g=i?3:1,y=s?2:1,w=`
  fn setOutputAtIndex(flatIndex : u32, value : ${s?`vec4<${u}>`:u}) {
    result[flatIndex] = ${s?`vec4<${u}>`:u}(value);
  }`;a&&(w+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${s?`vec4<${u}>`:u} {
      return bias[coords.${i?"w":"y"}${s?"/ 4":""}];
    }`);let v=s?4:1,$=B("W",t[1].dataType,t[1].dims.length,v),C=B("Dy",t[0].dataType,t[0].dims.length,v),S=[C,$];a&&S.push(B("bias",t[2].dataType,[r[g]].length,v));let x=K("result",t[0].dataType,r.length,v),T=`{
        let batch: u32 = ${n?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];
        let r = ${n?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];
        let c = ${n?"global_id.y":"workgroup_id.y"} * ${y};
        let d1: u32 = ${n?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${u}>, ${y}>;
        for (var i = 0; i < ${y}; i++) {
          dotProd[i] = vec4<${u}>(0.0);
        }
        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {
          var dyR = (${u}(dyCorner.x) + ${u}(wR)) / ${u}(uniforms.strides.x);
          let wRPerm = uniforms.filter_dims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${u}(uniforms.Dy_shape[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {
            let dyC = (${u}(dyCorner.y) + ${u}(wC)) / ${u}(uniforms.strides.y);
            let dyC2 = (${u}(dyCorner.y) + 1.0 + ${u}(wC)) / ${u}(uniforms.strides.y);
            let wCPerm = uniforms.filter_dims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${u}(uniforms.Dy_shape[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${u}(uniforms.Dy_shape[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${C.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${u}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${C.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${u}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = uniforms.Dy_shape[${g}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${C.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${u}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${C.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${u}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${y}; i = i + 1) {
          let value = dotProd[i] + ${a?"bias[c+i]":`vec4<${u}>(0.0)`};
          ${x.set("batch","r","c + i","d1","value")};
        }
      }`,E=`
          let outputIndices = ${x.offsetToIndices("global_idx")};
          let batch = ${x.indicesGet("outputIndices",0)};
          let d1 = ${x.indicesGet("outputIndices",g)};
          let r = ${x.indicesGet("outputIndices",p)};
          let c = ${x.indicesGet("outputIndices",h)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / uniforms.output_channels_per_group;
          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${u}(0.0);
          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
            if (wR % uniforms.dilations.x != 0) {
              continue;
            }
            let dyR = (${u}(dyRCorner) + ${u}(wR)) / ${u}(uniforms.strides[0]);
            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
            if (dyR < 0.0 || dyR >= ${u}(uniforms.Dy_shape[${p}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
              if (wC % uniforms.dilations.y != 0) {
                continue;
              }
              let dyC = (${u}(dyCCorner) + ${u}(wC)) / ${u}(uniforms.strides.y);
              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
              if (dyC < 0.0 || dyC >= ${u}(uniforms.Dy_shape[${h}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * uniforms.input_channels_per_group;
              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {
                let xValue = ${i?C.get("batch","idyR","idyC","inputChannel"):C.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${$.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${a?"bias[d1]":`${u}(0.0)`};
          ${x.setByOffset("global_idx","value")};
        `;return`
  ${e.registerUniforms(d).declareVariables(...S,x)}
  ${w}

    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
  ${s?T:E}}`},Bi=(e,t,r)=>{let a=e.length>2,n=t.outputShape,s=D.size(n),u=[Math.ceil(s/64),1,1];Ne("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let d=t.format==="NHWC",i=["rank","rank"],p=[t.strides[0],t.strides[1]],h=[t.kernelShape[d?1:2],t.kernelShape[d?2:3]],g=[t.dilations[0],t.dilations[1]],y=[h[0]+(t.dilations[0]<=1?0:(t.kernelShape[d?1:2]-1)*(t.dilations[0]-1)),h[1]+(t.dilations[1]<=1?0:(t.kernelShape[d?2:3]-1)*(t.dilations[1]-1))],w=[y[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),y[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],v=!1,$=t.group,C=e[1].dims,S=C[0]/$,x=C[1],T=[{type:12,data:s},{type:12,data:p},{type:12,data:h},{type:12,data:g},{type:12,data:y},{type:6,data:w},{type:12,data:S},{type:12,data:x},...Q(e[0].dims,e[1].dims)];a&&(T.push(...Q(e[2].dims)),i.push("rank")),T.push(...Q(n));let E=u[1]===1&&u[2]===1,k=M=>{let G=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:p.length},{name:"filter_dims",type:"u32",length:h.length},{name:"dilations",type:"u32",length:h.length},{name:"effective_filter_dims",type:"u32",length:y.length},{name:"pads",type:"i32",length:w.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],q=Be(e[0].dataType);return`${Nf(M,e,n,a,E,v,q,G,d)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:i},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}],programUniforms:T}),getShaderSource:k}}});var Wf,Vf,Hf,ol,sl,Gf,Lf,jf,Ff,ul,ll=F(()=>{"use strict";al();il();Zt();Ir();Wf=(e,t,r,a,n,s)=>(e-1)*t+r+(a-1)*n+1-s,Vf=(e,t,r,a,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[a]=e-s,r[n]=s)},Hf=(e,t,r,a,n,s,u,d,i,p)=>{let h=e.length-2,g=p.length===0;if(i.length===0)for(let v=0;v<h;++v)i.push(0);let y=e[0],w=t[d?3:1]*n;for(let v=0,$=e.length-h-(d?1:0);v<h;++v,++$){let C=e[$],S=g?C*u[v]:p[v],x=Wf(C,u[v],s[v],t[$],r[v],S);Vf(x,a,s,v,v+h),g&&p.push(u[v]*(C-1)+i[v]+(t[$]-1)*r[v]+1-s[v]-s[v+h])}p.splice(0,0,y),p.splice(d?3:1,0,w)},ol=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((g,y)=>g*y,1)===0){r.length=0;for(let g=2;g<t[1].dims.length;++g)r.push(t[1].dims[g])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),d=t[0].dims,i=e.dilations.slice();if(i.reduce((g,y)=>g+y,0)===0){let g=t[0].dims.length-2;i=new Array(g).fill(1)}let p=e.strides.slice();if(p.reduce((g,y)=>g+y,0)===0){let g=t[0].dims.length-2;p=new Array(g).fill(1)}Hf(d,r,i,e.autoPad,e.group,n,p,a,u,s);let h=Object.assign({},e);return Object.assign(h,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:i,strides:p}),h},sl=e=>{let t=Ca(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,d=e.pads,i=e.strides,p=e.wIsConst(),h=e.outputPadding,g=e.outputShape;return{autoPad:a,format:r,dilations:n,group:s,kernelShape:u,outputPadding:h,outputShape:g,pads:d,strides:i,wIsConst:p,...t,cacheKey:`${e.format};${t.activation};`}},Gf=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((h,g)=>h+g,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((h,g)=>h+g,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((h,g)=>h+g,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((h,g)=>h+g,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Lf=[2,3,1,0],jf=(e,t,r)=>{let a=ol(r,t),n=r.format==="NHWC",s=a.outputShape,u=s[n?3:1],d=t[0].dims[n?3:1];if(a.group!==1||u===1&&d===1){e.compute(Bi(t,a));return}let i=s[n?1:2],p=s[n?2:3],h=t[1].dims[2],g=t[1].dims[3],y=n?i*p:u,w=n?u:i*p,v=h*g*d,$=!0,C=e.kernelCustomData.wT??e.compute(wt(t[1],Lf),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=C);let S=[t[0],C],x=t.length===3;x&&(!n&&t[2].dims.length===1?S.push(t[2].reshape([t[2].dims[0],1,1])):S.push(t[2])),e.compute(nl(S,a,s,y,w,v,x,$),{inputs:S})},Ff=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let i=ol({...t,pads:d,strides:u,dilations:s,kernelShape:n},a);e.compute(Bi(a,i,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},ul=(e,t)=>{Gf(e.inputs,t),e.inputs[0].dims.length===3?Ff(e,t):jf(e,e.inputs,t)}});var Kf,dl,cl,pl=F(()=>{"use strict";ve();Ee();Qe();Te();Kf=(e,t,r,a)=>{let n=D.size(t),s=t.length,u=B("input",e,s),d=K("output",e,s),i=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),p=D.normalizeAxis(i,s),h=g=>{let y=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,w=me("uniforms.input_shape","uniforms.axis",s),v=a.reverse?y+(a.exclusive?" + 1":""):"0",$=a.reverse?w:y+(a.exclusive?"":" + 1");return`
                ${g.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,d)}
                ${g.mainStart()}
                  ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${d.offsetToIndices("global_idx")};
                  var sum = ${d.type.value}(0);
                  let first : i32 = ${v};
                  let last : i32 = ${$};
                  for (var i : i32 = first; i < last; i++) {
                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${u.getByIndices("inputIndices")};
                  }
                  ${d.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:a.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},{type:6,data:p},...Q(t,t)]}),getShaderSource:h}},dl=(e,t)=>{let r=e.inputs[0].dims,a=e.inputs[0].dataType,n=e.inputs[1];e.compute(Kf(a,r,n,t),{inputs:[0]})},cl=e=>{let t=e.exclusive===1,r=e.reverse===1;return Ie({exclusive:t,reverse:r})}});var Mi,Oa,fl,qf,Yf,Ui,Ni,ml,Zf,hl,gl,yl=F(()=>{"use strict";ve();Ee();Qe();Te();Mi="[a-zA-Z]|\\.\\.\\.",Oa="("+Mi+")+",fl="^"+Oa+"$",qf="("+Oa+",)*"+Oa,Yf="^"+qf+"$",Ui=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},Ni=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(Yf)))throw new Error("Invalid LHS term");if(a.split(",").forEach((d,i)=>{let p=t[i].dims.slice();if(!d.match(RegExp(fl)))throw new Error("Invalid LHS term");let h=this.processTerm(d,!0,p,i);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,i])=>i.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(Oa)))throw new Error("Invalid RHS");n.match(RegExp(Mi,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(d);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let s=a.length,u=!1,d=[],i=0;if(!t.match(RegExp(fl))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Mi,"g")),h=new Ui(n);return p?.forEach((g,y)=>{if(g==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let w=s-p.length+1;if(w<0)throw new Error("Ellipsis out of bounds");if(d=a.slice(i,i+w),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let v=0;v<d.length;v++){let $=String.fromCharCode("0".charCodeAt(0)+v);h.addSymbol($,y+v),this.addSymbol($,a[i++],n)}}else h.addSymbol(g,y+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(g,a[i++],n)}),h}},ml=e=>e+"_max",Zf=(e,t,r,a)=>{let s=e.map(h=>h.length).map((h,g)=>B(`input${g}`,t,h)),u=D.size(a),d=K("output",t,a.length),i=[...r.symbolToInfo.keys()].filter(h=>!r.rhs.symbolToIndices.has(h)),p=h=>{let g=[],y="var prod = 1.0;",w="var sum = 0.0;",v="sum += prod;",$=[],C=[],S=[],x=[],T=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((k,M)=>{if(r.rhs.symbolToIndices.has(M)){let G=r.rhs.symbolToIndices.get(M)?.[0];G!==void 0&&r.lhs.forEach((q,re)=>{if(k.inputIndices.includes(re)){let Y=q.symbolToIndices.get(M);if(Y===void 0)throw new Error("Invalid symbol error");Y.forEach(ce=>{g.push(`${s[re].indicesSet(`input${re}Indices`,ce,d.indicesGet("outputIndices",G))}`)})}})}else r.lhs.forEach((G,q)=>{if(k.inputIndices.includes(q)){let re=G.symbolToIndices.get(M);if(re===void 0)throw new Error("Invalid symbol error");re.forEach(Y=>{$.push(`${s[q].indicesSet(`input${q}Indices`,Y,`${M}`)}`)}),x.push(`prod *= ${s[q].getByIndices(`input${q}Indices`)};`)}}),C.push(`for(var ${M}: u32 = 0; ${M} < uniforms.${ml(M)}; ${M}++) {`),S.push("}")});let E=T?[...g,`let sum = ${s.map((k,M)=>k.getByIndices(`input${M}Indices`)).join(" * ")};`]:[...g,w,...C,...$,y,...x,v,...S];return`
            ${h.registerUniforms(i.map(k=>({name:`${ml(k)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...s,d)}

            ${h.mainStart()}
            ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${d.offsetToIndices("global_idx")};
            ${s.map((k,M)=>`var input${M}Indices: ${s[M].type.indices};`).join(`
`)}
            ${E.join(`
`)};
            ${d.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let h=i.filter(y=>r.symbolToInfo.has(y)).map(y=>({type:12,data:r.symbolToInfo.get(y)?.dimValue||0}));h.push({type:12,data:u});let g=e.map((y,w)=>[...Q(y)]).reduce((y,w)=>y.concat(w),h);return g.push(...Q(a)),{outputs:[{dims:a,dataType:t}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:g}},getShaderSource:p}},hl=(e,t)=>{let r=new Ni(e.inputs,t.equation),a=r.outputDims,n=e.inputs.map((s,u)=>s.dims);e.compute(Zf(n,e.inputs[0].dataType,r,a))},gl=e=>{let t=e.equation.replace(/\s+/g,"");return Ie({equation:t})}});var Qf,bl,Xf,Jf,vl,wl=F(()=>{"use strict";ve();Ee();Te();Qf=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},bl=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},Xf=(e,t)=>e.length>t.length?bl(e,t):bl(t,e),Jf=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=Xf(t,r),n=e[0].dataType,s=n===9?4:1,u=Math.ceil(D.size(a)/s),d=p=>{let h=B("input",n,t.length,s),g=K("output",n,a.length,s),y;if(n===9){let w=(v,$,C="")=>`
          let outputIndices${$} = ${g.offsetToIndices(`outputOffset + ${$}u`)};
          let offset${$} = ${h.broadcastedIndicesToOffset(`outputIndices${$}`,g)};
          let index${$} = offset${$} / 4u;
          let component${$} = offset${$} % 4u;
          ${v}[${$}] = ${C}(${h.getByOffset(`index${$}`)}[component${$}]);
        `;y=`
        let outputOffset = global_idx * ${s};
        var data = vec4<u32>(0);
        ${w("data",0,"u32")}
        ${w("data",1,"u32")}
        ${w("data",2,"u32")}
        ${w("data",3,"u32")}
        ${g.setByOffset("global_idx","data")}
      }`}else y=`
        let outputIndices = ${g.offsetToIndices("global_idx")};
        let inputOffset = ${h.broadcastedIndicesToOffset("outputIndices",g)};
        ${g.setByOffset("global_idx",h.getByOffset("inputOffset"))}
      }`;return`
    ${p.registerUniform("vec_size","u32").declareVariables(h,g)}
    ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${y}`},i=[{type:12,data:u},...Q(t,a)];return{name:"Expand",shaderCache:{hint:`${a.length}`,inputDependencies:["rank"]},getShaderSource:d,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:i})}},vl=e=>{Qf(e.inputs),e.compute(Jf(e.inputs),{inputs:[0]})}});var em,_l,$l=F(()=>{"use strict";ve();Ee();Te();Sa();em=e=>{let t=e[0].dataType,r=D.size(e[0].dims),a=D.size(e[1].dims),n=a%4===0,s=u=>{let d=B("x",t,[1],4),i=B("bias",t,[1],4),p=K("y",t,[1],4),h=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],g=w=>`
      let bias${w}_offset: u32 = (global_idx * 4 + ${w}) % uniforms.bias_size;
      let bias${w} = ${i.getByOffset(`bias${w}_offset / 4`)}[bias${w}_offset % 4];`,y=n?`
      let bias = ${i.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${g(0)}${g(1)}${g(2)}${g(3)}
      let bias = ${d.type.value}(bias0, bias1, bias2, bias3);`;return`${u.registerUniforms(h).declareVariables(d,i,p)}

    ${Ii(pt(t))}

    ${u.mainStart(dr)}
      ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${d.getByOffset("global_idx")};
      ${y}
      let x_in = x + bias;
      ${p.setByOffset("global_idx",Ai("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${n}`,inputDependencies:["type","type"]},getShaderSource:s,getRunData:u=>({outputs:[{dims:u[0].dims,dataType:u[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:a}],dispatchGroup:{x:Math.ceil(r/dr/4)}})}},_l=e=>{e.inputs.length<2||D.size(e.inputs[1].dims)===0?ku(e):e.compute(em(e.inputs))}});var tm,rm,xl,Sl,Cl=F(()=>{"use strict";ve();Ee();Qe();Te();tm=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},rm=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,s=D.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...a);let d=r[s],i=e[0].dataType===9?4:1,p=Math.ceil(D.size(u)/i),h=[{type:12,data:p},{type:6,data:d},{type:12,data:s},...Q(e[0].dims,e[1].dims,u)],g=y=>{let w=B("data",e[0].dataType,e[0].dims.length,i),v=B("inputIndices",e[1].dataType,e[1].dims.length),$=K("output",e[0].dataType,u.length,i),C=x=>{let T=a.length,E=`var indicesIndices${x}  = ${v.type.indices}(0);`;for(let k=0;k<T;k++)E+=`${T>1?`indicesIndices${x}[${k}]`:`indicesIndices${x}`} = ${u.length>1?`outputIndices${x}[uniforms.axis + ${k}]`:`outputIndices${x}`};`;E+=`
          var idx${x} = ${v.getByIndices(`indicesIndices${x}`)};
          if (idx${x} < 0) {
            idx${x} = idx${x} + uniforms.axisDimLimit;
          }
          var dataIndices${x} : ${w.type.indices};
        `;for(let k=0,M=0;k<n;k++)k===s?(E+=`${n>1?`dataIndices${x}[${k}]`:`dataIndices${x}`} = u32(idx${x});`,M+=T):(E+=`${n>1?`dataIndices${x}[${k}]`:`dataIndices${x}`} = ${u.length>1?`outputIndices${x}[${M}]`:`outputIndices${x}`};`,M++);return E},S;if(e[0].dataType===9){let x=(T,E,k="")=>`
          let outputIndices${E} = ${$.offsetToIndices(`outputOffset + ${E}u`)};
          ${C(E)};
          let offset${E} = ${w.indicesToOffset(`dataIndices${E}`)};
          let index${E} = offset${E} / 4u;
          let component${E} = offset${E} % 4u;
          ${T}[${E}] = ${k}(${w.getByOffset(`index${E}`)}[component${E}]);
        `;S=`
        let outputOffset = global_idx * ${i};
        var value = vec4<u32>(0);
        ${x("value",0,"u32")}
        ${x("value",1,"u32")}
        ${x("value",2,"u32")}
        ${x("value",3,"u32")}
        ${$.setByOffset("global_idx","value")}
      `}else S=`
      let outputIndices = ${$.offsetToIndices("global_idx")};
      ${C("")};
      let value = ${w.getByIndices("dataIndices")};
      ${$.setByOffset("global_idx","value")};
      `;return`
      ${y.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(w,v,$)}
      ${y.mainStart()}
        ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${S}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:g}},xl=e=>Ie({axis:e.axis}),Sl=(e,t)=>{let r=e.inputs;tm(r),e.compute(rm(e.inputs,t))}});var nm,am,Il,Al,Tl=F(()=>{"use strict";ve();Ee();Qe();Te();nm=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},am=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,s=e[1].dims,u=e[1].dataType,d=D.normalizeAxis(t.axis,n),i=r[d],p=s.slice(0),h=D.size(p),g=B("input",a,n),y=B("indicesInput",u,s.length),w=K("output",a,p.length),v=[{type:12,data:h},{type:6,data:i},{type:12,data:d}];return v.push(...Q(r,s,p)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:v}),getShaderSource:S=>`
      ${S.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(g,y,w)}
      ${S.mainStart()}
      ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${w.offsetToIndices("global_idx")};

      var idx = ${y.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${g.type.indices}(outputIndices);
      ${g.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${g.getByIndices("inputIndices")};

      ${w.setByOffset("global_idx","value")};
  }`}},Il=e=>Ie({axis:e.axis}),Al=(e,t)=>{let r=e.inputs;nm(r),e.compute(am(e.inputs,t))}});var im,om,El,kl,Ol=F(()=>{"use strict";ve();Ee();Te();im=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},om=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,s,u]=ha.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),d=[n,s];if(!d)throw new Error("Can't use gemm on the given tensors");let i=D.size(d),p=[{type:12,data:i},{type:12,data:n},{type:12,data:s},{type:12,data:u},{type:1,data:t.alpha},{type:1,data:t.beta}],h=["type","type"];e.length===3&&(p.push(...Q(e[2].dims)),h.push("rank")),p.push(...Q(d));let g=y=>{let w="";t.transA&&t.transB?w="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?w="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?w="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(w="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let v=t.alpha===1?"":"value *= uniforms.alpha;",$=B("a",e[0].dataType,e[0].dims),C=B("b",e[1].dataType,e[1].dims),S=$.type.value,x=null,T=[$,C];e.length===3&&(x=B("c",e[2].dataType,e[2].dims.length),T.push(x));let E=K("output",e[0].dataType,d.length);T.push(E);let k=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${y.registerUniforms(k).declareVariables(...T)}

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${S}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${w}
    }

    ${v}
    ${(()=>x!=null?`let cOffset = ${x.broadcastedIndicesToOffset("vec2(m, n)",E)}; value += ${S}(uniforms.beta) * ${x.getByOffset("cOffset")};`:"")()}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p}),getShaderSource:g}},El=e=>{let t=e.transA,r=e.transB,a=e.alpha,n=e.beta;return{transA:t,transB:r,alpha:a,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},kl=(e,t)=>{im(e.inputs),e.compute(om(e.inputs,t))}});var sm,um,lm,Pl,Rl=F(()=>{"use strict";ve();Ee();Te();sm=(e,t)=>{let r=e[0].dims,a=r,n=2,s=D.sizeToDimension(r,n),u=D.sizeFromDimension(r,n),d=We(u),i=u/d,p=[r[0],r[1],i],h=["rank","type","type"],g=[{type:12,data:u},{type:12,data:i}];g.push(...Q(p,p));let y=w=>{let v=B("x",e[0].dataType,p.length,d),$=B("scale",e[1].dataType,e[1].dims),C=B("bias",e[2].dataType,e[2].dims),S=K("output",e[0].dataType,p.length,d),x=[v,$,C,S],T=v.type.value,E=d===1?"f32":`vec${d}<f32>`,k=64,M=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${E}, ${k}>;
  const workgroupSize = ${k}u;
  ${w.registerUniforms(M).declareVariables(...x)}
  ${w.mainStart(k)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${E}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${E}(${v.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${ft("workgroupShared[0]",d)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${E}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${E}(${v.get("batch","channel","h")}) - ${E}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${ft("workgroupShared[0]",d)};
    }
    workgroupBarrier();

    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));
    let channelScale = invStdDev * f32(${$.getByOffset("channel")});
    let channelShift = f32(${C.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${v.get("batch","channel","h")} * ${T}(${E}(channelScale)) + ${T}(${E}(channelShift));
      ${S.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${d}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:s},programUniforms:g}),getShaderSource:y}},um=(e,t,r,a,n,s,u,d)=>{let i=We(u),p=64,h=i===1?"vec2f":`mat2x${i}f`,g=i===1?"f32":`vec${i}f`,y=(M,G)=>`${h}(${M}, ${G})`,w=n*u/i,v=Math.ceil(s/p),$=["type"],C=[{type:12,data:v},{type:12,data:s},{type:12,data:Math.floor(u/i)},{type:12,data:Math.floor(s*u/i)}],S=M=>{let G=B("input",t.dataType,t.dims,i);return`
  ${M.declareVariables(G)}
  @group(0) @binding(1) var<storage, read_write> output : array<${h}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${M.mainStart(p)}
    let currentImageNumber = global_idx / ${p} / uniforms.C;
    let currentChannelNumber = (global_idx / ${p}) % uniforms.C;
    let wgOffset = local_id.x * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${at("f32",i)};
    var squaredSum = ${at("f32",i)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${g}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${y("sum","squaredSum")};
  }`},x=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${i}`,inputDependencies:$},getRunData:()=>({outputs:[{dims:[n,u,p,2],dataType:1}],dispatchGroup:{x:n*u/i},programUniforms:C}),getShaderSource:S},{inputs:[t],outputs:[-1]})[0],T=[{type:12,data:w},{type:12,data:s},{type:12,data:Math.floor(u/i)},{type:12,data:Math.floor(p*u/i)}],E=["type","type","type"],k=M=>{let G=B("scale",r.dataType,r.dims,i),q=B("bias",a.dataType,a.dims,i);return`
  @group(0) @binding(0) var<storage, read> input : array<${h}>;
  @group(0) @binding(1) var<storage, read> scale : array<${G.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${q.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${h}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${M.mainStart()}
    ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${at("f32",i)};
    var squaredSum = ${at("f32",i)};
    for (var i: u32 = 0; i < min(${p}, uniforms.H); i++) {
        let value = input[offset + i + currentChannelNumber * ${p}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${d}));
    let channelScale = invStdDev * ${g}(scale[currentChannelNumber]);
    let channelShift = ${g}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${y("channelScale","channelShift")};
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${i};${d}`,inputDependencies:E},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:T}),getShaderSource:k},{inputs:[x,r,a],outputs:[-1]})[0]},lm=(e,t,r)=>{let a=t[0].dims,n=a,s=a[0],u=a[a.length-1],d=D.sizeFromDimension(a,1)/u,i=We(u),p=D.size(n)/i,h=[{type:12,data:d},{type:12,data:Math.floor(u/i)}],g=["type","type"],y=um(e,t[0],t[1],t[2],s,d,u,r.epsilon),w=v=>{let $=Be(t[0].dataType),C=i===1?"vec2f":`mat2x${i}f`,S=i===1?$:`vec${i}<${$}>`,x=B("input",t[0].dataType,t[0].dims,i),T=K("output",t[0].dataType,n,i);return`
  @group(0) @binding(0) var<storage, read> input : array<${x.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${C}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${T.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${v.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${S}(scale[0]), ${S}(scale[1]));
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${i}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:w},{inputs:[t[0],y]})},Pl=(e,t)=>{t.format==="NHWC"?lm(e,e.inputs,t):e.compute(sm(e.inputs,t))}});var dm,cm,zl,Dl=F(()=>{"use strict";ve();Ee();Te();dm=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},cm=(e,t,r)=>{let a=e[0].dims,n=e[1],s=e[2],u=a,d=D.normalizeAxis(t.axis,a.length),i=D.sizeToDimension(a,d),p=D.sizeFromDimension(a,d),h=D.size(n.dims),g=s?D.size(s.dims):0;if(h!==p||s&&g!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${h} and bias size of ${g}`);let y=[];for(let E=0;E<a.length;++E)E<d?y.push(a[E]):y.push(1);let w=We(p),v=["type","type"],$=[{type:12,data:i},{type:1,data:p},{type:12,data:Math.floor(p/w)},{type:1,data:t.epsilon}];s&&v.push("type");let C=r>1,S=r>2,x=E=>{let k=Be(e[0].dataType),M=[B("x",e[0].dataType,e[0].dims,w),B("scale",n.dataType,n.dims,w)];s&&M.push(B("bias",s.dataType,s.dims,w)),M.push(K("output",e[0].dataType,u,w)),C&&M.push(K("mean_data_output",1,y)),S&&M.push(K("inv_std_output",1,y));let G=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${E.registerUniforms(G).declareVariables(...M)}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${at("f32",w)};
    var mean_square_vector = ${at("f32",w)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${$t(k,w,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${ft("mean_vector",w)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${ft("mean_square_vector",w)} / uniforms.norm_size - mean * mean + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${$t(k,w,"x[j + offset]")};
      let f32scale = ${$t(k,w,"scale[j]")};
      output[j + offset] = ${M[0].type.value}((f32input - mean) * inv_std_dev * f32scale
        ${s?`+ ${$t(k,w,"bias[j]")}`:""}
      );
    }

    ${C?"mean_data_output[global_idx] = mean":""};
    ${S?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},T=[{dims:u,dataType:e[0].dataType}];return C&&T.push({dims:y,dataType:1}),S&&T.push({dims:y,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${w};${r}`,inputDependencies:v},getRunData:()=>({outputs:T,dispatchGroup:{x:Math.ceil(i/64)},programUniforms:$}),getShaderSource:x}},zl=(e,t)=>{dm(e.inputs),e.compute(cm(e.inputs,t,e.outputCount))}});var pm,fm,Bl,Ml,Ul=F(()=>{"use strict";ve();Ee();Qe();Te();pm=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],a=r.dims.length;if(r.dims[a-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let n=Math.floor((t.k+t.blockSize-1)/t.blockSize),s=t.blockSize/8*t.bits,u=e[1];if(!D.areEqual(u.dims,[t.n,n,s]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let i=e[2].dims;if(D.size(i)!==t.n*n)throw new Error("scales input size error.");if(e.length===4){let h=e[3].dims,g=t.bits>4?t.n*n:t.n*Math.floor((n+1)/2);if(D.size(h)!==g)throw new Error("zeroPoints input size error.")}},fm=(e,t,r,a)=>{let n=e[0].dims,s=n.length,u=Math.floor((t.k+t.blockSize-1)/t.blockSize),d=n[s-2],i=t.k,p=t.n,h=n.slice(0,s-2),g=D.size(h),w=t.blockSize/8*t.bits/4,v=e[0].dataType,$=We(d),C=We(t.k),S=We(w),x=ur(v),T=d*u,E=We(p,Math.ceil(a/T/x)),k=E*T*x>a&&T*x<=a?1:E,M=u<=r[0]&&T*k*x<=a,G=h.concat([d,p]),q=D.size(G)/k/$,re=M?[{type:12,data:t.blockSize}]:[{type:12,data:q},{type:12,data:t.k},{type:12,data:t.n},{type:12,data:t.accuracyLevel},{type:12,data:t.bits},{type:12,data:t.blockSize}],Y=[g,d,i/C],ce=D.convertShape(e[1].dims).slice();ce.splice(-1,1,w/S),re.push(...Q(Y)),re.push(...Q(ce)),re.push(...Q(e[2].dims)),e.length===4&&re.push(...Q(D.convertShape(e[3].dims)));let xe=[g,d,p/k];re.push(...Q(xe));let Re=U=>{let X=Y.length,V=B("a",e[0].dataType,X,C),Ce=B("b",12,ce.length,S),we=B("scales",e[2].dataType,e[2].dims.length),he=[V,Ce,we],ne=e.length===4?B("zero_points",12,e[3].dims.length):void 0;ne&&he.push(ne);let be=xe.length,fe=K("output",e[0].dataType,be,k),qe=M?[{name:"block_size",type:"u32"}]:[{name:"output_size",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"accuracy_level",type:"u32"},{name:"bits",type:"u32"},{name:"block_size",type:"u32"}],H=Be(e[0].dataType),ee=(()=>{switch(C){case 1:return`array<${H}, 8>`;case 2:return`mat4x2<${H}>`;case 4:return`mat2x4<${H}>`;default:throw new Error(`${C}-component is not supported.`)}})(),_e=`
        fn dequantize(quantized: ${ee}, zero_point: ${H}, scale: ${H}) -> ${ee} {
          ${(()=>C===1?`var dequantized = ${ee}(${Array.from({length:8},(Je,Le)=>`(quantized[${Le}] - zero_point) * scale`).join(", ")});
              return dequantized;`:`var zero_points: ${ee} = ${ee}(${Array(8).fill("zero_point").join(",")});
              return (quantized - zero_points) * scale;`)()}
        }`,Xe=`
        fn ortUnpack8x4snorm(value: u32) -> ${ee} {
          var quantized: ${ee};
          var offset: u32 = 0;
          let count: u32 = 4;
          for (var i: u32 = 0; i < 8u; i++) {
            var result = ${H}(extractBits(value, offset, count));
            ${(()=>{switch(C){case 1:return"quantized[i] = result;";case 2:return"quantized[i / 2][i % 2] = result;";case 4:return"quantized[i / 4][i % 4] = result;";default:throw new Error(`${C}-component is not supported.`)}})()}
            offset += count;
          }
          return quantized;
        }`,Ye=ne?`
          zero_point_offset += 4;
          if (zero_point_offset == 32) {
            zero_point_offset = 0;
            zero_point_index++;
            zero_point_word = ${ne.getByOffset("zero_point_index")};
          }`:"";return M?`
        var<workgroup> workgroup_shared: array<${fe.type.value}, ${d*u}>;
        ${U.registerUniforms(qe).declareVariables(...he,fe)}
        ${U.mainStart([u,1,1])}
          var a_indices: ${V.type.indices};
          var block = local_id.x;
          var col = workgroup_id.y;
          var batch = workgroup_id.z;
          ${V.indicesSet("a_indices","0","batch")};
          // Two zero points are packed into one byte when uniforms.bits is 4.
          for (var c: u32 = 0; c < ${k}; c++) {
            let col_times_components_plus_c = col * ${k} + c;
              ${ne?`
            var zero_point_bytes_per_col: u32 = (${u} + 1) / 2;
            var zero_point_byte_count: u32 = col_times_components_plus_c * zero_point_bytes_per_col + (block >> 0x1u);
            var zero_point_word_index: u32 = zero_point_byte_count >> 0x2u;
            var zero_point_byte_offset: u32 = zero_point_byte_count & 0x3u;
            var zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32 = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            var zero_point_word: u32 = ${ne.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;`:""}
            var b_indices: ${Ce.type.indices};
            ${Ce.indicesSet("b_indices","0","col_times_components_plus_c")};
            // The scale and zero points are computed per block.
            var scales_index = col_times_components_plus_c * ${u} + block;
            let scale = ${we.getByOffset("scales_index")};
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${H}(${ne?"(zero_point_word) & 0xFu":8});
            ${Ce.indicesSet("b_indices","1","block")};
            var word_offset: u32 = block * ${t.blockSize/C};
            var workgroup_shared_offset: u32 = block * ${d};
            for (var word: u32 = 0; word < ${w}; word += ${S}) {
              ${Ce.indicesSet("b_indices","2","word")};
              let b_data = ${Ce.getByIndices("b_indices")};
              for (var i: u32 = 0; i < ${S}; i++) {
                let b_value: u32 = ${S===1?"b_data":"b_data[word + i]"};
                let b_mask: u32 = 0x0F0F0F0Fu;
                let b_value_lower: vec4<u32> = unpack4xU8(b_value & b_mask);
                let b_value_upper: vec4<u32> = unpack4xU8((b_value >> 4) & b_mask);
                let b_quantized_values = ${ee}(${Array.from({length:4},(Je,Le)=>`${H}(b_value_lower[${Le}]), ${H}(b_value_upper[${Le}])`).join(", ")});
                let b_dequantized_values = ${(()=>C===1?`${ee}(${Array.from({length:8},(Je,Le)=>`(b_quantized_values[${Le}] - zero_point) * scale`).join(", ")});`:`(b_quantized_values - ${ee}(${Array(8).fill("zero_point").join(",")})) * scale;`)()};
                // Number of B elements per 32-bit word is 32/bits = 32/4 = 8
                for (var m: u32 = 0; m < ${d}u; m++) {
                  ${V.indicesSet("a_indices",X-2,"m")};
                  ${V.indicesSet("a_indices",X-1,"word_offset")};
                  var input_offset = ${V.indicesToOffset("a_indices")};
                  var a_data: ${ee};
                  for (var j: u32 = 0; j < ${8/C}; j++) {
                    a_data[j] = ${V.getByOffset("input_offset")};
                    input_offset++;
                  }
                  workgroup_shared[workgroup_shared_offset + m]${k>1?"[c]":""} += ${Array.from({length:8/C},(Je,Le)=>`${C===1?`a_data[${Le}] * b_dequantized_values[${Le}]`:`dot(a_data[${Le}], b_dequantized_values[${Le}])`}`).join(" + ")};
                }
                word_offset += ${8/C};
              }
            }
          }
          workgroupBarrier();
          if (local_id.x == 0u) {
            var output_indices: ${fe.type.indices};
            ${fe.indicesSet("output_indices","0","batch")};
            ${fe.indicesSet("output_indices",be-1,"col")};
            ${fe.indicesSet("output_indices",be-2,"0")};
            var output_offset = ${fe.indicesToOffset("output_indices")};
            for (var m: u32 = 0u; m < ${d}u; m++) {
              var output_value: ${fe.type.value} = ${fe.type.value}(0);
              var workgroup_shared_offset: u32 = m;
              for (var b: u32 = 0u; b < ${u}u; b++) {
                output_value += workgroup_shared[workgroup_shared_offset];
                workgroup_shared_offset += ${d};
              }
              ${fe.setByOffset("output_offset","output_value")};
              output_offset += ${p/k};
            }
          }
        }`:`
        ${_e};
        ${Xe};
        ${U.registerUniforms(qe).declareVariables(...he,fe)}
        ${U.mainStart()}
          ${U.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var output_values: array<${fe.type.value}, ${$}>;
          var output_indices = ${fe.offsetToIndices("global_idx")};
          var n = ${fe.indicesGet("output_indices",be-1)};
          var m = ${fe.indicesGet("output_indices",be-2)};
          var a_indices: ${V.type.indices} = output_indices;
          // Two zero points are packed into one byte because uniforms.bits <= 4.
          // zero_point_offset is either 0 or 4. It is bit offset within one byte.
          // TODO support zero_point_offset for bits > 4
          ${ne?`
          var zero_point_index: u32 = n * ${k} * ((${u} + 1) / 2) / 4;
          var zero_point_word: u32 = ${ne.getByOffset("zero_point_index")};
          var zero_point_offset: u32 = 0;`:""}
          var scale_index = n * ${u*k};
          var b_indices: ${Ce.type.indices};
          for (var c: u32 = 0; c < ${k}; c++) {
            ${Ce.indicesSet("b_indices","0",`n * ${k} + c`)};
            var block_offset: u32 = 0;
            for (var block: u32 = 0; block < ${u}; block++) {
              // The scale and zero points are computed per block.
              let scale = ${we.getByOffset("scale_index")};
              // The default zero point is 8 for unsigned 4-bit quantization.
              let zero_point = ${H}(${ne?"extractBits(zero_point_word, zero_point_offset, 4)":8});
              ${Ce.indicesSet("b_indices","1","block")};
              var word_offset: u32 = block_offset;
              for (var word: u32 = 0; word < ${w}; word += ${S}) {
                ${Ce.indicesSet("b_indices","2","word")};
                let b_data = ${Ce.getByIndices("b_indices")};
                for (var i: u32 = 0; i < ${S}; i++) {
                  let b_value = ${S===1?"b_data":"b_data[word + i]"};
                  let b_quantized_values: ${ee} = ortUnpack8x4snorm(b_value);
                  let b_dequantized_values = dequantize(b_quantized_values, zero_point, scale);
                  // Number of B elements per 32-bit word is 32/bits = 32/4 = 8
                  var offset: u32 = word_offset;
                  for (var j: u32 = 0; j < 8/${C}; j++) {
                    ${V.indicesSet("a_indices",X-1,`offset/${C}`)};
                    for (var k: u32 = 0; k < ${$}u; k++) {
                      ${V.indicesSet("a_indices",X-2,`m * ${$} + k`)};
                      let a_data = ${V.getByIndices("a_indices")};
                      output_values[k]${k>1?"[c]":""} += ${C===1?"a_data * b_dequantized_values[j]":"dot(a_data, b_dequantized_values[j])"};
                    }
                    offset += ${C};
                  }
                  word_offset += 8;
                }
              }
              scale_index++;
              ${Ye}
              block_offset += uniforms.block_size;
            }
            // Drop the trailing 4 bits if the zero_poit_offset is not a byte boundary to align with the next byte.
            ${ne?`if (zero_point_offset % 8 > 0) {
                ${Ye}
              }`:""}
            }
            for (var k: u32 = 0u; k < ${$}u; k++) {
              ${fe.indicesSet("output_indices",be-2,`${$+" * m + k"}`)};
              ${fe.setByIndices("output_indices","output_values[k]")}
            }
        }`};return{name:M?"BlockwiseMatMulNBits":"MatMulNBits",shaderCache:{hint:M?`${t.cacheKey};${d};${v};${e.length}`:`${t.cacheKey};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:G,dataType:v}],name:M?"BlockwiseMatMulNBits":"MatMulNBits",dispatchGroup:M?{x:1,y:Math.ceil(p/k),z:g}:{x:Math.ceil(q/64)},programUniforms:re}),getShaderSource:Re}},Bl=(e,t)=>{pm(e.inputs,t);let r=e.getMaxComputeWorkgroupSizes(),a=e.getMaxComputeWorkgroupStoragesize();e.compute(fm(e.inputs,t,r,a))},Ml=e=>Ie(e)});var mm,Wl,Nl,hm,Wi,Vl,Hl=F(()=>{"use strict";ve();Ee();Qe();fa();Ci();Te();Ir();mm=(e,t)=>{let r=e[0],a=e[1],n=e[2],s=e[3],u=e[4],d=e[5],i=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,g=r.dims[0],y=r.dims[1],w=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],v=y,$=0,C=0,S=Math.floor(w/t.numHeads);if(i&&p){if(i.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(p.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');$=i.dims[2],C=i.dims[2]}else if(i||p)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let x;if(a){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(a.dims.length<3||a.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(a.dims.length===3){if(a.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');x=2,v=a.dims[1]}else if(a.dims.length===5){if(a.dims[2]!==t.numHeads||a.dims[3]!==2||a.dims[4]!==S)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');x=5,v=a.dims[1]}else{if(a.dims[1]!==t.numHeads||a.dims[3]!==S)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');x=0,v=a.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');x=3}if(s){if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let T=0;if(u){T=8;let q=u.dims;throw q.length===1?q[0]===g?T=1:q[0]===3*g+2&&(T=3):q.length===2&&q[0]===g&&q[1]===v&&(T=5),T===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let E=!1,k=w;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(v!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');k=n.dims[2]}else{if(v!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');k=n.dims[1]*n.dims[3],E=!0}}let M=$+v,G=!1;if(u)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(i)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:g,sequenceLength:y,pastSequenceLength:$,kvSequenceLength:v,totalSequenceLength:M,maxSequenceLength:C,inputHiddenSize:0,hiddenSize:w,vHiddenSize:k,headSize:S,vHeadSize:Math.floor(k/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:T,scale:t.scale,broadcastResPosBias:G,passPastInKv:E,qkvFormat:x}},Wl=e=>Ie({...e}),Nl=Ie({perm:[0,2,1,3]}),hm=(e,t,r,a,n,s,u)=>{let d=[a,n,s],i=D.size(d),p=[{type:12,data:i},{type:12,data:u},{type:12,data:s}],h=g=>{let y=K("qkv_with_bias",t.dataType,d),w=B("qkv",t.dataType,d),v=B("bias",r.dataType,d),$=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${g.registerUniforms($).declareVariables(w,v,y)}
  ${g.mainStart()}
    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},Wi=(e,t,r,a,n,s,u,d)=>{let i=s;if(u){if(a===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return i=hm(e,s,u,t,a,r*n,d),i=i.reshape([t,a,r,n]),e.compute(wt(i,Nl.perm),{inputs:[i],outputs:[-1]})[0]}else return s.dims.length===3&&(i=s.reshape([t,a,r,n])),e.compute(wt(i,Nl.perm),{inputs:[i],outputs:[-1]})[0]},Vl=(e,t)=>{let r=mm(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let a=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Wi(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(a)return _a(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=Wi(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=Wi(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);_a(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var gm,ym,bm,vm,wm,_m,$m,xm,Gl,Ll=F(()=>{"use strict";ve();Ee();Te();gm=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},ym=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
            k = i32(${e.indicesGet("indices",n)}) - ${me("uniforms.pads",n,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${me("uniforms.x_shape",n,t)})) {
              break;
            }
            offset += k * i32(${me("uniforms.x_strides",n,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${a}
            value = x[offset];
          }
      `},bm=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${me("uniforms.pads",n,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${me("uniforms.x_shape",n,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${me("uniforms.x_shape",n,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${me("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},vm=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${me("uniforms.pads",n,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${me("uniforms.x_shape",n,t)})) {
                  k = i32(${me("uniforms.x_shape",n,t)}) - 1;
                }
                offset += k * i32(${me("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},wm=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${me("uniforms.pads",n,r)};
                if (k < 0)  {
                  k += i32(${me("uniforms.x_shape",n,t)}]);
                }
                if (k >= i32(${me("uniforms.x_shape",n,t)})) {
                  k -= i32(${me("uniforms.x_shape",n,t)});
                }
                offset += k * i32(${me("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},_m=(e,t,r)=>{switch(r.mode){case 0:return ym(e,t,r.pads.length);case 1:return bm(e,t,r.pads.length);case 2:return vm(e,t,r.pads.length);case 3:return wm(e,t,r.pads.length);default:throw new Error("Invalid mode")}},$m=(e,t)=>{let r=D.padShape(e[0].dims.slice(),t.pads),a=e[0].dims,n=D.size(r),s=[{type:12,data:n},{type:6,data:t.pads}];t.mode===0&&s.push({type:e[0].dataType,data:t.value}),s.push(...Q(e[0].dims,r));let u=["rank"],d=i=>{let p=K("output",e[0].dataType,r.length),h=B("x",e[0].dataType,a.length),g=h.type.value,y=_m(p,a.length,t),w=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&w.push({name:"constant_value",type:g}),`
            ${i.registerUniforms(w).declareVariables(h,p)}
            ${i.mainStart()}
            ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${p.offsetToIndices("global_idx")};

            var value = ${g}(0);
            ${y}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(D.size(r)/64)},programUniforms:s}),getShaderSource:d}},xm=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let i=0;i<d.length;i++)s[Number(d[i])]=Number(r[i]),s[Number(d[i])+n]=Number(r[i+d.length])}else r.forEach((d,i)=>s[Number(i)]=Number(d));let u=[];return s.forEach(d=>u.push(d)),{mode:t.mode,value:a,pads:u}}else return t},Gl=(e,t)=>{gm(e.inputs);let r=xm(e.inputs,t);e.compute($m(e.inputs,r),{inputs:[0]})}});var Pa,jl,Fl,Kl,ql,Sm,Cm,Yl,Zl,Ql,Xl,Jl,ed,td,rd,nd,ad,id,od,sd=F(()=>{"use strict";vt();ve();Ee();Te();Pa=e=>{if(Pe.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},jl=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),d=t.strides.slice(),i=s?t.dilations.slice():[],p=t.pads.slice();lr.adjustPoolAttributes(r,n,u,d,i,p);let h=lr.computePoolOutputShape(r,n,d,i,u,p,t.autoPad),g=Object.assign({},t);s?Object.assign(g,{kernelShape:u,strides:d,pads:p,dilations:i,cacheKey:t.cacheKey}):Object.assign(g,{kernelShape:u,strides:d,pads:p,cacheKey:t.cacheKey});let y=h.slice();return y.push(y.splice(1,1)[0]),[g,a?y:h]},Fl=(e,t)=>{let r=t.format==="NHWC",a=D.size(e),n=D.size(t.kernelShape),s=[{type:12,data:a},{type:12,data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],i=t.strides[t.strides.length-1],p=t.pads[t.pads.length/2-1],h=t.pads[t.pads.length-1],g=!!(p+h);s.push({type:12,data:d},{type:12,data:i},{type:12,data:p},{type:12,data:h}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let y=!1;if(t.kernelShape.length===2){let w=t.kernelShape[t.kernelShape.length-2],v=t.strides[t.strides.length-2],$=t.pads[t.pads.length/2-2],C=t.pads[t.pads.length-2];y=!!($+C),s.push({type:12,data:w},{type:12,data:v},{type:12,data:$},{type:12,data:C}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,u,!0,g,y]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=D.computeStrides(t.kernelShape);s.push({type:12,data:d},{type:12,data:t.pads},{type:12,data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let i=t.pads.reduce((p,h)=>p+h);return[s,u,!!i,!1,!1]}},Kl=(e,t,r,a,n,s,u,d,i,p,h,g)=>{let y=n.format==="NHWC",w=t.type.value,v=K("output",t.type.tensor,a);if(n.kernelShape.length<=2){let $="",C="",S="",x=r-(y?2:1);if(h?$=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${x}] < 0 || xIndices[${x}]
                      >= uniforms.x_shape[${x}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`:$=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`,n.kernelShape.length===2){let E=r-(y?3:2);g?C=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:C=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                `,S=`
              }
            `}return`
            ${e.registerUniforms(i).declareVariables(t,v)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${v.offsetToIndices("global_idx")};
              var xIndices = ${v.offsetToIndices("global_idx")};

              var value = ${w}(${d});
              var pad = 0;
              ${C}
              ${$}
              ${S}
              ${u}

              output[global_idx] = value;
            }`}else{if(y)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let $=n.kernelShape.length,C=n.pads.length,S="";return p?S=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${s}
              }`:S=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${s}
            `,`
            ${e.registerUniforms(i).declareVariables(t,v)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${v.offsetToIndices("global_idx")};
              var xIndices = ${v.offsetToIndices("global_idx")};

              var offsets: array<u32, ${$}>;

              var value = ${w}(${d});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${$-1}u; j++) {
                  offsets[j] = offset / ${me("uniforms.kernelStrides","j",$)};
                  offset -= offsets[j] * ${me("uniforms.kernelStrides","j",$)};
                }
                offsets[${$-1}] = offset;

                isPad = false;
                for (var j = ${r-$}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${me("uniforms.strides",`j - ${r-$}u`,$)}
                    + offsets[j - ${r-$}u] - ${me("uniforms.pads","j - 2u",C)};
                  ${S}
              }
              ${u}

              output[global_idx] = value;
            }`}},ql=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Sm=e=>`${ql(e)};${e.countIncludePad}`,Cm=e=>`${ql(e)};${e.storageOrder};${e.dilations}`,Yl=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Zl=(e,t,r,a)=>{let[n,s]=jl(t,a,r),u=B("x",t.dataType,t.dims.length),d=u.type.value,i="value += x_val;",p="";n.countIncludePad?p+=`value /= ${d}(uniforms.kernelSize);`:p+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[h,g,y,w,v]=Fl(s,n);h.push(...Q(t.dims,s));let $=["rank"];return{name:e,shaderCache:{hint:`${a.cacheKey};${y};${w};${v}`,inputDependencies:$},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(s)/64)},programUniforms:h}),getShaderSource:C=>Kl(C,u,t.dims.length,s.length,n,i,p,0,g,y,w,v)}},Ql=e=>{let t=e.count_include_pad!==0,r=Yl(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let a={countIncludePad:t,...r,cacheKey:""};return{...a,cacheKey:Sm(a)}},Xl=(e,t)=>{Pa(e.inputs),e.compute(Zl("AveragePool",e.inputs[0],!1,t))},Jl={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},ed=e=>{let t=e.format;return{format:t,...Jl,cacheKey:t}},td=(e,t)=>{Pa(e.inputs),e.compute(Zl("GlobalAveragePool",e.inputs[0],!0,t))},rd=(e,t,r,a)=>{let[n,s]=jl(t,a,r),u=`
      value = max(x_val, value);
    `,d="",i=B("x",t.dataType,t.dims.length),p=["rank"],[h,g,y,w,v]=Fl(s,n);return h.push(...Q(t.dims,s)),{name:e,shaderCache:{hint:`${a.cacheKey};${y};${w};${v}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(s)/64)},programUniforms:h}),getShaderSource:$=>Kl($,i,t.dims.length,s.length,n,u,d,t.dataType===10?-65504:-1e5,g,y,w,v)}},nd=(e,t)=>{Pa(e.inputs),e.compute(rd("MaxPool",e.inputs[0],!1,t))},ad=e=>{let t=e.storage_order,r=e.dilations,a=Yl(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:t,dilations:r,...a,cacheKey:""};return{...n,cacheKey:Cm(n)}},id=e=>{let t=e.format;return{format:t,...Jl,cacheKey:t}},od=(e,t)=>{Pa(e.inputs),e.compute(rd("GlobalMaxPool",e.inputs[0],!0,t))}});var Am,Tm,ud,ld=F(()=>{"use strict";vt();ve();Te();Am=(e,t,r)=>{let a=e===t,n=e<t&&r<0,s=e>t&&r>0;if(a||n||s)throw new Error("Range these inputs' contents are invalid.")},Tm=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,d=[{type:12,data:u},{type:a,data:e},{type:a,data:r},...Q(s)],i=p=>{let h=K("output",a,s.length),g=h.type.value,y=[{name:"outputSize",type:"u32"},{name:"start",type:g},{name:"delta",type:g}];return`
        ${p.registerUniforms(y).declareVariables(h)}
        ${p.mainStart()}
        ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${g}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${a}`},getShaderSource:i,getRunData:()=>({outputs:[{dims:s,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:d})}},ud=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Pe.webgpu.validateInputContent&&Am(t,r,a),e.compute(Tm(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var Em,km,Om,Pm,Rm,zm,Dm,Bm,Mm,Um,Nm,dd,Wm,Vm,Hm,Gm,Lm,cd,pd,fd=F(()=>{"use strict";ve();Ee();Qe();Te();Em=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},km=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,s)=>a[n]=e[s]),a},Om=(e,t,r,a,n,s)=>{let[u,d,i]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(h=>s.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(h=>a.push(h)),a.length!==0&&a.length!==p&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Em(a,t),t.axes.length>0&&km(a,t.axes,p).forEach((h,g)=>a[g]=h)}if(i>0&&e.length>i&&(e[i].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},Pm=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Rm=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",zm=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((s,u)=>{a[s]=n[u],a[u+r]=n[t.length+u]}),a):n},Dm=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(s=>n.push(s)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},Bm=(e,t,r)=>{let a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=a),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(a,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},Mm=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${me("uniforms.scales","i",a)};
        var roi_low = ${me("uniforms.roi","i",n)};
        var roi_hi = ${me("uniforms.roi",`i + ${t.length}`,n)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${me("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${me("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,Um=(e,t,r,a,n,s,u)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${a.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${me("uniforms.scales","i",n)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${me("uniforms.roi","i",s)};
          var roi_hi = ${me("uniforms.roi",`i + ${r.length}`,s)};
          var input_shape_i = ${me("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${me("uniforms.output_shape","i",a.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${u} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,Nm=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${me("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,dd=(e,t,r,a)=>e.rank>a?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",Wm=(e,t,r,a,n)=>{let[u,d,i,p]=r.length===2?[-1,0,1,-1]:[0,2,3,1],h=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(row, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(col, ${r[i]} - 1))`)};
      ${dd(e,p,u,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${h} = originalIndices[${d}];
      var col:${h} = originalIndices[${i}];
      ${a?`if (row < 0 || row > (${r[d]} - 1) || col < 0 || col > (${r[i]} - 1)) {
        return ${n};
      }`:""};
      row = max(0, min(row, ${r[d]} - 1));
      col = max(0, min(col, ${r[i]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${p}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${u}])`:"0"};
      var x11: ${h} = getInputValue(batch, channel, row1, col1);
      var x12: ${h} = getInputValue(batch, channel, row1, col2);
      var x21: ${h} = getInputValue(batch, channel, row2, col1);
      var x22: ${h} = getInputValue(batch, channel, row2, col2);
      var dx1: ${h} = abs(row - ${h}(row1));
      var dx2: ${h} = abs(${h}(row2) - row);
      var dy1: ${h} = abs(col - ${h}(col1));
      var dy2: ${h} = abs(${h}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Vm=(e,t,r,a,n,s,u,d,i,p)=>{let h=r.length===2,g=!0,[y,w]=h?[0,1]:g?[2,3]:[1,2],v=e.type.value,$=C=>{let S=C===y?"row":"col";return`
      fn ${S}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${v} {
        var output_index = ${t.indicesGet("output_indices",C)};
        var originalIdx: ${v} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[C]},
        ${a[C]}, ${r[C]}, ${s[C]}, ${s[C]} + ${r.length});
        var fractOriginalIdx: ${v} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${d} && (originalIdx < 0 || originalIdx > (${r[C]} - 1))) {
          return ${i};
        }
        var data: array<${v}, 4> = array<${v}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${S}: ${v} = originalIdx + ${v}(i);
          if (${S} < 0 || ${S} >= ${r[C]}) {
            ${(()=>p?`coefs[i + 1] = 0.0;
                        continue;`:d?`return ${i};`:`${S} = max(0, min(${S}, ${r[C]} - 1));`)()};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",C,`u32(${S})`)};
          data[i + 1] = ${C===y?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${$(y)};
    ${$(w)};
  fn getCubicInterpolationCoefs(s: ${v}) -> array<${v}, 4> {
    var absS = abs(s);
    var coeffs: array<${v}, 4> = array<${v}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${v} = 1.0 - absS;
    var twoMinusAbsS: ${v} = 2.0 - absS;
    var onePlusAbsS: ${v} = 1.0 + absS;
    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};
    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;
    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${v}, 4>, coefs: array<${v}, 4>) -> ${v} {
    var coefsSum: ${v} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${v} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},Hm=(e,t,r,a,n)=>{let[u,d,i,p,h]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],g=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${g} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(depth, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(height, ${r[i]} - 1))`)};
      ${e.indicesSet("input_indices",p,`max(0, min(width, ${r[p]} - 1))`)};
      ${dd(e,h,u,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${g} = originalIndices[${d}];
      var height:${g} = originalIndices[${i}];
      var width:${g} = originalIndices[${p}];
      ${a?`if (depth < 0 || depth > (${r[d]} - 1) || height < 0 || height > (${r[i]} - 1) || width < 0 || (width > ${r[p]} - 1)) {
      return ${n};
        }`:""};

    depth = max(0, min(depth, ${r[d]} - 1));
      height = max(0, min(height, ${r[i]} - 1));
      width = max(0, min(width, ${r[p]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${h}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${u}])`:"0"};

      var x111: ${g} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${g} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${g} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${g} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${g} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${g} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${g} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${g} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${g} = abs(depth - ${g}(depth1));
      var dx2: ${g} = abs(${g}(depth2) - depth);
      var dy1: ${g} = abs(height - ${g}(height1));
      var dy2: ${g} = abs(${g}(height2) - height);
      var dz1: ${g} = abs(width - ${g}(width1));
      var dz2: ${g} = abs(${g}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Gm=(e,t,r,a,n,s)=>{let u=e.dims,d=zm(s,t.axes,u.length),i=Dm(u,a,n,t.axes),p=a.slice();a.length===0&&(p=u.map((x,T)=>x===0?1:i[T]/x),t.keepAspectRatioPolicy!=="stretch"&&(i=Bm(u,p,t)));let h=K("output",e.dataType,i.length),g=B("input",e.dataType,u.length),y=D.size(i),w=u.length===i.length&&u.every((x,T)=>x===i[T]),v=t.coordinateTransformMode==="tf_crop_and_resize",$=t.extrapolationValue,C=g.type.value,S=x=>`
      ${w?"":`
      ${Pm(t.coordinateTransformMode,C)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${Nm(g,u)};
              ${Rm(t.nearestMode,r,C)};
              ${Um(g,h,u,i,p.length,d.length,v)};
              `;case"linear":return`
              ${Mm(h,u,i,p.length,d.length)};
              ${(()=>{if(u.length===2||u.length===4)return`${Wm(g,h,u,v,$)}`;if(u.length===3||u.length===5)return`${Hm(g,h,u,v,$)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(u.length===2||u.length===4)return`${Vm(g,h,u,i,p,d,t.cubicCoeffA,v,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${x.registerUniform("output_size","u32").registerUniform("scales","f32",p.length).registerUniform("roi","f32",d.length).declareVariables(g,h)}
      ${x.mainStart()}
        ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${w?"output[global_idx] = input[global_idx];":`
        let output_indices = ${h.offsetToIndices("global_idx")};
        var input_indices: ${g.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${g.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${u.length===2||u.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${d.length>0?d:""}|${w}|${u}`,inputDependencies:["rank"]},getShaderSource:S,getRunData:()=>({outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:[{type:12,data:y},{type:1,data:p},{type:1,data:d},...Q(u,i)]})}},Lm=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},cd=(e,t)=>{let r=[],a=[],n=[],s=Lm(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");Om(e.inputs,t,s,r,a,n),e.compute(Gm(e.inputs[0],t,s,r,a,n),{inputs:[0]})},pd=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,d=e.keepAspectRatioPolicy,i=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return Ie({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:d,mode:i,nearestMode:p})}});var jm,Fm,md,hd=F(()=>{"use strict";ve();Ee();Qe();Te();jm=(e,t)=>{let[r,a,n,s]=e,{numHeads:u,rotaryEmbeddingDim:d}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!D.areEqual(a.dims,[])&&!D.areEqual(a.dims,[1])&&a.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${a.dims.length}`);if(n.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${n.dims.length}`);if(s.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(!D.areEqual(n.dims,s.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(d>0&&u===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let i=r.dims[0],p=r.dims[r.dims.length-2],h=n.dims[0],g=D.sizeFromDimension(r.dims,1)/p,y=d===0?n.dims[1]*2:g/u;if(d>y)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(a.dims.length===2){if(i!==a.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${a.dims[0]}`);if(p!==a.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${a.dims[1]}`)}if(y/2!==n.dims[1]&&d/2!==n.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${n.dims[1]}`);if(p>h)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Fm=(e,t)=>{let{interleaved:r,numHeads:a,rotaryEmbeddingDim:n,scale:s}=t,u=e[0].dims[0],d=D.sizeFromDimension(e[0].dims,1),i=e[0].dims[e[0].dims.length-2],p=d/i,h=e[2].dims[1],g=n===0?h*2:p/a,y=new Array(u,i,p/g,g-h),w=D.computeStrides(y),v=[{type:1,data:s},{type:12,data:y},{type:12,data:w},...e[0].dims.length===3?new Array({type:12,data:[d,p,g,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[d,g,i*g,1]}):[],...Q(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],$=C=>{let S=B("input",e[0].dataType,e[0].dims.length),x=B("position_ids",e[1].dataType,e[1].dims.length),T=B("cos_cache",e[2].dataType,e[2].dims.length),E=B("sin_cache",e[3].dataType,e[3].dims.length),k=K("output",e[0].dataType,e[0].dims.length);return C.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:y.length},{name:"global_strides",type:"u32",length:w.length},{name:"input_output_strides",type:"u32",length:w.length}]),`
        ${C.declareVariables(S,x,T,E,k)}

        ${C.mainStart(dr)}
          let half_rotary_emb_dim = uniforms.${T.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${C.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${x.broadcastedIndicesToOffset("bsnh.xy",K("",x.type.tensor,2))};
            let position_id =
                u32(${x.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});
            let j = i + select(half_rotary_emb_dim, 1, ${r});
            let re = ${S.getByOffset("i")} * ${T.get("position_id","bsnh[3]")} -
                ${S.getByOffset("j")} * ${E.get("position_id","bsnh[3]")};
            ${k.setByOffset("i","re")}
            let im = ${S.getByOffset("i")} * ${E.get("position_id","bsnh[3]")} +
                ${S.getByOffset("j")} * ${T.get("position_id","bsnh[3]")};
            ${k.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${k.setByOffset("k",S.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Ie({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:$,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(D.size(y)/dr)},programUniforms:v})}},md=(e,t)=>{jm(e.inputs,t),e.compute(Fm(e.inputs,t))}});var Km,qm,gd,yd=F(()=>{"use strict";ve();Ee();Te();Km=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},qm=(e,t,r,a)=>{let n=e[0].dims,s=D.size(n),u=n,d=s,i=n.slice(-1)[0],p=a?n.slice(0,-1).concat(1):[],h=e.length>3,g=e.length>4,y=a&&r>1,w=a&&r>2,v=r>3,$=We(i),C=[{type:12,data:d},{type:12,data:$},{type:12,data:i},{type:1,data:t.epsilon}],S=T=>{let E=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],k=[B("x",e[0].dataType,e[0].dims,$),B("skip",e[1].dataType,e[1].dims,$),B("gamma",e[2].dataType,e[2].dims,$)];h&&k.push(B("beta",e[3].dataType,e[3].dims,$)),g&&k.push(B("bias",e[4].dataType,e[4].dims,$)),k.push(K("output",e[0].dataType,u,$)),y&&k.push(K("mean_output",1,p)),w&&k.push(K("inv_std_output",1,p)),v&&k.push(K("input_skip_bias_sum",e[0].dataType,u,$));let M=Be(e[0].dataType);return`

      ${T.registerUniforms(E).declareVariables(...k)}

      ${T.mainStart()}
        ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}
        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        let offset = global_idx * hidden_size_vectorized;
        var sum = ${at("f32",$)};
        var squareSum = ${at("f32",$)};
        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${g?"bias[i]":"0.0"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${v?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${$t(M,$,"value")};
          sum += f32_value;
          squareSum += f32_value * f32_value;
        }
        let mean = ${ft("sum",$)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${ft("squareSum",$)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);
        ${y?"mean_output[global_idx] = mean;":""}
        ${w?"inv_std_output[global_idx] = inv_std_dev;":""}
        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {
          output[offset + i] = (output[offset + i] - ${M}(mean)) * ${M}(inv_std_dev) * gamma[i] + ${h?"beta[i]":"0.0"};
        }
      }`},x=[{dims:u,dataType:e[0].dataType}];return r>1&&x.push({dims:p,dataType:1}),r>2&&x.push({dims:p,dataType:1}),r>3&&x.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${$};${y};${w};${v}`,inputDependencies:e.map((T,E)=>"type")},getShaderSource:S,getRunData:()=>({outputs:x,dispatchGroup:{x:Math.ceil(d/i/64)},programUniforms:C})}},gd=(e,t)=>{Km(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(qm(e.inputs,t,e.outputCount,!1),{outputs:a})}});var Ym,Ra,Zm,bd,Qm,Xm,vd,wd,_d=F(()=>{"use strict";ve();Ee();Qe();Te();Ym=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},Ra=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Zm=(e,t)=>{if(e.length>1){let r=Ra(e,1),a=Ra(e,2),n=Ra(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),Ie({starts:r,ends:a,axes:n})}else return t},bd=(e,t,r,a,n)=>{let s=e;return e<0&&(s+=r[a[t]]),n[t]<0?Math.max(0,Math.min(s,r[a[t]]-1)):Math.max(0,Math.min(s,r[a[t]]))},Qm=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${me("uniforms.input_shape","i",r.length)};
            let steps_i = ${me("uniforms.steps","i",r.length)};
            let signs_i = ${me("uniforms.signs","i",r.length)};
            let starts_i = ${me("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Xm=(e,t)=>{let r=e[0].dims,a=D.size(r),n=t.axes.length>0?D.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=Ra(e,4);s.forEach(S=>S!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((S,x)=>bd(S,x,r,n,s)),d=t.ends.map((S,x)=>bd(S,x,r,n,s));if(n.length!==u.length||n.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let S=0;S<r.length;++S)n.includes(S)||(u.splice(S,0,0),d.splice(S,0,r[S]),s.splice(S,0,1));let i=s.map(S=>Math.sign(S));s.forEach((S,x,T)=>{if(S<0){let E=(d[x]-u[x])/S,k=u[x],M=k+E*s[x];u[x]=M,d[x]=k,T[x]=-S}});let p=r.slice(0);n.forEach((S,x)=>{p[S]=Math.ceil((d[S]-u[S])/s[S])});let h={dims:p,dataType:e[0].dataType},g=K("output",e[0].dataType,p.length),y=B("input",e[0].dataType,e[0].dims.length),w=D.size(p),v=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:i.length},{name:"steps",type:"u32",length:s.length}],$=[{type:12,data:w},{type:12,data:u},{type:6,data:i},{type:12,data:s},...Q(e[0].dims,p)],C=S=>`
      ${S.registerUniforms(v).declareVariables(y,g)}
        ${Qm(y,g,r)}
        ${S.mainStart()}
          ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${g.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${g.setByOffset("global_idx",y.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${i.length}_${u.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:C,getRunData:()=>({outputs:[h],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:$})}},vd=(e,t)=>{Ym(e.inputs,t);let r=Zm(e.inputs,t);e.compute(Xm(e.inputs,r),{inputs:[0]})},wd=e=>{let t=e.starts,r=e.ends,a=e.axes;return Ie({starts:t,ends:r,axes:a})}});var Jm,eh,$d,xd,Sd=F(()=>{"use strict";ve();Ee();Qe();Te();Jm=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},eh=(e,t)=>{let r=e.dims,a=D.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],d=a/u,i=We(u),p=u/i,h=(C,S)=>S===4?`max(max(${C}.x, ${C}.y), max(${C}.z, ${C}.w))`:S===2?`max(${C}.x, ${C}.y)`:S===3?`max(max(${C}.x, ${C}.y), ${C}.z)`:C,g=B("x",e.dataType,e.dims,i),y=K("result",e.dataType,e.dims,i),w=g.type.value,v=Be(e.dataType)==="f32"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,$=C=>`
      var<workgroup> rowMaxShared : ${w};
      var<workgroup> rowSumShared : ${w};
      var<workgroup> threadShared : array<${w}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${C.registerUniform("packedCols","i32").declareVariables(g,y)}
      ${C.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${v}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${w}(${h("threadShared[0]",i)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${w}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${w}(${ft("threadShared[0]",i)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${i}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:6,data:p}]}),getShaderSource:$}},$d=(e,t)=>{Jm(e.inputs),e.compute(eh(e.inputs[0],t))},xd=e=>Ie({axis:e.axis})});var th,rh,nh,ah,ih,Cd,Id,Ad=F(()=>{"use strict";ve();Ee();Qe();Te();th=e=>{if(!e||e.length<1)throw new Error("too few inputs")},rh=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),Ie({numOutputs:a,axis:t.axis,splitSizes:r})},nh=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${me("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,ah=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (output_number == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${a}) { ${n} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},ih=(e,t)=>{let r=e[0].dims,a=D.size(r),n=e[0].dataType,s=D.normalizeAxis(t.axis,r.length),u=new Array(t.numOutputs),d=B("input",n,r.length),i=new Array(t.numOutputs),p=[],h=[],g=0,y=[{type:12,data:a}];for(let v=0;v<t.numOutputs;v++){g+=t.splitSizes[v],i[v]=g;let $=r.slice();$[t.axis]=t.splitSizes[v],h.push($),u[v]=K(`output${v}`,n,$.length),p.push({dims:h[v],dataType:e[0].dataType})}y.push({type:12,data:i},...Q(r,...h));let w=v=>`
  ${v.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",i.length).declareVariables(d,...u)}
  ${nh(i.length)}
  ${ah(u)}

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${d.offsetToIndices("global_idx")};
    var index = ${d.indicesGet("indices",s)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${me("uniforms.size_in_split_axis","output_number - 1u",i.length)};
      ${d.indicesSet("indices",s,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:w,getRunData:()=>({outputs:p,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:y})}},Cd=(e,t)=>{th(e.inputs);let r=e.inputs.length===1?t:rh(e.inputs,t);e.compute(ih(e.inputs,r),{inputs:[0]})},Id=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Ie({axis:t,numOutputs:a,splitSizes:r})}});var Td,oh,sh,uh,Ed,kd=F(()=>{"use strict";ve();Ee();Te();Td=e=>Array.from(e.getBigInt64Array(),Number),oh=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Td(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},sh=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},uh=e=>{let t=e[0].dims,r=Td(e[1]),a=sh(t,r),n=D.size(a),s=e[0].dataType,u=B("input",s,t.length),d=K("output",s,a.length),i=p=>`
      const inputShape = ${u.indices(...t)};
      ${p.registerUniform("output_size","u32").declareVariables(u,d)}
      ${p.mainStart()}
      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${d.offsetToIndices("global_idx")};
      var input_indices: ${u.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;

        ${u.indicesSet("input_indices","i","input_dim_value")}
      }
      ${d.setByOffset("global_idx",u.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},...Q(e[0].dims,a)]}),getShaderSource:i}},Ed=e=>{oh(e.inputs),e.compute(uh(e.inputs),{inputs:[0]})}});var lh,dh,Od,Pd=F(()=>{"use strict";ve();Ee();Te();lh=(e,t,r,a,n)=>{let s=K("output_data",n,r.length,4),u=B("a_data",t[1].dataType,t[1].dims.length,4),d=B("b_data",t[2].dataType,t[2].dims.length,4),i=B("c_data",t[0].dataType,t[0].dims.length,4),p,h=(g,y,w)=>`select(${y}, ${g}, ${w})`;if(!a)p=s.setByOffset("global_idx",h(u.getByOffset("global_idx"),d.getByOffset("global_idx"),i.getByOffset("global_idx")));else{let g=(y,w,v="")=>{let $=`a_data[index_a${w}][component_a${w}]`,C=`b_data[index_b${w}][component_b${w}]`,S=`bool(c_data[index_c${w}] & (0xffu << (component_c${w} * 8)))`;return`
            let output_indices${w} = ${s.offsetToIndices(`global_idx * 4u + ${w}u`)};
            let offset_a${w} = ${u.broadcastedIndicesToOffset(`output_indices${w}`,s)};
            let offset_b${w} = ${d.broadcastedIndicesToOffset(`output_indices${w}`,s)};
            let offset_c${w} = ${i.broadcastedIndicesToOffset(`output_indices${w}`,s)};
            let index_a${w} = offset_a${w} / 4u;
            let index_b${w} = offset_b${w} / 4u;
            let index_c${w} = offset_c${w} / 4u;
            let component_a${w} = offset_a${w} % 4u;
            let component_b${w} = offset_b${w} % 4u;
            let component_c${w} = offset_c${w} % 4u;
            ${y}[${w}] = ${v}(${h($,C,S)});
          `};n===9?p=`
            var data = vec4<u32>(0);
            ${g("data",0,"u32")}
            ${g("data",1,"u32")}
            ${g("data",2,"u32")}
            ${g("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:p=`
            ${g("output_data[global_idx]",0)}
            ${g("output_data[global_idx]",1)}
            ${g("output_data[global_idx]",2)}
            ${g("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(i,u,d,s)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${p}
      }`},dh=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,s=!(D.areEqual(t,r)&&D.areEqual(r,a)),u=t,d=D.size(t);if(s){let p=Ot.calcShape(Ot.calcShape(t,r,!1),a,!1);if(!p)throw new Error("Can't perform where op on the given tensors");u=p,d=D.size(u)}let i=Math.ceil(d/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:p=>lh(p,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:12,data:i},...Q(a,t,r,u)]})}},Od=e=>{e.compute(dh(e.inputs))}});var Rd,zd=F(()=>{"use strict";Fs();Ci();Ys();Qs();Du();Fu();Yu();ki();ll();pl();yl();wl();$l();Cl();Tl();Ol();Rl();Dl();Pi();Ul();Hl();Ll();sd();ld();va();fd();hd();yd();_d();Sd();Ad();kd();Ir();Sa();Pd();Rd=new Map([["Abs",[Xs]],["Acos",[Js]],["Acosh",[eu]],["Add",[Bu]],["ArgMax",[js,Si]],["ArgMin",[Ls,Si]],["Asin",[tu]],["Asinh",[ru]],["Atan",[nu]],["Atanh",[au]],["Attention",[Ks]],["AveragePool",[Xl,Ql]],["BatchNormalization",[qs]],["BiasAdd",[Zs]],["BiasSplitGelu",[zu]],["Cast",[ou,iu]],["Ceil",[uu]],["Clip",[su]],["Concat",[Ku,qu]],["Conv",[Di,zi]],["ConvTranspose",[ul,sl]],["Cos",[lu]],["Cosh",[du]],["CumSum",[dl,cl]],["Div",[Mu]],["Einsum",[hl,gl]],["Elu",[cu,$a]],["Equal",[Uu]],["Erf",[pu]],["Exp",[fu]],["Expand",[vl]],["FastGelu",[_l]],["Floor",[mu]],["FusedConv",[Di,zi]],["Gather",[Sl,xl]],["GatherElements",[Al,Il]],["Gelu",[hu]],["Gemm",[kl,El]],["GlobalAveragePool",[td,ed]],["GlobalMaxPool",[od,id]],["Greater",[Hu]],["GreaterOrEqual",[Lu]],["HardSigmoid",[xu,$u]],["InstanceNormalization",[Pl]],["LayerNormalization",[zl]],["LeakyRelu",[gu,$a]],["Less",[Gu]],["LessOrEqual",[ju]],["Log",[Pu]],["MatMul",[tl]],["MatMulNBits",[Bl,Ml]],["MaxPool",[nd,ad]],["Mul",[Nu]],["MultiHeadAttention",[Vl,Wl]],["Neg",[bu]],["Not",[yu]],["Pad",[Gl]],["Pow",[Wu]],["Range",[ud]],["Reciprocal",[vu]],["ReduceMin",[Us]],["ReduceMean",[Rs]],["ReduceMax",[Ms]],["ReduceSum",[Ws]],["ReduceProd",[Ns]],["ReduceL1",[zs]],["ReduceL2",[Ds]],["ReduceLogSum",[Hs]],["ReduceLogSumExp",[Bs]],["ReduceSumSquare",[Vs]],["Relu",[wu]],["Resize",[cd,pd]],["RotaryEmbedding",[md]],["Sigmoid",[_u]],["Sin",[Su]],["Sinh",[Cu]],["Slice",[vd,wd]],["SkipLayerNormalization",[gd]],["Split",[Cd,Id]],["Sqrt",[Iu]],["Softmax",[$d,xd]],["Sub",[Vu]],["Tan",[Au]],["Tanh",[Eu]],["ThresholdedRelu",[Ou,$a]],["Tile",[Ed]],["Transpose",[ws,_s]],["Where",[Od]]])});var za,Dd=F(()=>{"use strict";vt();Yt();Te();za=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,s){ct(t.programInfo.name);let u=this.backend.device,d=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let i=[];for(let h of r)i.push({binding:i.length,resource:{buffer:h.buffer}});for(let h of a)i.push({binding:i.length,resource:{buffer:h.buffer}});s&&i.push({binding:i.length,resource:s});let p=u.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:i,label:t.programInfo.name});if(this.backend.sessionStatus==="capturing"){let h={kernelId:this.backend.currentKernelId,computePipeline:t.computePipeline,bindGroup:p,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(h)}d.setPipeline(t.computePipeline),d.setBindGroup(0,p),d.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),ut(t.programInfo.name)}dispose(){}build(t,r){ct(t.name);let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let s=bs(r,this.backend.device.limits),u=t.getShaderSource(s),d=`${n.join(`
`)}
${s.additionalImplementations}
${u}`,i=a.createShaderModule({code:d,label:t.name});Ne("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let p=a.createComputePipeline({compute:{module:i,entryPoint:"main"},layout:"auto",label:t.name});return ut(t.name),{programInfo:t,computePipeline:p,uniformVariablesInfo:s.variablesInfo}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&a<=s&&n<=s)return[r,a,n];let u=r*a*n,d=Math.ceil(Math.sqrt(u));if(d>s){if(d=Math.ceil(Math.cbrt(u)),d>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var ch,ph,Vi,Da,Bd=F(()=>{"use strict";vt();ve();Yt();fs();ys();zd();Dd();ch=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[a].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[a].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},ph=(e,t,r)=>{let a=e.name;return e.shaderCache?.hint&&(a+="["+e.shaderCache.hint+"]"),a+=":"+r+`:${ch(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,a},Vi=class{constructor(t){t&&(this.architecture=t.architecture,this.vendor=t.vendor)}isArchitecture(t){return this.architecture===t}isVendor(t){return this.vendor===t}},Da=class{constructor(){this.currentSessionId=null;this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionStatus="default";this.capturedCommandList=new Map;this.capturedPendingKernels=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("chromium-experimental-timestamp-query-inside-passes")?a.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.adapterInfo=new Vi(await r.requestAdapterInfo()),this.gpuDataManager=gs(this),this.programManager=new za(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,cs(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:r,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=t.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;ct(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),a=this.pendingQueries.get(t);for(let n=0;n<r.length/2;n++){let s=a[n],u=s.kernelId,d=this.kernels.get(u),i=d.kernelType,p=d.kernelName,h=s.programName,g=s.inputTensorViews,y=s.outputTensorViews,w=r[n*2],v=r[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=w);let $=Number(w-this.queryTimeBase),C=Number(v-this.queryTimeBase);if(!Number.isSafeInteger($)||!Number.isSafeInteger(C))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:g.map(S=>({dims:S.dims,dataType:qt(S.dataType)})),outputsMetadata:y.map(S=>({dims:S.dims,dataType:qt(S.dataType)})),kernelId:u,kernelType:i,kernelName:p,programName:h,startTime:$,endTime:C});else{let S="";g.forEach((T,E)=>{S+=`input[${E}]: [${T.dims}] | ${qt(T.dataType)}, `});let x="";y.forEach((T,E)=>{x+=`output[${E}]: [${T.dims}] | ${qt(T.dataType)}, `}),console.log(`[profiling] kernel "${u}|${i}|${p}|${h}" ${S}${x}execution time: ${C-$} ns`)}aa("GPU",`${h}::${w}::${v}`)}t.unmap(),this.pendingQueries.delete(t)}),ut()}run(t,r,a,n,s){ct(t.name);let u=[];for(let x=0;x<r.length;++x){let T=r[x].data;if(T===0)continue;let E=this.gpuDataManager.get(T);if(!E)throw new Error(`no GPU data for input: ${T}`);u.push(E)}let{outputs:d,dispatchGroup:i,programUniforms:p}=t.getRunData(r),h=a.length===0?d.map((x,T)=>T):a;if(h.length!==d.length)throw new Error(`Output size ${h.length} must be equal to ${d.length}.`);let g=[],y=[];for(let x=0;x<d.length;++x){if(!Number.isInteger(h[x])||h[x]<-3||h[x]>=d.length)throw new Error(`Invalid output index: ${h[x]}`);if(h[x]===-3)continue;let T=h[x]===-1,E=h[x]===-2,k=T||E?s(d[x].dataType,d[x].dims):n(h[x],d[x].dataType,d[x].dims);if(g.push(k),k.data===0)continue;let M=this.gpuDataManager.get(k.data);if(!M)throw new Error(`no GPU data for output: ${k.data}`);if(T&&this.temporaryData.push(M),E){let G=this.kernelPersistentData.get(this.currentKernelId);G||(G=[],this.kernelPersistentData.set(this.currentKernelId,G)),G.push(M)}y.push(M)}if(u.length!==r.length||y.length!==g.length){if(y.length===0)return ut(t.name),g;throw new Error(`Program ${t.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let w;if(p){let x=0,T=[];p.forEach(G=>{let q=typeof G.data=="number"?[G.data]:G.data;if(q.length===0)return;let re=G.type===10?2:4,Y,ce;G.type===10?(ce=q.length>4?16:q.length>2?8:q.length*re,Y=q.length>4?16:re*q.length):(ce=q.length<=2?q.length*re:16,Y=16),x=Math.ceil(x/ce)*ce,T.push(x);let xe=G.type===10?8:4;x+=q.length>4?Math.ceil(q.length/xe)*Y:q.length*re});let E=16;x=Math.ceil(x/E)*E;let k=new ArrayBuffer(x);p.forEach((G,q)=>{let re=T[q],Y=typeof G.data=="number"?[G.data]:G.data;if(G.type===6)new Int32Array(k,re,Y.length).set(Y);else if(G.type===12)new Uint32Array(k,re,Y.length).set(Y);else if(G.type===10)new Uint16Array(k,re,Y.length).set(Y);else if(G.type===1)new Float32Array(k,re,Y.length).set(Y);else throw new Error(`Unsupported uniform type: ${qt(G.type)}`)});let M=this.gpuDataManager.create(x,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(M.buffer,0,k,0,x),this.gpuDataManager.release(M.id),w={offset:0,size:x,buffer:M.buffer}}let v=this.programManager.normalizeDispatchGroupSize(i),$=v[1]===1&&v[2]===1,C=ph(t,r,$),S=this.programManager.getArtifact(C);if(S||(S=this.programManager.build(t,v),this.programManager.setArtifact(C,S),Ne("info",()=>`[artifact] key: ${C}, programName: ${t.name}`)),p&&S.uniformVariablesInfo){if(p.length!==S.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${S.uniformVariablesInfo.length}, got ${p.length} in program "${S.programInfo.name}".`);for(let x=0;x<p.length;x++){let T=p[x],E=T.type,k=typeof T.data=="number"?1:T.data.length,[M,G]=S.uniformVariablesInfo[x];if(E!==M||k!==G)throw new Error(`Uniform variable ${x} mismatch: expect type ${M} with size ${G}, got type ${E} with size ${k} in program "${S.programInfo.name}".`)}}if(Ne("info",()=>`[ProgramManager] run "${t.name}" (key=${C}) with ${v[0]}x${v[1]}x${v[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let x={kernelId:this.currentKernelId,programName:S.programInfo.name,inputTensorViews:r,outputTensorViews:g};this.pendingKernels.push(x),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(x)}return this.programManager.run(S,u,y,v,w),ut(t.name),g}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let s=Rd.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);let u={kernelType:t,kernelName:n,kernelEntry:s[0],attributes:[s[1],a]};this.kernels.set(r,u)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let s=n.kernelType,u=n.kernelName,d=n.kernelEntry,i=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,i[0]&&(i[1]=i[0](i[1]),i[0]=void 0),Ne("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`),this.env.trace&&console.timeStamp(`GPU::${s},${u}`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),d(r,i[1]),0}catch(h){return a.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${h}`)),1}finally{p&&a.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${s}] ${u}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),d=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return s.set(r,[d,a]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await yi(this,t,r);return ps(n.buffer,a)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Ne("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Ne("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Ne("info","replay"),this.sessionStatus="replaying";let t=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),a=t.length;this.pendingKernels=[];for(let n=0;n<a;n++){let s=this.getComputePassEncoder(),u=t[n];this.writeTimestamp(this.pendingDispatchNumber*2),s.setPipeline(u.computePipeline),s.setBindGroup(0,u.bindGroup),s.dispatchWorkgroups(...u.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(r[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(t){this.unregisterBuffers(t),this.capturedCommandList.has(t)&&this.capturedCommandList.delete(t),this.capturedPendingKernels.has(t)&&this.capturedPendingKernels.delete(t),this.gpuDataManager.onReleaseSession(t)}onRunStart(t){this.currentSessionId=t,this.setQueryType()}}});var Md={};ir(Md,{init:()=>fh});var an,Hi,fh,Ud=F(()=>{"use strict";ve();Bd();Yt();Ee();an=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(D.size(t)!==D.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Hi=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;this.adapterInfo=r.adapterInfo;let n=t.HEAPU32,s=a>>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let d=[];for(let i=0;i<u;i++){let p=n[s++],h=n[s++],g=n[s++],y=[];for(let w=0;w<g;w++)y.push(n[s++]);d.push(new an(t,p,h,y))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}getMaxComputeWorkgroupSizes(){return[this.backend.device.limits.maxComputeWorkgroupSizeX,this.backend.device.limits.maxComputeWorkgroupSizeY,this.backend.device.limits.maxComputeWorkgroupSizeZ]}getMaxComputeWorkgroupStoragesize(){return this.backend.device.limits.maxComputeWorkgroupStorageSize}compute(t,r){let a=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],s=(d,i,p)=>new an(this.module,i,this.output(d,p),p),u=(d,i)=>{let p=ur(d);if(!p)throw new Error(`Unsupported data type: ${d}`);let h=p*D.size(i),g=h>0?this.backend.gpuDataManager.create(h).id:0;return new an(this.module,d,g,i)};return this.backend.run(t,a,n,s,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},fh=async(e,t,r,a)=>{let n=t.jsepInit;if(!n)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let s=new Da;await s.initialize(r,a),n("webgpu",[s,u=>s.alloc(u),u=>s.free(u),(u,d,i,p=!1)=>{if(p)Ne("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${u}, dst=${d}, size=${i}`),s.memcpy(u,d);else{Ne("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${u}, gpuDataId=${d}, size=${i}`);let h=t.HEAPU8.subarray(u>>>0,(u>>>0)+i);s.upload(d,h)}},async(u,d,i)=>{Ne("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${u}, dataOffset=${d}, size=${i}`),await s.download(u,()=>t.HEAPU8.subarray(d>>>0,(d>>>0)+i))},(u,d,i)=>s.createKernel(u,d,i,t.UTF8ToString(t._JsepGetNodeName(d))),u=>s.releaseKernel(u),(u,d,i,p)=>{Ne("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${i}, kernel=${u}, contextDataOffset=${d}`);let h=new Hi(t,s,d);return s.computeKernel(u,h,p)},()=>s.captureBegin(),()=>s.captureEnd(),()=>s.replay()])}else n("webnn")}});var mh,Wd,Vd,cr,hh,Gi,Hd,Gd,Nd,Ld,jd,Fd,Kd=F(()=>{"use strict";os();us();ve();Sr();da();fi();mh=(e,t)=>{je()._OrtInit(e,t)!==0&&Ue("Can't initialize onnxruntime.")},Wd=async e=>{mh(e.wasm.numThreads,Jr(e.logLevel))},Vd=async(e,t)=>{{let r=(Ud(),Vt(Md)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let a=e.webgpu.adapter;if(a){if(typeof a.limits!="object"||typeof a.features!="object"||typeof a.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let n=e.webgpu.powerPreference;if(n!==void 0&&n!=="low-power"&&n!=="high-performance")throw new Error(`Invalid powerPreference setting: "${n}"`);let s=e.webgpu.forceFallbackAdapter;if(s!==void 0&&typeof s!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${s}"`);if(a=await navigator.gpu.requestAdapter({powerPreference:n,forceFallbackAdapter:s}),!a)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");await r("webgpu",je(),e,a)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await r("webnn",je(),e)}}},cr=new Map,hh=e=>{let t=je(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&Ue("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},Gi=e=>{let t=je(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Hd=async(e,t)=>{let r,a,n=je();Array.isArray(e)?[r,a]=e:e.buffer===n.HEAPU8.buffer?[r,a]=[e.byteOffset,e.byteLength]:[r,a]=Gi(e);let s=0,u=0,d=0,i=[],p=[],h=[];try{if([u,i]=ss(t),t?.externalData&&n.mountExternalData){let x=[];for(let T of t.externalData){let E=typeof T=="string"?T:T.path;x.push(en(typeof T=="string"?T:T.data).then(k=>{n.mountExternalData(E,k)}))}await Promise.all(x)}s=await n._OrtCreateSession(r,a,u),s===0&&Ue("Can't create a session.");let[g,y]=hh(s),w=!!t?.enableGraphCapture,v=[],$=[],C=[];for(let x=0;x<g;x++){let T=n._OrtGetInputName(s,x);T===0&&Ue("Can't get an input name."),p.push(T),v.push(n.UTF8ToString(T))}for(let x=0;x<y;x++){let T=n._OrtGetOutputName(s,x);T===0&&Ue("Can't get an output name."),h.push(T);let E=n.UTF8ToString(T);$.push(E);{if(w&&t?.preferredOutputLocation===void 0){C.push("gpu-buffer");continue}let k=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[E]??"cpu";if(k!=="cpu"&&k!=="cpu-pinned"&&k!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${k}.`);if(w&&k!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${k}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);C.push(k)}}let S=null;return C.some(x=>x==="gpu-buffer")&&(d=n._OrtCreateBinding(s),d===0&&Ue("Can't create IO binding."),S={handle:d,outputPreferredLocations:C,outputPreferredLocationsEncoded:C.map(x=>pi(x))}),cr.set(s,[s,p,h,S,w,!1]),[s,v,$]}catch(g){throw p.forEach(y=>n._OrtFree(y)),h.forEach(y=>n._OrtFree(y)),d!==0&&n._OrtReleaseBinding(d),s!==0&&n._OrtReleaseSession(s),g}finally{n._free(r),u!==0&&n._OrtReleaseSessionOptions(u),i.forEach(g=>n._free(g)),n.unmountExternalData?.()}},Gd=e=>{let t=je(),r=cr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,s,u,d]=r;u&&(d&&t._OrtClearBoundOutputs(u.handle),t._OrtReleaseBinding(u.handle)),t.jsepOnReleaseSession?.(e),n.forEach(i=>t._OrtFree(i)),s.forEach(i=>t._OrtFree(i)),t._OrtReleaseSession(a),cr.delete(e)},Nd=(e,t,r,a,n,s=!1)=>{if(!e){t.push(0);return}let u=je(),d=e[0],i=e[1],p=e[3],h,g;if(d==="string"&&p==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(s&&p!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${n} when enableGraphCapture is true.`);if(p==="gpu-buffer"){let v=e[2].gpuBuffer,$=ur(ci(d));g=i.reduce((S,x)=>S*x,1)*$;let C=u.jsepRegisterBuffer;if(!C)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');h=C(a,n,v,g)}else{let v=e[2];if(Array.isArray(v)){g=4*v.length,h=u._malloc(g),r.push(h);let $=h/4;for(let C=0;C<v.length;C++){if(typeof v[C]!="string")throw new TypeError(`tensor data at index ${C} is not a string`);u.HEAPU32[$++]=Fe(v[C],r)}}else g=v.byteLength,h=u._malloc(g),r.push(h),u.HEAPU8.set(new Uint8Array(v.buffer,v.byteOffset,g),h)}let y=u.stackSave(),w=u.stackAlloc(4*i.length);try{let v=w/4;i.forEach(C=>u.HEAP32[v++]=C);let $=u._OrtCreateTensor(ci(d),h,g,w,i.length,pi(p));$===0&&Ue(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push($)}finally{u.stackRestore(y)}},Ld=async(e,t,r,a,n,s)=>{let u=je(),d=cr.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let i=d[0],p=d[1],h=d[2],g=d[3],y=d[4],w=d[5],v=t.length,$=a.length,C=0,S=[],x=[],T=[],E=[],k=u.stackSave(),M=u.stackAlloc(v*4),G=u.stackAlloc(v*4),q=u.stackAlloc($*4),re=u.stackAlloc($*4);try{[C,S]=is(s);for(let V=0;V<v;V++)Nd(r[V],x,E,e,t[V],y);for(let V=0;V<$;V++)Nd(n[V],T,E,e,v+a[V],y);let Y=M/4,ce=G/4,xe=q/4,Re=re/4;for(let V=0;V<v;V++)u.HEAPU32[Y++]=x[V],u.HEAPU32[ce++]=p[t[V]];for(let V=0;V<$;V++)u.HEAPU32[xe++]=T[V],u.HEAPU32[Re++]=h[a[V]];if(g&&!w){let{handle:V,outputPreferredLocations:Ce,outputPreferredLocationsEncoded:we}=g;if(p.length!==v)throw new Error(`input count from feeds (${v}) is expected to be always equal to model's input count (${p.length}).`);for(let he=0;he<v;he++){let ne=t[he];await u._OrtBindInput(V,p[ne],x[he])!==0&&Ue(`Can't bind input[${he}] for session=${e}.`)}for(let he=0;he<$;he++){let ne=a[he];n[he]?.[3]?u._OrtBindOutput(V,h[ne],T[he],0)!==0&&Ue(`Can't bind pre-allocated output[${he}] for session=${e}.`):u._OrtBindOutput(V,h[ne],0,we[ne])!==0&&Ue(`Can't bind output[${he}] to ${Ce[he]} for session=${e}.`)}cr.set(e,[i,p,h,g,y,!0])}u.jsepOnRunStart?.(i);let U;g?U=await u._OrtRunWithBinding(i,g.handle,$,q,C):U=await u._OrtRun(i,G,M,v,re,$,q,C),U!==0&&Ue("failed to call OrtRun().");let X=[];for(let V=0;V<$;V++){let Ce=u.HEAPU32[q/4+V];if(Ce===T[V]){X.push(n[V]);continue}let we=u.stackSave(),he=u.stackAlloc(4*4),ne=!1,be,fe=0;try{u._OrtGetTensorData(Ce,he,he+4,he+8,he+12)!==0&&Ue(`Can't access output tensor data on index ${V}.`);let H=he/4,ee=u.HEAPU32[H++];fe=u.HEAPU32[H++];let _e=u.HEAPU32[H++],Xe=u.HEAPU32[H++],Ye=[];for(let Ke=0;Ke<Xe;Ke++)Ye.push(u.HEAPU32[_e/4+Ke]);u._OrtFree(_e);let Je=Ye.reduce((Ke,Ge)=>Ke*Ge,1);be=qt(ee);let Le=g?.outputPreferredLocations[a[V]];if(be==="string"){if(Le==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Ke=[],Ge=fe/4;for(let rt=0;rt<Je;rt++){let Ht=u.HEAPU32[Ge++],mt=rt===Je-1?void 0:u.HEAPU32[Ge]-Ht;Ke.push(u.UTF8ToString(Ht,mt))}X.push([be,Ye,Ke,"cpu"])}else if(Le==="gpu-buffer"&&Je>0){let Ke=u.jsepGetBuffer;if(!Ke)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let Ge=Ke(fe),rt=ur(ee);if(rt===void 0||!pa(be))throw new Error(`Unsupported data type: ${be}`);ne=!0,X.push([be,Ye,{gpuBuffer:Ge,download:u.jsepCreateDownloader(Ge,Je*rt,be),dispose:()=>{u._OrtReleaseTensor(Ce)}},"gpu-buffer"])}else{let Ke=ca(be),Ge=new Ke(Je);new Uint8Array(Ge.buffer,Ge.byteOffset,Ge.byteLength).set(u.HEAPU8.subarray(fe,fe+Ge.byteLength)),X.push([be,Ye,Ge,"cpu"])}}finally{u.stackRestore(we),be==="string"&&fe&&u._free(fe),ne||u._OrtReleaseTensor(Ce)}}return g&&!y&&(u._OrtClearBoundOutputs(g.handle),cr.set(e,[i,p,h,g,y,!1])),X}finally{u.stackRestore(k),x.forEach(Y=>u._OrtReleaseTensor(Y)),T.forEach(Y=>u._OrtReleaseTensor(Y)),E.forEach(Y=>u._free(Y)),C!==0&&u._OrtReleaseRunOptions(C),S.forEach(Y=>u._free(Y))}},jd=e=>{let t=je(),r=cr.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&Ue("Can't get an profile file name."),t._OrtFree(n)},Fd=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var qd=xr((L$,yh)=>{yh.exports='/*!\n * ONNX Runtime Web v1.18.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var Oo=Object.defineProperty;var pc=Object.getOwnPropertyDescriptor;var mc=Object.getOwnPropertyNames;var fc=Object.prototype.hasOwnProperty;var Z=(e,t)=>()=>(e&&(t=e(e=0)),t);var Vr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Vn=(e,t)=>{for(var r in t)Oo(e,r,{get:t[r],enumerable:!0})},hc=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of mc(t))!fc.call(e,n)&&n!==r&&Oo(e,n,{get:()=>t[n],enumerable:!(o=pc(t,n))||o.enumerable});return e};var Xt=e=>hc(Oo({},"__esModule",{value:!0}),e);var Nn={};Vn(Nn,{createReadStream:()=>Ma,readFile:()=>gc,readFileSync:()=>yc});var gc,yc,Ma,Wn=Z(()=>{gc=void 0,yc=void 0,Ma=void 0});var ko={};Vn(ko,{join:()=>bc});var bc,Po=Z(()=>{bc=void 0});var Va=Vr((Ua,Ro)=>{"use strict";var za=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((i,d)=>{o=i,n=d}),r.mountExternalData=(i,d)=>{(r.MountedFiles||(r.MountedFiles=new Map)).set(i,d)},r.unmountExternalData=()=>{delete r.MountedFiles};let s=()=>{let i=(p,y,I)=>(...O)=>{let D=oe.currData,N=y?.(),F=p(...O),J=y?.();return N!==J&&(p=J,I(N),I=null,y=null),oe.currData!=D?oe.whenDone():F},d=p=>async(...y)=>{try{if(r.jsepSessionState)throw new Error("Session already started");let I=r.jsepSessionState={sessionHandle:y[0],errors:[]},O=await p(...y);if(r.jsepSessionState!==I)throw new Error("Session mismatch");r.jsepBackend?.flush();let D=I.errors;if(D.length>0){let N=await Promise.all(D);if(N=N.filter(F=>F),N.length>0)throw new Error(N.join(`\n`))}return O}finally{r.jsepSessionState=null}};r._OrtCreateSession=i(r._OrtCreateSession,()=>r._OrtCreateSession,p=>r._OrtCreateSession=p),r._OrtRun=d(i(r._OrtRun,()=>r._OrtRun,p=>r._OrtRun=p)),r._OrtRunWithBinding=d(i(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,p=>r._OrtRunWithBinding=p)),r._OrtBindInput=i(r._OrtBindInput,()=>r._OrtBindInput,p=>r._OrtBindInput=p),s=void 0};r.jsepInit=(i,d)=>{if(s?.(),i==="webgpu"){[r.jsepBackend,r.jsepAlloc,r.jsepFree,r.jsepCopy,r.jsepCopyAsync,r.jsepCreateKernel,r.jsepReleaseKernel,r.jsepRunKernel,r.jsepCaptureBegin,r.jsepCaptureEnd,r.jsepReplay]=d;let p=r.jsepBackend;r.jsepRegisterBuffer=(y,I,O,D)=>p.registerBuffer(y,I,O,D),r.jsepGetBuffer=y=>p.getBuffer(y),r.jsepCreateDownloader=(y,I,O)=>p.createDownloader(y,I,O),r.jsepOnReleaseSession=y=>{p.onReleaseSession(y)},r.jsepOnRunStart=y=>p.onRunStart(y)}};var u=Object.assign({},r),c=[],a="./this.program",f=(i,d)=>{throw d},g=typeof window=="object",h=typeof importScripts=="function",w=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",_="";function v(i){return r.locateFile?r.locateFile(i,_):_+i}var $,C,x;if(w){var S=(Wn(),Xt(Nn)),T=(Po(),Xt(ko));h?_=T.dirname(_)+"/":_=__dirname+"/",$=(i,d)=>(i=dt(i)?new URL(i):T.normalize(i),S.readFileSync(i,d?void 0:"utf8")),x=i=>{var d=$(i,!0);return d.buffer||(d=new Uint8Array(d)),d},C=(i,d,p,y=!0)=>{i=dt(i)?new URL(i):T.normalize(i),S.readFile(i,y?void 0:"utf8",(I,O)=>{I?p(I):d(y?O.buffer:O)})},!r.thisProgram&&process.argv.length>1&&(a=process.argv[1].replace(/\\\\/g,"/")),c=process.argv.slice(2),f=(i,d)=>{throw process.exitCode=i,d},r.inspect=()=>"[Emscripten Module object]"}else(g||h)&&(h?_=self.location.href:typeof document<"u"&&document.currentScript&&(_=document.currentScript.src),e&&(_=e),_.indexOf("blob:")!==0?_=_.substr(0,_.replace(/[?#].*/,"").lastIndexOf("/")+1):_="",$=i=>{var d=new XMLHttpRequest;return d.open("GET",i,!1),d.send(null),d.responseText},h&&(x=i=>{var d=new XMLHttpRequest;return d.open("GET",i,!1),d.responseType="arraybuffer",d.send(null),new Uint8Array(d.response)}),C=(i,d,p)=>{var y=new XMLHttpRequest;y.open("GET",i,!0),y.responseType="arraybuffer",y.onload=()=>{if(y.status==200||y.status==0&&y.response){d(y.response);return}p()},y.onerror=p,y.send(null)});var E=console.log.bind(console),P=console.error.bind(console);Object.assign(r,u),u=null,r.arguments&&(c=r.arguments);var z;typeof WebAssembly!="object"&&lt("no native wasm support detected");var H,K=!1,re,q,ce,Se,Pe,U,Q,W,Ce,we,he;function ne(){var i=H.buffer;r.HEAP8=q=new Int8Array(i),r.HEAP16=Se=new Int16Array(i),r.HEAPU8=ce=new Uint8Array(i),r.HEAPU16=Pe=new Uint16Array(i),r.HEAP32=U=new Int32Array(i),r.HEAPU32=Q=new Uint32Array(i),r.HEAPF32=W=new Float32Array(i),r.HEAPF64=he=new Float64Array(i),r.HEAP64=Ce=new BigInt64Array(i),r.HEAPU64=we=new BigUint64Array(i)}var be=[],me=[],Ke=[],G=!1;function ee(){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)qe(r.preRun.shift());Lt(be)}function _e(){G=!0,Lt(me)}function Xe(){Lt(Ke)}function qe(i){be.unshift(i)}function Qe(i){me.unshift(i)}var He=0,je=null,Ge=null;function et(i){He++}function Dt(i){if(He--,He==0&&(je!==null&&(clearInterval(je),je=null),Ge)){var d=Ge;Ge=null,d()}}function lt(i){i="Aborted("+i+")",P(i),K=!0,re=1,i+=". Build with -sASSERTIONS for more info.";var d=new WebAssembly.RuntimeError(i);throw n(d),d}var jr="data:application/octet-stream;base64,",yr=i=>i.startsWith(jr),dt=i=>i.startsWith("file://"),Ot;Ot="ort-wasm-simd.wasm",yr(Ot)||(Ot=v(Ot));function kt(i){if(i==Ot&&z)return new Uint8Array(z);if(x)return x(i);throw"both async and sync fetching of the wasm failed"}function Kr(i){if(!z&&(g||h)){if(typeof fetch=="function"&&!dt(i))return fetch(i,{credentials:"same-origin"}).then(d=>{if(!d.ok)throw"failed to load wasm binary file at \'"+i+"\'";return d.arrayBuffer()}).catch(()=>kt(i));if(C)return new Promise((d,p)=>{C(i,y=>d(new Uint8Array(y)),p)})}return Promise.resolve().then(()=>kt(i))}function qr(i,d,p){return Kr(i).then(y=>WebAssembly.instantiate(y,d)).then(y=>y).then(p,y=>{P(`failed to asynchronously prepare wasm: ${y}`),lt(y)})}function Yr(i,d,p,y){return!i&&typeof WebAssembly.instantiateStreaming=="function"&&!yr(d)&&!dt(d)&&!w&&typeof fetch=="function"?fetch(d,{credentials:"same-origin"}).then(I=>{var O=WebAssembly.instantiateStreaming(I,p);return O.then(y,function(D){return P(`wasm streaming compile failed: ${D}`),P("falling back to ArrayBuffer instantiation"),qr(d,p,y)})}):qr(d,p,y)}function yo(){var i={a:Od};function d(y,I){return se=y.exports,se=oe.instrumentWasmExports(se),se=dc(se),H=se.ja,ne(),Qe(se.ka),Dt("wasm-instantiate"),se}et("wasm-instantiate");function p(y){d(y.instance)}if(r.instantiateWasm)try{return r.instantiateWasm(i,d)}catch(y){P(`Module.instantiateWasm callback failed with error: ${y}`),n(y)}return Yr(z,Ot,i,p).catch(n),{}}var Bt={1377320:(i,d,p,y)=>{if(typeof r>"u"||!r.MountedFiles)return 1;let I=Ye(i>>>0);I.startsWith("./")&&(I=I.substring(2));let O=r.MountedFiles.get(I);if(!O)return 2;let D=d>>>0,N=p>>>0,F=y>>>0;if(D+N>O.byteLength)return 3;try{return ce.set(O.subarray(D,D+N),F>>>0),0}catch{return 4}},1377821:(i,d,p)=>{let y=i,I=d,O=Ye(p),D=new Uint8Array(I);if(D.set(ce.subarray(y>>>0,y+I>>>0)),typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string")(Wn(),Xt(Nn)).writeFileSync(O,D);else{let N=new File([D],O,{type:"application/octet-stream"}),F=URL.createObjectURL(N);window.open(F,"_blank")}},1378329:()=>{r.jsepCaptureBegin()},1378360:()=>{r.jsepCaptureEnd()},1378389:()=>{r.jsepReplay()},1378414:i=>r.jsepAlloc(i),1378447:i=>r.jsepFree(i),1378479:(i,d,p)=>{r.jsepCopy(i,d,p,!0)},1378518:(i,d,p)=>{r.jsepCopy(i,d,p)},1378551:i=>{r.jsepCreateKernel("Abs",i,void 0)},1378602:i=>{r.jsepCreateKernel("Neg",i,void 0)},1378653:i=>{r.jsepCreateKernel("Floor",i,void 0)},1378706:i=>{r.jsepCreateKernel("Ceil",i,void 0)},1378758:i=>{r.jsepCreateKernel("Reciprocal",i,void 0)},1378816:i=>{r.jsepCreateKernel("Sqrt",i,void 0)},1378868:i=>{r.jsepCreateKernel("Exp",i,void 0)},1378919:i=>{r.jsepCreateKernel("Erf",i,void 0)},1378970:i=>{r.jsepCreateKernel("Sigmoid",i,void 0)},1379025:(i,d,p)=>{r.jsepCreateKernel("HardSigmoid",i,{alpha:d,beta:p})},1379104:i=>{r.jsepCreateKernel("Log",i,void 0)},1379155:i=>{r.jsepCreateKernel("Sin",i,void 0)},1379206:i=>{r.jsepCreateKernel("Cos",i,void 0)},1379257:i=>{r.jsepCreateKernel("Tan",i,void 0)},1379308:i=>{r.jsepCreateKernel("Asin",i,void 0)},1379360:i=>{r.jsepCreateKernel("Acos",i,void 0)},1379412:i=>{r.jsepCreateKernel("Atan",i,void 0)},1379464:i=>{r.jsepCreateKernel("Sinh",i,void 0)},1379516:i=>{r.jsepCreateKernel("Cosh",i,void 0)},1379568:i=>{r.jsepCreateKernel("Asinh",i,void 0)},1379621:i=>{r.jsepCreateKernel("Acosh",i,void 0)},1379674:i=>{r.jsepCreateKernel("Atanh",i,void 0)},1379727:i=>{r.jsepCreateKernel("Tanh",i,void 0)},1379779:i=>{r.jsepCreateKernel("Not",i,void 0)},1379830:(i,d,p)=>{r.jsepCreateKernel("Clip",i,{min:d,max:p})},1379899:i=>{r.jsepCreateKernel("Clip",i,void 0)},1379951:(i,d)=>{r.jsepCreateKernel("Elu",i,{alpha:d})},1380009:i=>{r.jsepCreateKernel("Relu",i,void 0)},1380061:(i,d)=>{r.jsepCreateKernel("LeakyRelu",i,{alpha:d})},1380125:(i,d)=>{r.jsepCreateKernel("ThresholdedRelu",i,{alpha:d})},1380195:(i,d)=>{r.jsepCreateKernel("Cast",i,{to:d})},1380253:i=>{r.jsepCreateKernel("Add",i,void 0)},1380304:i=>{r.jsepCreateKernel("Sub",i,void 0)},1380355:i=>{r.jsepCreateKernel("Mul",i,void 0)},1380406:i=>{r.jsepCreateKernel("Div",i,void 0)},1380457:i=>{r.jsepCreateKernel("Pow",i,void 0)},1380508:i=>{r.jsepCreateKernel("Equal",i,void 0)},1380561:i=>{r.jsepCreateKernel("Greater",i,void 0)},1380616:i=>{r.jsepCreateKernel("GreaterOrEqual",i,void 0)},1380678:i=>{r.jsepCreateKernel("Less",i,void 0)},1380730:i=>{r.jsepCreateKernel("LessOrEqual",i,void 0)},1380789:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceMean",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1380948:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceMax",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1381106:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceMin",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1381264:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceProd",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1381423:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceSum",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1381581:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceL1",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1381738:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceL2",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1381895:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceLogSum",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1382056:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceSumSquare",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1382220:(i,d,p,y,I)=>{r.jsepCreateKernel("ReduceLogSumExp",i,{keepDims:!!d,noopWithEmptyAxes:!!p,axes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1382384:i=>{r.jsepCreateKernel("Where",i,void 0)},1382437:(i,d,p)=>{r.jsepCreateKernel("Transpose",i,{perm:d?Array.from(U.subarray(d>>>0,p>>>0)):[]})},1382545:(i,d,p,y,I,O,D,N,F,J,te,le,ye,De,We)=>{r.jsepCreateKernel("ConvTranspose",i,{format:F?"NHWC":"NCHW",autoPad:d,dilations:[p],group:y,kernelShape:[I],pads:[O,D],strides:[N],wIsConst:()=>!!q[J>>>0],outputPadding:te?Array.from(U.subarray(te>>>0,le>>>0)):[],outputShape:ye?Array.from(U.subarray(ye>>>0,De>>>0)):[],activation:Ye(We)})},1382946:(i,d,p,y,I,O,D,N,F,J,te,le,ye,De)=>{r.jsepCreateKernel("ConvTranspose",i,{format:N?"NHWC":"NCHW",autoPad:d,dilations:Array.from(U.subarray(p>>>0,(p>>>0)+2>>>0)),group:y,kernelShape:Array.from(U.subarray(I>>>0,(I>>>0)+2>>>0)),pads:Array.from(U.subarray(O>>>0,(O>>>0)+4>>>0)),strides:Array.from(U.subarray(D>>>0,(D>>>0)+2>>>0)),wIsConst:()=>!!q[F>>>0],outputPadding:J?Array.from(U.subarray(J>>>0,te>>>0)):[],outputShape:le?Array.from(U.subarray(le>>>0,ye>>>0)):[],activation:Ye(De)})},1383511:(i,d,p,y,I,O,D,N,F,J,te,le,ye,De,We)=>{r.jsepCreateKernel("ConvTranspose",i,{format:F?"NHWC":"NCHW",autoPad:d,dilations:[p],group:y,kernelShape:[I],pads:[O,D],strides:[N],wIsConst:()=>!!q[J>>>0],outputPadding:te?Array.from(U.subarray(te>>>0,le>>>0)):[],outputShape:ye?Array.from(U.subarray(ye>>>0,De>>>0)):[],activation:Ye(We)})},1383912:(i,d,p,y,I,O,D,N,F,J,te,le,ye,De)=>{r.jsepCreateKernel("ConvTranspose",i,{format:N?"NHWC":"NCHW",autoPad:d,dilations:Array.from(U.subarray(p>>>0,(p>>>0)+2>>>0)),group:y,kernelShape:Array.from(U.subarray(I>>>0,(I>>>0)+2>>>0)),pads:Array.from(U.subarray(O>>>0,(O>>>0)+4>>>0)),strides:Array.from(U.subarray(D>>>0,(D>>>0)+2>>>0)),wIsConst:()=>!!q[F>>>0],outputPadding:J?Array.from(U.subarray(J>>>0,te>>>0)):[],outputShape:le?Array.from(U.subarray(le>>>0,ye>>>0)):[],activation:Ye(De)})},1384477:(i,d)=>{r.jsepCreateKernel("GlobalAveragePool",i,{format:d?"NHWC":"NCHW"})},1384568:(i,d,p,y,I,O,D,N,F,J,te,le,ye,De,We,Je)=>{r.jsepCreateKernel("AveragePool",i,{format:Je?"NHWC":"NCHW",auto_pad:d,ceil_mode:p,count_include_pad:y,storage_order:I,dilations:[O,D],kernel_shape:[N,F],pads:[J,te,le,ye],strides:[De,We]})},1384852:(i,d)=>{r.jsepCreateKernel("GlobalAveragePool",i,{format:d?"NHWC":"NCHW"})},1384943:(i,d,p,y,I,O,D,N,F,J,te,le,ye,De,We,Je)=>{r.jsepCreateKernel("AveragePool",i,{format:Je?"NHWC":"NCHW",auto_pad:d,ceil_mode:p,count_include_pad:y,storage_order:I,dilations:[O,D],kernel_shape:[N,F],pads:[J,te,le,ye],strides:[De,We]})},1385227:(i,d)=>{r.jsepCreateKernel("GlobalMaxPool",i,{format:d?"NHWC":"NCHW"})},1385314:(i,d,p,y,I,O,D,N,F,J,te,le,ye,De,We,Je)=>{r.jsepCreateKernel("MaxPool",i,{format:Je?"NHWC":"NCHW",auto_pad:d,ceil_mode:p,count_include_pad:y,storage_order:I,dilations:[O,D],kernel_shape:[N,F],pads:[J,te,le,ye],strides:[De,We]})},1385594:(i,d)=>{r.jsepCreateKernel("GlobalMaxPool",i,{format:d?"NHWC":"NCHW"})},1385681:(i,d,p,y,I,O,D,N,F,J,te,le,ye,De,We,Je)=>{r.jsepCreateKernel("MaxPool",i,{format:Je?"NHWC":"NCHW",auto_pad:d,ceil_mode:p,count_include_pad:y,storage_order:I,dilations:[O,D],kernel_shape:[N,F],pads:[J,te,le,ye],strides:[De,We]})},1385961:(i,d,p,y,I)=>{r.jsepCreateKernel("Gemm",i,{alpha:d,beta:p,transA:y,transB:I})},1386065:i=>{r.jsepCreateKernel("MatMul",i,void 0)},1386119:(i,d,p,y)=>{r.jsepCreateKernel("ArgMax",i,{keepDims:!!d,selectLastIndex:!!p,axis:y})},1386227:(i,d,p,y)=>{r.jsepCreateKernel("ArgMin",i,{keepDims:!!d,selectLastIndex:!!p,axis:y})},1386335:(i,d)=>{r.jsepCreateKernel("Softmax",i,{axis:d})},1386398:(i,d)=>{r.jsepCreateKernel("Concat",i,{axis:d})},1386458:(i,d,p,y,I)=>{r.jsepCreateKernel("Split",i,{axis:d,numOutputs:p,splitSizes:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1386598:i=>{r.jsepCreateKernel("Expand",i,void 0)},1386652:(i,d)=>{r.jsepCreateKernel("Gather",i,{axis:Number(d)})},1386723:(i,d)=>{r.jsepCreateKernel("GatherElements",i,{axis:Number(d)})},1386802:(i,d,p,y,I,O,D,N,F,J,te)=>{r.jsepCreateKernel("Resize",i,{antialias:d,axes:p?Array.from(U.subarray(p>>>0,y>>>0)):[],coordinateTransformMode:Ye(I),cubicCoeffA:O,excludeOutside:D,extrapolationValue:N,keepAspectRatioPolicy:Ye(F),mode:Ye(J),nearestMode:Ye(te)})},1387148:(i,d,p,y,I,O,D)=>{r.jsepCreateKernel("Slice",i,{starts:d?Array.from(U.subarray(d>>>0,p>>>0)):[],ends:y?Array.from(U.subarray(y>>>0,I>>>0)):[],axes:O?Array.from(U.subarray(O>>>0,D>>>0)):[]})},1387364:i=>{r.jsepCreateKernel("Tile",i,void 0)},1387416:(i,d,p)=>{r.jsepCreateKernel("LayerNormalization",i,{axis:Number(d),epsilon:Number(p)})},1387523:(i,d,p)=>{r.jsepCreateKernel("InstanceNormalization",i,{epsilon:d,format:p?"NHWC":"NCHW"})},1387637:(i,d,p)=>{r.jsepCreateKernel("InstanceNormalization",i,{epsilon:d,format:p?"NHWC":"NCHW"})},1387751:i=>{r.jsepCreateKernel("Range",i,void 0)},1387804:(i,d)=>{r.jsepCreateKernel("Einsum",i,{equation:Ye(d)})},1387885:(i,d,p,y,I)=>{r.jsepCreateKernel("Pad",i,{mode:d,value:p,pads:y?Array.from(U.subarray(y>>>0,I>>>0)):[]})},1388012:(i,d,p,y,I,O)=>{r.jsepCreateKernel("BatchNormalization",i,{epsilon:d,momentum:p,spatial:!!I,trainingMode:!!y,format:O?"NHWC":"NCHW"})},1388181:(i,d,p,y,I,O)=>{r.jsepCreateKernel("BatchNormalization",i,{epsilon:d,momentum:p,spatial:!!I,trainingMode:!!y,format:O?"NHWC":"NCHW"})},1388350:(i,d,p)=>{r.jsepCreateKernel("CumSum",i,{exclusive:Number(d),reverse:Number(p)})},1388447:(i,d,p,y,I,O,D,N,F)=>{r.jsepCreateKernel("Attention",i,{numHeads:d,isUnidirectional:p,maskFilterValue:y,scale:I,doRotary:O,qkvHiddenSizes:D?Array.from(U.subarray(Number(N)>>>0,Number(N)+D>>>0)):[],pastPresentShareBuffer:!!F})},1388719:i=>{r.jsepCreateKernel("BiasAdd",i,void 0)},1388774:i=>{r.jsepCreateKernel("BiasSplitGelu",i,void 0)},1388835:i=>{r.jsepCreateKernel("FastGelu",i,void 0)},1388891:(i,d,p,y,I,O,D,N,F,J,te,le,ye)=>{r.jsepCreateKernel("Conv",i,{format:F?"NHWC":"NCHW",auto_pad:d,dilations:[p],group:y,kernel_shape:[I],pads:O?Array.from(U.subarray(O>>>0,D>>>0)):[],strides:[N],w_is_const:()=>!!q[J>>>0],activation:Ye(te),activation_params:le?Array.from(W.subarray(le>>>0,ye>>>0)):[]})},1389261:(i,d,p,y,I,O,D,N,F,J,te,le,ye,De,We,Je)=>{r.jsepCreateKernel("Conv",i,{format:le?"NHWC":"NCHW",auto_pad:d,dilations:[p,y],group:I,kernel_shape:[O,D],pads:N?Array.from(U.subarray(N>>>0,F>>>0)):[],strides:[J,te],w_is_const:()=>!!q[ye>>>0],activation:Ye(De),activation_params:We?Array.from(W.subarray(We>>>0,Je>>>0)):[]})},1389652:i=>{r.jsepCreateKernel("Gelu",i,void 0)},1389704:(i,d,p,y,I,O)=>{r.jsepCreateKernel("MatMulNBits",i,{k:d,n:p,accuracyLevel:y,bits:I,blockSize:O})},1389831:(i,d,p,y,I,O)=>{r.jsepCreateKernel("MultiHeadAttention",i,{numHeads:d,isUnidirectional:p,maskFilterValue:y,scale:I,doRotary:O})},1389990:(i,d,p,y,I)=>{r.jsepCreateKernel("RotaryEmbedding",i,{interleaved:!!d,numHeads:p,rotaryEmbeddingDim:y,scale:I})},1390129:(i,d)=>{r.jsepCreateKernel("SkipLayerNormalization",i,{epsilon:d})},1390210:i=>{r.jsepReleaseKernel(i)},1390244:(i,d)=>r.jsepRunKernel(i,d,r.jsepSessionState.sessionHandle,r.jsepSessionState.errors)};function br(i,d,p){return oe.handleAsync(async()=>{await r.jsepCopyAsync(i,d,p)})}function Ht(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}var Lt=i=>{for(;i.length>0;)i.shift()(r)};function Zr(i){this.excPtr=i,this.ptr=i-24,this.set_type=function(d){Q[this.ptr+4>>>2>>>0]=d},this.get_type=function(){return Q[this.ptr+4>>>2>>>0]},this.set_destructor=function(d){Q[this.ptr+8>>>2>>>0]=d},this.get_destructor=function(){return Q[this.ptr+8>>>2>>>0]},this.set_caught=function(d){d=d?1:0,q[this.ptr+12>>>0>>>0]=d},this.get_caught=function(){return q[this.ptr+12>>>0>>>0]!=0},this.set_rethrown=function(d){d=d?1:0,q[this.ptr+13>>>0>>>0]=d},this.get_rethrown=function(){return q[this.ptr+13>>>0>>>0]!=0},this.init=function(d,p){this.set_adjusted_ptr(0),this.set_type(d),this.set_destructor(p)},this.set_adjusted_ptr=function(d){Q[this.ptr+16>>>2>>>0]=d},this.get_adjusted_ptr=function(){return Q[this.ptr+16>>>2>>>0]},this.get_exception_ptr=function(){var d=Oa(this.get_type());if(d)return Q[this.excPtr>>>2>>>0];var p=this.get_adjusted_ptr();return p!==0?p:this.excPtr}}var vr=0,Xr=0,Qr=9007199254740992,tt=-9007199254740992,Mt=i=>i<tt||i>Qr?NaN:Number(i);function wr(i,d,p){i>>>=0,d>>>=0,p>>>=0;var y=new Zr(i);throw y.init(d,p),vr=i,Xr++,vr}var ge=i=>(U[Ca()>>>2>>>0]=i,i),Ft=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,_r=(i,d,p)=>{d>>>=0;for(var y=d+p,I=d;i[I]&&!(I>=y);)++I;if(I-d>16&&i.buffer&&Ft)return Ft.decode(i.subarray(d,I));for(var O="";d<I;){var D=i[d++];if(!(D&128)){O+=String.fromCharCode(D);continue}var N=i[d++]&63;if((D&224)==192){O+=String.fromCharCode((D&31)<<6|N);continue}var F=i[d++]&63;if((D&240)==224?D=(D&15)<<12|N<<6|F:D=(D&7)<<18|N<<12|F<<6|i[d++]&63,D<65536)O+=String.fromCharCode(D);else{var J=D-65536;O+=String.fromCharCode(55296|J>>10,56320|J&1023)}}return O},Ye=(i,d)=>(i>>>=0,i?_r(ce,i,d):""),Pt={varargs:void 0,get(){var i=U[+Pt.varargs>>>2>>>0];return Pt.varargs+=4,i},getp(){return Pt.get()},getStr(i){var d=Ye(i);return d}};function bo(i,d,p){return p>>>=0,Pt.varargs=p,0}function Jr(i,d){d>>>=0}var jt=i=>{for(var d=0,p=0;p<i.length;++p){var y=i.charCodeAt(p);y<=127?d++:y<=2047?d+=2:y>=55296&&y<=57343?(d+=4,++p):d+=3}return d},$r=(i,d,p,y)=>{if(p>>>=0,!(y>0))return 0;for(var I=p,O=p+y-1,D=0;D<i.length;++D){var N=i.charCodeAt(D);if(N>=55296&&N<=57343){var F=i.charCodeAt(++D);N=65536+((N&1023)<<10)|F&1023}if(N<=127){if(p>=O)break;d[p++>>>0]=N}else if(N<=2047){if(p+1>=O)break;d[p++>>>0]=192|N>>6,d[p++>>>0]=128|N&63}else if(N<=65535){if(p+2>=O)break;d[p++>>>0]=224|N>>12,d[p++>>>0]=128|N>>6&63,d[p++>>>0]=128|N&63}else{if(p+3>=O)break;d[p++>>>0]=240|N>>18,d[p++>>>0]=128|N>>12&63,d[p++>>>0]=128|N>>6&63,d[p++>>>0]=128|N&63}}return d[p>>>0]=0,p-I},nr=(i,d,p)=>$r(i,ce,d,p);function Sr(i,d){i>>>=0,d>>>=0}function en(i,d,p){d>>>=0,p>>>=0}function tn(i,d,p){return p>>>=0,Pt.varargs=p,0}function rn(i,d){i>>>=0,d>>>=0}function nn(i,d,p){d>>>=0}function on(i,d,p,y){d>>>=0,p>>>=0}function an(i,d,p,y){d>>>=0,y>>>=0,Pt.varargs=y}function sn(i,d,p,y){d>>>=0,p>>>=0,y>>>=0}function un(i){i>>>=0}function ln(i,d){i>>>=0,d>>>=0}function dn(i,d,p){d>>>=0}var xr=i=>{if(i===null)return"null";var d=typeof i;return d==="object"||d==="array"||d==="function"?i.toString():""+i},cn=()=>{for(var i=new Array(256),d=0;d<256;++d)i[d]=String.fromCharCode(d);Cr=i},Cr,at=i=>{for(var d="",p=i;ce[p>>>0];)d+=Cr[ce[p++>>>0]];return d},Kt={},zt={},Ut={},Ar,vt=i=>{throw new Ar(i)},pn;function mn(i,d,p={}){var y=d.name;if(i||vt(`type "${y}" must have a positive integer typeid pointer`),zt.hasOwnProperty(i)){if(p.ignoreDuplicateRegistrations)return;vt(`Cannot register type \'${y}\' twice`)}if(zt[i]=d,delete Ut[i],Kt.hasOwnProperty(i)){var I=Kt[i];delete Kt[i],I.forEach(O=>O())}}function ct(i,d,p={}){if(!("argPackAdvance"in d))throw new TypeError("registerType registeredInstance requires argPackAdvance");return mn(i,d,p)}var or=(i,d,p)=>{switch(d){case 1:return p?y=>q[y>>>0>>>0]:y=>ce[y>>>0>>>0];case 2:return p?y=>Se[y>>>1>>>0]:y=>Pe[y>>>1>>>0];case 4:return p?y=>U[y>>>2>>>0]:y=>Q[y>>>2>>>0];case 8:return p?y=>Ce[y>>>3]:y=>we[y>>>3];default:throw new TypeError(`invalid integer width (${d}): ${i}`)}};function fn(i,d,p,y,I){i>>>=0,d>>>=0,p>>>=0,d=at(d);var O=d.indexOf("u")!=-1;O&&(I=(1n<<64n)-1n),ct(i,{name:d,fromWireType:D=>D,toWireType:function(D,N){if(typeof N!="bigint"&&typeof N!="number")throw new TypeError(`Cannot convert "${xr(N)}" to ${this.name}`);if(N<y||N>I)throw new TypeError(`Passing a number "${xr(N)}" from JS side to C/C++ side to an argument of type "${d}", which is outside the valid range [${y}, ${I}]!`);return N},argPackAdvance:wt,readValueFromPointer:or(d,p,!O),destructorFunction:null})}var wt=8;function Ne(i,d,p,y){i>>>=0,d>>>=0,d=at(d),ct(i,{name:d,fromWireType:function(I){return!!I},toWireType:function(I,O){return O?p:y},argPackAdvance:wt,readValueFromPointer:function(I){return this.fromWireType(ce[I>>>0])},destructorFunction:null})}function Ir(){Object.assign(ar.prototype,{get(i){return this.allocated[i]},has(i){return this.allocated[i]!==void 0},allocate(i){var d=this.freelist.pop()||this.allocated.length;return this.allocated[d]=i,d},free(i){this.allocated[i]=void 0,this.freelist.push(i)}})}function ar(){this.allocated=[void 0],this.freelist=[]}var ot=new ar;function qt(i){i>>>=0,i>=ot.reserved&&--ot.get(i).refcount===0&&ot.free(i)}var hn=()=>{for(var i=0,d=ot.reserved;d<ot.allocated.length;++d)ot.allocated[d]!==void 0&&++i;return i},gn=()=>{ot.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),ot.reserved=ot.allocated.length,r.count_emval_handles=hn},Me={toValue:i=>(i||vt("Cannot use deleted val. handle = "+i),ot.get(i).value),toHandle:i=>{switch(i){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ot.allocate({refcount:1,value:i})}}};function Tr(i){return this.fromWireType(U[i>>>2>>>0])}var yn=function(i,d){i>>>=0,d>>>=0,d=at(d),ct(i,{name:d,fromWireType:p=>{var y=Me.toValue(p);return qt(p),y},toWireType:(p,y)=>Me.toHandle(y),argPackAdvance:wt,readValueFromPointer:Tr,destructorFunction:null})},vo=(i,d)=>{switch(d){case 4:return function(p){return this.fromWireType(W[p>>>2>>>0])};case 8:return function(p){return this.fromWireType(he[p>>>3>>>0])};default:throw new TypeError(`invalid float width (${d}): ${i}`)}},bn=function(i,d,p){i>>>=0,d>>>=0,p>>>=0,d=at(d),ct(i,{name:d,fromWireType:y=>y,toWireType:(y,I)=>I,argPackAdvance:wt,readValueFromPointer:vo(d,p),destructorFunction:null})};function vn(i,d,p,y,I){i>>>=0,d>>>=0,p>>>=0,d=at(d),I===-1&&(I=4294967295);var O=te=>te;if(y===0){var D=32-8*p;O=te=>te<<D>>>D}var N=d.includes("unsigned"),F=(te,le)=>{},J;N?J=function(te,le){return F(le,this.name),le>>>0}:J=function(te,le){return F(le,this.name),le},ct(i,{name:d,fromWireType:O,toWireType:J,argPackAdvance:wt,readValueFromPointer:or(d,p,y!==0),destructorFunction:null})}function wn(i,d,p){i>>>=0,p>>>=0;var y=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array],I=y[d];function O(D){var N=Q[D>>>2>>>0],F=Q[D+4>>>2>>>0];return new I(q.buffer,F,N)}p=at(p),ct(i,{name:p,fromWireType:O,argPackAdvance:wt,readValueFromPointer:O},{ignoreDuplicateRegistrations:!0})}function wo(i){return this.fromWireType(Q[i>>>2>>>0])}function _o(i,d){i>>>=0,d>>>=0,d=at(d);var p=d==="std::string";ct(i,{name:d,fromWireType(y){var I=Q[y>>>2>>>0],O=y+4,D;if(p)for(var N=O,F=0;F<=I;++F){var J=O+F;if(F==I||ce[J>>>0]==0){var te=J-N,le=Ye(N,te);D===void 0?D=le:(D+=String.fromCharCode(0),D+=le),N=J+1}}else{for(var ye=new Array(I),F=0;F<I;++F)ye[F]=String.fromCharCode(ce[O+F>>>0]);D=ye.join("")}return $t(y),D},toWireType(y,I){I instanceof ArrayBuffer&&(I=new Uint8Array(I));var O,D=typeof I=="string";D||I instanceof Uint8Array||I instanceof Uint8ClampedArray||I instanceof Int8Array||vt("Cannot pass non-string to std::string"),p&&D?O=jt(I):O=I.length;var N=zr(4+O+1),F=N+4;if(Q[N>>>2>>>0]=O,p&&D)nr(I,F,O+1);else if(D)for(var J=0;J<O;++J){var te=I.charCodeAt(J);te>255&&($t(F),vt("String has UTF-16 code units that do not fit in 8 bits")),ce[F+J>>>0]=te}else for(var J=0;J<O;++J)ce[F+J>>>0]=I[J];return y!==null&&y.push($t,N),N},argPackAdvance:wt,readValueFromPointer:wo,destructorFunction(y){$t(y)}})}var Er=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,ir=(i,d)=>{for(var p=i,y=p>>1,I=y+d/2;!(y>=I)&&Pe[y>>>0];)++y;if(p=y<<1,p-i>32&&Er)return Er.decode(ce.subarray(i>>>0,p>>>0));for(var O="",D=0;!(D>=d/2);++D){var N=Se[i+D*2>>>1>>>0];if(N==0)break;O+=String.fromCharCode(N)}return O},$o=(i,d,p)=>{if(p??=2147483647,p<2)return 0;p-=2;for(var y=d,I=p<i.length*2?p/2:i.length,O=0;O<I;++O){var D=i.charCodeAt(O);Se[d>>>1>>>0]=D,d+=2}return Se[d>>>1>>>0]=0,d-y},_t=i=>i.length*2,pt=(i,d)=>{for(var p=0,y="";!(p>=d/4);){var I=U[i+p*4>>>2>>>0];if(I==0)break;if(++p,I>=65536){var O=I-65536;y+=String.fromCharCode(55296|O>>10,56320|O&1023)}else y+=String.fromCharCode(I)}return y},_n=(i,d,p)=>{if(d>>>=0,p??=2147483647,p<4)return 0;for(var y=d,I=y+p-4,O=0;O<i.length;++O){var D=i.charCodeAt(O);if(D>=55296&&D<=57343){var N=i.charCodeAt(++O);D=65536+((D&1023)<<10)|N&1023}if(U[d>>>2>>>0]=D,d+=4,d+4>I)break}return U[d>>>2>>>0]=0,d-y},sr=i=>{for(var d=0,p=0;p<i.length;++p){var y=i.charCodeAt(p);y>=55296&&y<=57343&&++p,d+=4}return d},$n=function(i,d,p){i>>>=0,d>>>=0,p>>>=0,p=at(p);var y,I,O,D,N;d===2?(y=ir,I=$o,D=_t,O=()=>Pe,N=1):d===4&&(y=pt,I=_n,D=sr,O=()=>Q,N=2),ct(i,{name:p,fromWireType:F=>{for(var J=Q[F>>>2>>>0],te=O(),le,ye=F+4,De=0;De<=J;++De){var We=F+4+De*d;if(De==J||te[We>>>N]==0){var Je=We-ye,Ur=y(ye,Je);le===void 0?le=Ur:(le+=String.fromCharCode(0),le+=Ur),ye=We+d}}return $t(F),le},toWireType:(F,J)=>{typeof J!="string"&&vt(`Cannot pass non-string to C++ string type ${p}`);var te=D(J),le=zr(4+te+d);return Q[le>>>2]=te>>N,I(J,le+4,te+d),F!==null&&F.push($t,le),le},argPackAdvance:wt,readValueFromPointer:Tr,destructorFunction(F){$t(F)}})},Sn=function(i,d){i>>>=0,d>>>=0,d=at(d),ct(i,{isVoid:!0,name:d,argPackAdvance:0,fromWireType:()=>{},toWireType:(p,y)=>{}})},So=1,Or=()=>So,xo=i=>{var d=Aa(i),p=at(d);return $t(d),p},kr=(i,d)=>{var p=zt[i];return p===void 0&&vt(d+" has unknown type "+xo(i)),p},xn=(i,d,p)=>{var y=[],I=i.toWireType(y,p);return y.length&&(Q[d>>>2>>>0]=Me.toHandle(y)),I};function Co(i,d,p){return i>>>=0,d>>>=0,p>>>=0,i=Me.toValue(i),d=kr(d,"emval::as"),xn(d,p,i)}var ur=i=>{try{return i()}catch(d){lt(d)}},Cn=i=>{if(i instanceof Ht||i=="unwind")return re;f(1,i)},Ao=0,An=()=>Ao>0,lr=i=>{re=i,An()||(r.onExit?.(i),K=!0),f(i,new Ht(i))},Pr=(i,d)=>{re=i,lr(i)},In=Pr,Tn=()=>{if(!An())try{In(re)}catch(i){Cn(i)}},En=i=>{if(!K)try{i(),Tn()}catch(d){Cn(d)}},oe={instrumentWasmImports(i){var d=/^(invoke_.*|__asyncjs__.*)$/;for(let[p,y]of Object.entries(i)){let I=y.sig;if(typeof y=="function"){let O=y.isAsync||d.test(p)}}},instrumentWasmExports(i){var d={};for(let[p,y]of Object.entries(i))typeof y=="function"?d[p]=function(){oe.exportCallStack.push(p);try{return y.apply(null,arguments)}finally{if(!K){var I=oe.exportCallStack.pop();oe.maybeStopUnwind()}}}:d[p]=y;return d},State:{Normal:0,Unwinding:1,Rewinding:2,Disabled:3},state:0,StackSize:65536,currData:null,handleSleepReturnValue:0,exportCallStack:[],callStackNameToId:{},callStackIdToName:{},callStackId:0,asyncPromiseHandlers:null,sleepCallbacks:[],getCallStackId(i){var d=oe.callStackNameToId[i];return d===void 0&&(d=oe.callStackId++,oe.callStackNameToId[i]=d,oe.callStackIdToName[d]=i),d},maybeStopUnwind(){oe.currData&&oe.state===oe.State.Unwinding&&oe.exportCallStack.length===0&&(oe.state=oe.State.Normal,ur(Pa),typeof Fibers<"u"&&Fibers.trampoline())},whenDone(){return new Promise((i,d)=>{oe.asyncPromiseHandlers={resolve:i,reject:d}})},allocateData(){var i=zr(12+oe.StackSize);return oe.setDataHeader(i,i+12,oe.StackSize),oe.setDataRewindFunc(i),i},setDataHeader(i,d,p){Q[i>>>2>>>0]=d,Q[i+4>>>2>>>0]=d+p},setDataRewindFunc(i){var d=oe.exportCallStack[0],p=oe.getCallStackId(d);U[i+8>>>2>>>0]=p},getDataRewindFunc(i){var d=U[i+8>>>2>>>0],p=oe.callStackIdToName[d],y=se[p];return y},doRewind(i){var d=oe.getDataRewindFunc(i);return d()},handleSleep(i){if(!K){if(oe.state===oe.State.Normal){var d=!1,p=!1;i((y=0)=>{if(!K&&(oe.handleSleepReturnValue=y,d=!0,!!p)){oe.state=oe.State.Rewinding,ur(()=>Ra(oe.currData)),typeof Browser<"u"&&Browser.mainLoop.func&&Browser.mainLoop.resume();var I,O=!1;try{I=oe.doRewind(oe.currData)}catch(F){I=F,O=!0}var D=!1;if(!oe.currData){var N=oe.asyncPromiseHandlers;N&&(oe.asyncPromiseHandlers=null,(O?N.reject:N.resolve)(I),D=!0)}if(O&&!D)throw I}}),p=!0,d||(oe.state=oe.State.Unwinding,oe.currData=oe.allocateData(),typeof Browser<"u"&&Browser.mainLoop.func&&Browser.mainLoop.pause(),ur(()=>ka(oe.currData)))}else oe.state===oe.State.Rewinding?(oe.state=oe.State.Normal,ur(Da),$t(oe.currData),oe.currData=null,oe.sleepCallbacks.forEach(y=>En(y))):lt(`invalid state: ${oe.state}`);return oe.handleSleepReturnValue}},handleAsync(i){return oe.handleSleep(d=>{i().then(d)})}},dr=function(i){return i>>>=0,oe.handleAsync(()=>(i=Me.toValue(i),i.then(Me.toHandle)))};dr.isAsync=!0;var Yt=[];function On(i,d,p,y){return i>>>=0,d>>>=0,p>>>=0,y>>>=0,i=Yt[i],d=Me.toValue(d),i(null,d,p,y)}var kn={},Zt=i=>{var d=kn[i];return d===void 0?at(i):d};function cr(i,d,p,y,I){return i>>>=0,d>>>=0,p>>>=0,y>>>=0,I>>>=0,i=Yt[i],d=Me.toValue(d),p=Zt(p),i(d,d[p],y,I)}function Rr(i,d){return i>>>=0,d>>>=0,i=Me.toValue(i),d=Me.toValue(d),i==d}var Dr=()=>typeof globalThis=="object"?globalThis:function(){return Function}()("return this")();function Pn(i){return i>>>=0,i===0?Me.toHandle(Dr()):(i=Zt(i),Me.toHandle(Dr()[i]))}var Rn=i=>{var d=Yt.length;return Yt.push(i),d},Dn=(i,d)=>{for(var p=new Array(i),y=0;y<i;++y)p[y]=kr(Q[d+y*4>>>2>>>0],"parameter "+y);return p},Br=(i,d)=>Object.defineProperty(d,"name",{value:i}),ya=Reflect.construct;function pr(i,d){if(!(i instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof i} which is not a function`);var p=Br(i.name||"unknownFunctionName",function(){});p.prototype=i.prototype;var y=new p,I=i.apply(y,d);return I instanceof Object?I:y}function Bn(i,d,p){d>>>=0;var y=Dn(i,d),I=y.shift();i--;var O=`return function (obj, func, destructorsRef, args) {\n`,D=0,N=[];p===0&&N.push("obj");for(var F=["retType"],J=[I],te=0;te<i;++te)N.push("arg"+te),F.push("argType"+te),J.push(y[te]),O+=`  var arg${te} = argType${te}.readValueFromPointer(args${D?"+"+D:""});\n`,D+=y[te].argPackAdvance;var le=p===1?"new func":"func.call";O+=`  var rv = ${le}(${N.join(", ")});\n`;for(var te=0;te<i;++te)y[te].deleteObject&&(O+=`  argType${te}.deleteObject(arg${te});\n`);I.isVoid||(F.push("emval_returnValue"),J.push(xn),O+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),O+=`};\n`,F.push(O);var ye=pr(Function,F).apply(null,J),De=`methodCaller<(${y.map(We=>We.name).join(", ")}) => ${I.name}>`;return Rn(Br(De,ye))}function l(i,d){return i>>>=0,d>>>=0,i=Me.toValue(i),d=Me.toValue(d),Me.toHandle(i[d])}function m(i){i>>>=0,i>4&&(ot.get(i).refcount+=1)}function b(){return Me.toHandle([])}function A(i){i>>>=0,i=Me.toValue(i);for(var d=new Array(i.length),p=0;p<i.length;p++)d[p]=i[p];return Me.toHandle(d)}function k(i){return i>>>=0,Me.toHandle(Zt(i))}function V(){return Me.toHandle({})}var L=i=>{for(;i.length;){var d=i.pop(),p=i.pop();p(d)}};function de(i){i>>>=0;var d=Me.toValue(i);L(d),qt(i)}function ie(i,d,p){i>>>=0,d>>>=0,p>>>=0,i=Me.toValue(i),d=Me.toValue(d),p=Me.toValue(p),i[d]=p}function ae(i,d){i>>>=0,d>>>=0,i=kr(i,"_emval_take_value");var p=i.readValueFromPointer(d);return Me.toHandle(p)}function ue(i,d){i=Mt(i),d>>>=0;var p=new Date(i*1e3);U[d>>>2>>>0]=p.getUTCSeconds(),U[d+4>>>2>>>0]=p.getUTCMinutes(),U[d+8>>>2>>>0]=p.getUTCHours(),U[d+12>>>2>>>0]=p.getUTCDate(),U[d+16>>>2>>>0]=p.getUTCMonth(),U[d+20>>>2>>>0]=p.getUTCFullYear()-1900,U[d+24>>>2>>>0]=p.getUTCDay();var y=Date.UTC(p.getUTCFullYear(),0,1,0,0,0,0),I=(p.getTime()-y)/(1e3*60*60*24)|0;U[d+28>>>2>>>0]=I}var xe=i=>i%4===0&&(i%100!==0||i%400===0),ke=[0,31,60,91,121,152,182,213,244,274,305,335],R=[0,31,59,90,120,151,181,212,243,273,304,334],pe=i=>{var d=xe(i.getFullYear()),p=d?ke:R,y=p[i.getMonth()]+i.getDate()-1;return y};function Oe(i,d){i=Mt(i),d>>>=0;var p=new Date(i*1e3);U[d>>>2>>>0]=p.getSeconds(),U[d+4>>>2>>>0]=p.getMinutes(),U[d+8>>>2>>>0]=p.getHours(),U[d+12>>>2>>>0]=p.getDate(),U[d+16>>>2>>>0]=p.getMonth(),U[d+20>>>2>>>0]=p.getFullYear()-1900,U[d+24>>>2>>>0]=p.getDay();var y=pe(p)|0;U[d+28>>>2>>>0]=y,U[d+36>>>2>>>0]=-(p.getTimezoneOffset()*60);var I=new Date(p.getFullYear(),0,1),O=new Date(p.getFullYear(),6,1).getTimezoneOffset(),D=I.getTimezoneOffset(),N=(O!=D&&p.getTimezoneOffset()==Math.min(D,O))|0;U[d+32>>>2>>>0]=N}var Rt=function(i){i>>>=0;var d=(()=>{var p=new Date(U[i+20>>>2>>>0]+1900,U[i+16>>>2>>>0],U[i+12>>>2>>>0],U[i+8>>>2>>>0],U[i+4>>>2>>>0],U[i>>>2>>>0],0),y=U[i+32>>>2>>>0],I=p.getTimezoneOffset(),O=new Date(p.getFullYear(),0,1),D=new Date(p.getFullYear(),6,1).getTimezoneOffset(),N=O.getTimezoneOffset(),F=Math.min(N,D);if(y<0)U[i+32>>>2>>>0]=+(D!=N&&F==I);else if(y>0!=(F==I)){var J=Math.max(N,D),te=y>0?F:J;p.setTime(p.getTime()+(te-I)*6e4)}U[i+24>>>2>>>0]=p.getDay();var le=pe(p)|0;U[i+28>>>2>>>0]=le,U[i>>>2>>>0]=p.getSeconds(),U[i+4>>>2>>>0]=p.getMinutes(),U[i+8>>>2>>>0]=p.getHours(),U[i+12>>>2>>>0]=p.getDate(),U[i+16>>>2>>>0]=p.getMonth(),U[i+20>>>2>>>0]=p.getYear();var ye=p.getTime();return isNaN(ye)?(ge(61),-1):ye/1e3})();return BigInt(d)};function Mn(i,d,p,y,I,O,D){return i>>>=0,I=Mt(I),O>>>=0,D>>>=0,-52}function ad(i,d,p,y,I,O){i>>>=0,d>>>=0,O=Mt(O)}var ba=i=>{var d=jt(i)+1,p=zr(d);return p&&nr(i,p,d),p};function id(i,d,p){i>>>=0,d>>>=0,p>>>=0;var y=new Date().getFullYear(),I=new Date(y,0,1),O=new Date(y,6,1),D=I.getTimezoneOffset(),N=O.getTimezoneOffset(),F=Math.max(D,N);Q[i>>>2>>>0]=F*60,U[d>>>2>>>0]=+(D!=N);function J(We){var Je=We.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return Je?Je[1]:"GMT"}var te=J(I),le=J(O),ye=ba(te),De=ba(le);N<D?(Q[p>>>2>>>0]=ye,Q[p+4>>>2>>>0]=De):(Q[p>>>2>>>0]=De,Q[p+4>>>2>>>0]=ye)}var sd=()=>{lt("")},Io=[],ud=(i,d)=>{Io.length=0;for(var p;p=ce[i++>>>0];){var y=p!=105;y&=p!=112,d+=y&&d%8?4:0,Io.push(p==112?Q[d>>>2>>>0]:p==106?Ce[d>>>3]:p==105?U[d>>>2>>>0]:he[d>>>3>>>0]),d+=y?8:4}return Io},va=(i,d,p)=>{var y=ud(d,p);return Bt[i].apply(null,y)};function ld(i,d,p){return i>>>=0,d>>>=0,p>>>=0,va(i,d,p)}function dd(i,d,p){return i>>>=0,d>>>=0,p>>>=0,va(i,d,p)}var cd=()=>Date.now(),wa=()=>4294901760;function pd(){return wa()}var _a;_a=()=>performance.now();var md=i=>{var d=H.buffer,p=(i-d.byteLength+65535)/65536;try{return H.grow(p),ne(),1}catch{}};function fd(i){i>>>=0;var d=ce.length,p=wa();if(i>p)return!1;for(var y=(F,J)=>F+(J-F%J)%J,I=1;I<=4;I*=2){var O=d*(1+.2/I);O=Math.min(O,i+100663296);var D=Math.min(p,y(Math.max(i,O),65536)),N=md(D);if(N)return!0}return!1}var To={},hd=()=>a||"./this.program",Mr=()=>{if(!Mr.strings){var i=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:i,_:hd()};for(var p in To)To[p]===void 0?delete d[p]:d[p]=To[p];var y=[];for(var p in d)y.push(`${p}=${d[p]}`);Mr.strings=y}return Mr.strings},gd=(i,d)=>{for(var p=0;p<i.length;++p)q[d++>>>0>>>0]=i.charCodeAt(p);q[d>>>0>>>0]=0},yd=function(i,d){i>>>=0,d>>>=0;var p=0;return Mr().forEach((y,I)=>{var O=d+p;Q[i+I*4>>>2>>>0]=O,gd(y,O),p+=y.length+1}),0},bd=function(i,d){i>>>=0,d>>>=0;var p=Mr();Q[i>>>2>>>0]=p.length;var y=0;return p.forEach(I=>y+=I.length+1),Q[d>>>2>>>0]=y,0},vd=i=>52;function wd(i,d,p,y){return d>>>=0,p>>>=0,y>>>=0,52}function _d(i,d,p,y){return d=Mt(d),y>>>=0,70}var $d=[null,[],[]],Sd=(i,d)=>{var p=$d[i];d===0||d===10?((i===1?E:P)(_r(p,0)),p.length=0):p.push(d)};function xd(i,d,p,y){d>>>=0,p>>>=0,y>>>=0;for(var I=0,O=0;O<p;O++){var D=Q[d>>>2>>>0],N=Q[d+4>>>2>>>0];d+=8;for(var F=0;F<N;F++)Sd(i,ce[D+F>>>0]);I+=N}return Q[y>>>2>>>0]=I,0}var Cd=(i,d)=>{for(var p=0,y=0;y<=d;p+=i[y++]);return p},$a=[31,29,31,30,31,30,31,31,30,31,30,31],Sa=[31,28,31,30,31,30,31,31,30,31,30,31],Ad=(i,d)=>{for(var p=new Date(i.getTime());d>0;){var y=xe(p.getFullYear()),I=p.getMonth(),O=(y?$a:Sa)[I];if(d>O-p.getDate())d-=O-p.getDate()+1,p.setDate(1),I<11?p.setMonth(I+1):(p.setMonth(0),p.setFullYear(p.getFullYear()+1));else return p.setDate(p.getDate()+d),p}return p};function Id(i,d,p){var y=p>0?p:jt(i)+1,I=new Array(y),O=$r(i,I,0,I.length);return d&&(I.length=O),I}var Td=(i,d)=>{q.set(i,d>>>0)};function xa(i,d,p,y){i>>>=0,d>>>=0,p>>>=0,y>>>=0;var I=Q[y+40>>>2>>>0],O={tm_sec:U[y>>>2>>>0],tm_min:U[y+4>>>2>>>0],tm_hour:U[y+8>>>2>>>0],tm_mday:U[y+12>>>2>>>0],tm_mon:U[y+16>>>2>>>0],tm_year:U[y+20>>>2>>>0],tm_wday:U[y+24>>>2>>>0],tm_yday:U[y+28>>>2>>>0],tm_isdst:U[y+32>>>2>>>0],tm_gmtoff:U[y+36>>>2>>>0],tm_zone:I?Ye(I):""},D=Ye(p),N={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var F in N)D=D.replace(new RegExp(F,"g"),N[F]);var J=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],te=["January","February","March","April","May","June","July","August","September","October","November","December"];function le(Y,$e,mt){for(var it=typeof Y=="number"?Y.toString():Y||"";it.length<$e;)it=mt[0]+it;return it}function ye(Y,$e){return le(Y,$e,"0")}function De(Y,$e){function mt(Un){return Un<0?-1:Un>0?1:0}var it;return(it=mt(Y.getFullYear()-$e.getFullYear()))===0&&(it=mt(Y.getMonth()-$e.getMonth()))===0&&(it=mt(Y.getDate()-$e.getDate())),it}function We(Y){switch(Y.getDay()){case 0:return new Date(Y.getFullYear()-1,11,29);case 1:return Y;case 2:return new Date(Y.getFullYear(),0,3);case 3:return new Date(Y.getFullYear(),0,2);case 4:return new Date(Y.getFullYear(),0,1);case 5:return new Date(Y.getFullYear()-1,11,31);case 6:return new Date(Y.getFullYear()-1,11,30)}}function Je(Y){var $e=Ad(new Date(Y.tm_year+1900,0,1),Y.tm_yday),mt=new Date($e.getFullYear(),0,4),it=new Date($e.getFullYear()+1,0,4),Un=We(mt),cc=We(it);return De(Un,$e)<=0?De(cc,$e)<=0?$e.getFullYear()+1:$e.getFullYear():$e.getFullYear()-1}var Ur={"%a":Y=>J[Y.tm_wday].substring(0,3),"%A":Y=>J[Y.tm_wday],"%b":Y=>te[Y.tm_mon].substring(0,3),"%B":Y=>te[Y.tm_mon],"%C":Y=>{var $e=Y.tm_year+1900;return ye($e/100|0,2)},"%d":Y=>ye(Y.tm_mday,2),"%e":Y=>le(Y.tm_mday,2," "),"%g":Y=>Je(Y).toString().substring(2),"%G":Y=>Je(Y),"%H":Y=>ye(Y.tm_hour,2),"%I":Y=>{var $e=Y.tm_hour;return $e==0?$e=12:$e>12&&($e-=12),ye($e,2)},"%j":Y=>ye(Y.tm_mday+Cd(xe(Y.tm_year+1900)?$a:Sa,Y.tm_mon-1),3),"%m":Y=>ye(Y.tm_mon+1,2),"%M":Y=>ye(Y.tm_min,2),"%n":()=>`\n`,"%p":Y=>Y.tm_hour>=0&&Y.tm_hour<12?"AM":"PM","%S":Y=>ye(Y.tm_sec,2),"%t":()=>"	","%u":Y=>Y.tm_wday||7,"%U":Y=>{var $e=Y.tm_yday+7-Y.tm_wday;return ye(Math.floor($e/7),2)},"%V":Y=>{var $e=Math.floor((Y.tm_yday+7-(Y.tm_wday+6)%7)/7);if((Y.tm_wday+371-Y.tm_yday-2)%7<=2&&$e++,$e){if($e==53){var it=(Y.tm_wday+371-Y.tm_yday)%7;it!=4&&(it!=3||!xe(Y.tm_year))&&($e=1)}}else{$e=52;var mt=(Y.tm_wday+7-Y.tm_yday-1)%7;(mt==4||mt==5&&xe(Y.tm_year%400-1))&&$e++}return ye($e,2)},"%w":Y=>Y.tm_wday,"%W":Y=>{var $e=Y.tm_yday+7-(Y.tm_wday+6)%7;return ye(Math.floor($e/7),2)},"%y":Y=>(Y.tm_year+1900).toString().substring(2),"%Y":Y=>Y.tm_year+1900,"%z":Y=>{var $e=Y.tm_gmtoff,mt=$e>=0;return $e=Math.abs($e)/60,$e=$e/60*100+$e%60,(mt?"+":"-")+("0000"+$e).slice(-4)},"%Z":Y=>Y.tm_zone,"%%":()=>"%"};D=D.replace(/%%/g,"\\0\\0");for(var F in Ur)D.includes(F)&&(D=D.replace(new RegExp(F,"g"),Ur[F](O)));D=D.replace(/\\0\\0/g,"%");var Eo=Id(D,!1);return Eo.length>d?0:(Td(Eo,i),Eo.length-1)}function Ed(i,d,p,y,I){return i>>>=0,d>>>=0,p>>>=0,y>>>=0,I>>>=0,xa(i,d,p,y)}cn(),Ar=r.BindingError=class extends Error{constructor(d){super(d),this.name="BindingError"}},pn=r.InternalError=class extends Error{constructor(d){super(d),this.name="InternalError"}},Ir(),gn();var Od={K:br,a:wr,A:bo,ia:Jr,ha:Sr,ga:en,fa:tn,ea:rn,da:nn,ca:on,I:an,ba:sn,aa:un,$:ln,_:dn,F:fn,W:Ne,V:yn,E:bn,t:vn,o:wn,D:_o,y:$n,U:Sn,T:Or,u:Co,x:dr,n:On,k:cr,b:qt,w:Rr,m:Pn,i:Bn,r:l,f:m,s:b,l:A,e:k,j:V,h:de,g:ie,c:ae,S:ue,R:Oe,Q:Rt,P:Mn,O:ad,N:id,v:sd,d:ld,C:dd,B:cd,M:pd,q:_a,L:fd,Z:yd,Y:bd,z:vd,H:wd,X:_d,G:xd,J:xa,p:Ed},se=yo(),kd=()=>(kd=se.ka)(),Pd=r._OrtInit=(i,d)=>(Pd=r._OrtInit=se.la)(i,d),Rd=r._OrtGetLastError=(i,d)=>(Rd=r._OrtGetLastError=se.ma)(i,d),Dd=r._OrtCreateSessionOptions=(i,d,p,y,I,O,D,N,F,J)=>(Dd=r._OrtCreateSessionOptions=se.na)(i,d,p,y,I,O,D,N,F,J),Bd=r._OrtAppendExecutionProvider=(i,d)=>(Bd=r._OrtAppendExecutionProvider=se.oa)(i,d),Md=r._OrtAddFreeDimensionOverride=(i,d,p)=>(Md=r._OrtAddFreeDimensionOverride=se.pa)(i,d,p),zd=r._OrtAddSessionConfigEntry=(i,d,p)=>(zd=r._OrtAddSessionConfigEntry=se.qa)(i,d,p),Ud=r._OrtReleaseSessionOptions=i=>(Ud=r._OrtReleaseSessionOptions=se.ra)(i),Vd=r._OrtCreateSession=(i,d,p)=>(Vd=r._OrtCreateSession=se.sa)(i,d,p),Nd=r._OrtReleaseSession=i=>(Nd=r._OrtReleaseSession=se.ta)(i),Wd=r._OrtGetInputOutputCount=(i,d,p)=>(Wd=r._OrtGetInputOutputCount=se.ua)(i,d,p),Gd=r._OrtGetInputName=(i,d)=>(Gd=r._OrtGetInputName=se.va)(i,d),Hd=r._OrtGetOutputName=(i,d)=>(Hd=r._OrtGetOutputName=se.wa)(i,d),Ld=r._OrtFree=i=>(Ld=r._OrtFree=se.xa)(i),Fd=r._OrtCreateTensor=(i,d,p,y,I,O)=>(Fd=r._OrtCreateTensor=se.ya)(i,d,p,y,I,O),jd=r._OrtGetTensorData=(i,d,p,y,I)=>(jd=r._OrtGetTensorData=se.za)(i,d,p,y,I),Kd=r._OrtReleaseTensor=i=>(Kd=r._OrtReleaseTensor=se.Aa)(i),qd=r._OrtCreateRunOptions=(i,d,p,y)=>(qd=r._OrtCreateRunOptions=se.Ba)(i,d,p,y),Yd=r._OrtAddRunConfigEntry=(i,d,p)=>(Yd=r._OrtAddRunConfigEntry=se.Ca)(i,d,p),Zd=r._OrtReleaseRunOptions=i=>(Zd=r._OrtReleaseRunOptions=se.Da)(i),Xd=r._OrtCreateBinding=i=>(Xd=r._OrtCreateBinding=se.Ea)(i),Qd=r._OrtBindInput=(i,d,p)=>(Qd=r._OrtBindInput=se.Fa)(i,d,p),Jd=r._OrtBindOutput=(i,d,p,y)=>(Jd=r._OrtBindOutput=se.Ga)(i,d,p,y),ec=r._OrtClearBoundOutputs=i=>(ec=r._OrtClearBoundOutputs=se.Ha)(i),tc=r._OrtReleaseBinding=i=>(tc=r._OrtReleaseBinding=se.Ia)(i),rc=r._OrtRunWithBinding=(i,d,p,y,I)=>(rc=r._OrtRunWithBinding=se.Ja)(i,d,p,y,I),nc=r._OrtRun=(i,d,p,y,I,O,D,N)=>(nc=r._OrtRun=se.Ka)(i,d,p,y,I,O,D,N),oc=r._OrtEndProfiling=i=>(oc=r._OrtEndProfiling=se.La)(i),ac=r._JsepOutput=(i,d,p)=>(ac=r._JsepOutput=se.Ma)(i,d,p),ic=r._JsepGetNodeName=i=>(ic=r._JsepGetNodeName=se.Na)(i),Ca=()=>(Ca=se.Oa)(),zr=r._malloc=i=>(zr=r._malloc=se.Pa)(i),$t=r._free=i=>($t=r._free=se.Qa)(i),Aa=i=>(Aa=se.Ra)(i),sc=(i,d)=>(sc=se.setThrew)(i,d),Ia=()=>(Ia=se.Ta)(),Ta=i=>(Ta=se.Ua)(i),Ea=i=>(Ea=se.Va)(i),uc=i=>(uc=se.__cxa_decrement_exception_refcount)(i),lc=i=>(lc=se.__cxa_increment_exception_refcount)(i),Oa=i=>(Oa=se.Wa)(i),ka=i=>(ka=se.Xa)(i),Pa=()=>(Pa=se.Ya)(),Ra=i=>(Ra=se.Za)(i),Da=()=>(Da=se._a)(),ff=r.___start_em_js=1390356,hf=r.___stop_em_js=1390517;function dc(i){i=Object.assign({},i);var d=y=>()=>y()>>>0,p=y=>I=>y(I)>>>0;return i.Oa=d(i.Oa),i.Pa=p(i.Pa),i.Ra=p(i.Ra),i.Ta=d(i.Ta),i.Va=p(i.Va),i}r.stackAlloc=Ea,r.stackSave=Ia,r.stackRestore=Ta,r.UTF8ToString=Ye,r.stringToUTF8=nr,r.lengthBytesUTF8=jt;var zn;Ge=function i(){zn||Ba(),zn||(Ge=i)};function Ba(){if(He>0||(ee(),He>0))return;function i(){zn||(zn=!0,r.calledRun=!0,!K&&(_e(),o(r),Xe()))}i()}return Ba(),t.ready}})();typeof Ua=="object"&&typeof Ro=="object"?Ro.exports=za:typeof define=="function"&&define.amd&&define([],()=>za)});var Na=Vr(()=>{});var Wa=Vr(()=>{});var Ga={};Vn(Ga,{cpus:()=>vc});var vc,Ha=Z(()=>{vc=void 0});var ja=Vr((Fa,Do)=>{"use strict";var La=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return Q.buffer!=ne.buffer&&_e(),ne}function o(){return Q.buffer!=ne.buffer&&_e(),be}function n(){return Q.buffer!=ne.buffer&&_e(),me}function s(){return Q.buffer!=ne.buffer&&_e(),Ke}function u(){return Q.buffer!=ne.buffer&&_e(),G}function c(){return Q.buffer!=ne.buffer&&_e(),ee}var a=t,f,g;a.ready=new Promise((l,m)=>{f=l,g=m}),a.jsepInit=(l,m,b,A,k,V,L,de)=>{a.Qb=l,a.wb=m,a.yb=b,a.jb=A,a.xb=k,a.Ea=V,a.zb=L,a.Ab=de,m=(ie,ae,ue)=>(...xe)=>{let ke=pt,R=ae?.();xe=ie(...xe);let pe=ae?.();return R!==pe&&(ie=pe,ue(R),ae=ue=null),pt!=ke?kr():xe},b=ie=>async(...ae)=>{try{if(a.bb)throw Error("Session already started");let ue=a.bb={Fb:ae[0],errors:[]},xe=await ie(...ae);if(a.bb!==ue)throw Error("Session mismatch");l.flush();let ke=ue.errors;if(0<ke.length){let R=await Promise.all(ke);if(R=R.filter(pe=>pe),0<R.length)throw Error(R.join(`\n`))}return xe}finally{a.bb=null}},a._OrtRun=b(m(a._OrtRun,()=>a._OrtRun,ie=>a._OrtRun=ie)),a._OrtRunWithBinding=b(m(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,ie=>a._OrtRunWithBinding=ie)),a._OrtBindInput=m(a._OrtBindInput,()=>a._OrtBindInput,ie=>a._OrtBindInput=ie),a.jsepRegisterBuffer=(ie,ae,ue,xe)=>l.registerBuffer(ie,ae,ue,xe),a.jsepUnregisterBuffers=ie=>{l.unregisterBuffers(ie)},a.jsepGetBuffer=ie=>l.getBuffer(ie),a.jsepCreateDownloader=(ie,ae,ue)=>l.createDownloader(ie,ae,ue)};var h=Object.assign({},a),w="./this.program",_=(l,m)=>{throw m},v=typeof window=="object",$=typeof importScripts=="function",C=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",x=a.ENVIRONMENT_IS_PTHREAD||!1,S="";function T(l){return a.locateFile?a.locateFile(l,S):S+l}var E,P,z;if(C){var H=(Wn(),Xt(Nn)),K=(Po(),Xt(ko));S=$?K.dirname(S)+"/":__dirname+"/",E=(m,b)=>(m=m.startsWith("file://")?new URL(m):K.normalize(m),H.readFileSync(m,b?void 0:"utf8")),z=m=>(m=E(m,!0),m.buffer||(m=new Uint8Array(m)),m),P=(m,b,A,k=!0)=>{m=m.startsWith("file://")?new URL(m):K.normalize(m),H.readFile(m,k?void 0:"utf8",(V,L)=>{V?A(V):b(k?L.buffer:L)})},!a.thisProgram&&1<process.argv.length&&(w=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),_=(m,b)=>{throw process.exitCode=m,b},a.inspect=()=>"[Emscripten Module object]";let l;try{l=Na()}catch(m){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),m}global.Worker=l.Worker}else(v||$)&&($?S=self.location.href:typeof document<"u"&&document.currentScript&&(S=document.currentScript.src),typeof e<"u"&&e&&(S=e),S.indexOf("blob:")!==0?S=S.substr(0,S.replace(/[?#].*/,"").lastIndexOf("/")+1):S="",C||(E=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.send(null),m.responseText},$&&(z=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),P=(l,m,b)=>{var A=new XMLHttpRequest;A.open("GET",l,!0),A.responseType="arraybuffer",A.onload=()=>{A.status==200||A.status==0&&A.response?m(A.response):b()},A.onerror=b,A.send(null)}));C&&typeof performance>"u"&&(global.performance=Wa().performance);var re=console.log.bind(console),q=console.error.bind(console);C&&(re=(...l)=>H.writeSync(1,l.join(" ")+`\n`),q=(...l)=>H.writeSync(2,l.join(" ")+`\n`));var ce=a.print||re,Se=a.printErr||q;Object.assign(a,h),h=null,a.thisProgram&&(w=a.thisProgram),a.quit&&(_=a.quit);var Pe;a.wasmBinary&&(Pe=a.wasmBinary);var U=a.noExitRuntime||!0;typeof WebAssembly!="object"&&dt("no native wasm support detected");var Q,W,Ce,we=!1,he,ne,be,me,Ke,G,ee;function _e(){var l=Q.buffer;a.HEAP8=ne=new Int8Array(l),a.HEAP16=new Int16Array(l),a.HEAP32=me=new Int32Array(l),a.HEAPU8=be=new Uint8Array(l),a.HEAPU16=new Uint16Array(l),a.HEAPU32=Ke=new Uint32Array(l),a.HEAPF32=G=new Float32Array(l),a.HEAPF64=ee=new Float64Array(l)}var Xe=a.INITIAL_MEMORY||16777216;if(5242880<=Xe||dt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Xe+"! (STACK_SIZE=5242880)"),x)Q=a.wasmMemory;else if(a.wasmMemory)Q=a.wasmMemory;else if(Q=new WebAssembly.Memory({initial:Xe/65536,maximum:65536,shared:!0}),!(Q.buffer instanceof SharedArrayBuffer))throw Se("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),C&&Se("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");_e(),Xe=Q.buffer.byteLength;var qe=[],Qe=[],He=[],je=0;function Ge(){return U||0<je}var et=0,Dt=null,lt=null;function jr(){et++,a.monitorRunDependencies&&a.monitorRunDependencies(et)}function yr(){if(et--,a.monitorRunDependencies&&a.monitorRunDependencies(et),et==0&&(Dt!==null&&(clearInterval(Dt),Dt=null),lt)){var l=lt;lt=null,l()}}function dt(l){throw a.onAbort&&a.onAbort(l),l="Aborted("+l+")",Se(l),we=!0,he=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),g(l),l}function Ot(l){return l.startsWith("data:application/octet-stream;base64,")}var kt;kt="ort-wasm-simd-threaded.wasm",Ot(kt)||(kt=T(kt));function Kr(l){if(l==kt&&Pe)return new Uint8Array(Pe);if(z)return z(l);throw"both async and sync fetching of the wasm failed"}function qr(l){if(!Pe&&(v||$)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at \'"+l+"\'";return m.arrayBuffer()}).catch(()=>Kr(l));if(P)return new Promise((m,b)=>{P(l,A=>m(new Uint8Array(A)),b)})}return Promise.resolve().then(()=>Kr(l))}function Yr(l,m,b){return qr(l).then(A=>WebAssembly.instantiate(A,m)).then(A=>A).then(b,A=>{Se("failed to asynchronously prepare wasm: "+A),dt(A)})}function yo(l,m){var b=kt;return Pe||typeof WebAssembly.instantiateStreaming!="function"||Ot(b)||b.startsWith("file://")||C||typeof fetch!="function"?Yr(b,l,m):fetch(b,{credentials:"same-origin"}).then(A=>WebAssembly.instantiateStreaming(A,l).then(m,function(k){return Se("wasm streaming compile failed: "+k),Se("falling back to ArrayBuffer instantiation"),Yr(b,l,m)}))}var Bt,br={912252:l=>{a.Ea("Abs",l,void 0)},912303:l=>{a.Ea("Neg",l,void 0)},912354:l=>{a.Ea("Floor",l,void 0)},912407:l=>{a.Ea("Ceil",l,void 0)},912459:l=>{a.Ea("Reciprocal",l,void 0)},912517:l=>{a.Ea("Sqrt",l,void 0)},912569:l=>{a.Ea("Exp",l,void 0)},912620:l=>{a.Ea("Erf",l,void 0)},912671:l=>{a.Ea("Sigmoid",l,void 0)},912726:l=>{a.Ea("Log",l,void 0)},912777:l=>{a.Ea("Sin",l,void 0)},912828:l=>{a.Ea("Cos",l,void 0)},912879:l=>{a.Ea("Tan",l,void 0)},912930:l=>{a.Ea("Asin",l,void 0)},912982:l=>{a.Ea("Acos",l,void 0)},913034:l=>{a.Ea("Atan",l,void 0)},913086:l=>{a.Ea("Sinh",l,void 0)},913138:l=>{a.Ea("Cosh",l,void 0)},913190:l=>{a.Ea("Asinh",l,void 0)},913243:l=>{a.Ea("Acosh",l,void 0)},913296:l=>{a.Ea("Atanh",l,void 0)},913349:l=>{a.Ea("Tanh",l,void 0)},913401:l=>{a.Ea("Not",l,void 0)},913452:(l,m,b)=>{a.Ea("ClipV10",l,{min:m,max:b})},913524:l=>{a.Ea("Clip",l,void 0)},913576:(l,m)=>{a.Ea("Elu",l,{alpha:m})},913634:l=>{a.Ea("Relu",l,void 0)},913686:(l,m)=>{a.Ea("LeakyRelu",l,{alpha:m})},913750:(l,m)=>{a.Ea("ThresholdedRelu",l,{alpha:m})},913820:(l,m)=>{a.Ea("Cast",l,{to:m})},913878:l=>{a.Ea("Add",l,void 0)},913929:l=>{a.Ea("Sub",l,void 0)},913980:l=>{a.Ea("Mul",l,void 0)},914031:l=>{a.Ea("Div",l,void 0)},914082:l=>{a.Ea("Pow",l,void 0)},914133:l=>{a.Ea("Equal",l,void 0)},914186:l=>{a.Ea("Greater",l,void 0)},914241:l=>{a.Ea("GreaterOrEqual",l,void 0)},914303:l=>{a.Ea("Less",l,void 0)},914355:l=>{a.Ea("LessOrEqual",l,void 0)},914414:(l,m,b,A,k)=>{a.Ea("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},914578:(l,m,b,A,k)=>{a.Ea("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},914741:(l,m,b,A,k)=>{a.Ea("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},914904:(l,m,b,A,k)=>{a.Ea("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},915068:(l,m,b,A,k)=>{a.Ea("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},915231:(l,m,b,A,k)=>{a.Ea("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},915393:(l,m,b,A,k)=>{a.Ea("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},915555:(l,m,b,A,k)=>{a.Ea("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},915721:(l,m,b,A,k)=>{a.Ea("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},915890:(l,m,b,A,k)=>{a.Ea("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!b,axes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},916059:l=>{a.Ea("Where",l,void 0)},916112:(l,m,b)=>{a.Ea("Transpose",l,{perm:m?Array.from(n().subarray(b>>>0,b+m>>>0)):[]})},916225:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke,R,pe)=>{a.Ea("ConvTranspose",l,{format:ie?"NHWC":"NCHW",autoPad:m,dilations:[b],group:A,kernel_shape:[k],pads:[V,L],strides:[de],wIsConst:()=>!!r()[ae>>>0],outputPadding:ue?Array.from(n().subarray(xe>>>0,xe+ue>>>0)):[],outputShape:ke?Array.from(n().subarray(R>>>0,R+ke>>>0)):[],activation:tt(pe)})},916639:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke,R)=>{a.Ea("ConvTranspose",l,{format:de?"NHWC":"NCHW",autoPad:m,dilations:Array.from(n().subarray(b>>>0,b+2>>>0)),group:A,kernelShape:Array.from(n().subarray(k>>>0,k+2>>>0)),pads:Array.from(n().subarray(V>>>0,V+4>>>0)),strides:Array.from(n().subarray(L>>>0,L+2>>>0)),wIsConst:()=>!!r()[ie>>>0],outputPadding:0<ae?Array.from(n().subarray(ue>>>0,ue+ae>>>0)):[],outputShape:0<xe?Array.from(n().subarray(ke>>>0,ke+xe>>>0)):[],activation:tt(R)})},917196:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke,R,pe)=>{a.Ea("ConvTranspose",l,{format:ie?"NHWC":"NCHW",autoPad:m,dilations:[b],group:A,kernel_shape:[k],pads:[V,L],strides:[de],wIsConst:()=>!!r()[ae>>>0],outputPadding:ue?Array.from(n().subarray(xe>>>0,xe+ue>>>0)):[],outputShape:ke?Array.from(n().subarray(R>>>0,R+ke>>>0)):[],activation:tt(pe)})},917610:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke,R)=>{a.Ea("ConvTranspose",l,{format:de?"NHWC":"NCHW",autoPad:m,dilations:Array.from(n().subarray(b>>>0,b+2>>>0)),group:A,kernelShape:Array.from(n().subarray(k>>>0,k+2>>>0)),pads:Array.from(n().subarray(V>>>0,V+4>>>0)),strides:Array.from(n().subarray(L>>>0,L+2>>>0)),wIsConst:()=>!!r()[ie>>>0],outputPadding:0<ae?Array.from(n().subarray(ue>>>0,ue+ae>>>0)):[],outputShape:0<xe?Array.from(n().subarray(ke>>>0,ke+xe>>>0)):[],activation:tt(R)})},918167:(l,m)=>{a.Ea("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},918258:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke,R,pe,Oe)=>{a.Ea("AveragePool",l,{format:Oe?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:A,storage_order:k,dilations:[V,L],kernel_shape:[de,ie],pads:[ae,ue,xe,ke],strides:[R,pe]})},918542:(l,m)=>{a.Ea("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},918633:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke,R,pe,Oe)=>{a.Ea("AveragePool",l,{format:Oe?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:A,storage_order:k,dilations:[V,L],kernel_shape:[de,ie],pads:[ae,ue,xe,ke],strides:[R,pe]})},918917:(l,m)=>{a.Ea("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919004:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke,R,pe,Oe)=>{a.Ea("MaxPool",l,{format:Oe?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:A,storage_order:k,dilations:[V,L],kernel_shape:[de,ie],pads:[ae,ue,xe,ke],strides:[R,pe]})},919284:(l,m)=>{a.Ea("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919371:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke,R,pe,Oe)=>{a.Ea("MaxPool",l,{format:Oe?"NHWC":"NCHW",auto_pad:m,ceil_mode:b,count_include_pad:A,storage_order:k,dilations:[V,L],kernel_shape:[de,ie],pads:[ae,ue,xe,ke],strides:[R,pe]})},919651:(l,m,b,A,k)=>{a.Ea("Gemm",l,{alpha:m,beta:b,transA:A,transB:k})},919755:l=>{a.Ea("MatMul",l,void 0)},919809:(l,m,b,A)=>{a.Ea("ArgMax",l,{keepDims:!!m,selectLastIndex:!!b,axis:A})},919917:(l,m,b,A)=>{a.Ea("ArgMin",l,{keepDims:!!m,selectLastIndex:!!b,axis:A})},920025:(l,m)=>{a.Ea("Softmax",l,{axis:m})},920088:(l,m)=>{a.Ea("Concat",l,{axis:m})},920148:(l,m,b,A,k)=>{a.Ea("Split",l,{axis:m,numOutputs:b,splitSizes:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},920293:l=>{a.Ea("Expand",l,void 0)},920347:(l,m)=>{a.Ea("Gather",l,{axis:Number(m)})},920418:(l,m)=>{a.Ea("GatherElements",l,{axis:Number(m)})},920497:(l,m,b,A,k,V,L,de,ie,ae,ue)=>{a.Ea("Resize",l,{antialias:m,axes:b?Array.from(n().subarray(A>>>0,A+b>>>0)):[],coordinateTransformMode:tt(k),cubicCoeffA:V,excludeOutside:L,extrapolationValue:de,keepAspectRatioPolicy:tt(ie),mode:tt(ae),nearestMode:tt(ue)})},920848:(l,m,b,A,k,V,L)=>{a.Ea("Slice",l,{starts:m?Array.from(n().subarray(b>>>0,b+m>>>0)):[],ends:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[],axes:V?Array.from(n().subarray(L>>>0,L+V>>>0)):[]})},921079:l=>{a.Ea("Tile",l,void 0)},921131:(l,m,b)=>{a.Ea("LayerNormalization",l,{axis:Number(m),epsilon:Number(b)})},921238:(l,m,b)=>{a.Ea("InstanceNormalization",l,{epsilon:m,format:b?"NHWC":"NCHW"})},921352:(l,m,b)=>{a.Ea("InstanceNormalization",l,{epsilon:m,format:b?"NHWC":"NCHW"})},921466:l=>{a.Ea("Range",l,void 0)},921519:(l,m)=>{a.Ea("Einsum",l,{equation:tt(m)})},921600:(l,m,b,A,k)=>{a.Ea("Pad",l,{mode:m,value:b,pads:A?Array.from(n().subarray(k>>>0,k+A>>>0)):[]})},921732:l=>{a.Ea("Gelu",l,void 0)},921784:l=>{a.Ea("BiasAdd",l,void 0)},921839:l=>{a.Ea("BiasSplitGelu",l,void 0)},921900:(l,m)=>{a.Ea("SkipLayerNormalization",l,{epsilon:m})},921981:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke)=>{a.Ea("Conv",l,{format:ie?"NHWC":"NCHW",auto_pad:m,dilations:[b],group:A,kernel_shape:[k],pads:V?Array.from(n().subarray(L>>>0,L+V>>>0)):[],strides:[de],w_is_const:()=>!!r()[ae>>>0],activation:tt(ue),activation_params:xe?Array.from(u().subarray(ke>>>0,ke+xe>>>0)):[]})},922362:(l,m,b,A,k,V,L,de,ie,ae,ue,xe,ke,R,pe,Oe)=>{a.Ea("Conv",l,{format:xe?"NHWC":"NCHW",auto_pad:m,dilations:[b,A],group:k,kernel_shape:[V,L],pads:de?Array.from(n().subarray(ie>>>0,ie+de>>>0)):[],strides:[ae,ue],w_is_const:()=>!!r()[ke>>>0],activation:tt(R),activation_params:pe?Array.from(u().subarray(Oe>>>0,Oe+pe>>>0)):[]})},922764:l=>{a.zb(l)},922798:(l,m)=>a.Ab(l,m,a.bb.Fb,a.bb.errors),922910:l=>a.wb(l),922943:l=>a.yb(l),922975:(l,m,b)=>{a.jb(l,m,b,!0)},923014:(l,m,b)=>{a.jb(l,m,b)}};function Ht(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}function Lt(l){l.terminate(),l.onmessage=()=>{}}function Zr(l){(l=ge.Qa[l])||dt(),ge.Eb(l)}function vr(l){var m=ge.tb();if(!m)return 6;ge.Ya.push(m),ge.Qa[l.Xa]=m,m.Xa=l.Xa;var b={cmd:"run",start_routine:l.Gb,arg:l.rb,pthread_ptr:l.Xa};return C&&m.unref(),m.postMessage(b,l.Mb),0}var Xr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Qr=(l,m,b)=>{m>>>=0;var A=m+b;for(b=m;l[b]&&!(b>=A);)++b;if(16<b-m&&l.buffer&&Xr)return Xr.decode(l.buffer instanceof SharedArrayBuffer?l.slice(m,b):l.subarray(m,b));for(A="";m<b;){var k=l[m++];if(k&128){var V=l[m++]&63;if((k&224)==192)A+=String.fromCharCode((k&31)<<6|V);else{var L=l[m++]&63;k=(k&240)==224?(k&15)<<12|V<<6|L:(k&7)<<18|V<<12|L<<6|l[m++]&63,65536>k?A+=String.fromCharCode(k):(k-=65536,A+=String.fromCharCode(55296|k>>10,56320|k&1023))}}else A+=String.fromCharCode(k)}return A},tt=(l,m)=>(l>>>=0)?Qr(o(),l,m):"";function Mt(l){if(x)return Ne(1,1,l);he=l,Ge()||(ge.Hb(),a.onExit&&a.onExit(l),we=!0),_(l,new Ht(l))}var wr=l=>{if(he=l,x)throw _r(l),"unwind";Mt(l)},ge={ab:[],Ya:[],mb:[],Qa:{},gb:function(){x?ge.vb():ge.ub()},ub:function(){qe.unshift(()=>{jr(),ge.Bb(()=>yr())})},vb:function(){ge.receiveObjectTransfer=ge.Db,ge.threadInitTLS=ge.lb,ge.setExitStatus=ge.kb,U=!1},kb:function(l){he=l},Sb:["$terminateWorker"],Hb:function(){for(var l of ge.Ya)Lt(l);for(l of ge.ab)Lt(l);ge.ab=[],ge.Ya=[],ge.Qa=[]},Eb:function(l){var m=l.Xa;delete ge.Qa[m],ge.ab.push(l),ge.Ya.splice(ge.Ya.indexOf(l),1),l.Xa=0,oe(m)},Db:function(){},lb:function(){ge.mb.forEach(l=>l())},Cb:l=>new Promise(m=>{l.onmessage=V=>{V=V.data;var L=V.cmd;if(V.targetThread&&V.targetThread!=lr()){var de=ge.Qa[V.Rb];de?de.postMessage(V,V.transferList):Se(\'Internal error! Worker sent a message "\'+L+\'" to target pthread \'+V.targetThread+", but that thread no longer exists!")}else L==="checkMailbox"?zt():L==="spawnThread"?vr(V):L==="cleanupThread"?Zr(V.thread):L==="killThread"?(V=V.thread,L=ge.Qa[V],delete ge.Qa[V],Lt(L),oe(V),ge.Ya.splice(ge.Ya.indexOf(L),1),L.Xa=0):L==="cancelThread"?ge.Qa[V.thread].postMessage({cmd:"cancel"}):L==="loaded"?(l.loaded=!0,m(l)):L==="alert"?alert("Thread "+V.threadId+": "+V.text):V.target==="setimmediate"?l.postMessage(V):L==="callHandler"?a[V.handler](...V.args):L&&Se("worker sent an unknown command "+L)},l.onerror=V=>{throw Se("worker sent an error! "+V.filename+":"+V.lineno+": "+V.message),V},C&&(l.on("message",function(V){l.onmessage({data:V})}),l.on("error",function(V){l.onerror(V)}));var b=[],A=["onExit","onAbort","print","printErr"],k;for(k of A)a.hasOwnProperty(k)&&b.push(k);l.postMessage({cmd:"load",handlers:b,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:Q,wasmModule:Ce})}),Bb:function(l){l()},qb:function(){var l=T("ort-wasm-simd-threaded.worker.js");l=new Worker(l),ge.ab.push(l)},tb:function(){return ge.ab.length==0&&(ge.qb(),ge.Cb(ge.ab[0])),ge.ab.pop()}};a.PThread=ge;var Ft=l=>{for(;0<l.length;)l.shift()(a)};a.establishStackSpace=function(){var l=lr(),m=n()[l+52>>2>>>0];l=n()[l+56>>2>>>0],kn(m,m-l),cr(m)};function _r(l){if(x)return Ne(2,0,l);wr(l)}a.invokeEntryPoint=function(l,m){l=Dr.apply(null,[l,m]),Ge()?ge.kb(l):dr(l)};function Ye(l){this.fb=l-24,this.pb=function(m){s()[this.fb+4>>2>>>0]=m},this.ob=function(m){s()[this.fb+8>>2>>>0]=m},this.gb=function(m,b){this.nb(),this.pb(m),this.ob(b)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Pt=0,bo=0;function Jr(l,m,b,A){return x?Ne(3,1,l,m,b,A):jt(l,m,b,A)}function jt(l,m,b,A){if(l>>>=0,m>>>=0,b>>>=0,A>>>=0,typeof SharedArrayBuffer>"u")return Se("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var k=[];return x&&k.length===0?Jr(l,m,b,A):(l={Gb:b,Xa:l,rb:A,Mb:k},x?(l.Ob="spawnThread",postMessage(l,k),0):vr(l))}function $r(l,m,b){return x?Ne(4,1,l,m,b):0}function nr(l,m){if(x)return Ne(5,1,l,m)}var Sr=l=>{for(var m=0,b=0;b<l.length;++b){var A=l.charCodeAt(b);127>=A?m++:2047>=A?m+=2:55296<=A&&57343>=A?(m+=4,++b):m+=3}return m},en=(l,m,b,A)=>{if(b>>>=0,!(0<A))return 0;var k=b;A=b+A-1;for(var V=0;V<l.length;++V){var L=l.charCodeAt(V);if(55296<=L&&57343>=L){var de=l.charCodeAt(++V);L=65536+((L&1023)<<10)|de&1023}if(127>=L){if(b>=A)break;m[b++>>>0]=L}else{if(2047>=L){if(b+1>=A)break;m[b++>>>0]=192|L>>6}else{if(65535>=L){if(b+2>=A)break;m[b++>>>0]=224|L>>12}else{if(b+3>=A)break;m[b++>>>0]=240|L>>18,m[b++>>>0]=128|L>>12&63}m[b++>>>0]=128|L>>6&63}m[b++>>>0]=128|L&63}}return m[b>>>0]=0,b-k},tn=(l,m,b)=>en(l,o(),m,b);function rn(l,m){if(x)return Ne(6,1,l,m)}function nn(l,m,b){if(x)return Ne(7,1,l,m,b)}function on(l,m,b){return x?Ne(8,1,l,m,b):0}function an(l,m){if(x)return Ne(9,1,l,m)}function sn(l,m,b){if(x)return Ne(10,1,l,m,b)}function un(l,m,b,A){if(x)return Ne(11,1,l,m,b,A)}function ln(l,m,b,A){if(x)return Ne(12,1,l,m,b,A)}function dn(l,m,b,A){if(x)return Ne(13,1,l,m,b,A)}function xr(l){if(x)return Ne(14,1,l)}function cn(l,m){if(x)return Ne(15,1,l,m)}function Cr(l,m,b){if(x)return Ne(16,1,l,m,b)}var at=l=>{if(!we)try{if(l(),!Ge())try{x?dr(he):wr(he)}catch(m){m instanceof Ht||m=="unwind"||_(1,m)}}catch(m){m instanceof Ht||m=="unwind"||_(1,m)}};function Kt(l){l>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),l>>2,l).value.then(zt),l+=128,Atomics.store(n(),l>>2,1))}a.__emscripten_thread_mailbox_await=Kt;function zt(){var l=lr();l&&(Kt(l),at(()=>Yt()))}a.checkMailbox=zt;var Ut=l=>l%4===0&&(l%100!==0||l%400===0),Ar=[0,31,60,91,121,152,182,213,244,274,305,335],vt=[0,31,59,90,120,151,181,212,243,273,304,334];function pn(l,m,b,A,k,V,L,de){return x?Ne(17,1,l,m,b,A,k,V,L,de):-52}function mn(l,m,b,A,k,V,L){if(x)return Ne(18,1,l,m,b,A,k,V,L)}var ct=l=>{var m=Sr(l)+1,b=Pr(m);return b&&tn(l,b,m),b},or=[],fn=(l,m)=>{or.length=0;var b;for(m>>=2;b=o()[l++>>>0];)m+=b!=105&m,or.push(b==105?n()[m>>>0]:c()[m++>>>1]),++m;return or},wt=l=>{var m=Zt();return l=l(),cr(m),l};function Ne(l,m){var b=arguments.length-2,A=arguments;return wt(()=>{for(var k=Rr(8*b),V=k>>3,L=0;L<b;L++){var de=A[2+L];c()[V+L>>>0]=de}return En(l,b,k,m)})}var Ir=[],ar={},ot=()=>{if(!qt){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:w||"./this.program"},m;for(m in ar)ar[m]===void 0?delete l[m]:l[m]=ar[m];var b=[];for(m in l)b.push(`${m}=${l[m]}`);qt=b}return qt},qt;function hn(l,m){if(x)return Ne(19,1,l,m);l>>>=0,m>>>=0;var b=0;return ot().forEach(function(A,k){var V=m+b;for(k=s()[l+4*k>>2>>>0]=V,V=0;V<A.length;++V)r()[k++>>0>>>0]=A.charCodeAt(V);r()[k>>0>>>0]=0,b+=A.length+1}),0}function gn(l,m){if(x)return Ne(20,1,l,m);l>>>=0,m>>>=0;var b=ot();s()[l>>2>>>0]=b.length;var A=0;return b.forEach(function(k){A+=k.length+1}),s()[m>>2>>>0]=A,0}function Me(l){return x?Ne(21,1,l):52}function Tr(l,m,b,A){return x?Ne(22,1,l,m,b,A):52}function yn(l,m,b,A,k){return x?Ne(23,1,l,m,b,A,k):70}var vo=[null,[],[]];function bn(l,m,b,A){if(x)return Ne(24,1,l,m,b,A);m>>>=0,b>>>=0,A>>>=0;for(var k=0,V=0;V<b;V++){var L=s()[m>>2>>>0],de=s()[m+4>>2>>>0];m+=8;for(var ie=0;ie<de;ie++){var ae=o()[L+ie>>>0],ue=vo[l];ae===0||ae===10?((l===1?ce:Se)(Qr(ue,0)),ue.length=0):ue.push(ae)}k+=de}return s()[A>>2>>>0]=k,0}var vn=[31,29,31,30,31,30,31,31,30,31,30,31],wn=[31,28,31,30,31,30,31,31,30,31,30,31];function wo(l){var m=Array(Sr(l)+1);return en(l,m,0,m.length),m}var _o=(l,m)=>{r().set(l,m>>>0)};function Er(l,m,b,A){function k(R,pe,Oe){for(R=typeof R=="number"?R.toString():R||"";R.length<pe;)R=Oe[0]+R;return R}function V(R,pe){return k(R,pe,"0")}function L(R,pe){function Oe(Mn){return 0>Mn?-1:0<Mn?1:0}var Rt;return(Rt=Oe(R.getFullYear()-pe.getFullYear()))===0&&(Rt=Oe(R.getMonth()-pe.getMonth()))===0&&(Rt=Oe(R.getDate()-pe.getDate())),Rt}function de(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function ie(R){var pe=R.Za;for(R=new Date(new Date(R.$a+1900,0,1).getTime());0<pe;){var Oe=R.getMonth(),Rt=(Ut(R.getFullYear())?vn:wn)[Oe];if(pe>Rt-R.getDate())pe-=Rt-R.getDate()+1,R.setDate(1),11>Oe?R.setMonth(Oe+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+pe);break}}return Oe=new Date(R.getFullYear()+1,0,4),pe=de(new Date(R.getFullYear(),0,4)),Oe=de(Oe),0>=L(pe,R)?0>=L(Oe,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}l>>>=0,m>>>=0,b>>>=0,A>>>=0;var ae=n()[A+40>>2>>>0];A={Kb:n()[A>>2>>>0],Jb:n()[A+4>>2>>>0],cb:n()[A+8>>2>>>0],ib:n()[A+12>>2>>>0],eb:n()[A+16>>2>>>0],$a:n()[A+20>>2>>>0],Wa:n()[A+24>>2>>>0],Za:n()[A+28>>2>>>0],Tb:n()[A+32>>2>>>0],Ib:n()[A+36>>2>>>0],Lb:ae?tt(ae):""},b=tt(b),ae={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ue in ae)b=b.replace(new RegExp(ue,"g"),ae[ue]);var xe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ke="January February March April May June July August September October November December".split(" ");ae={"%a":R=>xe[R.Wa].substring(0,3),"%A":R=>xe[R.Wa],"%b":R=>ke[R.eb].substring(0,3),"%B":R=>ke[R.eb],"%C":R=>V((R.$a+1900)/100|0,2),"%d":R=>V(R.ib,2),"%e":R=>k(R.ib,2," "),"%g":R=>ie(R).toString().substring(2),"%G":R=>ie(R),"%H":R=>V(R.cb,2),"%I":R=>(R=R.cb,R==0?R=12:12<R&&(R-=12),V(R,2)),"%j":R=>{for(var pe=0,Oe=0;Oe<=R.eb-1;pe+=(Ut(R.$a+1900)?vn:wn)[Oe++]);return V(R.ib+pe,3)},"%m":R=>V(R.eb+1,2),"%M":R=>V(R.Jb,2),"%n":()=>`\n`,"%p":R=>0<=R.cb&&12>R.cb?"AM":"PM","%S":R=>V(R.Kb,2),"%t":()=>"	","%u":R=>R.Wa||7,"%U":R=>V(Math.floor((R.Za+7-R.Wa)/7),2),"%V":R=>{var pe=Math.floor((R.Za+7-(R.Wa+6)%7)/7);if(2>=(R.Wa+371-R.Za-2)%7&&pe++,pe)pe==53&&(Oe=(R.Wa+371-R.Za)%7,Oe==4||Oe==3&&Ut(R.$a)||(pe=1));else{pe=52;var Oe=(R.Wa+7-R.Za-1)%7;(Oe==4||Oe==5&&Ut(R.$a%400-1))&&pe++}return V(pe,2)},"%w":R=>R.Wa,"%W":R=>V(Math.floor((R.Za+7-(R.Wa+6)%7)/7),2),"%y":R=>(R.$a+1900).toString().substring(2),"%Y":R=>R.$a+1900,"%z":R=>{R=R.Ib;var pe=0<=R;return R=Math.abs(R)/60,(pe?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Lb,"%%":()=>"%"},b=b.replace(/%%/g,"\\0\\0");for(ue in ae)b.includes(ue)&&(b=b.replace(new RegExp(ue,"g"),ae[ue](A)));return b=b.replace(/\\0\\0/g,"%"),ue=wo(b),ue.length>m?0:(_o(ue,l),ue.length-1)}function ir(l){try{l()}catch(m){dt(m)}}function $o(l){var m={},b;for(b in l)(function(A){var k=l[A];m[A]=typeof k=="function"?function(){sr.push(A);try{return k.apply(null,arguments)}finally{we||(sr.pop()===A||dt(),pt&&_t===1&&sr.length===0&&(_t=0,je+=1,ir(Rn),typeof Fibers<"u"&&Fibers.Ub()))}}:k})(b);return m}var _t=0,pt=null,_n=0,sr=[],$n={},Sn={},So=0,Or=null,xo=[];function kr(){return new Promise((l,m)=>{Or={resolve:l,reject:m}})}function xn(){var l=Pr(65548),m=l+12;s()[l>>2>>>0]=m,s()[l+4>>2>>>0]=m+65536,m=sr[0];var b=$n[m];return b===void 0&&(b=So++,$n[m]=b,Sn[b]=m),m=b,n()[l+8>>2>>>0]=m,l}function Co(){var l=n()[pt+8>>2>>>0];return l=W[Sn[l]],--je,l()}function ur(l){if(!we){if(_t===0){var m=!1,b=!1;l((A=0)=>{if(!we&&(_n=A,m=!0,b)){_t=2,ir(()=>Dn(pt)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),A=!1;try{var k=Co()}catch(de){k=de,A=!0}var V=!1;if(!pt){var L=Or;L&&(Or=null,(A?L.reject:L.resolve)(k),V=!0)}if(A&&!V)throw k}}),b=!0,m||(_t=1,pt=xn(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),ir(()=>Pn(pt)))}else _t===2?(_t=0,ir(Br),In(pt),pt=null,xo.forEach(A=>at(A))):dt(`invalid state: ${_t}`);return _n}}function Cn(l){return ur(m=>{l().then(m)})}ge.gb();var Ao=[null,Mt,_r,Jr,$r,nr,rn,nn,on,an,sn,un,ln,dn,xr,cn,Cr,pn,mn,hn,gn,Me,Tr,yn,bn],An={r:function(l,m,b){return Cn(async()=>{await a.xb(l,m,b)})},b:function(l,m,b){throw l>>>=0,new Ye(l).gb(m>>>0,b>>>0),Pt=l,bo++,Pt},O:function(l){Tn(l>>>0,!$,1,!v,131072,!1),ge.lb()},l:function(l){l>>>=0,x?postMessage({cmd:"cleanupThread",thread:l}):Zr(l)},I:jt,i:$r,U:nr,E:rn,G:nn,V:on,S:an,K:sn,R:un,p:ln,F:dn,C:xr,T:cn,D:Cr,q:()=>!0,A:function(l,m){l>>>=0,l==m>>>0?setTimeout(()=>zt()):x?postMessage({targetThread:l,cmd:"checkMailbox"}):(l=ge.Qa[l])&&l.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:Kt,X:function(l){C&&ge.Qa[l>>>0].ref()},u:function(l,m,b){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,b>>>=0,l=new Date(1e3*l),n()[b>>2>>>0]=l.getUTCSeconds(),n()[b+4>>2>>>0]=l.getUTCMinutes(),n()[b+8>>2>>>0]=l.getUTCHours(),n()[b+12>>2>>>0]=l.getUTCDate(),n()[b+16>>2>>>0]=l.getUTCMonth(),n()[b+20>>2>>>0]=l.getUTCFullYear()-1900,n()[b+24>>2>>>0]=l.getUTCDay(),l=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[b+28>>2>>>0]=l},v:function(l,m,b){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,b>>>=0,l=new Date(1e3*l),n()[b>>2>>>0]=l.getSeconds(),n()[b+4>>2>>>0]=l.getMinutes(),n()[b+8>>2>>>0]=l.getHours(),n()[b+12>>2>>>0]=l.getDate(),n()[b+16>>2>>>0]=l.getMonth(),n()[b+20>>2>>>0]=l.getFullYear()-1900,n()[b+24>>2>>>0]=l.getDay(),m=(Ut(l.getFullYear())?Ar:vt)[l.getMonth()]+l.getDate()-1|0,n()[b+28>>2>>>0]=m,n()[b+36>>2>>>0]=-(60*l.getTimezoneOffset()),m=new Date(l.getFullYear(),6,1).getTimezoneOffset();var A=new Date(l.getFullYear(),0,1).getTimezoneOffset();l=(m!=A&&l.getTimezoneOffset()==Math.min(A,m))|0,n()[b+32>>2>>>0]=l},w:function(l){l>>>=0;var m=new Date(n()[l+20>>2>>>0]+1900,n()[l+16>>2>>>0],n()[l+12>>2>>>0],n()[l+8>>2>>>0],n()[l+4>>2>>>0],n()[l>>2>>>0],0),b=n()[l+32>>2>>>0],A=m.getTimezoneOffset(),k=new Date(m.getFullYear(),6,1).getTimezoneOffset(),V=new Date(m.getFullYear(),0,1).getTimezoneOffset(),L=Math.min(V,k);return 0>b?n()[l+32>>2>>>0]=+(k!=V&&L==A):0<b!=(L==A)&&(k=Math.max(V,k),m.setTime(m.getTime()+6e4*((0<b?L:k)-A))),n()[l+24>>2>>>0]=m.getDay(),b=(Ut(m.getFullYear())?Ar:vt)[m.getMonth()]+m.getDate()-1|0,n()[l+28>>2>>>0]=b,n()[l>>2>>>0]=m.getSeconds(),n()[l+4>>2>>>0]=m.getMinutes(),n()[l+8>>2>>>0]=m.getHours(),n()[l+12>>2>>>0]=m.getDate(),n()[l+16>>2>>>0]=m.getMonth(),n()[l+20>>2>>>0]=m.getYear(),l=m.getTime()/1e3,On((Bt=l,1<=+Math.abs(Bt)?0<Bt?+Math.floor(Bt/4294967296)>>>0:~~+Math.ceil((Bt-+(~~Bt>>>0))/4294967296)>>>0:0)),l>>>0},s:pn,t:mn,z:function(l,m,b){function A(ae){return(ae=ae.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?ae[1]:"GMT"}l>>>=0,m>>>=0,b>>>=0;var k=new Date().getFullYear(),V=new Date(k,0,1),L=new Date(k,6,1);k=V.getTimezoneOffset();var de=L.getTimezoneOffset(),ie=Math.max(k,de);s()[l>>2>>>0]=60*ie,n()[m>>2>>>0]=+(k!=de),l=A(V),m=A(L),l=ct(l),m=ct(m),de<k?(s()[b>>2>>>0]=l,s()[b+4>>2>>>0]=m):(s()[b>>2>>>0]=m,s()[b+4>>2>>>0]=l)},d:()=>{dt("")},c:function(l,m,b){return l>>>=0,m=fn(m>>>0,b>>>0),br[l].apply(null,m)},k:function(l,m,b){return l>>>=0,m=fn(m>>>0,b>>>0),br[l].apply(null,m)},m:function(){},j:function(){return Date.now()},W:()=>{throw je+=1,"unwind"},B:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return C?(Ha(),Xt(Ga)).cpus().length:navigator.hardwareConcurrency},L:function(l,m,b,A){for(ge.Pb=m>>>0,Ir.length=b,m=A>>>0>>3,A=0;A<b;A++)Ir[A]=c()[m+A>>>0];return(0>l?br[-l-1]:Ao[l]).apply(null,Ir)},y:function(l){l>>>=0;var m=o().length;if(l<=m||4294901760<l)return!1;for(var b=1;4>=b;b*=2){var A=m*(1+.2/b);A=Math.min(A,l+100663296);var k=Math;A=Math.max(l,A);e:{k=k.min.call(k,4294901760,A+(65536-A%65536)%65536)-Q.buffer.byteLength+65535>>>16;try{Q.grow(k),_e();var V=1;break e}catch{}V=void 0}if(V)return!0}return!1},P:hn,Q:gn,H:wr,h:Me,o:Tr,x:yn,n:bn,a:Q||a.wasmMemory,J:Er,e:function(l,m,b,A){return Er(l>>>0,m>>>0,b>>>0,A>>>0)}};(function(){function l(b,A){return b=b.exports,b=$o(b),W=b=ya(b),ge.mb.push(W.Da),Qe.unshift(W.Y),Ce=A,yr(),b}var m={a:An};if(jr(),a.instantiateWasm)try{return a.instantiateWasm(m,l)}catch(b){Se("Module.instantiateWasm callback failed with error: "+b),g(b)}return yo(m,function(b){l(b.instance,b.module)}).catch(g),{}})(),a._OrtInit=(l,m)=>(a._OrtInit=W.Z)(l,m),a._OrtGetLastError=(l,m)=>(a._OrtGetLastError=W._)(l,m),a._OrtCreateSessionOptions=(l,m,b,A,k,V,L,de,ie,ae)=>(a._OrtCreateSessionOptions=W.$)(l,m,b,A,k,V,L,de,ie,ae),a._OrtAppendExecutionProvider=(l,m)=>(a._OrtAppendExecutionProvider=W.aa)(l,m),a._OrtAddFreeDimensionOverride=(l,m,b)=>(a._OrtAddFreeDimensionOverride=W.ba)(l,m,b),a._OrtAddSessionConfigEntry=(l,m,b)=>(a._OrtAddSessionConfigEntry=W.ca)(l,m,b),a._OrtReleaseSessionOptions=l=>(a._OrtReleaseSessionOptions=W.da)(l),a._OrtCreateSession=(l,m,b)=>(a._OrtCreateSession=W.ea)(l,m,b),a._OrtReleaseSession=l=>(a._OrtReleaseSession=W.fa)(l),a._OrtGetInputOutputCount=(l,m,b)=>(a._OrtGetInputOutputCount=W.ga)(l,m,b),a._OrtGetInputName=(l,m)=>(a._OrtGetInputName=W.ha)(l,m),a._OrtGetOutputName=(l,m)=>(a._OrtGetOutputName=W.ia)(l,m),a._OrtFree=l=>(a._OrtFree=W.ja)(l),a._OrtCreateTensor=(l,m,b,A,k,V)=>(a._OrtCreateTensor=W.ka)(l,m,b,A,k,V),a._OrtGetTensorData=(l,m,b,A,k)=>(a._OrtGetTensorData=W.la)(l,m,b,A,k),a._OrtReleaseTensor=l=>(a._OrtReleaseTensor=W.ma)(l),a._OrtCreateRunOptions=(l,m,b,A)=>(a._OrtCreateRunOptions=W.na)(l,m,b,A),a._OrtAddRunConfigEntry=(l,m,b)=>(a._OrtAddRunConfigEntry=W.oa)(l,m,b),a._OrtReleaseRunOptions=l=>(a._OrtReleaseRunOptions=W.pa)(l),a._OrtCreateBinding=l=>(a._OrtCreateBinding=W.qa)(l),a._OrtBindInput=(l,m,b)=>(a._OrtBindInput=W.ra)(l,m,b),a._OrtBindOutput=(l,m,b,A)=>(a._OrtBindOutput=W.sa)(l,m,b,A),a._OrtClearBoundOutputs=l=>(a._OrtClearBoundOutputs=W.ta)(l),a._OrtReleaseBinding=l=>(a._OrtReleaseBinding=W.ua)(l),a._OrtRunWithBinding=(l,m,b,A,k)=>(a._OrtRunWithBinding=W.va)(l,m,b,A,k),a._OrtRun=(l,m,b,A,k,V,L,de)=>(a._OrtRun=W.wa)(l,m,b,A,k,V,L,de),a._OrtEndProfiling=l=>(a._OrtEndProfiling=W.xa)(l),a._JsepOutput=(l,m,b)=>(a._JsepOutput=W.ya)(l,m,b),a._JsepGetNodeName=l=>(a._JsepGetNodeName=W.za)(l);var lr=a._pthread_self=()=>(lr=a._pthread_self=W.Aa)(),Pr=a._malloc=l=>(Pr=a._malloc=W.Ba)(l),In=a._free=l=>(In=a._free=W.Ca)(l);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=W.Da)();var Tn=a.__emscripten_thread_init=(l,m,b,A,k,V)=>(Tn=a.__emscripten_thread_init=W.Fa)(l,m,b,A,k,V);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=W.Ga)();var En=(l,m,b,A)=>(En=W.Ha)(l,m,b,A),oe=l=>(oe=W.Ia)(l),dr=a.__emscripten_thread_exit=l=>(dr=a.__emscripten_thread_exit=W.Ja)(l),Yt=a.__emscripten_check_mailbox=()=>(Yt=a.__emscripten_check_mailbox=W.Ka)(),On=l=>(On=W.La)(l),kn=(l,m)=>(kn=W.Ma)(l,m),Zt=()=>(Zt=W.Na)(),cr=l=>(cr=W.Oa)(l),Rr=l=>(Rr=W.Pa)(l),Dr=a.dynCall_ii=(l,m)=>(Dr=a.dynCall_ii=W.Ra)(l,m),Pn=l=>(Pn=W.Sa)(l),Rn=()=>(Rn=W.Ta)(),Dn=l=>(Dn=W.Ua)(l),Br=()=>(Br=W.Va)();a.___start_em_js=923047,a.___stop_em_js=923208;function ya(l){l=Object.assign({},l);var m=A=>()=>A()>>>0,b=A=>k=>A(k)>>>0;return l.__errno_location=m(l.__errno_location),l.pthread_self=m(l.pthread_self),l.malloc=b(l.malloc),l.stackSave=m(l.stackSave),l.stackAlloc=b(l.stackAlloc),l}a.keepRuntimeAlive=Ge,a.wasmMemory=Q,a.stackAlloc=Rr,a.stackSave=Zt,a.stackRestore=cr,a.UTF8ToString=tt,a.stringToUTF8=tn,a.lengthBytesUTF8=Sr,a.ExitStatus=Ht,a.PThread=ge;var pr;lt=function l(){pr||Bn(),pr||(lt=l)};function Bn(){function l(){if(!pr&&(pr=!0,a.calledRun=!0,!we)&&(x||Ft(Qe),f(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),!x)){if(a.postRun)for(typeof a.postRun=="function"&&(a.postRun=[a.postRun]);a.postRun.length;){var m=a.postRun.shift();He.unshift(m)}Ft(He)}}if(!(0<et))if(x)f(a),x||Ft(Qe),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)qe.unshift(a.preRun.shift());Ft(qe),0<et||(a.setStatus?(a.setStatus("Running..."),setTimeout(function(){setTimeout(function(){a.setStatus("")},1),l()},1)):l())}}if(a.preInit)for(typeof a.preInit=="function"&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return Bn(),t.ready}})();typeof Fa=="object"&&typeof Do=="object"?Do.exports=La:typeof define=="function"&&define.amd&&define([],()=>La)});var Ka=Vr((Sf,wc)=>{wc.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\\n\'});var zo,Vt,Qt,Hn,Wr,Ja,Uo,ve=Z(()=>{"use strict";zo=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Vt=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Qt=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Hn=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Wr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Ja=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool",Uo=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Ln=Z(()=>{"use strict"});var ti=Z(()=>{"use strict";Ln()});var ri,ni=Z(()=>{"use strict";ri="1.18.0"});var oi,St,Vo=Z(()=>{"use strict";ni();oi="warning",St={wasm:{},webgl:{},webgpu:{},versions:{common:ri},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);oi=e}},get logLevel(){return oi}};Object.defineProperty(St,"logLevel",{enumerable:!0})});var mr,ai=Z(()=>{"use strict";Vo();mr=St});var ii=Z(()=>{"use strict"});var si=Z(()=>{"use strict";Fn()});var li=Z(()=>{"use strict"});var di=Z(()=>{"use strict";Fn()});var Fn=Z(()=>{"use strict";ii();si();li();di()});var jn=Z(()=>{"use strict";Fn()});var ci,pi,Jt,Nt,No=Z(()=>{"use strict";Vo();ci=(e,t)=>{},pi=(e,t)=>{},Jt=e=>{(typeof St.trace>"u"?!St.wasm.trace:!St.trace)||pi("BEGIN",e)},Nt=e=>{(typeof St.trace>"u"?!St.wasm.trace:!St.trace)||pi("END",e)}});var mi=Z(()=>{"use strict";Ln();jn();No()});var fi=Z(()=>{"use strict";mi()});var hi=Z(()=>{"use strict"});var gi=Z(()=>{"use strict"});var yi=Z(()=>{"use strict"});var bi=Z(()=>{"use strict"});var vi=Z(()=>{"use strict";Ln();jn()});var wi=Z(()=>{"use strict";vi()});var fr=Z(()=>{"use strict";ti();ai();fi();jn();hi();gi();No();yi();bi();wi()});var kc,Pc,_i,$i,Si,Rc,Ue,Wt=Z(()=>{"use strict";ve();kc=["V","I","W","E","F"],Pc=(e,t)=>{console.log(`[${kc[e]},${new Date().toISOString()}]${t}`)},Si=(e,t)=>{_i=e,$i=t},Rc=(e,t)=>{let r=Wr(e),o=Wr(_i);r>=o&&Pc(r,typeof t=="function"?t():t)},Ue=(...e)=>{$i&&Rc(...e)}});var xi,Ci=Z(()=>{"use strict";ve();xi=(e,t)=>new(Hn(t))(e)});var Kn=Z(()=>{"use strict"});var Wo,Go,qn,Dc,Ai,Lo,Ho,Ti,Ei=Z(()=>{"use strict";Wt();Kn();Wo={64:50,128:30,256:10,512:10,2048:10,4096:10,8192:30,16384:10,32768:40,65536:40,131072:40,262144:30,524288:30,1048576:30,2097152:30},Go=[],qn=e=>{for(let t=0;t<Go.length;t++){let r=Go[t];if(e<r)return r}return Math.ceil(e/16)*16},Dc=1,Ai=()=>Dc++,Lo=async(e,t,r,o)=>{let n=qn(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let c=s.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(c,0,r)),a}else return new Uint8Array(c.slice(0,r))}finally{s.destroy()}},Ho=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map,this.backend.env.webgpu.cachealloc={},this.backend.env.webgpu.cachefree={},this.backend.env.webgpu.cachemiss={},this.backend.env.webgpu.cacheinflight={};for(let r in Wo)Go.push(Number(r)),this.freeBuffers.set(Number(r),[]),this.freeUniformBuffers.set(Number(r),[])}incstats(t,r){if(this.backend.env.webgpu[t][r]?this.backend.env.webgpu[t][r]+=1:this.backend.env.webgpu[t][r]=1,t!=="cachemiss"){this.backend.env.webgpu.cacheinflight[r]||(this.backend.env.webgpu.cacheinflight[r]=0),this.backend.env.webgpu.cachefree[r]||(this.backend.env.webgpu.cachefree[r]=0);let o=this.backend.env.webgpu.cachealloc[r]-this.backend.env.webgpu.cachefree[r];this.backend.env.webgpu.cacheinflight[r]<=o&&(this.backend.env.webgpu.cacheinflight[r]=o)}}upload(t,r){let o=r.buffer,n=r.byteOffset,s=r.byteLength,u=qn(s);this.backend.env.trace&&console.timeStamp(`upload-begin-${u}`);let c=this.storageCache.get(t);if(!c)throw new Error("gpu data for uploading does not exist");if(c.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${c.originalSize}, data size=${s}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),f=a.getMappedRange();new Uint8Array(f).set(new Uint8Array(o,n,s)),a.unmap();let g=this.backend.getCommandEncoder();this.backend.endComputePass(),g.copyBufferToBuffer(a,0,c.gpuData.buffer,0,u),Ue("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.backend.env.trace&&console.timeStamp(`upload-end-${u}`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=qn(o.originalSize);this.backend.env.trace&&console.timeStamp(`memcpy-begin-${s}`);let u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,s),this.backend.env.trace&&console.timeStamp(`memcpy-end-${s}`)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return Ue("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!`);this.externalBuffers.delete(o)}else n=Ai();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Ue("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Ue("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=qn(t);this.incstats("cachealloc",o);let n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let f=(s?this.freeBuffers:this.freeUniformBuffers).get(o);f?f.length>0?n=f.pop():(n=this.backend.device.createBuffer({size:o,usage:r}),this.incstats("cachemiss",o)):(this.incstats("cachemiss",o),n=this.backend.device.createBuffer({size:o,usage:r}))}else n=this.backend.device.createBuffer({size:o,usage:r});let c={id:Ai(),type:0,buffer:n};return this.storageCache.set(c.id,{gpuData:c,originalSize:t}),Ue("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${c.id}`),c}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Ue("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");this.backend.env.trace&&console.timeStamp(`download-begin-${o.originalSize}`),await Lo(this.backend,o.gpuData.buffer,o.originalSize,r),this.backend.env.trace&&console.timeStamp(`download-end-${o.originalSize}`)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let t of this.buffersPending){let r=Wo[t.size];if(this.incstats("cachefree",t.size),(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let o=this.freeBuffers.get(t.size)||[];r===void 0||o.length>=r?t.destroy():o.push(t)}else if((t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let o=Wo[t.size],n=this.freeUniformBuffers.get(t.size)||[];o===void 0||n.length>=o?t.destroy():n.push(t)}else t.destroy()}this.buffersPending=[]}else{let t=this.capturedPendingBuffers.get(this.backend.currentSessionId);t||(t=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,t));for(let r of this.buffersPending)t.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(t){let r=this.capturedPendingBuffers.get(t);r&&(r.forEach(o=>{o.destroy()}),this.capturedPendingBuffers.delete(t))}},Ti=(...e)=>new Ho(...e)});var Fo,Ae,Ze=Z(()=>{"use strict";Fo=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},Ae=e=>new Fo(e)});var jo,xt,B,er,Yn,Zn,Xn,Ee=Z(()=>{"use strict";jo=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},xt=class{static calcShape(t,r,o=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),c=new Array(u);if(o){if(n<2||s<2)return;let a=jo.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(a===void 0)return;[c[u-2],c[u-1]]=a}for(let a=o?3:1;a<=u;a++){let f=n-a<0?1:t[n-a],g=s-a<0?1:r[s-a];if(f!==g&&f>1&&g>1)return;let h=Math.max(f,g);if(f&&g)c[u-a]=Math.max(f,g);else{if(h>1)return;c[u-a]=0}}return c}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let s=1;s<=o;s++)if(t[o-s]!==1&&t[o-s]!==r[n-s])return!1;return!0}},B=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let o=t.length;if(o===0)return[];let n=new Array(o),s=o-1;for(;s>=0;){if(t[s]%r===0){n[s]=t[s]/r;break}if(r%t[s]!==0)throw new Error("cannot convert shape");n[s]=1,r/=t[s],s--}for(s--;s>=0;s--)n[s]=t[s];return n}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let s=r;s<o;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,s)=>n+r[s]+r[s+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},er=class e{static adjustPoolAttributes(t,r,o,n,s,u){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let c=0;c<r.length-2;c++)c>=o.length?o.push(r[c+2]):o[c]=r[c+2];for(let c=0;c<o.length;c++)if(c<n.length){if(n[c]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let c=0;c<o.length;c++)if(c<s.length){if(s[c]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let c=0;c<o.length*2;c++)if(c<u.length){if(u[c]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let c=0;c<o.length;c++){if(o[c]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[c]>=o[c]||u[c+o.length]>=o[c])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,s,u,c){if(c){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(u?1:2)],r[a],o[a],n[a],s,a,a+t.length-2,c)}}static computePoolOutputShape(t,r,o,n,s,u,c){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,s,u,c),a}static computeConvOutputShape(t,r,o,n,s,u,c){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,s,u,c),a}static computeShapeHelper(t,r,o,n,s,u,c,a){if(t)for(let f=0;f<r.length-2;f++)o.push(1);else for(let f=0;f<r.length-2;f++)o.push(e.adjustPadAndReturnShape(r[f+2],n[f],s[f],u[f],c,f,f+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,s,u,c,a){let f=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return s[u]=0,s[c]=0,Math.floor((t-f)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let h=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(a==="SAME_LOWER"?(h+1)/2:h/2),s[c]=h-s[u],Math.floor((t+h-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[c]-f)/r+1)}},Yn=class{static getShapeOfGemmResult(t,r,o,n,s){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let u,c,a;r?(u=t[1],c=t[0]):(u=t[0],c=t[1]);let f=-1;if(n?(a=o[0],f=1):(a=o[1],f=0),o[f]!==c)throw new Error("dimension mismatch");if(u<=0||a<=0||c<=0)throw new Error("invalid shape specified");if(s&&!xt.isValidBroadcast(s,[u,a]))throw new Error("gemm: invalid bias shape for broadcast");return[u,a,c]}},Zn=-34028234663852886e22,Xn=34028234663852886e22});var tr,qo,Be,st,X,Ve,rt,ht,ut,fe,Yo,M,j,Qn,Ko,Oi,hr,Te=Z(()=>{"use strict";ve();Ee();tr=64,qo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Be=(e,t=1)=>{let r=qo(e,t);return typeof r=="string"?r:r[0]},st=(e,t=1)=>{let r=qo(e,t);return typeof r=="string"?r:r[1]},X=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:B.computeStrides(r)})}),t},Ve=(...e)=>e.map(t=>t%4===0).reduce((t,r)=>t&&r,!0)?4:e.map(t=>t%2===0).reduce((t,r)=>t&&r,!0)?2:1,rt=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,ht=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,ut=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,fe=(e,t,r,o)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?o==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:o==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Yo=(e,t,r,o,n)=>{let s=typeof r=="number",u=s?r:r.length,c=[...new Array(u).keys()],a=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,f=qo(t,n),g=typeof f=="string"?f:f[1],h=typeof f=="string"?f:f[0],w={indices:a,value:g,storage:h,tensor:t},_=G=>typeof G=="string"?G:`${G}u`,v={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},$=s?"uniforms.":"",C=`${$}${e}_shape`,x=`${$}${e}_strides`,S="";for(let G=0;G<u-1;G++)S+=`\n    let dim${G} = current / ${fe(x,G,u)};\n    let rest${G} = current % ${fe(x,G,u)};\n    indices[${G}] = dim${G};\n    current = rest${G};\n    `;S+=`indices[${u-1}] = current;`;let T=u<2?"":`\n  fn o2i_${e}(offset: u32) -> ${w.indices} {\n    var indices: ${w.indices};\n    var current = offset;\n    ${S}\n    return indices;\n  }`,E=G=>(v.offsetToIndices=!0,u<2?G:`o2i_${e}(${G})`),P=[];if(u>=2)for(let G=u-1;G>=0;G--)P.push(`${fe(x,G,u)} * (indices[${G}])`);let z=u<2?"":`\n  fn i2o_${e}(indices: ${w.indices}) -> u32 {\n    return ${P.join("+")};\n  }`,H=G=>(v.indicesToOffset=!0,u<2?G:`i2o_${e}(${G})`),K=(...G)=>u===0?"0u":`${w.indices}(${G.map(_).join(",")})`,re=(G,ee)=>u<2?`${G}`:`${fe(G,ee,u)}`,q=(G,ee,_e)=>u<2?`${G}=${_e};`:`${fe(G,ee,u)}=${_e};`,ce={},Se=(G,ee)=>{v.broadcastedIndicesToOffset=!0;let _e=`${ee.name}broadcastedIndicesTo${e}Offset`;if(_e in ce)return`${_e}(${G})`;let Xe=[];for(let qe=u-1;qe>=0;qe--){let Qe=ee.indicesGet("outputIndices",qe+ee.rank-u);Xe.push(`${re(x,qe)} * (${Qe} % ${re(C,qe)})`)}return ce[_e]=`fn ${_e}(outputIndices: ${ee.type.indices}) -> u32 {\n             return ${Xe.length>0?Xe.join("+"):"0u"};\n           }`,`${_e}(${G})`},Pe=(G,ee)=>(()=>{if(w.storage===w.value)return`${e}[${G}]=${ee};`;if(w.storage==="vec2<u32>"&&w.value==="i32")return`${e}[${G}]=vec2<u32>(u32(${ee}), select(0u, 0xFFFFFFFFu, ${ee} < 0));`;if(w.storage==="vec2<u32>"&&w.value==="u32")return`${e}[${G}]=vec2<u32>(u32(${ee}), 0u);`;if(w.storage==="u32"&&w.value==="vec4<bool>")return`${e}[${G}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ee}));`;throw new Error(`not supported combination of storage type ${w.storage} and value type ${w.value} yet`)})(),U=G=>(()=>{if(w.storage===w.value)return`${e}[${G}]`;if(w.storage==="vec2<u32>"&&w.value==="i32")return`i32(${e}[${G}].x)`;if(w.storage==="vec2<u32>"&&w.value==="u32")return`u32(${e}[${G}].x)`;if(w.storage==="u32"&&w.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${G}] & 0xFFu), bool(${e}[${G}] & 0xFF00u), bool(${e}[${G}] & 0xFF0000u), bool(${e}[${G}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${w.storage} and value type ${w.value} yet`)})(),Q=u<2?"":`\n  fn get_${e}ByIndices(indices: ${w.indices}) -> ${g} {\n    return ${U(`i2o_${e}(indices)`)};\n  }`,W=u<2?"":(()=>{let G=c.map(_e=>`d${_e}: u32`).join(", "),ee=c.map(_e=>`d${_e}`).join(", ");return`\n  fn get_${e}(${G}) -> ${g} {\n    return get_${e}ByIndices(${K(ee)});\n  }`})(),Ce=(...G)=>{if(G.length!==u)throw new Error(`indices length must be ${u}`);let ee=G.map(_).join(",");return u===0?U("0u"):u===1?U(ee[0]):(v.get=!0,v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}(${ee})`)},we=G=>u<2?U(G):(v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}ByIndices(${G})`),he=u<2?"":`\n  fn set_${e}ByIndices(indices: ${w.indices}, value: ${g}) {\n    ${Pe(`i2o_${e}(indices)`,"value")}\n  }`,ne=u<2?"":(()=>{let G=c.map(_e=>`d${_e}: u32`).join(", "),ee=c.map(_e=>`d${_e}`).join(", ");return`\n  fn set_${e}(${G}, value: ${g}) {\n    set_${e}ByIndices(${K(ee)}, value);\n  }`})();return{impl:()=>{let G=[],ee=!1;return v.offsetToIndices&&(G.push(T),ee=!0),v.indicesToOffset&&(G.push(z),ee=!0),v.broadcastedIndicesToOffset&&(Object.values(ce).forEach(_e=>G.push(_e)),ee=!0),v.set&&(G.push(ne),ee=!0),v.setByIndices&&(G.push(he),ee=!0),v.get&&(G.push(W),ee=!0),v.getByIndices&&(G.push(Q),ee=!0),!s&&ee&&G.unshift(`const ${C} = ${w.indices}(${r.join(",")});`,`const ${x} = ${w.indices}(${B.computeStrides(r).join(",")});`),G.join(`\n`)},type:w,offsetToIndices:E,indicesToOffset:H,broadcastedIndicesToOffset:Se,indices:K,indicesGet:re,indicesSet:q,set:(...G)=>{if(G.length!==u+1)throw new Error(`indices length must be ${u}`);let ee=G[u];if(typeof ee!="string")throw new Error("value must be string");let _e=G.slice(0,u).map(_).join(",");return u===0?Pe("0u",ee):u===1?Pe(_e[0],ee):(v.set=!0,v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}(${_e}, ${ee})`)},setByOffset:Pe,setByIndices:(G,ee)=>u<2?Pe(G,ee):(v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}ByIndices(${G}, ${ee});`),get:Ce,getByOffset:U,getByIndices:we,usage:o,name:e,strides:x,shape:C,rank:u}},M=(e,t,r,o=1)=>Yo(e,t,r,"input",o),j=(e,t,r,o=1)=>Yo(e,t,r,"output",o),Qn=(e,t,r,o=1)=>Yo(e,t,r,"internal",o),Ko=class{constructor(t,r){this.normalizedDispatchGroup=t;this.limits=r;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=tr){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2];if(r>this.limits.maxComputeWorkgroupSizeX||o>this.limits.maxComputeWorkgroupSizeY||n>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${r}, ${o}, ${n}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(r*o*n>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${r}, ${o}, ${n}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,c=s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_idx;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${u}) {\n    ${c}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:n}of this.uniforms)if(n&&n>4)o==="f16"?t.push(`@align(16) ${r}:array<mat2x4<${o}>, ${Math.ceil(n/8)}>`):t.push(`${r}:array<vec4<${o}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?o:`vec${n}<${o}>`;t.push(`${r}:${s}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}get variablesInfo(){if(this.uniforms.length===0)return;let t=r=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(r)];return this.uniforms.map(r=>[t(r.type),r.length??1])}},Oi=(e,t)=>new Ko(e,t),hr=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&o.unshift(s)}return o}});var Bc,ki,Mc,zc,ft,Pi,Ri,gr=Z(()=>{"use strict";ve();Ee();Ze();Te();Bc=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},ki=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Mc=(e,t)=>B.sortBasedOnPerm(e,ki(e.length,t)),zc=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},ft=(e,t)=>{let r=e.dataType,o=e.dims.length,n=ki(o,t),s=Mc(e.dims,n),u=j("output",r,s.length),c=M("a",r,o),a=f=>`\n  ${f.registerUniform("output_size","u32").declareVariables(c,u)}\n\n  ${zc(n,o,c,u)}\n\n  ${f.mainStart()}\n    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${u.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${u.setByOffset("global_idx",c.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:f=>{let g=B.size(s);return{outputs:[{dims:s,dataType:f[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:[{type:12,data:g},...X(f[0].dims,s)]}},getShaderSource:a}},Pi=(e,t)=>{Bc(e.inputs),e.compute(ft(e.inputs[0],t.perm))},Ri=e=>Ae({perm:e.perm})});var Uc,Vc,Nc,Wc,Gc,Hc,Lc,Fc,jc,Kc,Ct,Di,Bi,Mi,zi,Ui,Vi,Ni,Wi,Gi,Hi,Li=Z(()=>{"use strict";ve();Ee();Te();Jn();gr();Uc={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Vc={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Nc={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Wc={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Gc=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},Hc=(e,t)=>{let r=[],o=e.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},Lc=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?o.push(e[n++]):o.push(1);return o},Fc=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},jc=(e,t)=>{let r=[];if(!Fc(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},Kc=(e,t,r,o,n,s,u)=>{let c=r[0].dims,a=B.size(s),f=B.size(u),g=M("_A",r[0].dataType,c),h=j("output",n,s),w=32,_=`\n          var<workgroup> aBestValues : array<f32, ${w}>;\n       `;return{name:e,shaderCache:t,getShaderSource:$=>`\n        ${$.registerUniform("reduceSize","u32").declareVariables(g,h)}\n        ${_}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${$.mainStart(w)}\n\n          let outputIndex = global_idx / ${w};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = f32(${Nc[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${w}) {\n           let candidate = f32(${g.getByOffset("offset + k")});\n           bestValue = ${Uc[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${w}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${Vc[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${h.setByOffset("outputIndex",`${o==="mean"?`${h.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${h.type.storage}(${Wc[o]})`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:12,data:f}]})}},Ct=(e,t,r,o)=>{let n=e.inputs.length===1?r:Zo(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((_,v)=>v));let u=B.normalizeAxes(s,e.inputs[0].dims.length),c=u,a=e.inputs[0],f=jc(c,e.inputs[0].dims.length);f.length>0&&(a=e.compute(ft(e.inputs[0],f),{inputs:[0],outputs:[-1]})[0],c=Gc(c.length,a.dims.length));let[g,h]=Hc(a.dims,c),w=g;n.keepDims&&(w=Lc(g,u)),e.compute(Kc(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,w,h),{inputs:[a]})},Di=(e,t)=>{Ct(e,"ReduceMeanShared",t,"mean")},Bi=(e,t)=>{Ct(e,"ReduceL1Shared",t,"l1")},Mi=(e,t)=>{Ct(e,"ReduceL2Shared",t,"l2")},zi=(e,t)=>{Ct(e,"ReduceLogSumExpShared",t,"logSumExp")},Ui=(e,t)=>{Ct(e,"ReduceMaxShared",t,"max")},Vi=(e,t)=>{Ct(e,"ReduceMinShared",t,"min")},Ni=(e,t)=>{Ct(e,"ReduceProdShared",t,"prod")},Wi=(e,t)=>{Ct(e,"ReduceSumShared",t,"sum")},Gi=(e,t)=>{Ct(e,"ReduceSumSquareShared",t,"sumSquare")},Hi=(e,t)=>{Ct(e,"ReduceLogSumShared",t,"logSum")}});var At,qc,eo,Zo,It,Yc,Zc,Xc,Qc,Jc,ep,tp,rp,np,op,Tt,Fi,ji,Ki,qi,Yi,Zi,Xi,Qi,Ji,es,Jn=Z(()=>{"use strict";ve();Ee();Ze();Te();Li();At=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},qc=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],eo=(e,t,r,o,n,s,u=!1,c=!1)=>{let a=[],f=r[0].dims,g=f.length,h=B.normalizeAxes(n,g),w=!c&&h.length===0;f.forEach((C,x)=>{w||h.indexOf(x)>=0?u&&a.push(1):a.push(C)});let _=a.length,v=B.size(a);return{name:e,shaderCache:t,getShaderSource:C=>{let x=[],S=M("_A",r[0].dataType,g),T=j("output",s,_),E=o(S,T,h),P=E[2];for(let z=0,H=0;z<g;z++)w||h.indexOf(z)>=0?(u&&H++,P=`for(var j${z}: u32 = 0; j${z} < ${f[z]}; j${z}++) {\n                  ${E[2].includes("last_index")?`let last_index = j${z};`:""}\n                  ${S.indicesSet("input_indices",z,`j${z}`)}\n                  ${P}\n                }`):(x.push(`${S.indicesSet("input_indices",z,T.indicesGet("output_indices",H))};`),H++);return`\n\n        ${C.registerUniform("output_size","u32").declareVariables(S,T)}\n\n        ${C.mainStart()}\n          ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${S.type.indices};\n          let output_indices = ${T.offsetToIndices("global_idx")};\n\n          ${x.join(`\n`)}\n          ${E[0]}       // init ops for reduce max/min\n          ${E[1]}\n          ${P}\n          ${E[3]}\n          ${E.length===4?T.setByOffset("global_idx","value"):E.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:12,data:v},...X(f,a)]})}},Zo=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),Ae({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},It=(e,t,r,o)=>{let n=e.inputs,s=n.length===1?r:Zo(n,r);e.compute(eo(t,{hint:s.cacheKey,inputDependencies:["rank"]},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?qc:o,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},Yc=(e,t)=>{At(e.inputs),It(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,"value = log(value);"])},Zc=(e,t)=>{At(e.inputs),It(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByIndices("input_indices")});`,""])},Xc=(e,t)=>{At(e.inputs),It(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Qc=(e,t)=>{At(e.inputs),It(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByIndices("input_indices")});`,"value = log(value);"])},Jc=(e,t)=>{At(e.inputs),It(e,"ReduceMax",t,(o,n,s)=>{let u=[];for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&u.push(o.indicesSet("input_indices",c,0));return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = max(value, ${o.getByIndices("input_indices")});`,""]})},ep=(e,t)=>{At(e.inputs),It(e,"ReduceMean",t,(o,n,s)=>{let u=1;for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&(u*=e.inputs[0].dims[c]);return["var sum = f32(0);","",`sum += f32(${o.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${u});`]})},tp=(e,t)=>{At(e.inputs),It(e,"ReduceMin",t,(o,n,s)=>{let u=[];for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&u.push(`input_indices[${c}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = min(value, ${o.getByIndices("input_indices")});`,""]})},rp=(e,t)=>{At(e.inputs),It(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByIndices("input_indices")};`,""])},np=(e,t)=>{At(e.inputs),It(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,""])},op=(e,t)=>{At(e.inputs),It(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += t * t;`,""])},Tt=(e,t,r)=>{if(t.length===0)return r;let o=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?o*=e[s]:n*=e[s];return n<32&&o>1024},Fi=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ep(e,t):Di(e,t)},ji=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Zc(e,t):Bi(e,t)},Ki=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Xc(e,t):Mi(e,t)},qi=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Qc(e,t):zi(e,t)},Yi=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Jc(e,t):Ui(e,t)},Zi=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?tp(e,t):Vi(e,t)},Xi=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?rp(e,t):Ni(e,t)},Qi=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?np(e,t):Wi(e,t)},Ji=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?op(e,t):Gi(e,t)},es=(e,t)=>{Tt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Yc(e,t):Hi(e,t)}});var ts,rs,ns,Xo,os=Z(()=>{"use strict";ve();Ze();Jn();ts=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},rs=(e,t)=>{ts(e.inputs);let r=(o,n,s)=>{let u=[];for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&u.push(`input_indices[${c}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(eo("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},ns=(e,t)=>{ts(e.inputs);let r=(o,n,s)=>{let u=[];for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&u.push(`input_indices[${c}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(eo("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Xo=e=>Ae(e)});var ap,ip,sp,up,to,lp,as,Qo=Z(()=>{"use strict";ve();Kn();Te();ap=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],c=e[5];if(u&&c)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],f=r.dims[1],g=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==g)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let h=n.dims[0]/3,w=h,_=w;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let T of t.qkvHiddenSizes)if(T%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");h=t.qkvHiddenSizes[0],w=t.qkvHiddenSizes[1],_=t.qkvHiddenSizes[2]}let v=f;if(h!==w)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==h+w+_)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let $=0;if(u){if(w!==_)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(u.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(u.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(u.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(u.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(u.dims[4]!==w/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||($=u.dims[3])}let C=v+$,x=-1,S=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(c)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:f,pastSequenceLength:$,kvSequenceLength:v,totalSequenceLength:C,maxSequenceLength:x,inputHiddenSize:g,hiddenSize:h,vHiddenSize:_,headSize:Math.floor(h/t.numHeads),vHeadSize:Math.floor(_/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:S,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},ip=(e,t,r,o)=>{let n=Ve(o),s=64,u=o/n;u<s?s=1:u/8<64&&(s=Math.ceil(u/8));let c=Math.ceil(o/n/s),a=[{type:t.dataType,data:1/o},{type:12,data:u},{type:12,data:c}],f=Be(t.dataType,n),g=h=>{let w=j("x",t.dataType,t.dims,n),_="thread_max_vector";n===2?_="max(thread_max_vector.x, thread_max_vector.y)":n===4&&(_="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let v=st(t.dataType),$=[{name:"d_inv",type:v},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${s}>;\n  var<workgroup> wgSum: array<f32, ${s}>;\n  ${h.registerUniforms($).declareVariables(w)}\n  ${h.mainStart([s,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${rt("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${ht(v,n,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${_};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${s}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${rt("f32",n,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${ht(v,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${ut("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${s}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${rt(v,n,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${ht(v,n,"x[offset + i]")};\n        x[offset + i] = ${w.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${s};${f};${n}`},getShaderSource:g,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:a})},{inputs:[t],outputs:[]})},sp=(e,t,r,o,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],c=s.scale===0?1/Math.sqrt(n.headSize):s.scale,a=Ve(n.headSize),f=n.headSize/a,g=12,h={x:Math.ceil(n.totalSequenceLength/g),y:Math.ceil(n.sequenceLength/g),z:n.batchSize*n.numHeads},w=[{type:12,data:n.sequenceLength},{type:12,data:f},{type:12,data:n.totalSequenceLength},{type:12,data:n.kvSequenceLength},{type:t.dataType,data:c}],_=[t,r],v=C=>{let x=M("q",t.dataType,t.dims,a),S=M("key",r.dataType,r.dims,a),T=j("output",t.dataType,u),E=Be(t.dataType),P=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:E}];return`\n  const beta: ${E} = 1.0;\n  const TILE_SIZE = ${g}u;\n\n  var<workgroup> tileQ: array<${x.type.storage}, ${g*g}>;\n  var<workgroup> tileK: array<${x.type.storage}, ${g*g}>;\n  ${C.registerUniforms(P).declareVariables(x,S,T)}\n  ${C.mainStart([g,g,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${rt(E,a)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\n      output[outputIdx] = ${ut("value",a)} * uniforms.alpha;\n    }\n  }`},$=e.compute({name:"AttentionProbs",shaderCache:{hint:`${a}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:h,programUniforms:w}),getShaderSource:v},{inputs:_,outputs:[-1]})[0];return ip(e,$,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),$},up=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],s=12,u={x:Math.ceil(o.vHeadSize/s),y:Math.ceil(o.sequenceLength/s),z:o.batchSize*o.numHeads},c=[{type:12,data:o.sequenceLength},{type:12,data:o.totalSequenceLength},{type:12,data:o.vHeadSize},{type:12,data:o.numHeads},{type:12,data:o.vHiddenSize}],a=f=>{let g=M("probs",t.dataType,t.dims),h=M("v",r.dataType,r.dims),w=j("output",t.dataType,n),_=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`\n  const TILE_SIZE = ${s}u;\n  var<workgroup> tileQ: array<${g.type.value}, ${s*s}>;\n  var<workgroup> tileK: array<${g.type.value}, ${s*s}>;\n  ${f.registerUniforms(_).declareVariables(g,h,w)}\n  ${f.mainStart([s,s,1])}\n   let headIdx = workgroup_id.z;\n   let m = global_id.y;\n   let n = global_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${g.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:u,programUniforms:c}),getShaderSource:a},{inputs:[t,r],outputs:[0]})[0]},to=(e,t,r,o,n,s,u,c,a,f,g)=>{let h=sp(e,t,r,a,f,g);up(e,h,o,f)},lp=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=t.sequenceLength,n=t.inputHiddenSize,s=t.headSize,u=12,c={x:Math.ceil(t.headSize/u),y:Math.ceil(t.sequenceLength/u),z:t.batchSize*t.numHeads},a=[e.inputs[0],e.inputs[1],e.inputs[2]],f=[{type:12,data:o},{type:12,data:n},{type:12,data:s},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],g=h=>{let w=j("output_q",a[0].dataType,r),_=j("output_k",a[0].dataType,r),v=j("output_v",a[0].dataType,r),$=M("input",a[0].dataType,a[0].dims),C=M("weight",a[1].dataType,a[1].dims),x=M("bias",a[2].dataType,a[2].dims),S=$.type.storage,T=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`\n  const TILE_SIZE = ${u}u;\n  var<workgroup> tileInput: array<${S}, ${u*u}>;\n  var<workgroup> tileWeightQ: array<${S}, ${u*u}>;\n  var<workgroup> tileWeightK: array<${S}, ${u*u}>;\n  var<workgroup> tileWeightV: array<${S}, ${u*u}>;\n  ${h.registerUniforms(T).declareVariables($,C,x,w,_,v)}\n  ${h.mainStart([u,u,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = global_id.y;\n    let n = global_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${S}(0);\n    var valueK = ${S}(0);\n    var valueV = ${S}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:c,programUniforms:f}),getShaderSource:g},{inputs:a,outputs:[-1,-1,-1]})},as=(e,t)=>{let r=ap(e.inputs,t),[o,n,s]=lp(e,r);return to(e,o,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var dp,cp,pp,is,ss=Z(()=>{"use strict";fr();ve();Ee();Ze();Te();dp=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,s)=>{let u=n.length;if(u!==o.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((c,a)=>{if(c!==o[a])throw new Error(`${s}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},cp=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,s=e[0].dims,u=o?Ve(s[s.length-1]):1,c=n==="NHWC"&&s.length>1?u:1,a=B.size(s)/u,f=o,g=f?s.length:s,h=M("x",e[0].dataType,e[0].dims,u),w=M("scale",e[1].dataType,e[1].dims,c),_=M("bias",e[2].dataType,e[2].dims,c),v=M("inputMean",e[3].dataType,e[3].dims,c),$=M("inputVar",e[4].dataType,e[4].dims,c),C=j("y",e[0].dataType,g,u),x=()=>{let T="";if(o)T=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")T=`\n            ${C.indicesSet("outputIndices","0","0")}\n            let cOffset = ${C.indicesToOffset("outputIndices")};`;else{T=`var cIndices = ${w.type.indices}(0);\n                       cIndices[0] = outputIndices[${s.length-1}];`;for(let E=1;E<w.rank;E++)T+=`cIndices[${E}] = outputIndices[${E}];`;T+=`let cOffset = ${w.indicesToOffset("cIndices")};`}return T},S=T=>`\n  const epsilon = ${r};\n  ${T.registerUniform("outputSize","u32").declareVariables(h,w,_,v,$,C)}\n  ${T.mainStart()}\n  ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${C.offsetToIndices(`global_idx * ${u}`)};\n    ${x()}\n    let scale = ${w.getByOffset("cOffset")};\n    let bias = ${_.getByOffset("cOffset")};\n    let inputMean = ${v.getByOffset("cOffset")};\n    let inputVar = ${$.getByOffset("cOffset")};\n    let x = ${h.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${C.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${u}`,inputDependencies:f?["rank","type","type","type","type"]:void 0},getShaderSource:S,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:f?[{type:12,data:a},...X(s)]:[{type:12,data:a}]})}},pp=e=>Ae(e),is=(e,t)=>{let{inputs:r,outputCount:o}=e,n=pp({...t,outputCount:o});if(mr.webgpu.validateInputContent&&dp(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(cp(r,n))}});var mp,fp,us,ls=Z(()=>{"use strict";Ee();Te();mp=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},fp=e=>{let t=e[0].dims,r=e[0].dims[2],o=B.size(t)/4,n=e[0].dataType,s=M("input",n,t,4),u=M("bias",n,[r],4),c=M("residual",n,t,4),a=j("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:g=>`\n  const channels = ${r}u / 4;\n  ${g.declareVariables(s,u,c,a)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${u.getByOffset("global_idx % channels")} + ${c.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},us=e=>{mp(e.inputs),e.compute(fp(e.inputs))}});var hp,Re,ds,cs,ps,ms,fs,hs,gs,ys,bs,gp,vs,ws,_s,$s,ro,Ss,no,xs,Cs,As,Is,Ts,Es,Os,ks,Ps,Rs,Ds,Bs,Ms,zs,Us,Vs,Ns,Ws,Jo,ea,Gs,Hs,Ls,oo=Z(()=>{"use strict";ve();Ee();Ze();Te();hp=(e,t,r,o,n,s)=>{let u=Math.ceil(t/4),c="";typeof n=="string"?c=`${n}(a)`:c=n("a");let a=M("inputData",r,[u],4),f=j("outputData",o,[u],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,f)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${f.setByOffset("global_idx",c)}\n  }`},Re=(e,t,r,o,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>hp(u,B.size(e.dims),e.dataType,s,r,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(B.size(u[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(B.size(e.dims)/4)}]})}),ds=e=>{e.compute(Re(e.inputs[0],"Abs","abs"))},cs=e=>{e.compute(Re(e.inputs[0],"Acos","acos"))},ps=e=>{e.compute(Re(e.inputs[0],"Acosh","acosh"))},ms=e=>{e.compute(Re(e.inputs[0],"Asin","asin"))},fs=e=>{e.compute(Re(e.inputs[0],"Asinh","asinh"))},hs=e=>{e.compute(Re(e.inputs[0],"Atan","atan"))},gs=e=>{e.compute(Re(e.inputs[0],"Atanh","atanh"))},ys=e=>Ae(e),bs=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Re(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},gp=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Zn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:Xn;return Ae({min:t,max:r})},vs=(e,t)=>{let r=e.inputs.length===1?t:gp(e.inputs),o=st(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},ws=e=>{e.compute(Re(e.inputs[0],"Ceil","ceil"))},_s=e=>{e.compute(Re(e.inputs[0],"Cos","cos"))},$s=e=>{e.compute(Re(e.inputs[0],"Cosh","cosh"))},ro=e=>Ae(e),Ss=(e,t)=>{let r=st(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Elu",o=>`elu_vf32(${o})`,`\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},no=(e="f32")=>`\nconst r0: ${e} = 0.3275911;\nconst r1: ${e} = 0.254829592;\nconst r2: ${e} = -0.284496736;\nconst r3: ${e} = 1.421413741;\nconst r4: ${e} = -1.453152027;\nconst r5: ${e} = 1.061405429;\n\nfn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,xs=e=>{let t=st(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,no(t)))},Cs=e=>{e.compute(Re(e.inputs[0],"Exp","exp"))},As=e=>{e.compute(Re(e.inputs[0],"Floor","floor"))},Is=e=>{let t=st(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,no(t)))},Ts=(e,t)=>{let r=st(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"LeakyRelu",o=>`select(leaky_relu_alpha_ * ${o}, ${o}, ${o} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},Es=e=>{e.compute(Re(e.inputs[0],"Not",t=>`!${t}`))},Os=e=>{e.compute(Re(e.inputs[0],"Neg",t=>`-${t}`))},ks=e=>{e.compute(Re(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},Ps=e=>{let t=st(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},Rs=e=>{e.compute(Re(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},Ds=e=>Ae(e),Bs=(e,t)=>{let r=st(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"HardSigmoid",o=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${o} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},Ms=e=>{e.compute(Re(e.inputs[0],"Sin","sin"))},zs=e=>{e.compute(Re(e.inputs[0],"Sinh","sinh"))},Us=e=>{e.compute(Re(e.inputs[0],"Sqrt","sqrt"))},Vs=e=>{e.compute(Re(e.inputs[0],"Tan","tan"))},Ns=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Ws=e=>{e.compute(Re(e.inputs[0],"Tanh",Ns))},Jo=(e="f32")=>`\nconst fast_gelu_a: ${e} = 0.5;\nconst fast_gelu_b: ${e} = 0.7978845608028654;\nconst fast_gelu_c: ${e} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${e}>) -> vec4<${e}> {\n  return ${Ns("v")};\n}\n`,ea=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Gs=e=>{let t=st(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"FastGelu",ea,Jo(t),void 0,e.inputs[0].dataType))},Hs=(e,t)=>{let r=st(e.inputs[0].dataType);return e.compute(Re(e.inputs[0],"ThresholdedRelu",o=>`select(vec4<${r}>(0.0), ${o}, ${o} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},Ls=e=>{e.compute(Re(e.inputs[0],"Log","log"))}});var yp,bp,js,Ks=Z(()=>{"use strict";Ee();Te();oo();yp=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},bp=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=M("input",e[0].dataType,e[0].dims,4),o=M("bias",e[0].dataType,[e[0].dims[2]],4),n=j("output",e[0].dataType,t,4),s=B.size(t)/4,u=Be(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${no(u)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},js=e=>{yp(e.inputs),e.compute(bp(e.inputs))}});var vp,wp,Et,qs,Ys,Zs,Xs,Qs,Js,eu,tu,ru,nu,ou=Z(()=>{"use strict";ve();Ee();Te();vp=(e,t,r,o,n,s,u,c,a,f,g,h)=>{let w,_;typeof c=="string"?w=_=(S,T)=>`${c}((${S}),(${T}))`:typeof c=="function"?w=_=c:(w=c.scalar,_=c.vector);let v=j("outputData",g,o.length,4),$=M("aData",a,t.length,4),C=M("bData",f,r.length,4),x;if(n)if(s){let S=B.size(t)===1,T=B.size(r)===1,E=t.length>0&&t[t.length-1]%4===0,P=r.length>0&&r[r.length-1]%4===0;S||T?x=v.setByOffset("global_idx",_(S?`${$.type.value}(${$.getByOffset("0")}.x)`:$.getByOffset("global_idx"),T?`${C.type.value}(${C.getByOffset("0")}.x)`:C.getByOffset("global_idx"))):x=`\n            let outputIndices = ${v.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${$.broadcastedIndicesToOffset("outputIndices",v)};\n            let offsetB = ${C.broadcastedIndicesToOffset("outputIndices",v)};\n            ${v.setByOffset("global_idx",_(u||E?$.getByOffset("offsetA / 4u"):`${$.type.value}(${$.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||P?C.getByOffset("offsetB / 4u"):`${C.type.value}(${C.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else x=v.setByOffset("global_idx",_($.getByOffset("global_idx"),C.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let S=(T,E,P="")=>{let z=`aData[indexA${E}][componentA${E}]`,H=`bData[indexB${E}][componentB${E}]`;return`\n            let outputIndices${E} = ${v.offsetToIndices(`global_idx * 4u + ${E}u`)};\n            let offsetA${E} = ${$.broadcastedIndicesToOffset(`outputIndices${E}`,v)};\n            let offsetB${E} = ${C.broadcastedIndicesToOffset(`outputIndices${E}`,v)};\n            let indexA${E} = offsetA${E} / 4u;\n            let indexB${E} = offsetB${E} / 4u;\n            let componentA${E} = offsetA${E} % 4u;\n            let componentB${E} = offsetB${E} % 4u;\n            ${T}[${E}] = ${P}(${w(z,H)});\n          `};g===9?x=`\n            var data = vec4<u32>(0);\n            ${S("data",0,"u32")}\n            ${S("data",1,"u32")}\n            ${S("data",2,"u32")}\n            ${S("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:x=`\n            ${S("outputData[global_idx]",0)}\n            ${S("outputData[global_idx]",1)}\n            ${S("outputData[global_idx]",2)}\n            ${S("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables($,C,v)}\n\n        ${h??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${x}\n      }`},wp=(e,t,r,o,n,s,u=r.dataType)=>{let c=!B.areEqual(r.dims,o.dims),a=r.dims,f=B.size(r.dims),g=!1,h=!1,w=[c];if(c){let _=xt.calcShape(r.dims,o.dims,!1);if(!_)throw new Error("Can\'t perform binary op on the given tensors");a=_,f=B.size(a);let v=B.size(r.dims)===1,$=B.size(o.dims)===1,C=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,x=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;w.push(v),w.push($),w.push(C),w.push(x);let S=1;for(let T=1;T<a.length;T++){let E=r.dims[r.dims.length-T]??1,P=o.dims[o.dims.length-T]??1;if(E===P)S*=E;else break}S%4===0?(h=!0,g=!0):(v||$||C||x)&&(g=!0)}else g=!0;return w.push(g),{name:e,shaderCache:{hint:t+w.map(_=>_.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:_=>vp(_,r.dims,o.dims,a,g,c,h,n,r.dataType,o.dataType,u,s),getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(f/64/4)},programUniforms:[{type:12,data:Math.ceil(B.size(a)/4)},...X(r.dims,o.dims,a)]})}},Et=(e,t,r,o,n,s)=>{e.compute(wp(t,n??"",e.inputs[0],e.inputs[1],r,o,s))},qs=e=>{Et(e,"Add",(t,r)=>`${t}+${r}`)},Ys=e=>{Et(e,"Div",(t,r)=>`${t}/${r}`)},Zs=e=>{Et(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Xs=e=>{Et(e,"Mul",(t,r)=>`${t}*${r}`)},Qs=e=>{let t=M("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Et(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Js=e=>{Et(e,"Sub",(t,r)=>`${t}-${r}`)},eu=e=>{Et(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},tu=e=>{Et(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},ru=e=>{Et(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},nu=e=>{Et(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var $p,Sp,xp,Cp,au,iu,su=Z(()=>{"use strict";ve();Ee();Ze();Te();$p=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,o=e[r],n=o.dataType,s=o.dims.length;e.forEach((u,c)=>{if(c!==r){if(u.dataType!==n)throw new Error("input tensors should be one type");if(u.dims.length!==s)throw new Error("input tensors should have the same shape");u.dims.forEach((a,f)=>{if(f!==t&&a!==o.dims[f])throw new Error("non concat dimensions must match")})}})},Sp=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,xp=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(s):n===0?o.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?o.push(`else { ${s} }`):o.push(`else if (inputIndex == ${n}) { ${s} }`)}return o.join(`\n`)},Cp=(e,t,r,o)=>{let n=B.size(r),s=new Array(e.length),u=new Array(e.length),c=0,a=[],f=[],g=[{type:12,data:n}];for(let $=0;$<e.length;++$)c+=e[$].dims[t],s[$]=c,f.push(e[$].dims.length),u[$]=M(`input${$}`,o,f[$]),a.push("rank"),g.push({type:12,data:s[$]});for(let $=0;$<e.length;++$)g.push(...X(e[$].dims));g.push(...X(r));let h=j("output",o,r.length),w=h.indicesGet("indices",t),_=Array.from(Array(s.length).keys()).map($=>`uniforms.sizeInConcatAxis${$}`).join(","),v=$=>`\n\n  ${(()=>{$.registerUniform("outputSize","u32");for(let C=0;C<e.length;C++)$.registerUniform(`sizeInConcatAxis${C}`,"u32");return $.declareVariables(...u,h)})()}\n\n  ${Sp(s.length,_)}\n\n  ${$.mainStart()}\n    ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${h.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${w});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${s.length}u>(${_});\n      ${w} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${xp(u,h)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:a},getRunData:()=>({outputs:[{dims:r,dataType:o}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:g}),getShaderSource:v}},au=(e,t)=>{let r=e.inputs,o=r[0].dims,n=B.normalizeAxis(t.axis,o.length);$p(r,n);let s=o.slice();s[n]=r.reduce((c,a)=>c+(a.dims.length>n?a.dims[n]:0),0);let u=r.filter(c=>B.size(c.dims)>0);e.compute(Cp(u,n,s,r[0].dataType),{inputs:u})},iu=e=>Ae({axis:e.axis})});var gt,yt,bt,ao,Gt=Z(()=>{"use strict";ve();Ee();gt=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},yt=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},bt=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},ao=e=>{let t=e?.activation||"";if(t==="HardSigmoid"){let[r,o]=e?.activation_params||[.2,.5];return{activation:t,alpha:r,beta:o}}else if(t==="Clip"){let[r,o]=e?.activation_params||[Zn,Xn];return{activation:t,clipMax:o,clipMin:r}}else if(t==="LeakyRelu"){let[r]=e?.activation_params||[.01];return{activation:t,alpha:r}}return{activation:t}}});var nt,io,so=Z(()=>{"use strict";nt=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},io=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var uo,ta=Z(()=>{"use strict";uo=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var Ap,Ip,Gr,uu,Tp,Hr,Ep,lo,Lr=Z(()=>{"use strict";ve();Ee();Te();Gt();so();Ap=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,Ip=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,Gr=(e,t,r="f32",o,n=!1,s=32,u=!1,c=32)=>{let a=t[1]*e[1],f=t[0]*e[0],g=n?a:s,h=n?s:a,w=g/t[0],_=s/t[1];if(!((n&&w===4&&e[1]===4||!n&&(w===3||w===4))&&g%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${w} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${w} must be 3 or 4.\n  tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${w}<${r}>, ${g/w}>, ${h}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${f/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${w};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${u?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let num_tiles = ${u?`${Math.ceil(c/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n  var kStart = ${u?`i32(globalId.z) * ${c}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${_};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${Ap(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${w===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${Ip(n,w)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},uu=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,Tp=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Hr=(e,t,r="f32",o,n=!1,s=32,u=!1,c=32,a=!1)=>{let f=e[1]*t[1],g=e[0]*t[0],h=n?f:s,w=n?s:f;if(!(w%t[1]===0&&h%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${w} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let _=w/t[1],v=h/t[0],$=s/t[1],C=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${f};\n    let globalColStart = i32(workgroupId.x) * ${g};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${w}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          ${uu(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${f};\n\nlet tileRowA = i32(localId.y) * ${_};\nlet tileColA = i32(localId.x) * ${v};\nlet tileRowB = i32(localId.y) * ${$};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${v}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${uu(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Tp(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${h}>, ${w}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${g}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${u?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let num_tiles = ${u?`${Math.ceil(c/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n    var kStart = ${u?`i32(globalId.z) * ${c}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${C}\n  }\n`},Ep=(e,t,r,o,n,s=!1)=>{let[u,c,a]=n,[f,g,h,w]=o,_=hr(u,a),v=hr(c,a),$=Be(o[0].type.tensor),C=()=>{let T=g.rank,E=f.rank,P=`var aIndices: ${g.type.indices};`;for(let z=T-2-1,H=E-1;z>=0;z--,H--)P+=`\naIndices[${z}] = ${E>1?`batchIndices[${H}]`:"batchIndices"};`;return _.forEach(z=>{P+=`\naIndices[${z}] = 0;`}),P+=`\naIndices[${T-2}] = u32(row);\n                   aIndices[${T-1}] = u32(colIn);`,P},x=()=>{let T=h.rank,E=f.rank,P=`var bIndices: ${h.type.indices};`;for(let z=T-2-1,H=E-1;z>=0;z--,H--)P+=`\nbIndices[${z}] = ${E>1?`batchIndices[${H}]`:"batchIndices"};`;return v.forEach(z=>{P+=`\nbIndices[${z}] = 0;`}),P+=`\nbIndices[${T-2}] = u32(row);\n                   bIndices[${T-1}] = u32(colIn);`,P};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${f.type.indices}) -> ${nt(e,$)} {\n      var value = ${nt(e,$)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        ${C()}\n        value = ${g.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${f.type.indices}) -> ${nt(e,$)} {\n      var value = ${nt(e,$)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        ${x()}\n        value = ${h.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${nt(e,$)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${nt(e,$)}(bias[row])`};`:""}\n        ${r}\n        ${w.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},lo=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,c=s.slice(0,-2),a=u.slice(0,-2),f=o?o.slice(0,-2):r.slice(0,-2),g=B.size(f),h=s[s.length-2],w=s[s.length-1],_=u[u.length-1],v=w%4===0&&_%4===0,$=h<=8?[4,1,1]:[4,4,1],C=[8,8,1],x=[Math.ceil(_/C[0]/$[0]),Math.ceil(h/C[1]/$[1]),Math.ceil(g/C[2]/$[2])],S=v?4:1,T=[...c,h,w/S],E=T.length,P=[...a,w,_/S],z=P.length,H=[g,h,_/S],K=[{type:6,data:h},{type:6,data:_},{type:6,data:w}];yt(t,K),K.push(...X(f,T,P));let re=["rank","rank"],q=e.length>2;q&&(K.push(...X(e[2].dims)),re.push("rank")),K.push(...X(H));let ce=Se=>{let Pe=f.length,U=Qn("batchDims",e[0].dataType,Pe,1),Q=Be(e[0].dataType),W=M("a",e[0].dataType,E,S),Ce=M("b",e[1].dataType,z,S),we=j("result",e[0].dataType,H.length,S),he=[W,Ce];if(q){let G=n?S:1;he.push(M("bias",e[2].dataType,e[2].dims.length,G))}let ne=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];bt(t,ne);let be=Be(we.type.tensor),me=gt(t,we.type.value,be),Ke=Ep(S,q,me,[U,W,Ce,we],[c,a,f],n);return`\n  ${Se.registerUniforms(ne).registerInternalVariables(U).declareVariables(...he,we)}\n  ${Ke}\n  ${v?Gr($,C,Q,U):Hr($,C,Q,U)}\n                   `};return{name:"MatMul",shaderCache:{hint:`${$};${t.activation};${v};${n}`,inputDependencies:re},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:x[0],y:x[1],z:x[2]},programUniforms:K}),getShaderSource:ce}}});var Op,lu,du=Z(()=>{"use strict";ve();Wt();Te();Gt();so();ta();Lr();Op=(e,t,r,o,n=!1,s,u=4,c=4,a=4,f="f32")=>{let g=q=>{switch(q){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${f}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${q} is not supported.`)}},h=q=>{switch(q){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${q} is not supported.`)}},w=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,_=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,v=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",$=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",C=e?"row":"col",x=e?"col":"row",S=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${C} / outWidth;\n    let outCol = ${C} % outWidth;\n\n    let WRow = ${x} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${x} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${x} % inChannels;\n    var resData = ${nt(u,f)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${v} && xCol >= 0 && xCol < ${$}) {\n      ${w}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${g(u)}\n    }\n    return resData;`,T=e?t&&o?`\n    let col = colIn * ${u};\n    ${S}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${S}\n    }\n    return ${nt(u,f)}(0.0);`:o&&r?`\n    let col = colIn * ${u};\n    ${S}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${S}\n    }\n    return ${nt(u,f)}(0.0);`,E=`${h(c)}`,P=nt(a,f),z=e?nt(u,f):nt(c,f),H=e?nt(c,f):nt(u,f),K=gt(s,P,f);return`\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${z} {\n      ${e?T:E}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${H} {\n      ${e?E:T}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${P}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${_}\n      ${io(n)}\n      ${K}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},lu=(e,t,r,o,n,s,u,c)=>{let a=t.format==="NHWC",f=a?e[0].dims[3]:e[0].dims[1],g=r[0],h=a?r[2]:r[3],w=a?r[1]:r[2],_=a?r[3]:r[1],v=a&&(f%4===0||f%3===0)&&_%4===0,$=a?_:h*w,C=a?h*w:_,x=[8,8,1],S=o<=8?[4,1,1]:[4,4,1],T=[Math.ceil($/x[0]/S[0]),Math.ceil(C/x[1]/S[1]),Math.ceil(g/x[2]/S[2])];Ue("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${T}`);let E=v?a&&f%4!==0?3:4:1,P=x[1]*S[1],z=x[0]*S[0],H=Math.max(x[0]*E,x[1]),K=o%P===0,re=n%z===0,q=s%H===0,ce=v?[E,4,4]:[1,1,1],Se=[{type:6,data:o},{type:6,data:n},{type:6,data:s},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];yt(t,Se),Se.push(...X(e[0].dims,e[1].dims));let Pe=["rank","rank"];u&&(Se.push(...X(e[2].dims)),Pe.push("rank")),Se.push(...X(r));let U=Q=>{let W=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];bt(t,W);let Ce=v?4:1,we=Be(e[0].dataType),he=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${v?`vec4<${we}>`:we}) {\n        result[flatIndex] = ${v?`vec4<${we}>`:we}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${v?`vec4<${we}>`:we}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${v?"/ 4":""}, value);\n      }`,ne=M("x",e[0].dataType,e[0].dims.length,E===3?1:E),be=M("w",e[1].dataType,e[1].dims.length,Ce),me=[ne,be],Ke=j("result",e[0].dataType,r.length,Ce);if(u){let G=M("bias",e[2].dataType,e[2].dims.length,Ce);me.push(G),he+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?`vec4<${we}>`:we} {\n          return bias[coords.${a?"w":"y"}${v?"/ 4":""}];\n        }`}return`\n        ${uo("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${Q.registerUniforms(W).declareVariables(...me,Ke)}\n        ${he}\n        ${Op(a,K,re,q,u,t,ce[0],ce[1],ce[2],we)}\n        ${v?Gr(S,x,we,void 0,!a,H):Hr(S,x,we,void 0,!a,H,!1,void 0,c)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${E};${v};${K};${re};${q};${P};${z};${H}`,inputDependencies:Pe},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:Se}),getShaderSource:U}}});var ra,cu,pu=Z(()=>{"use strict";ve();Ee();Te();na();Gt();ra=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,c=u[0]/t.group,a=t.format==="NHWC",f=co(s,u,t.dilations,t.pads,t.strides,a),g=B.size(f),h=[{type:12,data:g},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:c}];yt(t,h),h.push(...X(s,u));let w=["rank","rank"];o&&(h.push(...X(e[2].dims)),w.push("rank")),h.push(...X(f));let _=v=>{let $=j("output",e[0].dataType,f.length),C=Be($.type.tensor),x=gt(t,$.type.value,C),S=M("x",e[0].dataType,s.length),T=M("w",e[1].dataType,u.length),E=[S,T];o&&E.push(M("b",e[2].dataType,e[2].dims.length));let P=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return bt(t,P),`\n  ${v.registerUniforms(P).declareVariables(...E,$)}\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let outputIndices = ${$.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel / uniforms.output_channels_per_group;\n\n    var value: ${$.type.value} = ${$.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[${a?1:2}]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[${a?2:3}]) {\n            continue;\n          }\n\n          let xVal = ${a?S.get("batch","xHeight","xWidth","input_channel"):S.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${T.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${x}\n    ${$.setByOffset("global_idx","value")}\n  }`};return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:w},getRunData:()=>({outputs:[{dims:r?r(f):f,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:h}),getShaderSource:_}},cu=(e,t,r)=>{let o=e.length>2,n=Ve(r[3]),s=Ve(r[2]),u=B.size(r)/n/s,c=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/n],a=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/n],f=[r[0],r[1],r[2],r[3]/n],g=[{type:12,data:u},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];yt(t,g),g.push(...X(c,a,f));let h=(s-1)*t.strides[1]+a[1],w=_=>{let v=j("output",e[0].dataType,f.length,n),$=Be(v.type.tensor),C=gt(t,v.type.value,$),x=M("x",e[0].dataType,c.length,n),S=M("w",e[1].dataType,a.length,n),T=[x,S];o&&T.push(M("b",e[2].dataType,e[2].dims,n));let E=o?"value += b[output_channel];":"",P=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return bt(t,P),`\n  ${_.registerUniforms(P).declareVariables(...T,v)}\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${s}u;\n    let col = (index1 % width1) * ${s}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${x.type.value}, ${h}>;\n    var values: array<${v.type.value}, ${s}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w\'s height/width.\n    for (var w_height: u32 = 0u; w_height < ${a[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${h}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${x.get("batch","u32(x_height)","u32(x_width)","input_channel")};\n          } else {\n            x_vals[i] = ${x.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${a[1]}; w_width++) {\n          let w_val = ${S.get("w_height","w_width","0","output_channel")};\n          for (var i = 0u; i < ${s}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${s}u; i++) {\n      var value = values[i];\n      ${E}\n      ${C}\n      ${v.set("batch","row","col + i","output_channel","value")};\n    }\n  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${n};${s};${h};${a[0]};${a[1]}`,inputDependencies:o?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:g}),getShaderSource:w}}});var oa,kp,mu,aa=Z(()=>{"use strict";ve();Ee();Lr();Te();Gt();oa=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,c=s[s.length-2],a=u[u.length-1],f=s[s.length-1],g=Ve(a),h=Ve(f),w=Ve(c),_=B.size(r)/g/w,v=e.length>2,$=o?o.slice(0,-2):r.slice(0,-2),x=[B.size($),c,a],S=[{type:12,data:_},{type:12,data:c},{type:12,data:a},{type:12,data:f}];yt(t,S),S.push(...X($,s,u)),v&&S.push(...X(e[2].dims)),S.push(...X(x));let T=E=>{let P=Qn("batch_dims",e[0].dataType,$.length),z=M("a",e[0].dataType,s.length,h),H=M("b",e[1].dataType,u.length,g),K=j("output",e[0].dataType,x.length,g),re=Be(K.type.tensor),q=gt(t,K.type.value,re),ce=[z,H],Se="";if(v){let ne=n?g:1;ce.push(M("bias",e[2].dataType,e[2].dims.length,ne)),Se=`${n?`value += bias[col / ${ne}];`:`value += ${K.type.value}(bias[row + i]);`}`}let Pe=s.slice(0,-2),U=u.slice(0,-2),Q=hr(Pe,$),W=hr(U,$),Ce=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];bt(t,Ce);let we=(ne,be)=>{let me=ne.rank,Ke=ne.name;if(me===2)return`var ${Ke}_indices = ${ne.type.indices}(0u, 0u);`;let G=P.rank,ee=`var ${Ke}_indices: ${ne.type.indices};`;for(let _e=me-2-1,Xe=G-1;_e>=0;_e--,Xe--)ee+=`\n${Ke}_indices[${_e}] = ${G>1?`batch_indices[${Xe}]`:"batch_indices"};`;return be.forEach(_e=>{ee+=`\n${Ke}_indices[${_e}] = 0;`}),ee+=`${Ke}_indices[${me-2}] = 0u;\n                     ${Ke}_indices[${me-1}] = 0u;`,ee},he=()=>{let ne=`var a_data: ${z.type.value};`;for(let be=0;be<h;be++)ne+=`\n              let b_data${be} = b[(b_offset + (k + ${be}) * uniforms.N + col) / ${g}];`;for(let be=0;be<w;be++){ne+=`a_data = a[(a_offset + (row + ${be}) * uniforms.K + k) / ${h}];`;for(let me=0;me<h;me++)ne+=`\n            values[${be}] = fma(${H.type.value}(a_data${h===1?"":`[${me}]`}), b_data${me}, values[${be}]);\n`}return ne};return`\n  ${E.registerUniforms(Ce).registerInternalVariables(P).declareVariables(...ce,K)}\n  ${E.mainStart()}\n    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let col = (global_idx % (uniforms.N / ${g})) * ${g};\n    var index1 = global_idx / (uniforms.N / ${g});\n    let stride1 = uniforms.M / ${w};\n    let row = (index1 % stride1) * ${w};\n    let batch = index1 / stride1;\n\n    ${r.length===2?"":`let batch_indices = ${P.offsetToIndices("batch")};`}\n    ${we(z,Q)}\n    let a_offset = ${z.indicesToOffset("a_indices")};\n    ${we(H,W)}\n    let b_offset = ${H.indicesToOffset("b_indices")};\n    var values: array<${K.type.value}, ${w}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${h}) {\n      ${he()}\n    }\n    for (var i = 0u; i < ${w}u; i++) {\n      var value = values[i];\n      ${Se}\n      ${q}\n      let cur_indices = ${K.type.indices}(batch, row + i, col);\n      let offset = ${K.indicesToOffset("cur_indices")};\n      ${K.setByOffset(`offset / ${g}`,"value")};\n    }\n  }\n  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${g};${h};${w};${n}`,inputDependencies:v?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:S}),getShaderSource:T}},kp=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},mu=e=>{kp(e.inputs);let t=xt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");let r=t[t.length-1],o=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&o<8?e.compute(oa(e.inputs,{activation:""},t)):e.compute(lo(e.inputs,{activation:""},t))}});var co,ia,Pp,fu,sa,Rp,Dp,ua,na=Z(()=>{"use strict";Ee();du();Lr();pu();Gt();aa();gr();co=(e,t,r,o,n,s)=>{let u=e[0],c=e.slice(s?1:2,s?3:4),a=c.length,f=t[0],h=t.slice(2).map((v,$)=>v+(v-1)*(r[$]-1)),_=c.map((v,$)=>v+o[$]+o[$+a]).map((v,$)=>Math.floor((v-h[$]+n[$])/n[$]));return _.splice(0,0,u),_.splice(s?3:1,0,f),_},ia=[2,3,1,0],Pp=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},fu=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let o=e.pads.slice();er.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o}),n},sa=e=>{let t=ao(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,c=e.pads,a=e.strides,f=e.w_is_const();return{autoPad:o,format:r,dilations:n,group:s,kernelShape:u,pads:c,strides:a,wIsConst:f,...t,cacheKey:`${e.format};${t.activation};`}},Rp=(e,t,r)=>{let o=fu(r,t),n=r.format==="NHWC";if(r.group!==1){if(!e.adapterInfo.isArchitecture("ampere")&&n&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1){let H=co(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),K=e.kernelCustomData.wT??e.compute(ft(t[1],ia),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=K);let re=[t[0],K];t.length===3&&re.push(t[2]),e.compute(cu(re,o,H),{inputs:re})}else e.compute(ra(t,o));return}let s=t.length===3,u=t[0].dims[n?1:2],c=t[0].dims[n?2:3],a=t[0].dims[n?3:1],f=t[1].dims[2],g=t[1].dims[3],h=co(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),w=h[n?1:2],_=h[n?2:3],v=h[n?3:1],$=n&&f===u&&g===c&&r.pads[0]===0&&r.pads[1]===0;if($||f===1&&g===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let z=h[0],H,K,re,q=[];if(n){let Pe=e.kernelCustomData.wT??e.compute(ft(t[1],ia),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Pe),$){let U=u*c*a;H=t[0].reshape([1,z,U]),K=Pe.reshape([1,U,v]),re=[1,z,v]}else H=t[0].reshape([z,u*c,a]),K=Pe.reshape([1,a,v]),re=[z,w*_,v];q.push(H),q.push(K)}else H=t[0].reshape([z,a,u*c]),K=t[1].reshape([1,v,a]),re=[z,v,w*_],q.push(K),q.push(H);s&&q.push(t[2]);let ce=re[2],Se=q[0].dims[q[0].dims.length-1];ce<8&&Se<8?e.compute(oa(q,o,h,re,n),{inputs:q}):e.compute(lo(q,o,h,re,n),{inputs:q});return}let C=!0,x=e.kernelCustomData.wT??e.compute(ft(t[1],ia),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=x);let S=[t[0],x];s&&S.push(t[2]);let T=n?w*_:v,E=n?v:w*_,P=f*g*a;e.compute(lu(S,o,h,T,E,P,s,C),{inputs:S})},Dp=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),c=[1].concat(t.kernelShape),a=fu({...t,pads:n,strides:s,dilations:u,kernelShape:c},o);e.compute(ra(o,a,f=>r?[f[0],f[2],f[3]]:[]))},ua=(e,t)=>{Pp(e.inputs,t),e.inputs[0].dims.length===3?Dp(e,t):Rp(e,e.inputs,t)}});var Bp,hu,gu=Z(()=>{"use strict";ve();Wt();Te();Gt();so();ta();Lr();Bp=(e,t=!1,r,o,n=4)=>{let s=x=>{switch(x){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return ${o}(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${x} is not supported.`)}},u=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,c=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",f=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",g=e?"row":"col",h=e?"col":"row",w=`\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${g} / outWidth;\n      let outCol = ${g} % outWidth;\n\n      let WRow = ${h} / (uniforms.filter_dims[1] * inChannels);\n      let WCol = ${h} / inChannels % uniforms.filter_dims[1];\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${o}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${f}) || fract(xC) > 0.0) {\n        return ${o}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${h} % inChannels;\n      ${u}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${n}];`,_=e?`\n      let col = colIn * ${n};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n        ${w}\n      }\n      return ${o}(0.0);`:`\n      let col = colIn * ${n};\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n        ${w}\n      }\n      return ${o}(0.0);`,v=`\n      let col = colIn * ${n};\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\n      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${s(n)}\n      }\n      return ${o}(0.0);\n      `,$=gt(r,o);return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${o} {\n    ${e?_:v}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${o} {\n    ${e?v:_}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${o}) {\n    let col = colIn * ${n};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${c}\n      ${io(t)}\n      ${$}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${n}] = value;\n    }\n  }`},hu=(e,t,r,o,n,s,u,c)=>{let a=t.format==="NHWC",f=a?e[0].dims[3]:e[0].dims[1],g=r[0],h=a?r[2]:r[3],w=a?r[1]:r[2],_=a?r[3]:r[1],v=a&&f%4===0&&f%3&&_%4===0,$=a?_:h*w,C=a?h*w:_,x=[8,8,1],S=o<=8?[4,1,1]:[4,4,1],T=[Math.ceil($/x[0]/S[0]),Math.ceil(C/x[1]/S[1]),Math.ceil(g/x[2]/S[2])];Ue("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${T}`);let E=v?4:1,P=Math.max(x[0]*E,x[1]),z=v?4:1,H=[t.kernelShape[a?1:2],t.kernelShape[a?2:3]],K=[H[0]+(t.dilations[0]<=1?0:(H[0]-1)*(t.dilations[0]-1)),H[1]+(t.dilations[1]<=1?0:(H[1]-1)*(t.dilations[1]-1))],re=[K[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),K[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],q=[{type:6,data:o},{type:6,data:n},{type:6,data:s},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:H},{type:6,data:re}];yt(t,q),q.push(...X(e[0].dims,e[1].dims));let ce=["rank","rank"];u&&(q.push(...X(e[2].dims)),ce.push("rank")),q.push(...X(r));let Se=Pe=>{let U=M("x",e[0].dataType,e[0].dims.length,z),Q=M("w",e[1].dataType,e[1].dims.length,1),W=j("result",e[0].dataType,r.length,z),Ce=[U,Q],we="";if(u){let be=M("bias",e[2].dataType,e[2].dims.length,z);Ce.push(be),we+=`\n          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${be.type.value} {\n            return bias[coords.${a?"w":"y"}${v?"/ 4":""}];\n          }`}let he=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:H.length},{name:"pads",type:"i32",length:re.length}];bt(t,he);let ne=Be(e[0].dataType,1);if(ne!=="f16"&&ne!=="f32")throw new Error(`elemType ${ne} is not supported.`);return`\n        ${uo("uniforms.result_strides")}\n        ${Pe.registerUniforms(he).declareVariables(...Ce,W)};\n        ${we}\n        ${Bp(a,u,t,U.type.value,E)}\n        ${v?Gr(S,x,ne,void 0,!a,P):Hr(S,x,ne,void 0,!a,P,!1,void 0,c)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${S};${x};${v}`,inputDependencies:ce},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:q}),getShaderSource:Se}}});var Mp,la,yu=Z(()=>{"use strict";ve();Wt();Ee();Te();Mp=(e,t,r,o,n,s=!1,u,c,a=!1)=>{let f=a?1:2,g=a?2:3,h=a?3:1,w=s?2:1,_=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${s?`vec4<${u}>`:u}) {\n    result[flatIndex] = ${s?`vec4<${u}>`:u}(value);\n  }`;o&&(_+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${s?`vec4<${u}>`:u} {\n      return bias[coords.${a?"w":"y"}${s?"/ 4":""}];\n    }`);let v=s?4:1,$=M("W",t[1].dataType,t[1].dims.length,v),C=M("Dy",t[0].dataType,t[0].dims.length,v),x=[C,$];o&&x.push(M("bias",t[2].dataType,[r[h]].length,v));let S=j("result",t[0].dataType,r.length,v),T=`{\n        let batch: u32 = ${n?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];\n        let r = ${n?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];\n        let c = ${n?"global_id.y":"workgroup_id.y"} * ${w};\n        let d1: u32 = ${n?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${u}>, ${w}>;\n        for (var i = 0; i < ${w}; i++) {\n          dotProd[i] = vec4<${u}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\n          var dyR = (${u}(dyCorner.x) + ${u}(wR)) / ${u}(uniforms.strides.x);\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${u}(uniforms.Dy_shape[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\n            let dyC = (${u}(dyCorner.y) + ${u}(wC)) / ${u}(uniforms.strides.y);\n            let dyC2 = (${u}(dyCorner.y) + 1.0 + ${u}(wC)) / ${u}(uniforms.strides.y);\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${u}(uniforms.Dy_shape[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${u}(uniforms.Dy_shape[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${C.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${u}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${C.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${u}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = uniforms.Dy_shape[${h}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${C.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${u}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${$.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${C.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${u}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${w}; i = i + 1) {\n          let value = dotProd[i] + ${o?"bias[c+i]":`vec4<${u}>(0.0)`};\n          ${S.set("batch","r","c + i","d1","value")};\n        }\n      }`,E=`\n          let outputIndices = ${S.offsetToIndices("global_idx")};\n          let batch = ${S.indicesGet("outputIndices",0)};\n          let d1 = ${S.indicesGet("outputIndices",h)};\n          let r = ${S.indicesGet("outputIndices",f)};\n          let c = ${S.indicesGet("outputIndices",g)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / uniforms.output_channels_per_group;\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${u}(0.0);\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n            if (wR % uniforms.dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${u}(dyRCorner) + ${u}(wR)) / ${u}(uniforms.strides[0]);\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n            if (dyR < 0.0 || dyR >= ${u}(uniforms.Dy_shape[${f}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n              if (wC % uniforms.dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${u}(dyCCorner) + ${u}(wC)) / ${u}(uniforms.strides.y);\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n              if (dyC < 0.0 || dyC >= ${u}(uniforms.Dy_shape[${g}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * uniforms.input_channels_per_group;\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\n                let xValue = ${a?C.get("batch","idyR","idyC","inputChannel"):C.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${$.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${o?"bias[d1]":`${u}(0.0)`};\n          ${S.setByOffset("global_idx","value")};\n        `;return`\n  ${e.registerUniforms(c).declareVariables(...x,S)}\n  ${_}\n\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};\n  ${s?T:E}}`},la=(e,t,r)=>{let o=e.length>2,n=t.outputShape,s=B.size(n),u=[Math.ceil(s/64),1,1];Ue("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let c=t.format==="NHWC",a=["rank","rank"],f=[t.strides[0],t.strides[1]],g=[t.kernelShape[c?1:2],t.kernelShape[c?2:3]],h=[t.dilations[0],t.dilations[1]],w=[g[0]+(t.dilations[0]<=1?0:(t.kernelShape[c?1:2]-1)*(t.dilations[0]-1)),g[1]+(t.dilations[1]<=1?0:(t.kernelShape[c?2:3]-1)*(t.dilations[1]-1))],_=[w[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),w[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],v=!1,$=t.group,C=e[1].dims,x=C[0]/$,S=C[1],T=[{type:12,data:s},{type:12,data:f},{type:12,data:g},{type:12,data:h},{type:12,data:w},{type:6,data:_},{type:12,data:x},{type:12,data:S},...X(e[0].dims,e[1].dims)];o&&(T.push(...X(e[2].dims)),a.push("rank")),T.push(...X(n));let E=u[1]===1&&u[2]===1,P=z=>{let H=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:f.length},{name:"filter_dims",type:"u32",length:g.length},{name:"dilations",type:"u32",length:g.length},{name:"effective_filter_dims",type:"u32",length:w.length},{name:"pads",type:"i32",length:_.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],K=Be(e[0].dataType);return`${Mp(z,e,n,o,E,v,K,H,c)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:a},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}],programUniforms:T}),getShaderSource:P}}});var zp,Up,Vp,bu,vu,Np,Wp,Gp,Hp,wu,_u=Z(()=>{"use strict";gu();yu();Gt();gr();zp=(e,t,r,o,n,s)=>(e-1)*t+r+(o-1)*n+1-s,Up=(e,t,r,o,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[o]=e-s,r[n]=s)},Vp=(e,t,r,o,n,s,u,c,a,f)=>{let g=e.length-2,h=f.length===0;if(a.length===0)for(let v=0;v<g;++v)a.push(0);let w=e[0],_=t[c?3:1]*n;for(let v=0,$=e.length-g-(c?1:0);v<g;++v,++$){let C=e[$],x=h?C*u[v]:f[v],S=zp(C,u[v],s[v],t[$],r[v],x);Up(S,o,s,v,v+g),h&&f.push(u[v]*(C-1)+a[v]+(t[$]-1)*r[v]+1-s[v]-s[v+g])}f.splice(0,0,w),f.splice(c?3:1,0,_)},bu=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((h,w)=>h*w,1)===0){r.length=0;for(let h=2;h<t[1].dims.length;++h)r.push(t[1].dims[h])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),c=t[0].dims,a=e.dilations.slice();if(a.reduce((h,w)=>h+w,0)===0){let h=t[0].dims.length-2;a=new Array(h).fill(1)}let f=e.strides.slice();if(f.reduce((h,w)=>h+w,0)===0){let h=t[0].dims.length-2;f=new Array(h).fill(1)}Vp(c,r,a,e.autoPad,e.group,n,f,o,u,s);let g=Object.assign({},e);return Object.assign(g,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:a,strides:f}),g},vu=e=>{let t=ao(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,c=e.pads,a=e.strides,f=e.wIsConst(),g=e.outputPadding,h=e.outputShape;return{autoPad:o,format:r,dilations:n,group:s,kernelShape:u,outputPadding:g,outputShape:h,pads:c,strides:a,wIsConst:f,...t,cacheKey:`${e.format};${t.activation};`}},Np=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((g,h)=>g+h,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((g,h)=>g+h,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((g,h)=>g+h,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((g,h)=>g+h,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Wp=[2,3,1,0],Gp=(e,t,r)=>{let o=bu(r,t),n=r.format==="NHWC",s=o.outputShape,u=s[n?3:1],c=t[0].dims[n?3:1];if(o.group!==1||u===1&&c===1){e.compute(la(t,o));return}let a=s[n?1:2],f=s[n?2:3],g=t[1].dims[2],h=t[1].dims[3],w=n?a*f:u,_=n?u:a*f,v=g*h*c,$=!0,C=e.kernelCustomData.wT??e.compute(ft(t[1],Wp),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=C);let x=[t[0],C],S=t.length===3;S&&(!n&&t[2].dims.length===1?x.push(t[2].reshape([t[2].dims[0],1,1])):x.push(t[2])),e.compute(hu(x,o,s,w,_,v,S,$),{inputs:x})},Hp=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let c=t.pads;c.length===0&&(c=[0,0]),c=[0,c[0],0,c[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let a=bu({...t,pads:c,strides:u,dilations:s,kernelShape:n},o);e.compute(la(o,a,f=>r?[f[0],f[2],f[3]]:[f[0],f[1],f[3]]))},wu=(e,t)=>{Np(e.inputs,t),e.inputs[0].dims.length===3?Hp(e,t):Gp(e,e.inputs,t)}});var Lp,$u,Su,xu=Z(()=>{"use strict";ve();Ee();Ze();Te();Lp=(e,t,r,o)=>{let n=B.size(t),s=t.length,u=M("input",e,s),c=j("output",e,s),a=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),f=B.normalizeAxis(a,s),g=h=>{let w=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,_=fe("uniforms.input_shape","uniforms.axis",s),v=o.reverse?w+(o.exclusive?" + 1":""):"0",$=o.reverse?_:w+(o.exclusive?"":" + 1");return`\n                ${h.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,c)}\n                ${h.mainStart()}\n                  ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${c.offsetToIndices("global_idx")};\n                  var sum = ${c.type.value}(0);\n                  let first : i32 = ${v};\n                  let last : i32 = ${$};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${u.getByIndices("inputIndices")};\n                  }\n                  ${c.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},{type:6,data:f},...X(t,t)]}),getShaderSource:g}},$u=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,n=e.inputs[1];e.compute(Lp(o,r,n,t),{inputs:[0]})},Su=e=>{let t=e.exclusive===1,r=e.reverse===1;return Ae({exclusive:t,reverse:r})}});var da,po,Cu,Fp,jp,ca,pa,Au,Kp,Iu,Tu,Eu=Z(()=>{"use strict";ve();Ee();Ze();Te();da="[a-zA-Z]|\\\\.\\\\.\\\\.",po="("+da+")+",Cu="^"+po+"$",Fp="("+po+",)*"+po,jp="^"+Fp+"$",ca=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},pa=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(jp)))throw new Error("Invalid LHS term");if(o.split(",").forEach((c,a)=>{let f=t[a].dims.slice();if(!c.match(RegExp(Cu)))throw new Error("Invalid LHS term");let g=this.processTerm(c,!0,f,a);this.lhs.push(g)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([c,a])=>a.count===1||c==="...").map(([c])=>c).join("");else if(!n.match(RegExp(po)))throw new Error("Invalid RHS");n.match(RegExp(da,"g"))?.forEach(c=>{if(c==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(c);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let s=o.length,u=!1,c=[],a=0;if(!t.match(RegExp(Cu))&&!r&&t!=="")throw new Error("Invalid LHS term");let f=t.match(RegExp(da,"g")),g=new ca(n);return f?.forEach((h,w)=>{if(h==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let _=s-f.length+1;if(_<0)throw new Error("Ellipsis out of bounds");if(c=o.slice(a,a+_),this.hasEllipsis){if(this.ellipsisDims.length!==c.length||this.ellipsisDims.toString()!==c.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=c;else throw new Error("Ellipsis must be specified in the LHS");for(let v=0;v<c.length;v++){let $=String.fromCharCode("0".charCodeAt(0)+v);g.addSymbol($,w+v),this.addSymbol($,o[a++],n)}}else g.addSymbol(h,w+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(h,o[a++],n)}),g}},Au=e=>e+"_max",Kp=(e,t,r,o)=>{let s=e.map(g=>g.length).map((g,h)=>M(`input${h}`,t,g)),u=B.size(o),c=j("output",t,o.length),a=[...r.symbolToInfo.keys()].filter(g=>!r.rhs.symbolToIndices.has(g)),f=g=>{let h=[],w="var prod = 1.0;",_="var sum = 0.0;",v="sum += prod;",$=[],C=[],x=[],S=[],T=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((P,z)=>{if(r.rhs.symbolToIndices.has(z)){let H=r.rhs.symbolToIndices.get(z)?.[0];H!==void 0&&r.lhs.forEach((K,re)=>{if(P.inputIndices.includes(re)){let q=K.symbolToIndices.get(z);if(q===void 0)throw new Error("Invalid symbol error");q.forEach(ce=>{h.push(`${s[re].indicesSet(`input${re}Indices`,ce,c.indicesGet("outputIndices",H))}`)})}})}else r.lhs.forEach((H,K)=>{if(P.inputIndices.includes(K)){let re=H.symbolToIndices.get(z);if(re===void 0)throw new Error("Invalid symbol error");re.forEach(q=>{$.push(`${s[K].indicesSet(`input${K}Indices`,q,`${z}`)}`)}),S.push(`prod *= ${s[K].getByIndices(`input${K}Indices`)};`)}}),C.push(`for(var ${z}: u32 = 0; ${z} < uniforms.${Au(z)}; ${z}++) {`),x.push("}")});let E=T?[...h,`let sum = ${s.map((P,z)=>P.getByIndices(`input${z}Indices`)).join(" * ")};`]:[...h,_,...C,...$,w,...S,v,...x];return`\n            ${g.registerUniforms(a.map(P=>({name:`${Au(P)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...s,c)}\n\n            ${g.mainStart()}\n            ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${c.offsetToIndices("global_idx")};\n            ${s.map((P,z)=>`var input${z}Indices: ${s[z].type.indices};`).join(`\n`)}\n            ${E.join(`\n`)};\n            ${c.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let g=a.filter(w=>r.symbolToInfo.has(w)).map(w=>({type:12,data:r.symbolToInfo.get(w)?.dimValue||0}));g.push({type:12,data:u});let h=e.map((w,_)=>[...X(w)]).reduce((w,_)=>w.concat(_),g);return h.push(...X(o)),{outputs:[{dims:o,dataType:t}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:h}},getShaderSource:f}},Iu=(e,t)=>{let r=new pa(e.inputs,t.equation),o=r.outputDims,n=e.inputs.map((s,u)=>s.dims);e.compute(Kp(n,e.inputs[0].dataType,r,o))},Tu=e=>{let t=e.equation.replace(/\\s+/g,"");return Ae({equation:t})}});var qp,Ou,Yp,Zp,ku,Pu=Z(()=>{"use strict";ve();Ee();Te();qp=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Ou=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},Yp=(e,t)=>e.length>t.length?Ou(e,t):Ou(t,e),Zp=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=Yp(t,r),n=e[0].dataType,s=n===9?4:1,u=Math.ceil(B.size(o)/s),c=f=>{let g=M("input",n,t.length,s),h=j("output",n,o.length,s),w;if(n===9){let _=(v,$,C="")=>`\n          let outputIndices${$} = ${h.offsetToIndices(`outputOffset + ${$}u`)};\n          let offset${$} = ${g.broadcastedIndicesToOffset(`outputIndices${$}`,h)};\n          let index${$} = offset${$} / 4u;\n          let component${$} = offset${$} % 4u;\n          ${v}[${$}] = ${C}(${g.getByOffset(`index${$}`)}[component${$}]);\n        `;w=`\n        let outputOffset = global_idx * ${s};\n        var data = vec4<u32>(0);\n        ${_("data",0,"u32")}\n        ${_("data",1,"u32")}\n        ${_("data",2,"u32")}\n        ${_("data",3,"u32")}\n        ${h.setByOffset("global_idx","data")}\n      }`}else w=`\n        let outputIndices = ${h.offsetToIndices("global_idx")};\n        let inputOffset = ${g.broadcastedIndicesToOffset("outputIndices",h)};\n        ${h.setByOffset("global_idx",g.getByOffset("inputOffset"))}\n      }`;return`\n    ${f.registerUniform("vec_size","u32").declareVariables(g,h)}\n    ${f.mainStart()}\n    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${w}`},a=[{type:12,data:u},...X(t,o)];return{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:["rank"]},getShaderSource:c,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:a})}},ku=e=>{qp(e.inputs),e.compute(Zp(e.inputs),{inputs:[0]})}});var Xp,Ru,Du=Z(()=>{"use strict";ve();Ee();Te();oo();Xp=e=>{let t=e[0].dataType,r=B.size(e[0].dims),o=B.size(e[1].dims),n=o%4===0,s=u=>{let c=M("x",t,[1],4),a=M("bias",t,[1],4),f=j("y",t,[1],4),g=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],h=_=>`\n      let bias${_}_offset: u32 = (global_idx * 4 + ${_}) % uniforms.bias_size;\n      let bias${_} = ${a.getByOffset(`bias${_}_offset / 4`)}[bias${_}_offset % 4];`,w=n?`\n      let bias = ${a.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${h(0)}${h(1)}${h(2)}${h(3)}\n      let bias = ${c.type.value}(bias0, bias1, bias2, bias3);`;return`${u.registerUniforms(g).declareVariables(c,a,f)}\n\n    ${Jo(st(t))}\n\n    ${u.mainStart(tr)}\n      ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}\n\n      let x = ${c.getByOffset("global_idx")};\n      ${w}\n      let x_in = x + bias;\n      ${f.setByOffset("global_idx",ea("x_in"))}\n    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${n}`,inputDependencies:["type","type"]},getShaderSource:s,getRunData:u=>({outputs:[{dims:u[0].dims,dataType:u[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:o}],dispatchGroup:{x:Math.ceil(r/tr/4)}})}},Ru=e=>{e.inputs.length<2||B.size(e.inputs[1].dims)===0?Gs(e):e.compute(Xp(e.inputs))}});var Qp,Jp,Bu,Mu,zu=Z(()=>{"use strict";ve();Ee();Ze();Te();Qp=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Jp=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,s=B.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...o);let c=r[s],a=e[0].dataType===9?4:1,f=Math.ceil(B.size(u)/a),g=[{type:12,data:f},{type:6,data:c},{type:12,data:s},...X(e[0].dims,e[1].dims,u)],h=w=>{let _=M("data",e[0].dataType,e[0].dims.length,a),v=M("inputIndices",e[1].dataType,e[1].dims.length),$=j("output",e[0].dataType,u.length,a),C=S=>{let T=o.length,E=`var indicesIndices${S}  = ${v.type.indices}(0);`;for(let P=0;P<T;P++)E+=`${T>1?`indicesIndices${S}[${P}]`:`indicesIndices${S}`} = ${u.length>1?`outputIndices${S}[uniforms.axis + ${P}]`:`outputIndices${S}`};`;E+=`\n          var idx${S} = ${v.getByIndices(`indicesIndices${S}`)};\n          if (idx${S} < 0) {\n            idx${S} = idx${S} + uniforms.axisDimLimit;\n          }\n          var dataIndices${S} : ${_.type.indices};\n        `;for(let P=0,z=0;P<n;P++)P===s?(E+=`${n>1?`dataIndices${S}[${P}]`:`dataIndices${S}`} = u32(idx${S});`,z+=T):(E+=`${n>1?`dataIndices${S}[${P}]`:`dataIndices${S}`} = ${u.length>1?`outputIndices${S}[${z}]`:`outputIndices${S}`};`,z++);return E},x;if(e[0].dataType===9){let S=(T,E,P="")=>`\n          let outputIndices${E} = ${$.offsetToIndices(`outputOffset + ${E}u`)};\n          ${C(E)};\n          let offset${E} = ${_.indicesToOffset(`dataIndices${E}`)};\n          let index${E} = offset${E} / 4u;\n          let component${E} = offset${E} % 4u;\n          ${T}[${E}] = ${P}(${_.getByOffset(`index${E}`)}[component${E}]);\n        `;x=`\n        let outputOffset = global_idx * ${a};\n        var value = vec4<u32>(0);\n        ${S("value",0,"u32")}\n        ${S("value",1,"u32")}\n        ${S("value",2,"u32")}\n        ${S("value",3,"u32")}\n        ${$.setByOffset("global_idx","value")}\n      `}else x=`\n      let outputIndices = ${$.offsetToIndices("global_idx")};\n      ${C("")};\n      let value = ${_.getByIndices("dataIndices")};\n      ${$.setByOffset("global_idx","value")};\n      `;return`\n      ${w.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(_,v,$)}\n      ${w.mainStart()}\n        ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${x}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:g}),getShaderSource:h}},Bu=e=>Ae({axis:e.axis}),Mu=(e,t)=>{let r=e.inputs;Qp(r),e.compute(Jp(e.inputs,t))}});var em,tm,Uu,Vu,Nu=Z(()=>{"use strict";ve();Ee();Ze();Te();em=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},tm=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,s=e[1].dims,u=e[1].dataType,c=B.normalizeAxis(t.axis,n),a=r[c],f=s.slice(0),g=B.size(f),h=M("input",o,n),w=M("indicesInput",u,s.length),_=j("output",o,f.length),v=[{type:12,data:g},{type:6,data:a},{type:12,data:c}];return v.push(...X(r,s,f)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:f,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:v}),getShaderSource:x=>`\n      ${x.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(h,w,_)}\n      ${x.mainStart()}\n      ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${_.offsetToIndices("global_idx")};\n\n      var idx = ${w.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${h.type.indices}(outputIndices);\n      ${h.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${h.getByIndices("inputIndices")};\n\n      ${_.setByOffset("global_idx","value")};\n  }`}},Uu=e=>Ae({axis:e.axis}),Vu=(e,t)=>{let r=e.inputs;em(r),e.compute(tm(e.inputs,t))}});var rm,nm,Wu,Gu,Hu=Z(()=>{"use strict";ve();Ee();Te();rm=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},nm=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,s,u]=Yn.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),c=[n,s];if(!c)throw new Error("Can\'t use gemm on the given tensors");let a=B.size(c),f=[{type:12,data:a},{type:12,data:n},{type:12,data:s},{type:12,data:u},{type:1,data:t.alpha},{type:1,data:t.beta}],g=["type","type"];e.length===3&&(f.push(...X(e[2].dims)),g.push("rank")),f.push(...X(c));let h=w=>{let _="";t.transA&&t.transB?_="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?_="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?_="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(_="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let v=t.alpha===1?"":"value *= uniforms.alpha;",$=M("a",e[0].dataType,e[0].dims),C=M("b",e[1].dataType,e[1].dims),x=$.type.value,S=null,T=[$,C];e.length===3&&(S=M("c",e[2].dataType,e[2].dims.length),T.push(S));let E=j("output",e[0].dataType,c.length);T.push(E);let P=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`\n  ${w.registerUniforms(P).declareVariables(...T)}\n\n  ${w.mainStart()}\n    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${x}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${_}\n    }\n\n    ${v}\n    ${(()=>S!=null?`let cOffset = ${S.broadcastedIndicesToOffset("vec2(m, n)",E)}; value += ${x}(uniforms.beta) * ${S.getByOffset("cOffset")};`:"")()}\n    output[global_idx] = value;\n  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:f}),getShaderSource:h}},Wu=e=>{let t=e.transA,r=e.transB,o=e.alpha,n=e.beta;return{transA:t,transB:r,alpha:o,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Gu=(e,t)=>{rm(e.inputs),e.compute(nm(e.inputs,t))}});var om,am,im,Lu,Fu=Z(()=>{"use strict";ve();Ee();Te();om=(e,t)=>{let r=e[0].dims,o=r,n=2,s=B.sizeToDimension(r,n),u=B.sizeFromDimension(r,n),c=Ve(u),a=u/c,f=[r[0],r[1],a],g=["rank","type","type"],h=[{type:12,data:u},{type:12,data:a}];h.push(...X(f,f));let w=_=>{let v=M("x",e[0].dataType,f.length,c),$=M("scale",e[1].dataType,e[1].dims),C=M("bias",e[2].dataType,e[2].dims),x=j("output",e[0].dataType,f.length,c),S=[v,$,C,x],T=v.type.value,E=c===1?"f32":`vec${c}<f32>`,P=64,z=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${E}, ${P}>;\n  const workgroupSize = ${P}u;\n  ${_.registerUniforms(z).declareVariables(...S)}\n  ${_.mainStart(P)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${E}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${E}(${v.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${ut("workgroupShared[0]",c)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${E}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${E}(${v.get("batch","channel","h")}) - ${E}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${ut("workgroupShared[0]",c)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${$.getByOffset("channel")});\n    let channelShift = f32(${C.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${v.get("batch","channel","h")} * ${T}(${E}(channelScale)) + ${T}(${E}(channelShift));\n      ${x.set("batch","channel","h","value")};\n    }\n  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${c}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:s},programUniforms:h}),getShaderSource:w}},am=(e,t,r,o,n,s,u,c)=>{let a=Ve(u),f=64,g=a===1?"vec2f":`mat2x${a}f`,h=a===1?"f32":`vec${a}f`,w=(z,H)=>`${g}(${z}, ${H})`,_=n*u/a,v=Math.ceil(s/f),$=["type"],C=[{type:12,data:v},{type:12,data:s},{type:12,data:Math.floor(u/a)},{type:12,data:Math.floor(s*u/a)}],x=z=>{let H=M("input",t.dataType,t.dims,a);return`\n  ${z.declareVariables(H)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${g}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${z.mainStart(f)}\n    let currentImageNumber = global_idx / ${f} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${f}) % uniforms.C;\n    let wgOffset = local_id.x * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${rt("f32",a)};\n    var squaredSum = ${rt("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${h}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${w("sum","squaredSum")};\n  }`},S=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${a}`,inputDependencies:$},getRunData:()=>({outputs:[{dims:[n,u,f,2],dataType:1}],dispatchGroup:{x:n*u/a},programUniforms:C}),getShaderSource:x},{inputs:[t],outputs:[-1]})[0],T=[{type:12,data:_},{type:12,data:s},{type:12,data:Math.floor(u/a)},{type:12,data:Math.floor(f*u/a)}],E=["type","type","type"],P=z=>{let H=M("scale",r.dataType,r.dims,a),K=M("bias",o.dataType,o.dims,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${g}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${H.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${K.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${g}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${z.mainStart()}\n    ${z.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${rt("f32",a)};\n    var squaredSum = ${rt("f32",a)};\n    for (var i: u32 = 0; i < min(${f}, uniforms.H); i++) {\n        let value = input[offset + i + currentChannelNumber * ${f}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${c}));\n    let channelScale = invStdDev * ${h}(scale[currentChannelNumber]);\n    let channelShift = ${h}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${w("channelScale","channelShift")};\n  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${a};${c}`,inputDependencies:E},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:T}),getShaderSource:P},{inputs:[S,r,o],outputs:[-1]})[0]},im=(e,t,r)=>{let o=t[0].dims,n=o,s=o[0],u=o[o.length-1],c=B.sizeFromDimension(o,1)/u,a=Ve(u),f=B.size(n)/a,g=[{type:12,data:c},{type:12,data:Math.floor(u/a)}],h=["type","type"],w=am(e,t[0],t[1],t[2],s,c,u,r.epsilon),_=v=>{let $=Be(t[0].dataType),C=a===1?"vec2f":`mat2x${a}f`,x=a===1?$:`vec${a}<${$}>`,S=M("input",t[0].dataType,t[0].dims,a),T=j("output",t[0].dataType,n,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${S.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${C}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${T.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${v.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${x}(scale[0]), ${x}(scale[1]));\n  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${a}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:g}),getShaderSource:_},{inputs:[t[0],w]})},Lu=(e,t)=>{t.format==="NHWC"?im(e,e.inputs,t):e.compute(om(e.inputs,t))}});var sm,um,ju,Ku=Z(()=>{"use strict";ve();Ee();Te();sm=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},um=(e,t,r)=>{let o=e[0].dims,n=e[1],s=e[2],u=o,c=B.normalizeAxis(t.axis,o.length),a=B.sizeToDimension(o,c),f=B.sizeFromDimension(o,c),g=B.size(n.dims),h=s?B.size(s.dims):0;if(g!==f||s&&h!==f)throw new Error(`Size of X.shape()[axis:] == ${f}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${g} and bias size of ${h}`);let w=[];for(let E=0;E<o.length;++E)E<c?w.push(o[E]):w.push(1);let _=Ve(f),v=["type","type"],$=[{type:12,data:a},{type:1,data:f},{type:12,data:Math.floor(f/_)},{type:1,data:t.epsilon}];s&&v.push("type");let C=r>1,x=r>2,S=E=>{let P=Be(e[0].dataType),z=[M("x",e[0].dataType,e[0].dims,_),M("scale",n.dataType,n.dims,_)];s&&z.push(M("bias",s.dataType,s.dims,_)),z.push(j("output",e[0].dataType,u,_)),C&&z.push(j("mean_data_output",1,w)),x&&z.push(j("inv_std_output",1,w));let H=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`\n  ${E.registerUniforms(H).declareVariables(...z)}\n  ${E.mainStart()}\n    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var mean_vector = ${rt("f32",_)};\n    var mean_square_vector = ${rt("f32",_)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${ht(P,_,"x[h + offset]")};\n      mean_vector += value;\n      mean_square_vector += value * value;\n    }\n    let mean = ${ut("mean_vector",_)} / uniforms.norm_size;\n    let inv_std_dev = inverseSqrt(${ut("mean_square_vector",_)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${ht(P,_,"x[j + offset]")};\n      let f32scale = ${ht(P,_,"scale[j]")};\n      output[j + offset] = ${z[0].type.value}((f32input - mean) * inv_std_dev * f32scale\n        ${s?`+ ${ht(P,_,"bias[j]")}`:""}\n      );\n    }\n\n    ${C?"mean_data_output[global_idx] = mean":""};\n    ${x?"inv_std_output[global_idx] = inv_std_dev":""};\n  }`},T=[{dims:u,dataType:e[0].dataType}];return C&&T.push({dims:w,dataType:1}),x&&T.push({dims:w,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${_};${r}`,inputDependencies:v},getRunData:()=>({outputs:T,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:$}),getShaderSource:S}},ju=(e,t)=>{sm(e.inputs),e.compute(um(e.inputs,t,e.outputCount))}});var lm,dm,qu,Yu,Zu=Z(()=>{"use strict";ve();Ee();Ze();Te();lm=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],o=r.dims.length;if(r.dims[o-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let n=Math.floor((t.k+t.blockSize-1)/t.blockSize),s=t.blockSize/8*t.bits,u=e[1];if(!B.areEqual(u.dims,[t.n,n,s]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let a=e[2].dims;if(B.size(a)!==t.n*n)throw new Error("scales input size error.");if(e.length===4){let g=e[3].dims,h=t.bits>4?t.n*n:t.n*Math.floor((n+1)/2);if(B.size(g)!==h)throw new Error("zeroPoints input size error.")}},dm=(e,t,r,o)=>{let n=e[0].dims,s=n.length,u=Math.floor((t.k+t.blockSize-1)/t.blockSize),c=n[s-2],a=t.k,f=t.n,g=n.slice(0,s-2),h=B.size(g),_=t.blockSize/8*t.bits/4,v=e[0].dataType,$=Ve(c),C=Ve(t.k),x=Ve(_),S=Qt(v),T=c*u,E=Ve(f,Math.ceil(o/T/S)),P=E*T*S>o&&T*S<=o?1:E,z=u<=r[0]&&T*P*S<=o,H=g.concat([c,f]),K=B.size(H)/P/$,re=z?[{type:12,data:t.blockSize}]:[{type:12,data:K},{type:12,data:t.k},{type:12,data:t.n},{type:12,data:t.accuracyLevel},{type:12,data:t.bits},{type:12,data:t.blockSize}],q=[h,c,a/C],ce=B.convertShape(e[1].dims).slice();ce.splice(-1,1,_/x),re.push(...X(q)),re.push(...X(ce)),re.push(...X(e[2].dims)),e.length===4&&re.push(...X(B.convertShape(e[3].dims)));let Se=[h,c,f/P];re.push(...X(Se));let Pe=U=>{let Q=q.length,W=M("a",e[0].dataType,Q,C),Ce=M("b",12,ce.length,x),we=M("scales",e[2].dataType,e[2].dims.length),he=[W,Ce,we],ne=e.length===4?M("zero_points",12,e[3].dims.length):void 0;ne&&he.push(ne);let be=Se.length,me=j("output",e[0].dataType,be,P),Ke=z?[{name:"block_size",type:"u32"}]:[{name:"output_size",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"accuracy_level",type:"u32"},{name:"bits",type:"u32"},{name:"block_size",type:"u32"}],G=Be(e[0].dataType),ee=(()=>{switch(C){case 1:return`array<${G}, 8>`;case 2:return`mat4x2<${G}>`;case 4:return`mat2x4<${G}>`;default:throw new Error(`${C}-component is not supported.`)}})(),_e=`\n        fn dequantize(quantized: ${ee}, zero_point: ${G}, scale: ${G}) -> ${ee} {\n          ${(()=>C===1?`var dequantized = ${ee}(${Array.from({length:8},(Qe,He)=>`(quantized[${He}] - zero_point) * scale`).join(", ")});\n              return dequantized;`:`var zero_points: ${ee} = ${ee}(${Array(8).fill("zero_point").join(",")});\n              return (quantized - zero_points) * scale;`)()}\n        }`,Xe=`\n        fn ortUnpack8x4snorm(value: u32) -> ${ee} {\n          var quantized: ${ee};\n          var offset: u32 = 0;\n          let count: u32 = 4;\n          for (var i: u32 = 0; i < 8u; i++) {\n            var result = ${G}(extractBits(value, offset, count));\n            ${(()=>{switch(C){case 1:return"quantized[i] = result;";case 2:return"quantized[i / 2][i % 2] = result;";case 4:return"quantized[i / 4][i % 4] = result;";default:throw new Error(`${C}-component is not supported.`)}})()}\n            offset += count;\n          }\n          return quantized;\n        }`,qe=ne?`\n          zero_point_offset += 4;\n          if (zero_point_offset == 32) {\n            zero_point_offset = 0;\n            zero_point_index++;\n            zero_point_word = ${ne.getByOffset("zero_point_index")};\n          }`:"";return z?`\n        var<workgroup> workgroup_shared: array<${me.type.value}, ${c*u}>;\n        ${U.registerUniforms(Ke).declareVariables(...he,me)}\n        ${U.mainStart([u,1,1])}\n          var a_indices: ${W.type.indices};\n          var block = local_id.x;\n          var col = workgroup_id.y;\n          var batch = workgroup_id.z;\n          ${W.indicesSet("a_indices","0","batch")};\n          // Two zero points are packed into one byte when uniforms.bits is 4.\n          for (var c: u32 = 0; c < ${P}; c++) {\n            let col_times_components_plus_c = col * ${P} + c;\n              ${ne?`\n            var zero_point_bytes_per_col: u32 = (${u} + 1) / 2;\n            var zero_point_byte_count: u32 = col_times_components_plus_c * zero_point_bytes_per_col + (block >> 0x1u);\n            var zero_point_word_index: u32 = zero_point_byte_count >> 0x2u;\n            var zero_point_byte_offset: u32 = zero_point_byte_count & 0x3u;\n            var zero_point_nibble_offset: u32 = block & 0x1u;\n            var zero_point_bits_offset: u32 = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            var zero_point_word: u32 = ${ne.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;`:""}\n            var b_indices: ${Ce.type.indices};\n            ${Ce.indicesSet("b_indices","0","col_times_components_plus_c")};\n            // The scale and zero points are computed per block.\n            var scales_index = col_times_components_plus_c * ${u} + block;\n            let scale = ${we.getByOffset("scales_index")};\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${G}(${ne?"(zero_point_word) & 0xFu":8});\n            ${Ce.indicesSet("b_indices","1","block")};\n            var word_offset: u32 = block * ${t.blockSize/C};\n            var workgroup_shared_offset: u32 = block * ${c};\n            for (var word: u32 = 0; word < ${_}; word += ${x}) {\n              ${Ce.indicesSet("b_indices","2","word")};\n              let b_data = ${Ce.getByIndices("b_indices")};\n              for (var i: u32 = 0; i < ${x}; i++) {\n                let b_value: u32 = ${x===1?"b_data":"b_data[word + i]"};\n                let b_mask: u32 = 0x0F0F0F0Fu;\n                let b_value_lower: vec4<u32> = unpack4xU8(b_value & b_mask);\n                let b_value_upper: vec4<u32> = unpack4xU8((b_value >> 4) & b_mask);\n                let b_quantized_values = ${ee}(${Array.from({length:4},(Qe,He)=>`${G}(b_value_lower[${He}]), ${G}(b_value_upper[${He}])`).join(", ")});\n                let b_dequantized_values = ${(()=>C===1?`${ee}(${Array.from({length:8},(Qe,He)=>`(b_quantized_values[${He}] - zero_point) * scale`).join(", ")});`:`(b_quantized_values - ${ee}(${Array(8).fill("zero_point").join(",")})) * scale;`)()};\n                // Number of B elements per 32-bit word is 32/bits = 32/4 = 8\n                for (var m: u32 = 0; m < ${c}u; m++) {\n                  ${W.indicesSet("a_indices",Q-2,"m")};\n                  ${W.indicesSet("a_indices",Q-1,"word_offset")};\n                  var input_offset = ${W.indicesToOffset("a_indices")};\n                  var a_data: ${ee};\n                  for (var j: u32 = 0; j < ${8/C}; j++) {\n                    a_data[j] = ${W.getByOffset("input_offset")};\n                    input_offset++;\n                  }\n                  workgroup_shared[workgroup_shared_offset + m]${P>1?"[c]":""} += ${Array.from({length:8/C},(Qe,He)=>`${C===1?`a_data[${He}] * b_dequantized_values[${He}]`:`dot(a_data[${He}], b_dequantized_values[${He}])`}`).join(" + ")};\n                }\n                word_offset += ${8/C};\n              }\n            }\n          }\n          workgroupBarrier();\n          if (local_id.x == 0u) {\n            var output_indices: ${me.type.indices};\n            ${me.indicesSet("output_indices","0","batch")};\n            ${me.indicesSet("output_indices",be-1,"col")};\n            ${me.indicesSet("output_indices",be-2,"0")};\n            var output_offset = ${me.indicesToOffset("output_indices")};\n            for (var m: u32 = 0u; m < ${c}u; m++) {\n              var output_value: ${me.type.value} = ${me.type.value}(0);\n              var workgroup_shared_offset: u32 = m;\n              for (var b: u32 = 0u; b < ${u}u; b++) {\n                output_value += workgroup_shared[workgroup_shared_offset];\n                workgroup_shared_offset += ${c};\n              }\n              ${me.setByOffset("output_offset","output_value")};\n              output_offset += ${f/P};\n            }\n          }\n        }`:`\n        ${_e};\n        ${Xe};\n        ${U.registerUniforms(Ke).declareVariables(...he,me)}\n        ${U.mainStart()}\n          ${U.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var output_values: array<${me.type.value}, ${$}>;\n          var output_indices = ${me.offsetToIndices("global_idx")};\n          var n = ${me.indicesGet("output_indices",be-1)};\n          var m = ${me.indicesGet("output_indices",be-2)};\n          var a_indices: ${W.type.indices} = output_indices;\n          // Two zero points are packed into one byte because uniforms.bits <= 4.\n          // zero_point_offset is either 0 or 4. It is bit offset within one byte.\n          // TODO support zero_point_offset for bits > 4\n          ${ne?`\n          var zero_point_index: u32 = n * ${P} * ((${u} + 1) / 2) / 4;\n          var zero_point_word: u32 = ${ne.getByOffset("zero_point_index")};\n          var zero_point_offset: u32 = 0;`:""}\n          var scale_index = n * ${u*P};\n          var b_indices: ${Ce.type.indices};\n          for (var c: u32 = 0; c < ${P}; c++) {\n            ${Ce.indicesSet("b_indices","0",`n * ${P} + c`)};\n            var block_offset: u32 = 0;\n            for (var block: u32 = 0; block < ${u}; block++) {\n              // The scale and zero points are computed per block.\n              let scale = ${we.getByOffset("scale_index")};\n              // The default zero point is 8 for unsigned 4-bit quantization.\n              let zero_point = ${G}(${ne?"extractBits(zero_point_word, zero_point_offset, 4)":8});\n              ${Ce.indicesSet("b_indices","1","block")};\n              var word_offset: u32 = block_offset;\n              for (var word: u32 = 0; word < ${_}; word += ${x}) {\n                ${Ce.indicesSet("b_indices","2","word")};\n                let b_data = ${Ce.getByIndices("b_indices")};\n                for (var i: u32 = 0; i < ${x}; i++) {\n                  let b_value = ${x===1?"b_data":"b_data[word + i]"};\n                  let b_quantized_values: ${ee} = ortUnpack8x4snorm(b_value);\n                  let b_dequantized_values = dequantize(b_quantized_values, zero_point, scale);\n                  // Number of B elements per 32-bit word is 32/bits = 32/4 = 8\n                  var offset: u32 = word_offset;\n                  for (var j: u32 = 0; j < 8/${C}; j++) {\n                    ${W.indicesSet("a_indices",Q-1,`offset/${C}`)};\n                    for (var k: u32 = 0; k < ${$}u; k++) {\n                      ${W.indicesSet("a_indices",Q-2,`m * ${$} + k`)};\n                      let a_data = ${W.getByIndices("a_indices")};\n                      output_values[k]${P>1?"[c]":""} += ${C===1?"a_data * b_dequantized_values[j]":"dot(a_data, b_dequantized_values[j])"};\n                    }\n                    offset += ${C};\n                  }\n                  word_offset += 8;\n                }\n              }\n              scale_index++;\n              ${qe}\n              block_offset += uniforms.block_size;\n            }\n            // Drop the trailing 4 bits if the zero_poit_offset is not a byte boundary to align with the next byte.\n            ${ne?`if (zero_point_offset % 8 > 0) {\n                ${qe}\n              }`:""}\n            }\n            for (var k: u32 = 0u; k < ${$}u; k++) {\n              ${me.indicesSet("output_indices",be-2,`${$+" * m + k"}`)};\n              ${me.setByIndices("output_indices","output_values[k]")}\n            }\n        }`};return{name:z?"BlockwiseMatMulNBits":"MatMulNBits",shaderCache:{hint:z?`${t.cacheKey};${c};${v};${e.length}`:`${t.cacheKey};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:H,dataType:v}],name:z?"BlockwiseMatMulNBits":"MatMulNBits",dispatchGroup:z?{x:1,y:Math.ceil(f/P),z:h}:{x:Math.ceil(K/64)},programUniforms:re}),getShaderSource:Pe}},qu=(e,t)=>{lm(e.inputs,t);let r=e.getMaxComputeWorkgroupSizes(),o=e.getMaxComputeWorkgroupStoragesize();e.compute(dm(e.inputs,t,r,o))},Yu=e=>Ae(e)});var cm,Qu,Xu,pm,ma,Ju,el=Z(()=>{"use strict";ve();Ee();Ze();Kn();Qo();Te();gr();cm=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],c=e[5],a=e[6],f=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let g=!1,h=r.dims[0],w=r.dims[1],_=r.dims.length===3?g?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],v=w,$=0,C=0,x=Math.floor(_/t.numHeads);if(a&&f){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(f.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');$=a.dims[2],C=a.dims[2]}else if(a||f)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let S;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');S=2,v=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==x)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');S=5,v=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==x)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');S=0,v=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');S=3}if(s){if(s.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let T=0;if(u){T=8;let K=u.dims;throw K.length===1?K[0]===h?T=1:K[0]===3*h+2&&(T=3):K.length===2&&K[0]===h&&K[1]===v&&(T=5),T===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let E=!1,P=_;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(v!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');P=n.dims[2]}else{if(v!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');P=n.dims[1]*n.dims[3],E=!0}}let z=$+v,H=!1;if(u)throw new Error("Key padding mask is not supported");if(c)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(f)throw new Error("pastValue is not supported");return{batchSize:h,sequenceLength:w,pastSequenceLength:$,kvSequenceLength:v,totalSequenceLength:z,maxSequenceLength:C,inputHiddenSize:0,hiddenSize:_,vHiddenSize:P,headSize:x,vHeadSize:Math.floor(P/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:T,scale:t.scale,broadcastResPosBias:H,passPastInKv:E,qkvFormat:S}},Qu=e=>Ae({...e}),Xu=Ae({perm:[0,2,1,3]}),pm=(e,t,r,o,n,s,u)=>{let c=[o,n,s],a=B.size(c),f=[{type:12,data:a},{type:12,data:u},{type:12,data:s}],g=h=>{let w=j("qkv_with_bias",t.dataType,c),_=M("qkv",t.dataType,c),v=M("bias",r.dataType,c),$=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`\n  ${h.registerUniforms($).declareVariables(_,v,w)}\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:c,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:f}),getShaderSource:g},{inputs:[t,r],outputs:[-1]})[0]},ma=(e,t,r,o,n,s,u,c)=>{let a=s;if(u){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=pm(e,s,u,t,o,r*n,c),a=a.reshape([t,o,r,n]),e.compute(ft(a,Xu.perm),{inputs:[a],outputs:[-1]})[0]}else return s.dims.length===3&&(a=s.reshape([t,o,r,n])),e.compute(ft(a,Xu.perm),{inputs:[a],outputs:[-1]})[0]},Ju=(e,t)=>{let r=cm(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=ma(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return to(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=ma(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=ma(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);to(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var mm,fm,hm,gm,ym,bm,vm,wm,tl,rl=Z(()=>{"use strict";ve();Ee();Te();mm=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},fm=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n            k = i32(${e.indicesGet("indices",n)}) - ${fe("uniforms.pads",n,r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${fe("uniforms.x_shape",n,t)})) {\n              break;\n            }\n            offset += k * i32(${fe("uniforms.x_strides",n,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${o}\n            value = x[offset];\n          }\n      `},hm=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${fe("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${fe("uniforms.x_shape",n,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${fe("uniforms.x_shape",n,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${fe("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},gm=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${fe("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${fe("uniforms.x_shape",n,t)})) {\n                  k = i32(${fe("uniforms.x_shape",n,t)}) - 1;\n                }\n                offset += k * i32(${fe("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},ym=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${fe("uniforms.pads",n,r)};\n                if (k < 0)  {\n                  k += i32(${fe("uniforms.x_shape",n,t)}]);\n                }\n                if (k >= i32(${fe("uniforms.x_shape",n,t)})) {\n                  k -= i32(${fe("uniforms.x_shape",n,t)});\n                }\n                offset += k * i32(${fe("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},bm=(e,t,r)=>{switch(r.mode){case 0:return fm(e,t,r.pads.length);case 1:return hm(e,t,r.pads.length);case 2:return gm(e,t,r.pads.length);case 3:return ym(e,t,r.pads.length);default:throw new Error("Invalid mode")}},vm=(e,t)=>{let r=B.padShape(e[0].dims.slice(),t.pads),o=e[0].dims,n=B.size(r),s=[{type:12,data:n},{type:6,data:t.pads}];t.mode===0&&s.push({type:e[0].dataType,data:t.value}),s.push(...X(e[0].dims,r));let u=["rank"],c=a=>{let f=j("output",e[0].dataType,r.length),g=M("x",e[0].dataType,o.length),h=g.type.value,w=bm(f,o.length,t),_=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&_.push({name:"constant_value",type:h}),`\n            ${a.registerUniforms(_).declareVariables(g,f)}\n            ${a.mainStart()}\n            ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${f.offsetToIndices("global_idx")};\n\n            var value = ${h}(0);\n            ${w}\n            output[global_idx] = value;\n        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(B.size(r)/64)},programUniforms:s}),getShaderSource:c}},wm=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let c=e[3].getBigInt64Array();for(let a=0;a<c.length;a++)s[Number(c[a])]=Number(r[a]),s[Number(c[a])+n]=Number(r[a+c.length])}else r.forEach((c,a)=>s[Number(a)]=Number(c));let u=[];return s.forEach(c=>u.push(c)),{mode:t.mode,value:o,pads:u}}else return t},tl=(e,t)=>{mm(e.inputs);let r=wm(e.inputs,t);e.compute(vm(e.inputs,r),{inputs:[0]})}});var mo,nl,ol,al,il,_m,$m,sl,ul,ll,dl,cl,pl,ml,fl,hl,gl,yl,bl,vl=Z(()=>{"use strict";fr();ve();Ee();Te();mo=e=>{if(mr.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},nl=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),c=t.strides.slice(),a=s?t.dilations.slice():[],f=t.pads.slice();er.adjustPoolAttributes(r,n,u,c,a,f);let g=er.computePoolOutputShape(r,n,c,a,u,f,t.autoPad),h=Object.assign({},t);s?Object.assign(h,{kernelShape:u,strides:c,pads:f,dilations:a,cacheKey:t.cacheKey}):Object.assign(h,{kernelShape:u,strides:c,pads:f,cacheKey:t.cacheKey});let w=g.slice();return w.push(w.splice(1,1)[0]),[h,o?w:g]},ol=(e,t)=>{let r=t.format==="NHWC",o=B.size(e),n=B.size(t.kernelShape),s=[{type:12,data:o},{type:12,data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let c=t.kernelShape[t.kernelShape.length-1],a=t.strides[t.strides.length-1],f=t.pads[t.pads.length/2-1],g=t.pads[t.pads.length-1],h=!!(f+g);s.push({type:12,data:c},{type:12,data:a},{type:12,data:f},{type:12,data:g}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let w=!1;if(t.kernelShape.length===2){let _=t.kernelShape[t.kernelShape.length-2],v=t.strides[t.strides.length-2],$=t.pads[t.pads.length/2-2],C=t.pads[t.pads.length-2];w=!!($+C),s.push({type:12,data:_},{type:12,data:v},{type:12,data:$},{type:12,data:C}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,u,!0,h,w]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let c=B.computeStrides(t.kernelShape);s.push({type:12,data:c},{type:12,data:t.pads},{type:12,data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:c.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let a=t.pads.reduce((f,g)=>f+g);return[s,u,!!a,!1,!1]}},al=(e,t,r,o,n,s,u,c,a,f,g,h)=>{let w=n.format==="NHWC",_=t.type.value,v=j("output",t.type.tensor,o);if(n.kernelShape.length<=2){let $="",C="",x="",S=r-(w?2:1);if(g?$=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${S}] < 0 || xIndices[${S}]\n                      >= uniforms.x_shape[${S}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:$=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let E=r-(w?3:2);h?C=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:C=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;\n                `,x=`\n              }\n            `}return`\n            ${e.registerUniforms(a).declareVariables(t,v)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${v.offsetToIndices("global_idx")};\n              var xIndices = ${v.offsetToIndices("global_idx")};\n\n              var value = ${_}(${c});\n              var pad = 0;\n              ${C}\n              ${$}\n              ${x}\n              ${u}\n\n              output[global_idx] = value;\n            }`}else{if(w)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let $=n.kernelShape.length,C=n.pads.length,x="";return f?x=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:x=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.registerUniforms(a).declareVariables(t,v)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${v.offsetToIndices("global_idx")};\n              var xIndices = ${v.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${$}>;\n\n              var value = ${_}(${c});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${$-1}u; j++) {\n                  offsets[j] = offset / ${fe("uniforms.kernelStrides","j",$)};\n                  offset -= offsets[j] * ${fe("uniforms.kernelStrides","j",$)};\n                }\n                offsets[${$-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-$}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${fe("uniforms.strides",`j - ${r-$}u`,$)}\n                    + offsets[j - ${r-$}u] - ${fe("uniforms.pads","j - 2u",C)};\n                  ${x}\n              }\n              ${u}\n\n              output[global_idx] = value;\n            }`}},il=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,_m=e=>`${il(e)};${e.countIncludePad}`,$m=e=>`${il(e)};${e.storageOrder};${e.dilations}`,sl=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),ul=(e,t,r,o)=>{let[n,s]=nl(t,o,r),u=M("x",t.dataType,t.dims.length),c=u.type.value,a="value += x_val;",f="";n.countIncludePad?f+=`value /= ${c}(uniforms.kernelSize);`:f+=`value /= ${c}(i32(uniforms.kernelSize) - pad);`;let[g,h,w,_,v]=ol(s,n);g.push(...X(t.dims,s));let $=["rank"];return{name:e,shaderCache:{hint:`${o.cacheKey};${w};${_};${v}`,inputDependencies:$},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(B.size(s)/64)},programUniforms:g}),getShaderSource:C=>al(C,u,t.dims.length,s.length,n,a,f,0,h,w,_,v)}},ll=e=>{let t=e.count_include_pad!==0,r=sl(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let o={countIncludePad:t,...r,cacheKey:""};return{...o,cacheKey:_m(o)}},dl=(e,t)=>{mo(e.inputs),e.compute(ul("AveragePool",e.inputs[0],!1,t))},cl={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},pl=e=>{let t=e.format;return{format:t,...cl,cacheKey:t}},ml=(e,t)=>{mo(e.inputs),e.compute(ul("GlobalAveragePool",e.inputs[0],!0,t))},fl=(e,t,r,o)=>{let[n,s]=nl(t,o,r),u=`\n      value = max(x_val, value);\n    `,c="",a=M("x",t.dataType,t.dims.length),f=["rank"],[g,h,w,_,v]=ol(s,n);return g.push(...X(t.dims,s)),{name:e,shaderCache:{hint:`${o.cacheKey};${w};${_};${v}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(B.size(s)/64)},programUniforms:g}),getShaderSource:$=>al($,a,t.dims.length,s.length,n,u,c,t.dataType===10?-65504:-1e5,h,w,_,v)}},hl=(e,t)=>{mo(e.inputs),e.compute(fl("MaxPool",e.inputs[0],!1,t))},gl=e=>{let t=e.storage_order,r=e.dilations,o=sl(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:t,dilations:r,...o,cacheKey:""};return{...n,cacheKey:$m(n)}},yl=e=>{let t=e.format;return{format:t,...cl,cacheKey:t}},bl=(e,t)=>{mo(e.inputs),e.compute(fl("GlobalMaxPool",e.inputs[0],!0,t))}});var xm,Cm,wl,_l=Z(()=>{"use strict";fr();ve();Te();xm=(e,t,r)=>{let o=e===t,n=e<t&&r<0,s=e>t&&r>0;if(o||n||s)throw new Error("Range these inputs\' contents are invalid.")},Cm=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,c=[{type:12,data:u},{type:o,data:e},{type:o,data:r},...X(s)],a=f=>{let g=j("output",o,s.length),h=g.type.value,w=[{name:"outputSize",type:"u32"},{name:"start",type:h},{name:"delta",type:h}];return`\n        ${f.registerUniforms(w).declareVariables(g)}\n        ${f.mainStart()}\n        ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${h}(global_idx) * uniforms.delta;\n      }`};return{name:"Range",shaderCache:{hint:`${o}`},getShaderSource:a,getRunData:()=>({outputs:[{dims:s,dataType:o}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:c})}},wl=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),mr.webgpu.validateInputContent&&xm(t,r,o),e.compute(Cm(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var Am,Im,Tm,Em,Om,km,Pm,Rm,Dm,Bm,Mm,$l,zm,Um,Vm,Nm,Wm,Sl,xl,Cl=Z(()=>{"use strict";ve();Ee();Ze();Te();Am=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Im=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,s)=>o[n]=e[s]),o},Tm=(e,t,r,o,n,s)=>{let[u,c,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],f=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(g=>s.push(g));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(c>0&&e.length>c&&e[c].dims.length>0){if(e[c].getFloat32Array().forEach(g=>o.push(g)),o.length!==0&&o.length!==f&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Am(o,t),t.axes.length>0&&Im(o,t.axes,f).forEach((g,h)=>o[h]=g)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(g=>n.push(Number(g))),n.length!==f||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>f)throw new Error("Resize requires only of scales or sizes to be specified")},Em=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Om=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",km=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((s,u)=>{o[s]=n[u],o[u+r]=n[t.length+u]}),o):n},Pm=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(s=>n.push(s)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},Rm=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=o),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(o,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},Dm=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${fe("uniforms.scales","i",o)};\n        var roi_low = ${fe("uniforms.roi","i",n)};\n        var roi_hi = ${fe("uniforms.roi",`i + ${t.length}`,n)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${fe("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${fe("uniforms.output_shape","i",r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,Bm=(e,t,r,o,n,s,u)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${o.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${fe("uniforms.scales","i",n)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${fe("uniforms.roi","i",s)};\n          var roi_hi = ${fe("uniforms.roi",`i + ${r.length}`,s)};\n          var input_shape_i = ${fe("uniforms.input_shape","i",r.length)};\n          var output_shape_i = ${fe("uniforms.output_shape","i",o.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${u} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,Mm=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${fe("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,$l=(e,t,r,o)=>e.rank>o?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",r,"batch")};\n`:"",zm=(e,t,r,o,n)=>{let[u,c,a,f]=r.length===2?[-1,0,1,-1]:[0,2,3,1],g=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${g} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",c,`max(0, min(row, ${r[c]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(col, ${r[a]} - 1))`)};\n      ${$l(e,f,u,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${g} = originalIndices[${c}];\n      var col:${g} = originalIndices[${a}];\n      ${o?`if (row < 0 || row > (${r[c]} - 1) || col < 0 || col > (${r[a]} - 1)) {\n        return ${n};\n      }`:""};\n      row = max(0, min(row, ${r[c]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length>2?`u32(originalIndices[${f}])`:"0"};\n      var batch: u32 =  ${r.length>2?`u32(originalIndices[${u}])`:"0"};\n      var x11: ${g} = getInputValue(batch, channel, row1, col1);\n      var x12: ${g} = getInputValue(batch, channel, row1, col2);\n      var x21: ${g} = getInputValue(batch, channel, row2, col1);\n      var x22: ${g} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${g} = abs(row - ${g}(row1));\n      var dx2: ${g} = abs(${g}(row2) - row);\n      var dy1: ${g} = abs(col - ${g}(col1));\n      var dy2: ${g} = abs(${g}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},Um=(e,t,r,o,n,s,u,c,a,f)=>{let g=r.length===2,h=!0,[w,_]=g?[0,1]:h?[2,3]:[1,2],v=e.type.value,$=C=>{let x=C===w?"row":"col";return`\n      fn ${x}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${v} {\n        var output_index = ${t.indicesGet("output_indices",C)};\n        var originalIdx: ${v} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[C]},\n        ${o[C]}, ${r[C]}, ${s[C]}, ${s[C]} + ${r.length});\n        var fractOriginalIdx: ${v} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${c} && (originalIdx < 0 || originalIdx > (${r[C]} - 1))) {\n          return ${a};\n        }\n        var data: array<${v}, 4> = array<${v}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${x}: ${v} = originalIdx + ${v}(i);\n          if (${x} < 0 || ${x} >= ${r[C]}) {\n            ${(()=>f?`coefs[i + 1] = 0.0;\n                        continue;`:c?`return ${a};`:`${x} = max(0, min(${x}, ${r[C]} - 1));`)()};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",C,`u32(${x})`)};\n          data[i + 1] = ${C===w?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${$(w)};\n    ${$(_)};\n  fn getCubicInterpolationCoefs(s: ${v}) -> array<${v}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${v}, 4> = array<${v}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${v} = 1.0 - absS;\n    var twoMinusAbsS: ${v} = 2.0 - absS;\n    var onePlusAbsS: ${v} = 1.0 + absS;\n    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};\n    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${v}, 4>, coefs: array<${v}, 4>) -> ${v} {\n    var coefsSum: ${v} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${v} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},Vm=(e,t,r,o,n)=>{let[u,c,a,f,g]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],h=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${h} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",c,`max(0, min(depth, ${r[c]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(height, ${r[a]} - 1))`)};\n      ${e.indicesSet("input_indices",f,`max(0, min(width, ${r[f]} - 1))`)};\n      ${$l(e,g,u,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${h} = originalIndices[${c}];\n      var height:${h} = originalIndices[${a}];\n      var width:${h} = originalIndices[${f}];\n      ${o?`if (depth < 0 || depth > (${r[c]} - 1) || height < 0 || height > (${r[a]} - 1) || width < 0 || (width > ${r[f]} - 1)) {\n      return ${n};\n        }`:""};\n\n    depth = max(0, min(depth, ${r[c]} - 1));\n      height = max(0, min(height, ${r[a]} - 1));\n      width = max(0, min(width, ${r[f]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length>3?`u32(originalIndices[${g}])`:"0"};\n      var batch: u32 =  ${r.length>3?`u32(originalIndices[${u}])`:"0"};\n\n      var x111: ${h} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${h} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${h} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${h} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${h} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${h} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${h} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${h} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${h} = abs(depth - ${h}(depth1));\n      var dx2: ${h} = abs(${h}(depth2) - depth);\n      var dy1: ${h} = abs(height - ${h}(height1));\n      var dy2: ${h} = abs(${h}(height2) - height);\n      var dz1: ${h} = abs(width - ${h}(width1));\n      var dz2: ${h} = abs(${h}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},Nm=(e,t,r,o,n,s)=>{let u=e.dims,c=km(s,t.axes,u.length),a=Pm(u,o,n,t.axes),f=o.slice();o.length===0&&(f=u.map((S,T)=>S===0?1:a[T]/S),t.keepAspectRatioPolicy!=="stretch"&&(a=Rm(u,f,t)));let g=j("output",e.dataType,a.length),h=M("input",e.dataType,u.length),w=B.size(a),_=u.length===a.length&&u.every((S,T)=>S===a[T]),v=t.coordinateTransformMode==="tf_crop_and_resize",$=t.extrapolationValue,C=h.type.value,x=S=>`\n      ${_?"":`\n      ${Em(t.coordinateTransformMode,C)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${Mm(h,u)};\n              ${Om(t.nearestMode,r,C)};\n              ${Bm(h,g,u,a,f.length,c.length,v)};\n              `;case"linear":return`\n              ${Dm(g,u,a,f.length,c.length)};\n              ${(()=>{if(u.length===2||u.length===4)return`${zm(h,g,u,v,$)}`;if(u.length===3||u.length===5)return`${Vm(h,g,u,v,$)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(u.length===2||u.length===4)return`${Um(h,g,u,a,f,c,t.cubicCoeffA,v,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${S.registerUniform("output_size","u32").registerUniform("scales","f32",f.length).registerUniform("roi","f32",c.length).declareVariables(h,g)}\n      ${S.mainStart()}\n        ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${_?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${g.offsetToIndices("global_idx")};\n        var input_indices: ${h.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${h.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${u.length===2||u.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${f.length>0?f:""}|${n.length>0?n:""}|${c.length>0?c:""}|${_}|${u}`,inputDependencies:["rank"]},getShaderSource:x,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:[{type:12,data:w},{type:1,data:f},{type:1,data:c},...X(u,a)]})}},Wm=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Sl=(e,t)=>{let r=[],o=[],n=[],s=Wm(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");Tm(e.inputs,t,s,r,o,n),e.compute(Nm(e.inputs[0],t,s,r,o,n),{inputs:[0]})},xl=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,c=e.keepAspectRatioPolicy,a=e.mode,f=e.nearestMode===""?"simple":e.nearestMode;return Ae({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:c,mode:a,nearestMode:f})}});var Gm,Hm,Al,Il=Z(()=>{"use strict";ve();Ee();Ze();Te();Gm=(e,t)=>{let[r,o,n,s]=e,{numHeads:u,rotaryEmbeddingDim:c}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input \'x\' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!B.areEqual(o.dims,[])&&!B.areEqual(o.dims,[1])&&o.dims.length!==2)throw new Error(`Input \'position_ids\' is expected to have 0, 1, or 2 dimensions, got ${o.dims.length}`);if(n.dims.length!==2)throw new Error(`Input \'cos_cache\' is expected to have 2 dimensions, got ${n.dims.length}`);if(s.dims.length!==2)throw new Error(`Input \'sin_cache\' is expected to have 2 dimensions, got ${s.dims.length}`);if(!B.areEqual(n.dims,s.dims))throw new Error("Inputs \'cos_cache\' and \'sin_cache\' are expected to have the same shape");if(c>0&&u===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let a=r.dims[0],f=r.dims[r.dims.length-2],g=n.dims[0],h=B.sizeFromDimension(r.dims,1)/f,w=c===0?n.dims[1]*2:h/u;if(c>w)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(o.dims.length===2){if(a!==o.dims[0])throw new Error(`Input \'position_ids\' dimension 0 should be of size batch_size, got ${o.dims[0]}`);if(f!==o.dims[1])throw new Error(`Input \'position_ids\' dimension 1 should be of size sequence_length, got ${o.dims[1]}`)}if(w/2!==n.dims[1]&&c/2!==n.dims[1])throw new Error(`Input \'cos_cache\' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${n.dims[1]}`);if(f>g)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Hm=(e,t)=>{let{interleaved:r,numHeads:o,rotaryEmbeddingDim:n,scale:s}=t,u=e[0].dims[0],c=B.sizeFromDimension(e[0].dims,1),a=e[0].dims[e[0].dims.length-2],f=c/a,g=e[2].dims[1],h=n===0?g*2:f/o,w=new Array(u,a,f/h,h-g),_=B.computeStrides(w),v=[{type:1,data:s},{type:12,data:w},{type:12,data:_},...e[0].dims.length===3?new Array({type:12,data:[c,f,h,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[c,h,a*h,1]}):[],...X(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],$=C=>{let x=M("input",e[0].dataType,e[0].dims.length),S=M("position_ids",e[1].dataType,e[1].dims.length),T=M("cos_cache",e[2].dataType,e[2].dims.length),E=M("sin_cache",e[3].dataType,e[3].dims.length),P=j("output",e[0].dataType,e[0].dims.length);return C.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:w.length},{name:"global_strides",type:"u32",length:_.length},{name:"input_output_strides",type:"u32",length:_.length}]),`\n        ${C.declareVariables(x,S,T,E,P)}\n\n        ${C.mainStart(tr)}\n          let half_rotary_emb_dim = uniforms.${T.name}_shape[1];\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\n          ${C.guardAgainstOutOfBoundsWorkgroupSizes("size")}\n\n          if (bsnh[3] < half_rotary_emb_dim) {\n            let position_ids_idx =\n                ${S.broadcastedIndicesToOffset("bsnh.xy",j("",S.type.tensor,2))};\n            let position_id =\n                u32(${S.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});\n            let j = i + select(half_rotary_emb_dim, 1, ${r});\n            let re = ${x.getByOffset("i")} * ${T.get("position_id","bsnh[3]")} -\n                ${x.getByOffset("j")} * ${E.get("position_id","bsnh[3]")};\n            ${P.setByOffset("i","re")}\n            let im = ${x.getByOffset("i")} * ${E.get("position_id","bsnh[3]")} +\n                ${x.getByOffset("j")} * ${T.get("position_id","bsnh[3]")};\n            ${P.setByOffset("j","im")}\n          } else {\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\n            ${P.setByOffset("k",x.getByOffset("k"))}\n          }\n        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Ae({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:$,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(B.size(w)/tr)},programUniforms:v})}},Al=(e,t)=>{Gm(e.inputs,t),e.compute(Hm(e.inputs,t))}});var Lm,Fm,Tl,El=Z(()=>{"use strict";ve();Ee();Te();Lm=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},Fm=(e,t,r,o)=>{let n=e[0].dims,s=B.size(n),u=n,c=s,a=n.slice(-1)[0],f=o?n.slice(0,-1).concat(1):[],g=e.length>3,h=e.length>4,w=o&&r>1,_=o&&r>2,v=r>3,$=Ve(a),C=[{type:12,data:c},{type:12,data:$},{type:12,data:a},{type:1,data:t.epsilon}],x=T=>{let E=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],P=[M("x",e[0].dataType,e[0].dims,$),M("skip",e[1].dataType,e[1].dims,$),M("gamma",e[2].dataType,e[2].dims,$)];g&&P.push(M("beta",e[3].dataType,e[3].dims,$)),h&&P.push(M("bias",e[4].dataType,e[4].dims,$)),P.push(j("output",e[0].dataType,u,$)),w&&P.push(j("mean_output",1,f)),_&&P.push(j("inv_std_output",1,f)),v&&P.push(j("input_skip_bias_sum",e[0].dataType,u,$));let z=Be(e[0].dataType);return`\n\n      ${T.registerUniforms(E).declareVariables(...P)}\n\n      ${T.mainStart()}\n        ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        let offset = global_idx * hidden_size_vectorized;\n        var sum = ${rt("f32",$)};\n        var squareSum = ${rt("f32",$)};\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${h?"bias[i]":"0.0"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${v?"input_skip_bias_sum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32_value = ${ht(z,$,"value")};\n          sum += f32_value;\n          squareSum += f32_value * f32_value;\n        }\n        let mean = ${ut("sum",$)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${ut("squareSum",$)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);\n        ${w?"mean_output[global_idx] = mean;":""}\n        ${_?"inv_std_output[global_idx] = inv_std_dev;":""}\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${z}(mean)) * ${z}(inv_std_dev) * gamma[i] + ${g?"beta[i]":"0.0"};\n        }\n      }`},S=[{dims:u,dataType:e[0].dataType}];return r>1&&S.push({dims:f,dataType:1}),r>2&&S.push({dims:f,dataType:1}),r>3&&S.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${$};${w};${_};${v}`,inputDependencies:e.map((T,E)=>"type")},getShaderSource:x,getRunData:()=>({outputs:S,dispatchGroup:{x:Math.ceil(c/a/64)},programUniforms:C})}},Tl=(e,t)=>{Lm(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(Fm(e.inputs,t,e.outputCount,!1),{outputs:o})}});var jm,fo,Km,Ol,qm,Ym,kl,Pl,Rl=Z(()=>{"use strict";ve();Ee();Ze();Te();jm=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},fo=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Km=(e,t)=>{if(e.length>1){let r=fo(e,1),o=fo(e,2),n=fo(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),Ae({starts:r,ends:o,axes:n})}else return t},Ol=(e,t,r,o,n)=>{let s=e;return e<0&&(s+=r[o[t]]),n[t]<0?Math.max(0,Math.min(s,r[o[t]]-1)):Math.max(0,Math.min(s,r[o[t]]))},qm=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${fe("uniforms.input_shape","i",r.length)};\n            let steps_i = ${fe("uniforms.steps","i",r.length)};\n            let signs_i = ${fe("uniforms.signs","i",r.length)};\n            let starts_i = ${fe("uniforms.starts","i",r.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,Ym=(e,t)=>{let r=e[0].dims,o=B.size(r),n=t.axes.length>0?B.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=fo(e,4);s.forEach(x=>x!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((x,S)=>Ol(x,S,r,n,s)),c=t.ends.map((x,S)=>Ol(x,S,r,n,s));if(n.length!==u.length||n.length!==c.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let x=0;x<r.length;++x)n.includes(x)||(u.splice(x,0,0),c.splice(x,0,r[x]),s.splice(x,0,1));let a=s.map(x=>Math.sign(x));s.forEach((x,S,T)=>{if(x<0){let E=(c[S]-u[S])/x,P=u[S],z=P+E*s[S];u[S]=z,c[S]=P,T[S]=-x}});let f=r.slice(0);n.forEach((x,S)=>{f[x]=Math.ceil((c[x]-u[x])/s[x])});let g={dims:f,dataType:e[0].dataType},h=j("output",e[0].dataType,f.length),w=M("input",e[0].dataType,e[0].dims.length),_=B.size(f),v=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:a.length},{name:"steps",type:"u32",length:s.length}],$=[{type:12,data:_},{type:12,data:u},{type:6,data:a},{type:12,data:s},...X(e[0].dims,f)],C=x=>`\n      ${x.registerUniforms(v).declareVariables(w,h)}\n        ${qm(w,h,r)}\n        ${x.mainStart()}\n          ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${h.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${h.setByOffset("global_idx",w.getByIndices("input_indices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${a.length}_${u.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:C,getRunData:()=>({outputs:[g],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:$})}},kl=(e,t)=>{jm(e.inputs,t);let r=Km(e.inputs,t);e.compute(Ym(e.inputs,r),{inputs:[0]})},Pl=e=>{let t=e.starts,r=e.ends,o=e.axes;return Ae({starts:t,ends:r,axes:o})}});var Zm,Xm,Dl,Bl,Ml=Z(()=>{"use strict";ve();Ee();Ze();Te();Zm=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Xm=(e,t)=>{let r=e.dims,o=B.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],c=o/u,a=Ve(u),f=u/a,g=(C,x)=>x===4?`max(max(${C}.x, ${C}.y), max(${C}.z, ${C}.w))`:x===2?`max(${C}.x, ${C}.y)`:x===3?`max(max(${C}.x, ${C}.y), ${C}.z)`:C,h=M("x",e.dataType,e.dims,a),w=j("result",e.dataType,e.dims,a),_=h.type.value,v=Be(e.dataType)==="f32"?`var threadMax = ${_}(-3.402823e+38f);`:`var threadMax = ${_}(-65504.0h);`,$=C=>`\n      var<workgroup> rowMaxShared : ${_};\n      var<workgroup> rowSumShared : ${_};\n      var<workgroup> threadShared : array<${_}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${_} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${_}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${C.registerUniform("packedCols","i32").declareVariables(h,w)}\n      ${C.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${v}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${_}(${g("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${_}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${_}(${ut("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:c},programUniforms:[{type:6,data:f}]}),getShaderSource:$}},Dl=(e,t)=>{Zm(e.inputs),e.compute(Xm(e.inputs[0],t))},Bl=e=>Ae({axis:e.axis})});var Qm,Jm,ef,tf,rf,zl,Ul,Vl=Z(()=>{"use strict";ve();Ee();Ze();Te();Qm=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Jm=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),Ae({numOutputs:o,axis:t.axis,splitSizes:r})},ef=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${fe("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,tf=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (output_number == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${o}) { ${n} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},rf=(e,t)=>{let r=e[0].dims,o=B.size(r),n=e[0].dataType,s=B.normalizeAxis(t.axis,r.length),u=new Array(t.numOutputs),c=M("input",n,r.length),a=new Array(t.numOutputs),f=[],g=[],h=0,w=[{type:12,data:o}];for(let v=0;v<t.numOutputs;v++){h+=t.splitSizes[v],a[v]=h;let $=r.slice();$[t.axis]=t.splitSizes[v],g.push($),u[v]=j(`output${v}`,n,$.length),f.push({dims:g[v],dataType:e[0].dataType})}w.push({type:12,data:a},...X(r,...g));let _=v=>`\n  ${v.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",a.length).declareVariables(c,...u)}\n  ${ef(a.length)}\n  ${tf(u)}\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${c.offsetToIndices("global_idx")};\n    var index = ${c.indicesGet("indices",s)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${fe("uniforms.size_in_split_axis","output_number - 1u",a.length)};\n      ${c.indicesSet("indices",s,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:_,getRunData:()=>({outputs:f,dispatchGroup:{x:Math.ceil(o/64)},programUniforms:w})}},zl=(e,t)=>{Qm(e.inputs);let r=e.inputs.length===1?t:Jm(e.inputs,t);e.compute(rf(e.inputs,r),{inputs:[0]})},Ul=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Ae({axis:t,numOutputs:o,splitSizes:r})}});var Nl,nf,of,af,Wl,Gl=Z(()=>{"use strict";ve();Ee();Te();Nl=e=>Array.from(e.getBigInt64Array(),Number),nf=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Nl(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},of=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},af=e=>{let t=e[0].dims,r=Nl(e[1]),o=of(t,r),n=B.size(o),s=e[0].dataType,u=M("input",s,t.length),c=j("output",s,o.length),a=f=>`\n      const inputShape = ${u.indices(...t)};\n      ${f.registerUniform("output_size","u32").declareVariables(u,c)}\n      ${f.mainStart()}\n      ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${c.offsetToIndices("global_idx")};\n      var input_indices: ${u.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${c.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${u.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${c.setByOffset("global_idx",u.getByIndices("input_indices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},...X(e[0].dims,o)]}),getShaderSource:a}},Wl=e=>{nf(e.inputs),e.compute(af(e.inputs),{inputs:[0]})}});var sf,uf,Hl,Ll=Z(()=>{"use strict";ve();Ee();Te();sf=(e,t,r,o,n)=>{let s=j("output_data",n,r.length,4),u=M("a_data",t[1].dataType,t[1].dims.length,4),c=M("b_data",t[2].dataType,t[2].dims.length,4),a=M("c_data",t[0].dataType,t[0].dims.length,4),f,g=(h,w,_)=>`select(${w}, ${h}, ${_})`;if(!o)f=s.setByOffset("global_idx",g(u.getByOffset("global_idx"),c.getByOffset("global_idx"),a.getByOffset("global_idx")));else{let h=(w,_,v="")=>{let $=`a_data[index_a${_}][component_a${_}]`,C=`b_data[index_b${_}][component_b${_}]`,x=`bool(c_data[index_c${_}] & (0xffu << (component_c${_} * 8)))`;return`\n            let output_indices${_} = ${s.offsetToIndices(`global_idx * 4u + ${_}u`)};\n            let offset_a${_} = ${u.broadcastedIndicesToOffset(`output_indices${_}`,s)};\n            let offset_b${_} = ${c.broadcastedIndicesToOffset(`output_indices${_}`,s)};\n            let offset_c${_} = ${a.broadcastedIndicesToOffset(`output_indices${_}`,s)};\n            let index_a${_} = offset_a${_} / 4u;\n            let index_b${_} = offset_b${_} / 4u;\n            let index_c${_} = offset_c${_} / 4u;\n            let component_a${_} = offset_a${_} % 4u;\n            let component_b${_} = offset_b${_} % 4u;\n            let component_c${_} = offset_c${_} % 4u;\n            ${w}[${_}] = ${v}(${g($,C,x)});\n          `};n===9?f=`\n            var data = vec4<u32>(0);\n            ${h("data",0,"u32")}\n            ${h("data",1,"u32")}\n            ${h("data",2,"u32")}\n            ${h("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:f=`\n            ${h("output_data[global_idx]",0)}\n            ${h("output_data[global_idx]",1)}\n            ${h("output_data[global_idx]",2)}\n            ${h("output_data[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(a,u,c,s)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${f}\n      }`},uf=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,s=!(B.areEqual(t,r)&&B.areEqual(r,o)),u=t,c=B.size(t);if(s){let f=xt.calcShape(xt.calcShape(t,r,!1),o,!1);if(!f)throw new Error("Can\'t perform where op on the given tensors");u=f,c=B.size(u)}let a=Math.ceil(c/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:f=>sf(f,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:[{type:12,data:a},...X(o,t,r,u)]})}},Hl=e=>{e.compute(uf(e.inputs))}});var Fl,jl=Z(()=>{"use strict";os();Qo();ss();ls();Ks();ou();su();na();_u();xu();Eu();Pu();Du();zu();Nu();Hu();Fu();Ku();aa();Zu();el();rl();vl();_l();Jn();Cl();Il();El();Rl();Ml();Vl();Gl();gr();oo();Ll();Fl=new Map([["Abs",[ds]],["Acos",[cs]],["Acosh",[ps]],["Add",[qs]],["ArgMax",[ns,Xo]],["ArgMin",[rs,Xo]],["Asin",[ms]],["Asinh",[fs]],["Atan",[hs]],["Atanh",[gs]],["Attention",[as]],["AveragePool",[dl,ll]],["BatchNormalization",[is]],["BiasAdd",[us]],["BiasSplitGelu",[js]],["Cast",[bs,ys]],["Ceil",[ws]],["Clip",[vs]],["Concat",[au,iu]],["Conv",[ua,sa]],["ConvTranspose",[wu,vu]],["Cos",[_s]],["Cosh",[$s]],["CumSum",[$u,Su]],["Div",[Ys]],["Einsum",[Iu,Tu]],["Elu",[Ss,ro]],["Equal",[Zs]],["Erf",[xs]],["Exp",[Cs]],["Expand",[ku]],["FastGelu",[Ru]],["Floor",[As]],["FusedConv",[ua,sa]],["Gather",[Mu,Bu]],["GatherElements",[Vu,Uu]],["Gelu",[Is]],["Gemm",[Gu,Wu]],["GlobalAveragePool",[ml,pl]],["GlobalMaxPool",[bl,yl]],["Greater",[eu]],["GreaterOrEqual",[ru]],["HardSigmoid",[Bs,Ds]],["InstanceNormalization",[Lu]],["LayerNormalization",[ju]],["LeakyRelu",[Ts,ro]],["Less",[tu]],["LessOrEqual",[nu]],["Log",[Ls]],["MatMul",[mu]],["MatMulNBits",[qu,Yu]],["MaxPool",[hl,gl]],["Mul",[Xs]],["MultiHeadAttention",[Ju,Qu]],["Neg",[Os]],["Not",[Es]],["Pad",[tl]],["Pow",[Qs]],["Range",[wl]],["Reciprocal",[ks]],["ReduceMin",[Zi]],["ReduceMean",[Fi]],["ReduceMax",[Yi]],["ReduceSum",[Qi]],["ReduceProd",[Xi]],["ReduceL1",[ji]],["ReduceL2",[Ki]],["ReduceLogSum",[es]],["ReduceLogSumExp",[qi]],["ReduceSumSquare",[Ji]],["Relu",[Ps]],["Resize",[Sl,xl]],["RotaryEmbedding",[Al]],["Sigmoid",[Rs]],["Sin",[Ms]],["Sinh",[zs]],["Slice",[kl,Pl]],["SkipLayerNormalization",[Tl]],["Split",[zl,Ul]],["Sqrt",[Us]],["Softmax",[Dl,Bl]],["Sub",[Js]],["Tan",[Vs]],["Tanh",[Ws]],["ThresholdedRelu",[Hs,ro]],["Tile",[Wl]],["Transpose",[Pi,Ri]],["Where",[Hl]]])});var ho,Kl=Z(()=>{"use strict";fr();Wt();Te();ho=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,s){Jt(t.programInfo.name);let u=this.backend.device,c=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let a=[];for(let g of r)a.push({binding:a.length,resource:{buffer:g.buffer}});for(let g of o)a.push({binding:a.length,resource:{buffer:g.buffer}});s&&a.push({binding:a.length,resource:s});let f=u.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:a,label:t.programInfo.name});if(this.backend.sessionStatus==="capturing"){let g={kernelId:this.backend.currentKernelId,computePipeline:t.computePipeline,bindGroup:f,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(g)}c.setPipeline(t.computePipeline),c.setBindGroup(0,f),c.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Nt(t.programInfo.name)}dispose(){}build(t,r){Jt(t.name);let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let s=Oi(r,this.backend.device.limits),u=t.getShaderSource(s),c=`${n.join(`\n`)}\n${s.additionalImplementations}\n${u}`,a=o.createShaderModule({code:c,label:t.name});Ue("verbose",()=>`[WebGPU] ${t.name} shader code: ${c}`);let f=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return Nt(t.name),{programInfo:t,computePipeline:f,uniformVariablesInfo:s.variablesInfo}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&o<=s&&n<=s)return[r,o,n];let u=r*o*n,c=Math.ceil(Math.sqrt(u));if(c>s){if(c=Math.ceil(Math.cbrt(u)),c>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[c,c,c]}else return[c,c,1]}}});var lf,df,fa,go,ql=Z(()=>{"use strict";fr();ve();Wt();Ci();Ei();jl();Kl();lf=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[o].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[o].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},df=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${lf(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},fa=class{constructor(t){t&&(this.architecture=t.architecture,this.vendor=t.vendor)}isArchitecture(t){return this.architecture===t}isVendor(t){return this.vendor===t}},go=class{constructor(){this.currentSessionId=null;this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionStatus="default";this.capturedCommandList=new Map;this.capturedPendingKernels=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("chromium-experimental-timestamp-query-inside-passes")?o.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.adapterInfo=new fa(await r.requestAdapterInfo()),this.gpuDataManager=Ti(this),this.programManager=new ho(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Si(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:r,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=t.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Jt(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),o=this.pendingQueries.get(t);for(let n=0;n<r.length/2;n++){let s=o[n],u=s.kernelId,c=this.kernels.get(u),a=c.kernelType,f=c.kernelName,g=s.programName,h=s.inputTensorViews,w=s.outputTensorViews,_=r[n*2],v=r[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=_);let $=Number(_-this.queryTimeBase),C=Number(v-this.queryTimeBase);if(!Number.isSafeInteger($)||!Number.isSafeInteger(C))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:h.map(x=>({dims:x.dims,dataType:Vt(x.dataType)})),outputsMetadata:w.map(x=>({dims:x.dims,dataType:Vt(x.dataType)})),kernelId:u,kernelType:a,kernelName:f,programName:g,startTime:$,endTime:C});else{let x="";h.forEach((T,E)=>{x+=`input[${E}]: [${T.dims}] | ${Vt(T.dataType)}, `});let S="";w.forEach((T,E)=>{S+=`output[${E}]: [${T.dims}] | ${Vt(T.dataType)}, `}),console.log(`[profiling] kernel "${u}|${a}|${f}|${g}" ${x}${S}execution time: ${C-$} ns`)}ci("GPU",`${g}::${_}::${v}`)}t.unmap(),this.pendingQueries.delete(t)}),Nt()}run(t,r,o,n,s){Jt(t.name);let u=[];for(let S=0;S<r.length;++S){let T=r[S].data;if(T===0)continue;let E=this.gpuDataManager.get(T);if(!E)throw new Error(`no GPU data for input: ${T}`);u.push(E)}let{outputs:c,dispatchGroup:a,programUniforms:f}=t.getRunData(r),g=o.length===0?c.map((S,T)=>T):o;if(g.length!==c.length)throw new Error(`Output size ${g.length} must be equal to ${c.length}.`);let h=[],w=[];for(let S=0;S<c.length;++S){if(!Number.isInteger(g[S])||g[S]<-3||g[S]>=c.length)throw new Error(`Invalid output index: ${g[S]}`);if(g[S]===-3)continue;let T=g[S]===-1,E=g[S]===-2,P=T||E?s(c[S].dataType,c[S].dims):n(g[S],c[S].dataType,c[S].dims);if(h.push(P),P.data===0)continue;let z=this.gpuDataManager.get(P.data);if(!z)throw new Error(`no GPU data for output: ${P.data}`);if(T&&this.temporaryData.push(z),E){let H=this.kernelPersistentData.get(this.currentKernelId);H||(H=[],this.kernelPersistentData.set(this.currentKernelId,H)),H.push(z)}w.push(z)}if(u.length!==r.length||w.length!==h.length){if(w.length===0)return Nt(t.name),h;throw new Error(`Program ${t.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let _;if(f){let S=0,T=[];f.forEach(H=>{let K=typeof H.data=="number"?[H.data]:H.data;if(K.length===0)return;let re=H.type===10?2:4,q,ce;H.type===10?(ce=K.length>4?16:K.length>2?8:K.length*re,q=K.length>4?16:re*K.length):(ce=K.length<=2?K.length*re:16,q=16),S=Math.ceil(S/ce)*ce,T.push(S);let Se=H.type===10?8:4;S+=K.length>4?Math.ceil(K.length/Se)*q:K.length*re});let E=16;S=Math.ceil(S/E)*E;let P=new ArrayBuffer(S);f.forEach((H,K)=>{let re=T[K],q=typeof H.data=="number"?[H.data]:H.data;if(H.type===6)new Int32Array(P,re,q.length).set(q);else if(H.type===12)new Uint32Array(P,re,q.length).set(q);else if(H.type===10)new Uint16Array(P,re,q.length).set(q);else if(H.type===1)new Float32Array(P,re,q.length).set(q);else throw new Error(`Unsupported uniform type: ${Vt(H.type)}`)});let z=this.gpuDataManager.create(S,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(z.buffer,0,P,0,S),this.gpuDataManager.release(z.id),_={offset:0,size:S,buffer:z.buffer}}let v=this.programManager.normalizeDispatchGroupSize(a),$=v[1]===1&&v[2]===1,C=df(t,r,$),x=this.programManager.getArtifact(C);if(x||(x=this.programManager.build(t,v),this.programManager.setArtifact(C,x),Ue("info",()=>`[artifact] key: ${C}, programName: ${t.name}`)),f&&x.uniformVariablesInfo){if(f.length!==x.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${x.uniformVariablesInfo.length}, got ${f.length} in program "${x.programInfo.name}".`);for(let S=0;S<f.length;S++){let T=f[S],E=T.type,P=typeof T.data=="number"?1:T.data.length,[z,H]=x.uniformVariablesInfo[S];if(E!==z||P!==H)throw new Error(`Uniform variable ${S} mismatch: expect type ${z} with size ${H}, got type ${E} with size ${P} in program "${x.programInfo.name}".`)}}if(Ue("info",()=>`[ProgramManager] run "${t.name}" (key=${C}) with ${v[0]}x${v[1]}x${v[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let S={kernelId:this.currentKernelId,programName:x.programInfo.name,inputTensorViews:r,outputTensorViews:h};this.pendingKernels.push(S),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(S)}return this.programManager.run(x,u,w,v,_),Nt(t.name),h}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let s=Fl.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);let u={kernelType:t,kernelName:n,kernelEntry:s[0],attributes:[s[1],o]};this.kernels.set(r,u)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let s=n.kernelType,u=n.kernelName,c=n.kernelEntry,a=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),Ue("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`),this.env.trace&&console.timeStamp(`GPU::${s},${u}`);let f=this.env.debug;this.temporaryData=[];try{return f&&this.device.pushErrorScope("validation"),c(r,a[1]),0}catch(g){return o.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${g}`)),1}finally{f&&o.push(this.device.popErrorScope().then(g=>g?`GPU validation error for kernel "[${s}] ${u}": ${g.message}`:null));for(let g of this.temporaryData)this.gpuDataManager.release(g.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),c=this.gpuDataManager.registerExternalBuffer(o,n,u?.[1]);return s.set(r,[c,o]),c}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await Lo(this,t,r);return xi(n.buffer,o)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Ue("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Ue("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Ue("info","replay"),this.sessionStatus="replaying";let t=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),o=t.length;this.pendingKernels=[];for(let n=0;n<o;n++){let s=this.getComputePassEncoder(),u=t[n];this.writeTimestamp(this.pendingDispatchNumber*2),s.setPipeline(u.computePipeline),s.setBindGroup(0,u.bindGroup),s.dispatchWorkgroups(...u.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(r[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(t){this.unregisterBuffers(t),this.capturedCommandList.has(t)&&this.capturedCommandList.delete(t),this.capturedPendingKernels.has(t)&&this.capturedPendingKernels.delete(t),this.gpuDataManager.onReleaseSession(t)}onRunStart(t){this.currentSessionId=t,this.setQueryType()}}});var Yl={};Vn(Yl,{init:()=>cf});var Fr,ha,cf,Zl=Z(()=>{"use strict";ve();ql();Wt();Ee();Fr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=B.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=B.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=B.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(B.size(t)!==B.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},ha=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;this.adapterInfo=r.adapterInfo;let n=t.HEAPU32,s=o>>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let c=[];for(let a=0;a<u;a++){let f=n[s++],g=n[s++],h=n[s++],w=[];for(let _=0;_<h;_++)w.push(n[s++]);c.push(new Fr(t,f,g,w))}this.inputs=c}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}getMaxComputeWorkgroupSizes(){return[this.backend.device.limits.maxComputeWorkgroupSizeX,this.backend.device.limits.maxComputeWorkgroupSizeY,this.backend.device.limits.maxComputeWorkgroupSizeZ]}getMaxComputeWorkgroupStoragesize(){return this.backend.device.limits.maxComputeWorkgroupStorageSize}compute(t,r){let o=r?.inputs?.map(c=>typeof c=="number"?this.inputs[c]:c)??this.inputs,n=r?.outputs??[],s=(c,a,f)=>new Fr(this.module,a,this.output(c,f),f),u=(c,a)=>{let f=Qt(c);if(!f)throw new Error(`Unsupported data type: ${c}`);let g=f*B.size(a),h=g>0?this.backend.gpuDataManager.create(g).id:0;return new Fr(this.module,c,h,a)};return this.backend.run(t,o,n,s,u)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},cf=async(e,t,r,o)=>{let n=t.jsepInit;if(!n)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let s=new go;await s.initialize(r,o),n("webgpu",[s,u=>s.alloc(u),u=>s.free(u),(u,c,a,f=!1)=>{if(f)Ue("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${u}, dst=${c}, size=${a}`),s.memcpy(u,c);else{Ue("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${u}, gpuDataId=${c}, size=${a}`);let g=t.HEAPU8.subarray(u>>>0,(u>>>0)+a);s.upload(c,g)}},async(u,c,a)=>{Ue("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${u}, dataOffset=${c}, size=${a}`),await s.download(u,()=>t.HEAPU8.subarray(c>>>0,(c>>>0)+a))},(u,c,a)=>s.createKernel(u,c,a,t.UTF8ToString(t._JsepGetNodeName(c))),u=>s.releaseKernel(u),(u,c,a,f)=>{Ue("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${a}, kernel=${u}, contextDataOffset=${c}`);let g=new ha(t,s,c);return s.computeKernel(u,g,f)},()=>s.captureBegin(),()=>s.captureEnd(),()=>s.replay()])}else n("webnn")}});var Ya;Ya=Va();var _c=ja(),Bo,Mo=!1,Gn=!1,qa=!1,$c=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Sc=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},xc=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Za=async e=>{if(Mo)return Promise.resolve();if(Gn)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(qa)throw new Error("previous call to \'initializeWebAssembly()\' failed.");Gn=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=$c(r),s=o&&Sc(),u=e.wasmPaths,c=typeof u=="string"?u:void 0,a=xc(s,n),f=typeof u=="object"?u[a]:void 0,g=!1,h=[];if(t>0&&h.push(new Promise(w=>{setTimeout(()=>{g=!0,w()},t)})),h.push(new Promise((w,_)=>{let v=n?_c:Ya,$={locateFile:(C,x)=>{if(n&&C.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Ka()],{type:"text/javascript"}));if(C.endsWith(".wasm")){if(f)return f;let S=c??x;return a==="ort-wasm-simd.wasm"?S+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?S+"ort-wasm-simd-threaded.jsep.wasm":S+a}return x+C}};if(n)if($.numThreads=r,typeof Blob>"u")$.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let C=`var ortWasmThreaded=${v.toString()};`;$.mainScriptUrlOrBlob=new Blob([C],{type:"text/javascript"})}v($).then(C=>{Gn=!1,Mo=!0,Bo=C,w()},C=>{Gn=!1,qa=!0,_(C)})})),await Promise.race(h),g)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Le=()=>{if(Mo&&Bo)return Bo;throw new Error("WebAssembly is not initialized yet.")};var Fe=(e,t)=>{let r=Le(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},Nr=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")Nr(s,u+".",r,o);else if(typeof s=="string"||typeof s=="number")o(u,s.toString());else if(typeof s=="boolean")o(u,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},ze=e=>{let t=Le(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],s=t.HEAPU32[o/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}};var Xa=e=>{let t=Le(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=Fe(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&ze("Can\'t create run options."),e?.extra!==void 0&&Nr(e.extra,"",new WeakSet,(u,c)=>{let a=Fe(u,o),f=Fe(c,o);t._OrtAddRunConfigEntry(r,a,f)!==0&&ze(`Can\'t set a run config entry: ${u} - ${c}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(u=>t._free(u)),s}};var Cc=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Ac=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Ic=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Tc=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"webnn":if(n="WEBNN",typeof o!="string"){let u=o;if(u?.deviceType){let c=Fe("deviceType",r),a=Fe(u.deviceType,r);Le()._OrtAddSessionConfigEntry(e,c,a)!==0&&ze(`Can\'t set a session config entry: \'deviceType\' - ${u.deviceType}.`)}if(u?.numThreads){let c=u.numThreads;(typeof c!="number"||!Number.isInteger(c)||c<0)&&(c=0);let a=Fe("numThreads",r),f=Fe(c.toString(),r);Le()._OrtAddSessionConfigEntry(e,a,f)!==0&&ze(`Can\'t set a session config entry: \'numThreads\' - ${u.numThreads}.`)}if(u?.powerPreference){let c=Fe("powerPreference",r),a=Fe(u.powerPreference,r);Le()._OrtAddSessionConfigEntry(e,c,a)!==0&&ze(`Can\'t set a session config entry: \'powerPreference\' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let u=o;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${u.preferredLayout}`);let c=Fe("preferredLayout",r),a=Fe(u.preferredLayout,r);Le()._OrtAddSessionConfigEntry(e,c,a)!==0&&ze(`Can\'t set a session config entry: \'preferredLayout\' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=Fe(n,r);Le()._OrtAppendExecutionProvider(e,s)!==0&&ze(`Can\'t append execution provider: ${n}.`)}},Qa=e=>{let t=Le(),r=0,o=[],n=e||{};Ic(n);try{let s=Cc(n.graphOptimizationLevel??"all"),u=Ac(n.executionMode??"sequential"),c=typeof n.logId=="string"?Fe(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let f=n.logVerbosityLevel??0;if(!Number.isInteger(f)||f<0||f>4)throw new Error(`log verbosity level is not valid: ${f}`);let g=typeof n.optimizedModelFilePath=="string"?Fe(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,c,a,f,g),r===0&&ze("Can\'t create session options."),n.executionProviders&&Tc(r,n.executionProviders,o),n.enableGraphCapture!==void 0){if(typeof n.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${n.enableGraphCapture}`);let h=Fe("enableGraphCapture",o),w=Fe(n.enableGraphCapture.toString(),o);t._OrtAddSessionConfigEntry(r,h,w)!==0&&ze(`Can\'t set a session config entry: \'enableGraphCapture\' - ${n.enableGraphCapture}.`)}if(n.freeDimensionOverrides)for(let[h,w]of Object.entries(n.freeDimensionOverrides)){if(typeof h!="string")throw new Error(`free dimension override name must be a string: ${h}`);if(typeof w!="number"||!Number.isInteger(w)||w<0)throw new Error(`free dimension override value must be a non-negative integer: ${w}`);let _=Fe(h,o);t._OrtAddFreeDimensionOverride(r,_,w)!==0&&ze(`Can\'t set a free dimension override: ${h} - ${w}.`)}return n.extra!==void 0&&Nr(n.extra,"",new WeakSet,(h,w)=>{let _=Fe(h,o),v=Fe(w,o);t._OrtAddSessionConfigEntry(r,_,v)!==0&&ze(`Can\'t set a session config entry: ${h} - ${w}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(u=>t._free(u)),s}};ve();var ei=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),o=[];for await(let n of r)o.push(n);return new Uint8Array(Buffer.concat(o))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),o=r?parseInt(r,10):0;if(o<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n=t.body.getReader(),s;try{s=new ArrayBuffer(o)}catch(c){if(c instanceof RangeError){let a=Math.ceil(o/65536);s=new WebAssembly.Memory({initial:a,maximum:a}).buffer}else throw c}let u=0;for(;;){let{done:c,value:a}=await n.read();if(c)break;let f=a.byteLength;new Uint8Array(s,u,f).set(a),u+=f}return new Uint8Array(s,0,o)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)};var pf=(e,t)=>{Le()._OrtInit(e,t)!==0&&ze("Can\'t initialize onnxruntime.")},Ql=async e=>{pf(e.wasm.numThreads,Wr(e.logLevel))},Jl=async(e,t)=>{{let r=(Zl(),Xt(Yl)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let o=e.webgpu.adapter;if(o){if(typeof o.limits!="object"||typeof o.features!="object"||typeof o.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let n=e.webgpu.powerPreference;if(n!==void 0&&n!=="low-power"&&n!=="high-performance")throw new Error(`Invalid powerPreference setting: "${n}"`);let s=e.webgpu.forceFallbackAdapter;if(s!==void 0&&typeof s!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${s}"`);if(o=await navigator.gpu.requestAdapter({powerPreference:n,forceFallbackAdapter:s}),!o)throw new Error(\'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\')}if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");await r("webgpu",Le(),e,o)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await r("webnn",Le(),e)}}},rr=new Map,mf=e=>{let t=Le(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&ze("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},ga=e=>{let t=Le(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},ed=async(e,t)=>{let r,o,n=Le();Array.isArray(e)?[r,o]=e:e.buffer===n.HEAPU8.buffer?[r,o]=[e.byteOffset,e.byteLength]:[r,o]=ga(e);let s=0,u=0,c=0,a=[],f=[],g=[];try{if([u,a]=Qa(t),t?.externalData&&n.mountExternalData){let S=[];for(let T of t.externalData){let E=typeof T=="string"?T:T.path;S.push(ei(typeof T=="string"?T:T.data).then(P=>{n.mountExternalData(E,P)}))}await Promise.all(S)}s=await n._OrtCreateSession(r,o,u),s===0&&ze("Can\'t create a session.");let[h,w]=mf(s),_=!!t?.enableGraphCapture,v=[],$=[],C=[];for(let S=0;S<h;S++){let T=n._OrtGetInputName(s,S);T===0&&ze("Can\'t get an input name."),f.push(T),v.push(n.UTF8ToString(T))}for(let S=0;S<w;S++){let T=n._OrtGetOutputName(s,S);T===0&&ze("Can\'t get an output name."),g.push(T);let E=n.UTF8ToString(T);$.push(E);{if(_&&t?.preferredOutputLocation===void 0){C.push("gpu-buffer");continue}let P=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[E]??"cpu";if(P!=="cpu"&&P!=="cpu-pinned"&&P!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${P}.`);if(_&&P!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${P}. Only \'gpu-buffer\' location is supported when enableGraphCapture is true.`);C.push(P)}}let x=null;return C.some(S=>S==="gpu-buffer")&&(c=n._OrtCreateBinding(s),c===0&&ze("Can\'t create IO binding."),x={handle:c,outputPreferredLocations:C,outputPreferredLocationsEncoded:C.map(S=>Uo(S))}),rr.set(s,[s,f,g,x,_,!1]),[s,v,$]}catch(h){throw f.forEach(w=>n._OrtFree(w)),g.forEach(w=>n._OrtFree(w)),c!==0&&n._OrtReleaseBinding(c),s!==0&&n._OrtReleaseSession(s),h}finally{n._free(r),u!==0&&n._OrtReleaseSessionOptions(u),a.forEach(h=>n._free(h)),n.unmountExternalData?.()}},td=e=>{let t=Le(),r=rr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,s,u,c]=r;u&&(c&&t._OrtClearBoundOutputs(u.handle),t._OrtReleaseBinding(u.handle)),t.jsepOnReleaseSession?.(e),n.forEach(a=>t._OrtFree(a)),s.forEach(a=>t._OrtFree(a)),t._OrtReleaseSession(o),rr.delete(e)},Xl=(e,t,r,o,n,s=!1)=>{if(!e){t.push(0);return}let u=Le(),c=e[0],a=e[1],f=e[3],g,h;if(c==="string"&&f==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(s&&f!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${n} when enableGraphCapture is true.`);if(f==="gpu-buffer"){let v=e[2].gpuBuffer,$=Qt(zo(c));h=a.reduce((x,S)=>x*S,1)*$;let C=u.jsepRegisterBuffer;if(!C)throw new Error(\'Tensor location "gpu-buffer" is not supported without using WebGPU.\');g=C(o,n,v,h)}else{let v=e[2];if(Array.isArray(v)){h=4*v.length,g=u._malloc(h),r.push(g);let $=g/4;for(let C=0;C<v.length;C++){if(typeof v[C]!="string")throw new TypeError(`tensor data at index ${C} is not a string`);u.HEAPU32[$++]=Fe(v[C],r)}}else h=v.byteLength,g=u._malloc(h),r.push(g),u.HEAPU8.set(new Uint8Array(v.buffer,v.byteOffset,h),g)}let w=u.stackSave(),_=u.stackAlloc(4*a.length);try{let v=_/4;a.forEach(C=>u.HEAP32[v++]=C);let $=u._OrtCreateTensor(zo(c),g,h,_,a.length,Uo(f));$===0&&ze(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push($)}finally{u.stackRestore(w)}},rd=async(e,t,r,o,n,s)=>{let u=Le(),c=rr.get(e);if(!c)throw new Error(`cannot run inference. invalid session id: ${e}`);let a=c[0],f=c[1],g=c[2],h=c[3],w=c[4],_=c[5],v=t.length,$=o.length,C=0,x=[],S=[],T=[],E=[],P=u.stackSave(),z=u.stackAlloc(v*4),H=u.stackAlloc(v*4),K=u.stackAlloc($*4),re=u.stackAlloc($*4);try{[C,x]=Xa(s);for(let W=0;W<v;W++)Xl(r[W],S,E,e,t[W],w);for(let W=0;W<$;W++)Xl(n[W],T,E,e,v+o[W],w);let q=z/4,ce=H/4,Se=K/4,Pe=re/4;for(let W=0;W<v;W++)u.HEAPU32[q++]=S[W],u.HEAPU32[ce++]=f[t[W]];for(let W=0;W<$;W++)u.HEAPU32[Se++]=T[W],u.HEAPU32[Pe++]=g[o[W]];if(h&&!_){let{handle:W,outputPreferredLocations:Ce,outputPreferredLocationsEncoded:we}=h;if(f.length!==v)throw new Error(`input count from feeds (${v}) is expected to be always equal to model\'s input count (${f.length}).`);for(let he=0;he<v;he++){let ne=t[he];await u._OrtBindInput(W,f[ne],S[he])!==0&&ze(`Can\'t bind input[${he}] for session=${e}.`)}for(let he=0;he<$;he++){let ne=o[he];n[he]?.[3]?u._OrtBindOutput(W,g[ne],T[he],0)!==0&&ze(`Can\'t bind pre-allocated output[${he}] for session=${e}.`):u._OrtBindOutput(W,g[ne],0,we[ne])!==0&&ze(`Can\'t bind output[${he}] to ${Ce[he]} for session=${e}.`)}rr.set(e,[a,f,g,h,w,!0])}u.jsepOnRunStart?.(a);let U;h?U=await u._OrtRunWithBinding(a,h.handle,$,K,C):U=await u._OrtRun(a,H,z,v,re,$,K,C),U!==0&&ze("failed to call OrtRun().");let Q=[];for(let W=0;W<$;W++){let Ce=u.HEAPU32[K/4+W];if(Ce===T[W]){Q.push(n[W]);continue}let we=u.stackSave(),he=u.stackAlloc(4*4),ne=!1,be,me=0;try{u._OrtGetTensorData(Ce,he,he+4,he+8,he+12)!==0&&ze(`Can\'t access output tensor data on index ${W}.`);let G=he/4,ee=u.HEAPU32[G++];me=u.HEAPU32[G++];let _e=u.HEAPU32[G++],Xe=u.HEAPU32[G++],qe=[];for(let je=0;je<Xe;je++)qe.push(u.HEAPU32[_e/4+je]);u._OrtFree(_e);let Qe=qe.reduce((je,Ge)=>je*Ge,1);be=Vt(ee);let He=h?.outputPreferredLocations[o[W]];if(be==="string"){if(He==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let je=[],Ge=me/4;for(let et=0;et<Qe;et++){let Dt=u.HEAPU32[Ge++],lt=et===Qe-1?void 0:u.HEAPU32[Ge]-Dt;je.push(u.UTF8ToString(Dt,lt))}Q.push([be,qe,je,"cpu"])}else if(He==="gpu-buffer"&&Qe>0){let je=u.jsepGetBuffer;if(!je)throw new Error(\'preferredLocation "gpu-buffer" is not supported without using WebGPU.\');let Ge=je(me),et=Qt(ee);if(et===void 0||!Ja(be))throw new Error(`Unsupported data type: ${be}`);ne=!0,Q.push([be,qe,{gpuBuffer:Ge,download:u.jsepCreateDownloader(Ge,Qe*et,be),dispose:()=>{u._OrtReleaseTensor(Ce)}},"gpu-buffer"])}else{let je=Hn(be),Ge=new je(Qe);new Uint8Array(Ge.buffer,Ge.byteOffset,Ge.byteLength).set(u.HEAPU8.subarray(me,me+Ge.byteLength)),Q.push([be,qe,Ge,"cpu"])}}finally{u.stackRestore(we),be==="string"&&me&&u._free(me),ne||u._OrtReleaseTensor(Ce)}}return h&&!w&&(u._OrtClearBoundOutputs(h.handle),rr.set(e,[a,f,g,h,w,!1])),Q}finally{u.stackRestore(P),S.forEach(q=>u._OrtReleaseTensor(q)),T.forEach(q=>u._OrtReleaseTensor(q)),E.forEach(q=>u._free(q)),C!==0&&u._OrtReleaseRunOptions(C),x.forEach(q=>u._free(q))}},nd=e=>{let t=Le(),r=rr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&ze("Can\'t get an profile file name."),t._OrtFree(n)},od=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":Za(r.wasm).then(()=>{Ql(r).then(()=>{postMessage({type:t})},o=>{postMessage({type:t,err:o})})},o=>{postMessage({type:t,err:o})});break;case"init-ep":{let{epName:o,env:n}=r;Jl(n,o).then(()=>{postMessage({type:t})},s=>{postMessage({type:t,err:s})});break}case"copy-from":{let{buffer:o}=r,n=ga(o);postMessage({type:t,out:n});break}case"create":{let{model:o,options:n}=r;ed(o,n).then(s=>{postMessage({type:t,out:s})},s=>{postMessage({type:t,err:s})});break}case"release":td(r),postMessage({type:t});break;case"run":{let{sessionId:o,inputIndices:n,inputs:s,outputIndices:u,options:c}=r;rd(o,n,s,u,new Array(u.length).fill(null),c).then(a=>{a.some(f=>f[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:a},od([...s,...a]))},a=>{postMessage({type:t,err:a})});break}case"end-profiling":nd(r),postMessage({type:t});break;default:}}catch(o){postMessage({type:t,err:o})}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var pr,_t,on,Ma,Ua,Li,ji,Ar,Tr,bh,Ba,Yd,Zd,Qd,Xd,Jd,ec,tc,Fi=F(()=>{"use strict";vt();Kd();Sr();pr=()=>!!Pe.wasm.proxy&&typeof document<"u",on=!1,Ma=!1,Ua=!1,ji=new Map,Ar=(e,t)=>{let r=ji.get(e);r?r.push(t):ji.set(e,[t])},Tr=()=>{if(on||!Ma||Ua||!_t)throw new Error("worker not ready")},bh=e=>{switch(e.data.type){case"init-wasm":on=!1,e.data.err?(Ua=!0,Li[1](e.data.err)):(Ma=!0,Li[0]());break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=ji.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}default:}},Ba=typeof document<"u"?document?.currentScript?.src:void 0,Yd=async()=>{if(!Ma){if(on)throw new Error("multiple calls to 'initWasm()' detected.");if(Ua)throw new Error("previous call to 'initWasm()' failed.");if(on=!0,pr())return Pe.wasm.wasmPaths===void 0&&Ba&&Ba.indexOf("blob:")!==0&&(Pe.wasm.wasmPaths=Ba.substr(0,+Ba.lastIndexOf("/")+1)),new Promise((e,t)=>{_t?.terminate();let r=URL.createObjectURL(new Blob([qd()],{type:"text/javascript"}));_t=new Worker(r,{name:"ort-wasm-proxy-worker"}),_t.onerror=n=>t(n),_t.onmessage=bh,URL.revokeObjectURL(r),Li=[e,t];let a={type:"init-wasm",in:Pe};_t.postMessage(a)});try{await as(Pe.wasm),await Wd(Pe),Ma=!0}catch(e){throw Ua=!0,e}finally{on=!1}}},Zd=async e=>{if(pr())return Tr(),new Promise((t,r)=>{Ar("init-ep",[t,r]);let a={type:"init-ep",in:{epName:e,env:Pe}};_t.postMessage(a)});await Vd(Pe,e)},Qd=async e=>pr()?(Tr(),new Promise((t,r)=>{Ar("copy-from",[t,r]);let a={type:"copy-from",in:{buffer:e}};_t.postMessage(a,[e.buffer])})):Gi(e),Xd=async(e,t)=>{if(pr()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Tr(),new Promise((r,a)=>{Ar("create",[r,a]);let n={type:"create",in:{model:e,options:{...t}}},s=[];e instanceof Uint8Array&&s.push(e.buffer),_t.postMessage(n,s)})}else return Hd(e,t)},Jd=async e=>{if(pr())return Tr(),new Promise((t,r)=>{Ar("release",[t,r]);let a={type:"release",in:e};_t.postMessage(a)});Gd(e)},ec=async(e,t,r,a,n,s)=>{if(pr()){if(r.some(u=>u[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(u=>u))throw new Error("pre-allocated output tensor is not supported for proxy.");return Tr(),new Promise((u,d)=>{Ar("run",[u,d]);let i=r,p={type:"run",in:{sessionId:e,inputIndices:t,inputs:i,outputIndices:a,options:s}};_t.postMessage(p,Fd(i))})}else return Ld(e,t,r,a,n,s)},tc=async e=>{if(pr())return Tr(),new Promise((t,r)=>{Ar("end-profiling",[t,r]);let a={type:"end-profiling",in:e};_t.postMessage(a)});jd(e)}});var rc,vh,Na,nc=F(()=>{"use strict";vt();Fi();ve();fi();rc=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},vh=e=>{switch(e[3]){case"cpu":return new tt(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!pa(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return tt.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},Na=class{async fetchModelAndCopyToWasmMemory(t){return Qd(await en(t))}async loadModel(t,r){ct();let a;typeof t=="string"?typeof process<"u"&&process.versions&&process.versions.node?a=await en(t):a=await this.fetchModelAndCopyToWasmMemory(t):a=t,[this.sessionId,this.inputNames,this.outputNames]=await Xd(a,r),ut()}async dispose(){return Jd(this.sessionId)}async run(t,r,a){ct();let n=[],s=[];Object.entries(t).forEach(y=>{let w=y[0],v=y[1],$=this.inputNames.indexOf(w);if($===-1)throw new Error(`invalid input '${w}'`);n.push(v),s.push($)});let u=[],d=[];Object.entries(r).forEach(y=>{let w=y[0],v=y[1],$=this.outputNames.indexOf(w);if($===-1)throw new Error(`invalid output '${w}'`);u.push(v),d.push($)});let i=n.map((y,w)=>rc(y,()=>`input "${this.inputNames[s[w]]}"`)),p=u.map((y,w)=>y?rc(y,()=>`output "${this.outputNames[d[w]]}"`):null),h=await ec(this.sessionId,s,i,d,p,a),g={};for(let y=0;y<h.length;y++)g[this.outputNames[d[y]]]=u[y]??vh(h[y]);return ut(),g}startProfiling(){}endProfiling(){tc(this.sessionId)}}});var wh,Wa,ac=F(()=>{"use strict";vt();Fi();nc();wh=()=>{if((typeof Pe.wasm.initTimeout!="number"||Pe.wasm.initTimeout<0)&&(Pe.wasm.initTimeout=0),typeof Pe.wasm.simd!="boolean"&&(Pe.wasm.simd=!0),typeof Pe.wasm.proxy!="boolean"&&(Pe.wasm.proxy=!1),typeof Pe.wasm.trace!="boolean"&&(Pe.wasm.trace=!1),typeof Pe.wasm.numThreads!="number"||!Number.isInteger(Pe.wasm.numThreads)||Pe.wasm.numThreads<=0){(typeof self<"u"&&!self.crossOriginIsolated||typeof process<"u"&&process.versions&&process.versions.node)&&(Pe.wasm.numThreads=1);let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Pe.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Wa=class{async init(t){wh(),await Yd(),await Zd(t)}async createInferenceSessionHandler(t,r){let a=new Na;return await a.loadModel(t,r),Promise.resolve(a)}}});var ic={};ir(ic,{wasmBackend:()=>_h});var _h,oc=F(()=>{"use strict";ac();_h=new Wa});var xh={};ir(xh,{InferenceSession:()=>zo,TRACE:()=>aa,TRACE_FUNC_BEGIN:()=>ct,TRACE_FUNC_END:()=>ut,Tensor:()=>tt,TrainingSession:()=>Vo,default:()=>$h,env:()=>Pe,registerBackend:()=>Kt});module.exports=Vt(xh);vt();vt();vt();var Go="1.18.0";var $h=ai;{let e=(oc(),Vt(ic)).wasmBackend;Kt("webgpu",e,5),Kt("webnn",e,5),Kt("cpu",e,10),Kt("wasm",e,10)}Object.defineProperty(Pe.versions,"web",{value:Go,enumerable:!0});
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
