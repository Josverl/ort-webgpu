/*!
 * ONNX Runtime Web v1.18.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ba=Object.defineProperty;var ad=Object.getOwnPropertyDescriptor;var id=Object.getOwnPropertyNames;var od=Object.prototype.hasOwnProperty;var q=(e,t)=>()=>(e&&(t=e(e=0)),t);var hr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Zt=(e,t)=>{for(var r in t)ba(e,r,{get:t[r],enumerable:!0})},sd=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of id(t))!od.call(e,n)&&n!==r&&ba(e,n,{get:()=>t[n],enumerable:!(a=ad(t,n))||a.enumerable});return e};var Bt=e=>sd(ba({},"__esModule",{value:!0}),e);var In,Qt,Dt,Tn,An=q(()=>{"use strict";In=new Map,Qt=[],Dt=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=In.get(e);if(a===void 0)In.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=Qt.indexOf(e);n!==-1&&Qt.splice(n,1);for(let o=0;o<Qt.length;o++)if(In.get(Qt[o]).priority<=r){Qt.splice(o,0,e);return}Qt.push(e)}return}throw new TypeError("not a valid backend")},Tn=async e=>{let t=e.length===0?Qt:e,r=[];for(let a of t){let n=In.get(a);if(n){if(n.initialized)return n.backend;if(n.aborted)continue;let o=!!n.initPromise;try{return o||(n.initPromise=n.backend.init(a)),await n.initPromise,n.initialized=!0,n.backend}catch(s){o||r.push({name:a,err:s}),n.aborted=!0}finally{delete n.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(a=>`[${a.name}] ${a.err}`).join(", ")}`)}});var fi=q(()=>{"use strict";An()});var mi,hi=q(()=>{"use strict";mi="1.18.0"});var gi,Xt,wa=q(()=>{"use strict";hi();gi="warning",Xt={wasm:{},webgl:{},webgpu:{},versions:{common:mi},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);gi=e}},get logLevel(){return gi}};Object.defineProperty(Xt,"logLevel",{enumerable:!0})});var Ae,yi=q(()=>{"use strict";wa();Ae=Xt});var bi,wi,vi=q(()=>{"use strict";bi=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,o;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[3]):(n=e.dims[3],o=e.dims[2]);let s=t?.format!==void 0?t.format:"RGB",d=t?.norm,i,p;d===void 0||d.mean===void 0?i=[255,255,255,255]:typeof d.mean=="number"?i=[d.mean,d.mean,d.mean,d.mean]:(i=[d.mean[0],d.mean[1],d.mean[2],0],d.mean[3]!==void 0&&(i[3]=d.mean[3])),d===void 0||d.bias===void 0?p=[0,0,0,0]:typeof d.bias=="number"?p=[d.bias,d.bias,d.bias,d.bias]:(p=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(p[3]=d.bias[3]));let h=o*n,m=0,y=h,v=h*2,b=-1;s==="RGBA"?(m=0,y=h,v=h*2,b=h*3):s==="RGB"?(m=0,y=h,v=h*2):s==="RBG"&&(m=0,v=h,y=h*2);for(let _=0;_<o;_++)for(let C=0;C<n;C++){let x=(e.data[m++]-p[0])*i[0],S=(e.data[y++]-p[1])*i[1],E=(e.data[v++]-p[2])*i[2],A=b===-1?255:(e.data[b++]-p[3])*i[3];a.fillStyle="rgba("+x+","+S+","+E+","+A+")",a.fillRect(C,_,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},wi=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),a;if(r!=null){let n,o,s;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[1],s=e.dims[3]):(n=e.dims[3],o=e.dims[2],s=e.dims[1]);let d=t!==void 0&&t.format!==void 0?t.format:"RGB",i=t?.norm,p,h;i===void 0||i.mean===void 0?p=[255,255,255,255]:typeof i.mean=="number"?p=[i.mean,i.mean,i.mean,i.mean]:(p=[i.mean[0],i.mean[1],i.mean[2],255],i.mean[3]!==void 0&&(p[3]=i.mean[3])),i===void 0||i.bias===void 0?h=[0,0,0,0]:typeof i.bias=="number"?h=[i.bias,i.bias,i.bias,i.bias]:(h=[i.bias[0],i.bias[1],i.bias[2],0],i.bias[3]!==void 0&&(h[3]=i.bias[3]));let m=o*n;if(t!==void 0&&(t.format!==void 0&&s===4&&t.format!=="RGBA"||s===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let y=4,v=0,b=1,_=2,C=3,x=0,S=m,E=m*2,A=-1;d==="RGBA"?(x=0,S=m,E=m*2,A=m*3):d==="RGB"?(x=0,S=m,E=m*2):d==="RBG"&&(x=0,E=m,S=m*2),a=r.createImageData(n,o);for(let R=0;R<o*n;v+=y,b+=y,_+=y,C+=y,R++)a.data[v]=(e.data[x++]-h[0])*p[0],a.data[b]=(e.data[S++]-h[1])*p[1],a.data[_]=(e.data[E++]-h[2])*p[2],a.data[C]=A===-1?255:(e.data[A++]-h[3])*p[3]}else throw new Error("Can not access image data");return a}});var va,$i,_i,Si,xi,Ci=q(()=>{"use strict";En();va=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},o,s;typeof n.mean=="number"?o=[n.mean,n.mean,n.mean,n.mean]:o=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?s=[n.bias,n.bias,n.bias,n.bias]:s=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let d=t.format!==void 0?t.format:"RGBA",i=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",p=r*a,h=i==="RGBA"?new Float32Array(p*4):new Float32Array(p*3),m=4,y=0,v=1,b=2,_=3,C=0,x=p,S=p*2,E=-1;d==="RGB"&&(m=3,y=0,v=1,b=2,_=-1),i==="RGBA"?E=p*3:i==="RBG"?(C=0,S=p,x=p*2):i==="BGR"&&(S=0,x=p,C=p*2);for(let R=0;R<p;R++,y+=m,b+=m,v+=m,_+=m)h[C++]=(e[y]+s[0])/o[0],h[x++]=(e[v]+s[1])/o[1],h[S++]=(e[b]+s[2])/o[2],E!==-1&&_!==-1&&(h[E++]=(e[_]+s[3])/o[3]);return i==="RGBA"?new nt("float32",h,[1,4,r,a]):new nt("float32",h,[1,3,r,a])},$i=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,o=typeof e=="string",s,d=t??{},i=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},p=h=>h instanceof HTMLCanvasElement||h instanceof OffscreenCanvas?h.getContext("2d"):null;if(r){let h=i();h.width=e.width,h.height=e.height;let m=p(h);if(m!=null){let y=e.height,v=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(y=t.resizedHeight,v=t.resizedWidth),t!==void 0){if(d=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");d.tensorFormat="RGBA",d.height=y,d.width=v}else d.tensorFormat="RGBA",d.height=y,d.width=v;m.drawImage(e,0,0),s=m.getImageData(0,0,v,y).data}else throw new Error("Can not access image data")}else if(a){let h,m;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(h=t.resizedHeight,m=t.resizedWidth):(h=e.height,m=e.width),t!==void 0&&(d=t),d.format="RGBA",d.height=h,d.width=m,t!==void 0){let y=i();y.width=m,y.height=h;let v=p(y);if(v!=null)v.putImageData(e,0,0),s=v.getImageData(0,0,m,h).data;else throw new Error("Can not access image data")}else s=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let h=i();h.width=e.width,h.height=e.height;let m=p(h);if(m!=null){let y=e.height,v=e.width;return m.drawImage(e,0,0,v,y),s=m.getImageData(0,0,v,y).data,d.height=y,d.width=v,va(s,d)}else throw new Error("Can not access image data")}else{if(o)return new Promise((h,m)=>{let y=i(),v=p(y);if(!e||!v)return m();let b=new Image;b.crossOrigin="Anonymous",b.src=e,b.onload=()=>{y.width=b.width,y.height=b.height,v.drawImage(b,0,0,y.width,y.height);let _=v.getImageData(0,0,y.width,y.height);d.height=y.height,d.width=y.width,h(va(_.data,d))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(s!==void 0)return va(s,d);throw new Error("Input data provided is not supported - aborted tensor creation")},_i=(e,t)=>{let{width:r,height:a,download:n,dispose:o}=t,s=[1,a,r,4];return new nt({location:"texture",type:"float32",texture:e,dims:s,download:n,dispose:o})},Si=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:o}=t;return new nt({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:o})},xi=(e,t,r)=>new nt({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var Gr,On,Ii,Ti,Ai=q(()=>{"use strict";Gr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),On=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Ii=!1,Ti=()=>{if(!Ii){Ii=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&(Gr.set("int64",BigInt64Array),On.set(BigInt64Array,"int64")),t&&(Gr.set("uint64",BigUint64Array),On.set(BigUint64Array,"uint64"))}}});var Ei,Oi,ki=q(()=>{"use strict";En();Ei=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},Oi=(e,t)=>{switch(e.location){case"cpu":return new nt(e.type,e.data,t);case"cpu-pinned":return new nt({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new nt({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new nt({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var nt,En=q(()=>{"use strict";vi();Ci();Ai();ki();nt=class{constructor(t,r,a){Ti();let n,o;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,o=t.dims,t.location){case"cpu-pinned":{let d=Gr.get(n);if(!d)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof d))throw new TypeError(`buffer should be of type ${d.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let d,i;if(typeof t=="string")if(n=t,i=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");d=r}else{let p=Gr.get(t);if(p===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?d=p.from(r,BigInt):d=p.from(r)}else if(r instanceof p)d=r;else throw new TypeError(`A ${n} tensor's data must be type of ${p}`)}else if(i=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let p=typeof t[0];if(p==="string")n="string",d=t;else if(p==="boolean")n="bool",d=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${p}.`)}else{let p=On.get(t.constructor);if(p===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=p,d=t}if(i===void 0)i=[d.length];else if(!Array.isArray(i))throw new TypeError("A tensor's dims must be a number array");o=i,this.cpuData=d,this.dataLocation="cpu"}let s=Ei(o);if(this.cpuData&&s!==this.cpuData.length)throw new Error(`Tensor's size(${s}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=o,this.size=s}static async fromImage(t,r){return $i(t,r)}static fromTexture(t,r){return _i(t,r)}static fromGpuBuffer(t,r){return Si(t,r)}static fromPinnedBuffer(t,r,a){return xi(t,r,a)}toDataURL(t){return bi(this,t)}toImageData(t){return wi(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return Oi(this,t)}}});var Xe,kn=q(()=>{"use strict";En();Xe=nt});var Hr,Pi,it,ot,$a=q(()=>{"use strict";wa();Hr=(e,t)=>{Xt.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},Pi=(e,t)=>{let r=new Error().stack?.split(/\r\n|\r|\n/g)||[],a=!1;for(let n=0;n<r.length;n++){if(a&&!r[n].includes("TRACE_FUNC")){let o=`FUNC_${e}::${r[n].trim().split(" ")[1]}`;t&&(o+=`::${t}`),Hr("CPU",o);return}r[n].includes("TRACE_FUNC")&&(a=!0)}},it=e=>{Xt.wasm.trace&&Pi("BEGIN",e)},ot=e=>{Xt.wasm.trace&&Pi("END",e)}});var Pn,Ri=q(()=>{"use strict";An();kn();$a();Pn=class e{constructor(t){this.handler=t}async run(t,r,a){it();let n={},o={};if(typeof t!="object"||t===null||t instanceof Xe||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let s=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Xe)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");s=!1;for(let p of r){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);n[p]=null}if(typeof a=="object"&&a!==null)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,h=Object.getOwnPropertyNames(r);for(let m of this.outputNames)if(h.indexOf(m)!==-1){let y=r[m];(y===null||y instanceof Xe)&&(p=!0,s=!1,n[m]=y)}if(p){if(typeof a=="object"&&a!==null)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else o=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of this.inputNames)if(typeof t[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(s)for(let p of this.outputNames)n[p]=null;let d=await this.handler.run(t,n,o),i={};for(let p in d)if(Object.hasOwnProperty.call(d,p)){let h=d[p];h instanceof Xe?i[p]=h:i[p]=new Xe(h.type,h.data,h.dims)}return ot(),i}async release(){return this.handler.dispose()}static async create(t,r,a,n){it();let o,s={};if(typeof t=="string"){if(o=t,typeof r=="object"&&r!==null)s=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(o=t,typeof r=="object"&&r!==null)s=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let m=t,y=0,v=t.byteLength;if(typeof r=="object"&&r!==null)s=r;else if(typeof r=="number"){if(y=r,!Number.isSafeInteger(y))throw new RangeError("'byteOffset' must be an integer.");if(y<0||y>=m.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${m.byteLength}).`);if(v=t.byteLength-y,typeof a=="number"){if(v=a,!Number.isSafeInteger(v))throw new RangeError("'byteLength' must be an integer.");if(v<=0||y+v>m.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${m.byteLength-y}].`);if(typeof n=="object"&&n!==null)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");o=new Uint8Array(m,y,v)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let i=(s.executionProviders||[]).map(m=>typeof m=="string"?m:m.name),h=await(await Tn(i)).createInferenceSessionHandler(o,s);return ot(),new e(h)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var Bi,Mi=q(()=>{"use strict";Ri();Bi=Pn});var zi=q(()=>{"use strict"});var ud,Rn,Di=q(()=>{"use strict";An();kn();ud="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Rn=class e{constructor(t,r,a){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=a}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",o=r||{},d=(o.executionProviders||[]).map(p=>typeof p=="string"?p:p.name),i=await Tn(d);if(i.createTrainingSessionHandler){let p=await i.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,o);return new e(p,!!t.optimizerModel,!!t.evalModel)}else throw new Error(ud)}typeNarrowingForRunStep(t,r,a,n,o){let s={},d={};if(typeof a!="object"||a===null||a instanceof Xe||Array.isArray(a))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if(typeof n=="object"){if(n===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof Xe)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(n.length===0)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(let p of n){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);s[p]=null}if(typeof o=="object"&&o!==null)d=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,h=Object.getOwnPropertyNames(n);for(let m of r)if(h.indexOf(m)!==-1){let y=n[m];(y===null||y instanceof Xe)&&(p=!0,i=!1,s[m]=y)}if(p){if(typeof o=="object"&&o!==null)d=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else d=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of t)if(typeof a[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(i)for(let p of r)s[p]=null;return[s,d]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof Xe?r[a]=n:r[a]=new Xe(n.type,n.data,n.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,a){let[n,o]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,a),s=await this.handler.runTrainStep(t,n,o);return this.convertHandlerReturnTypeToMapOfTensors(s)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,a){if(this.hasEvalModel){let[n,o]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,a),s=await this.handler.runEvalStep(t,n,o);return this.convertHandlerReturnTypeToMapOfTensors(s)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let a=await this.getParametersSize(r);if(t.length!==4*a)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var Ui,Wi=q(()=>{"use strict";Di();Ui=Rn});var _a={};Zt(_a,{InferenceSession:()=>Bi,TRACE:()=>Hr,TRACE_FUNC_BEGIN:()=>it,TRACE_FUNC_END:()=>ot,Tensor:()=>Xe,TrainingSession:()=>Ui,env:()=>Ae,registerBackend:()=>Dt});var mt=q(()=>{"use strict";fi();yi();Mi();kn();$a();zi();Wi()});var Bn={};Zt(Bn,{createReadStream:()=>Vi,readFile:()=>ld,readFileSync:()=>dd});var ld,dd,Vi,Mn=q(()=>{ld=void 0,dd=void 0,Vi=void 0});var Sa={};Zt(Sa,{join:()=>cd});var cd,xa=q(()=>{cd=void 0});var Hi=hr((Gi,Ca)=>{"use strict";var Li=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((u,c)=>{a=u,n=c}),r.mountExternalData=(u,c)=>{(r.gb||(r.gb=new Map)).set(u,c)},r.unmountExternalData=()=>{delete r.gb},r.jsepInit=(u,c,g,$,T,M,L,F,Q,Y,se)=>{r.Ib=u,r.vb=c,r.zb=g,r.ob=$,r.yb=T,r.Sa=M,r.Ab=L,r.Cb=F,r.wb=Q,r.xb=Y,r.Bb=se,c=(X,me,O)=>(...ee)=>{let ye=ct,Ze=me?.();ee=X(...ee);let St=me?.();return Ze!==St&&(X=St,O(Ze),me=O=null),ct!=ye?pn():ee},g=X=>async(...me)=>{try{if(r.fb)throw Error("Session already started");let O=r.fb={Db:me[0],errors:[]},ee=await X(...me);if(r.fb!==O)throw Error("Session mismatch");u.flush();let ye=O.errors;if(0<ye.length){let Ze=await Promise.all(ye);if(Ze=Ze.filter(St=>St),0<Ze.length)throw Error(Ze.join(`
`))}return ee}finally{r.fb=null}},r._OrtCreateSession=c(r._OrtCreateSession,()=>r._OrtCreateSession,X=>r._OrtCreateSession=X),r._OrtRun=g(c(r._OrtRun,()=>r._OrtRun,X=>r._OrtRun=X)),r._OrtRunWithBinding=g(c(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,X=>r._OrtRunWithBinding=X)),r._OrtBindInput=c(r._OrtBindInput,()=>r._OrtBindInput,X=>r._OrtBindInput=X),r.jsepRegisterBuffer=(X,me,O,ee)=>u.registerBuffer(X,me,O,ee),r.jsepGetBuffer=X=>u.getBuffer(X),r.jsepCreateDownloader=(X,me,O)=>u.createDownloader(X,me,O),r.jsepOnReleaseSession=X=>{u.onReleaseSession(X)},r.jsepOnRunStart=X=>u.onRunStart(X)};var o=Object.assign({},r),s="./this.program",d=(u,c)=>{throw c},i=typeof window=="object",p=typeof importScripts=="function",h=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",m="",y,v,b;if(h){var _=(Mn(),Bt(Bn)),C=(xa(),Bt(Sa));m=p?C.dirname(m)+"/":__dirname+"/",y=(u,c)=>(u=re(u)?new URL(u):C.normalize(u),_.readFileSync(u,c?void 0:"utf8")),b=u=>(u=y(u,!0),u.buffer||(u=new Uint8Array(u)),u),v=(u,c,g,$=!0)=>{u=re(u)?new URL(u):C.normalize(u),_.readFile(u,$?void 0:"utf8",(T,M)=>{T?g(T):c($?M.buffer:M)})},!r.thisProgram&&1<process.argv.length&&(s=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),d=(u,c)=>{throw process.exitCode=u,c},r.inspect=()=>"[Emscripten Module object]"}else(i||p)&&(p?m=self.location.href:typeof document<"u"&&document.currentScript&&(m=document.currentScript.src),e&&(m=e),m.indexOf("blob:")!==0?m=m.substr(0,m.replace(/[?#].*/,"").lastIndexOf("/")+1):m="",y=u=>{var c=new XMLHttpRequest;return c.open("GET",u,!1),c.send(null),c.responseText},p&&(b=u=>{var c=new XMLHttpRequest;return c.open("GET",u,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),v=(u,c,g)=>{var $=new XMLHttpRequest;$.open("GET",u,!0),$.responseType="arraybuffer",$.onload=()=>{$.status==200||$.status==0&&$.response?c($.response):g()},$.onerror=g,$.send(null)});var x=console.log.bind(console),S=console.error.bind(console);Object.assign(r,o),o=null,typeof WebAssembly!="object"&&Le("no native wasm support detected");var E,A=!1,R,z,N,K,oe,k,J,$e,Re,Be,_e;function V(){var u=E.buffer;r.HEAP8=z=new Int8Array(u),r.HEAP16=K=new Int16Array(u),r.HEAPU8=N=new Uint8Array(u),r.HEAPU16=oe=new Uint16Array(u),r.HEAP32=k=new Int32Array(u),r.HEAPU32=J=new Uint32Array(u),r.HEAPF32=$e=new Float32Array(u),r.HEAPF64=_e=new Float64Array(u),r.HEAP64=Re=new BigInt64Array(u),r.HEAPU64=Be=new BigUint64Array(u)}var Me=[],be=[],ge=[],pe=0,Ce=null,Te=null;function Le(u){throw u="Aborted("+u+")",S(u),A=!0,R=1,u=new WebAssembly.RuntimeError(u+". Build with -sASSERTIONS for more info."),n(u),u}var H=u=>u.startsWith("data:application/octet-stream;base64,"),re=u=>u.startsWith("file://"),fe;if(fe="ort-wasm-simd.wasm",!H(fe)){var et=fe;fe=r.locateFile?r.locateFile(et,m):m+et}function Ke(u){if(b)return b(u);throw"both async and sync fetching of the wasm failed"}function lt(u){if(i||p){if(typeof fetch=="function"&&!re(u))return fetch(u,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at '"+u+"'";return c.arrayBuffer()}).catch(()=>Ke(u));if(v)return new Promise((c,g)=>{v(u,$=>c(new Uint8Array($)),g)})}return Promise.resolve().then(()=>Ke(u))}function Mt(u,c,g){return lt(u).then($=>WebAssembly.instantiate($,c)).then($=>$).then(g,$=>{S(`failed to asynchronously prepare wasm: ${$}`),Le($)})}function Fe(u,c){var g=fe;return typeof WebAssembly.instantiateStreaming!="function"||H(g)||re(g)||h||typeof fetch!="function"?Mt(g,u,c):fetch(g,{credentials:"same-origin"}).then($=>WebAssembly.instantiateStreaming($,u).then(c,function(T){return S(`wasm streaming compile failed: ${T}`),S("falling back to ArrayBuffer instantiation"),Mt(g,u,c)}))}var Ge={1374704:(u,c,g,$)=>{if(typeof r>"u"||!r.gb)return 1;if(u=qe(u>>>0),u.startsWith("./")&&(u=u.substring(2)),u=r.gb.get(u),!u)return 2;if(c>>>=0,g>>>=0,c+g>u.byteLength)return 3;try{return N.set(u.subarray(c,c+g),$>>>0>>>0),0}catch{return 4}},1375205:(u,c,g)=>{g=qe(g);let $=new Uint8Array(c);$.set(N.subarray(u>>>0,u+c>>>0)),typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string"?(Mn(),Bt(Bn)).writeFileSync(g,$):(u=new File([$],g,{type:"application/octet-stream"}),u=URL.createObjectURL(u),window.open(u,"_blank"))},1375713:()=>{r.wb()},1375744:()=>{r.xb()},1375773:()=>{r.Bb()},1375798:u=>r.vb(u),1375831:u=>r.zb(u),1375863:(u,c,g)=>{r.ob(u,c,g,!0)},1375902:(u,c,g)=>{r.ob(u,c,g)},1375935:u=>{r.Sa("Abs",u,void 0)},1375986:u=>{r.Sa("Neg",u,void 0)},1376037:u=>{r.Sa("Floor",u,void 0)},1376090:u=>{r.Sa("Ceil",u,void 0)},1376142:u=>{r.Sa("Reciprocal",u,void 0)},1376200:u=>{r.Sa("Sqrt",u,void 0)},1376252:u=>{r.Sa("Exp",u,void 0)},1376303:u=>{r.Sa("Erf",u,void 0)},1376354:u=>{r.Sa("Sigmoid",u,void 0)},1376409:(u,c,g)=>{r.Sa("HardSigmoid",u,{alpha:c,beta:g})},1376488:u=>{r.Sa("Log",u,void 0)},1376539:u=>{r.Sa("Sin",u,void 0)},1376590:u=>{r.Sa("Cos",u,void 0)},1376641:u=>{r.Sa("Tan",u,void 0)},1376692:u=>{r.Sa("Asin",u,void 0)},1376744:u=>{r.Sa("Acos",u,void 0)},1376796:u=>{r.Sa("Atan",u,void 0)},1376848:u=>{r.Sa("Sinh",u,void 0)},1376900:u=>{r.Sa("Cosh",u,void 0)},1376952:u=>{r.Sa("Asinh",u,void 0)},1377005:u=>{r.Sa("Acosh",u,void 0)},1377058:u=>{r.Sa("Atanh",u,void 0)},1377111:u=>{r.Sa("Tanh",u,void 0)},1377163:u=>{r.Sa("Not",u,void 0)},1377214:(u,c,g)=>{r.Sa("Clip",u,{min:c,max:g})},1377283:u=>{r.Sa("Clip",u,void 0)},1377335:(u,c)=>{r.Sa("Elu",u,{alpha:c})},1377393:u=>{r.Sa("Relu",u,void 0)},1377445:(u,c)=>{r.Sa("LeakyRelu",u,{alpha:c})},1377509:(u,c)=>{r.Sa("ThresholdedRelu",u,{alpha:c})},1377579:(u,c)=>{r.Sa("Cast",u,{to:c})},1377637:u=>{r.Sa("Add",u,void 0)},1377688:u=>{r.Sa("Sub",u,void 0)},1377739:u=>{r.Sa("Mul",u,void 0)},1377790:u=>{r.Sa("Div",u,void 0)},1377841:u=>{r.Sa("Pow",u,void 0)},1377892:u=>{r.Sa("Equal",u,void 0)},1377945:u=>{r.Sa("Greater",u,void 0)},1378e3:u=>{r.Sa("GreaterOrEqual",u,void 0)},1378062:u=>{r.Sa("Less",u,void 0)},1378114:u=>{r.Sa("LessOrEqual",u,void 0)},1378173:(u,c,g,$,T)=>{r.Sa("ReduceMean",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1378332:(u,c,g,$,T)=>{r.Sa("ReduceMax",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1378490:(u,c,g,$,T)=>{r.Sa("ReduceMin",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1378648:(u,c,g,$,T)=>{r.Sa("ReduceProd",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1378807:(u,c,g,$,T)=>{r.Sa("ReduceSum",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1378965:(u,c,g,$,T)=>{r.Sa("ReduceL1",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1379122:(u,c,g,$,T)=>{r.Sa("ReduceL2",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1379279:(u,c,g,$,T)=>{r.Sa("ReduceLogSum",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1379440:(u,c,g,$,T)=>{r.Sa("ReduceSumSquare",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1379604:(u,c,g,$,T)=>{r.Sa("ReduceLogSumExp",u,{keepDims:!!c,noopWithEmptyAxes:!!g,axes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1379768:u=>{r.Sa("Where",u,void 0)},1379821:(u,c,g)=>{r.Sa("Transpose",u,{perm:c?Array.from(k.subarray(c>>>0,g>>>0)):[]})},1379929:(u,c,g,$,T,M,L,F,Q,Y,se,X,me,O,ee)=>{r.Sa("ConvTranspose",u,{format:Q?"NHWC":"NCHW",autoPad:c,dilations:[g],group:$,kernel_shape:[T],pads:[M,L],strides:[F],wIsConst:()=>!!z[Y>>>0],outputPadding:se?Array.from(k.subarray(se>>>0,X>>>0)):[],outputShape:me?Array.from(k.subarray(me>>>0,O>>>0)):[],activation:qe(ee)})},1380331:(u,c,g,$,T,M,L,F,Q,Y,se,X,me,O)=>{r.Sa("ConvTranspose",u,{format:F?"NHWC":"NCHW",autoPad:c,dilations:Array.from(k.subarray(g>>>0,(g>>>0)+2>>>0)),group:$,kernelShape:Array.from(k.subarray(T>>>0,(T>>>0)+2>>>0)),pads:Array.from(k.subarray(M>>>0,(M>>>0)+4>>>0)),strides:Array.from(k.subarray(L>>>0,(L>>>0)+2>>>0)),wIsConst:()=>!!z[Q>>>0],outputPadding:Y?Array.from(k.subarray(Y>>>0,se>>>0)):[],outputShape:X?Array.from(k.subarray(X>>>0,me>>>0)):[],activation:qe(O)})},1380896:(u,c,g,$,T,M,L,F,Q,Y,se,X,me,O,ee)=>{r.Sa("ConvTranspose",u,{format:Q?"NHWC":"NCHW",autoPad:c,dilations:[g],group:$,kernel_shape:[T],pads:[M,L],strides:[F],wIsConst:()=>!!z[Y>>>0],outputPadding:se?Array.from(k.subarray(se>>>0,X>>>0)):[],outputShape:me?Array.from(k.subarray(me>>>0,O>>>0)):[],activation:qe(ee)})},1381298:(u,c,g,$,T,M,L,F,Q,Y,se,X,me,O)=>{r.Sa("ConvTranspose",u,{format:F?"NHWC":"NCHW",autoPad:c,dilations:Array.from(k.subarray(g>>>0,(g>>>0)+2>>>0)),group:$,kernelShape:Array.from(k.subarray(T>>>0,(T>>>0)+2>>>0)),pads:Array.from(k.subarray(M>>>0,(M>>>0)+4>>>0)),strides:Array.from(k.subarray(L>>>0,(L>>>0)+2>>>0)),wIsConst:()=>!!z[Q>>>0],outputPadding:Y?Array.from(k.subarray(Y>>>0,se>>>0)):[],outputShape:X?Array.from(k.subarray(X>>>0,me>>>0)):[],activation:qe(O)})},1381863:(u,c)=>{r.Sa("GlobalAveragePool",u,{format:c?"NHWC":"NCHW"})},1381954:(u,c,g,$,T,M,L,F,Q,Y,se,X,me,O,ee,ye)=>{r.Sa("AveragePool",u,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:g,count_include_pad:$,storage_order:T,dilations:[M,L],kernel_shape:[F,Q],pads:[Y,se,X,me],strides:[O,ee]})},1382238:(u,c)=>{r.Sa("GlobalAveragePool",u,{format:c?"NHWC":"NCHW"})},1382329:(u,c,g,$,T,M,L,F,Q,Y,se,X,me,O,ee,ye)=>{r.Sa("AveragePool",u,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:g,count_include_pad:$,storage_order:T,dilations:[M,L],kernel_shape:[F,Q],pads:[Y,se,X,me],strides:[O,ee]})},1382613:(u,c)=>{r.Sa("GlobalMaxPool",u,{format:c?"NHWC":"NCHW"})},1382700:(u,c,g,$,T,M,L,F,Q,Y,se,X,me,O,ee,ye)=>{r.Sa("MaxPool",u,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:g,count_include_pad:$,storage_order:T,dilations:[M,L],kernel_shape:[F,Q],pads:[Y,se,X,me],strides:[O,ee]})},1382980:(u,c)=>{r.Sa("GlobalMaxPool",u,{format:c?"NHWC":"NCHW"})},1383067:(u,c,g,$,T,M,L,F,Q,Y,se,X,me,O,ee,ye)=>{r.Sa("MaxPool",u,{format:ye?"NHWC":"NCHW",auto_pad:c,ceil_mode:g,count_include_pad:$,storage_order:T,dilations:[M,L],kernel_shape:[F,Q],pads:[Y,se,X,me],strides:[O,ee]})},1383347:(u,c,g,$,T)=>{r.Sa("Gemm",u,{alpha:c,beta:g,transA:$,transB:T})},1383451:u=>{r.Sa("MatMul",u,void 0)},1383505:(u,c,g,$)=>{r.Sa("ArgMax",u,{keepDims:!!c,selectLastIndex:!!g,axis:$})},1383613:(u,c,g,$)=>{r.Sa("ArgMin",u,{keepDims:!!c,selectLastIndex:!!g,axis:$})},1383721:(u,c)=>{r.Sa("Softmax",u,{axis:c})},1383784:(u,c)=>{r.Sa("Concat",u,{axis:c})},1383844:(u,c,g,$,T)=>{r.Sa("Split",u,{axis:c,numOutputs:g,splitSizes:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1383984:u=>{r.Sa("Expand",u,void 0)},1384038:(u,c)=>{r.Sa("Gather",u,{axis:Number(c)})},1384109:(u,c)=>{r.Sa("GatherElements",u,{axis:Number(c)})},1384188:(u,c,g,$,T,M,L,F,Q,Y,se)=>{r.Sa("Resize",u,{antialias:c,axes:g?Array.from(k.subarray(g>>>0,$>>>0)):[],coordinateTransformMode:qe(T),cubicCoeffA:M,excludeOutside:L,extrapolationValue:F,keepAspectRatioPolicy:qe(Q),mode:qe(Y),nearestMode:qe(se)})},1384534:(u,c,g,$,T,M,L)=>{r.Sa("Slice",u,{starts:c?Array.from(k.subarray(c>>>0,g>>>0)):[],ends:$?Array.from(k.subarray($>>>0,T>>>0)):[],axes:M?Array.from(k.subarray(M>>>0,L>>>0)):[]})},1384750:u=>{r.Sa("Tile",u,void 0)},1384802:(u,c,g)=>{r.Sa("LayerNormalization",u,{axis:Number(c),epsilon:Number(g)})},1384909:(u,c,g)=>{r.Sa("InstanceNormalization",u,{epsilon:c,format:g?"NHWC":"NCHW"})},1385023:(u,c,g)=>{r.Sa("InstanceNormalization",u,{epsilon:c,format:g?"NHWC":"NCHW"})},1385137:u=>{r.Sa("Range",u,void 0)},1385190:(u,c)=>{r.Sa("Einsum",u,{equation:qe(c)})},1385271:(u,c,g,$,T)=>{r.Sa("Pad",u,{mode:c,value:g,pads:$?Array.from(k.subarray($>>>0,T>>>0)):[]})},1385398:(u,c,g,$,T,M)=>{r.Sa("BatchNormalization",u,{epsilon:c,momentum:g,spatial:!!T,trainingMode:!!$,format:M?"NHWC":"NCHW"})},1385567:(u,c,g,$,T,M)=>{r.Sa("BatchNormalization",u,{epsilon:c,momentum:g,spatial:!!T,trainingMode:!!$,format:M?"NHWC":"NCHW"})},1385736:(u,c,g)=>{r.Sa("CumSum",u,{exclusive:Number(c),reverse:Number(g)})},1385833:(u,c,g,$,T,M,L,F,Q)=>{r.Sa("Attention",u,{numHeads:c,isUnidirectional:g,maskFilterValue:$,scale:T,doRotary:M,qkvHiddenSizes:L?Array.from(k.subarray(Number(F)>>>0,Number(F)+L>>>0)):[],pastPresentShareBuffer:!!Q})},1386105:u=>{r.Sa("BiasAdd",u,void 0)},1386160:u=>{r.Sa("BiasSplitGelu",u,void 0)},1386221:u=>{r.Sa("FastGelu",u,void 0)},1386277:(u,c,g,$,T,M,L,F,Q,Y,se,X,me)=>{r.Sa("Conv",u,{format:Q?"NHWC":"NCHW",auto_pad:c,dilations:[g],group:$,kernel_shape:[T],pads:M?Array.from(k.subarray(M>>>0,L>>>0)):[],strides:[F],w_is_const:()=>!!z[Y>>>0],activation:qe(se),activation_params:X?Array.from($e.subarray(X>>>0,me>>>0)):[]})},1386647:(u,c,g,$,T,M,L,F,Q,Y,se,X,me,O,ee,ye)=>{r.Sa("Conv",u,{format:X?"NHWC":"NCHW",auto_pad:c,dilations:[g,$],group:T,kernel_shape:[M,L],pads:F?Array.from(k.subarray(F>>>0,Q>>>0)):[],strides:[Y,se],w_is_const:()=>!!z[me>>>0],activation:qe(O),activation_params:ee?Array.from($e.subarray(ee>>>0,ye>>>0)):[]})},1387038:u=>{r.Sa("Gelu",u,void 0)},1387090:(u,c,g,$,T,M)=>{r.Sa("MatMulNBits",u,{k:c,n:g,accuracyLevel:$,bits:T,blockSize:M})},1387217:(u,c,g,$,T,M)=>{r.Sa("MultiHeadAttention",u,{numHeads:c,isUnidirectional:g,maskFilterValue:$,scale:T,doRotary:M})},1387376:(u,c)=>{r.Sa("SkipLayerNormalization",u,{epsilon:c})},1387457:u=>{r.Ab(u)},1387491:(u,c)=>r.Cb(u,c,r.fb.Db,r.fb.errors)};function rt(u){this.name="ExitStatus",this.message=`Program terminated with exit(${u})`,this.status=u}function zt(u){this.cb=u-24,this.rb=function(c){J[this.cb+4>>>2>>>0]=c},this.qb=function(c){J[this.cb+8>>>2>>>0]=c},this.kb=function(c,g){this.jb(),this.rb(c),this.qb(g)},this.jb=function(){J[this.cb+16>>>2>>>0]=0}}var $t=0,en=0,$r=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,gt=(u,c,g)=>{c>>>=0;var $=c+g;for(g=c;u[g]&&!(g>=$);)++g;if(16<g-c&&u.buffer&&$r)return $r.decode(u.subarray(c,g));for($="";c<g;){var T=u[c++];if(T&128){var M=u[c++]&63;if((T&224)==192)$+=String.fromCharCode((T&31)<<6|M);else{var L=u[c++]&63;T=(T&240)==224?(T&15)<<12|M<<6|L:(T&7)<<18|M<<12|L<<6|u[c++]&63,65536>T?$+=String.fromCharCode(T):(T-=65536,$+=String.fromCharCode(55296|T>>10,56320|T&1023))}}else $+=String.fromCharCode(T)}return $},qe=(u,c)=>(u>>>=0)?gt(N,u,c):"",yt=u=>{for(var c=0,g=0;g<u.length;++g){var $=u.charCodeAt(g);127>=$?c++:2047>=$?c+=2:55296<=$&&57343>=$?(c+=4,++g):c+=3}return c},Vt=(u,c,g,$)=>{if(g>>>=0,!(0<$))return 0;var T=g;$=g+$-1;for(var M=0;M<u.length;++M){var L=u.charCodeAt(M);if(55296<=L&&57343>=L){var F=u.charCodeAt(++M);L=65536+((L&1023)<<10)|F&1023}if(127>=L){if(g>=$)break;c[g++>>>0]=L}else{if(2047>=L){if(g+1>=$)break;c[g++>>>0]=192|L>>6}else{if(65535>=L){if(g+2>=$)break;c[g++>>>0]=224|L>>12}else{if(g+3>=$)break;c[g++>>>0]=240|L>>18,c[g++>>>0]=128|L>>12&63}c[g++>>>0]=128|L>>6&63}c[g++>>>0]=128|L&63}}return c[g>>>0]=0,g-T},tn=u=>{if(u===null)return"null";var c=typeof u;return c==="object"||c==="array"||c==="function"?u.toString():""+u},_r,dt=u=>{for(var c="";N[u>>>0];)c+=_r[N[u++>>>0]];return c},_t={},Lt={},rr={},pt;function rn(u,c,g={}){var $=c.name;if(!u)throw new pt(`type "${$}" must have a positive integer typeid pointer`);if(Lt.hasOwnProperty(u)){if(g.tb)return;throw new pt(`Cannot register type '${$}' twice`)}Lt[u]=c,delete rr[u],_t.hasOwnProperty(u)&&(c=_t[u],delete _t[u],c.forEach(T=>T()))}function ft(u,c,g={}){if(!("argPackAdvance"in c))throw new TypeError("registerType registeredInstance requires argPackAdvance");rn(u,c,g)}var Sr=(u,c,g)=>{switch(c){case 1:return g?$=>z[$>>>0>>>0]:$=>N[$>>>0>>>0];case 2:return g?$=>K[$>>>1>>>0]:$=>oe[$>>>1>>>0];case 4:return g?$=>k[$>>>2>>>0]:$=>J[$>>>2>>>0];case 8:return g?$=>Re[$>>>3]:$=>Be[$>>>3];default:throw new TypeError(`invalid integer width (${c}): ${u}`)}};function xr(){this.$a=[void 0],this.nb=[]}var ze=new xr;function nr(u){u>>>=0,u>=ze.cb&&--ze.get(u).pb===0&&ze.jb(u)}var Ye=u=>{if(!u)throw new pt("Cannot use deleted val. handle = "+u);return ze.get(u).value},te=u=>{switch(u){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ze.kb({pb:1,value:u})}};function Gt(u){return this.fromWireType(k[u>>>2>>>0])}var nn=(u,c)=>{switch(c){case 4:return function(g){return this.fromWireType($e[g>>>2>>>0])};case 8:return function(g){return this.fromWireType(_e[g>>>3>>>0])};default:throw new TypeError(`invalid float width (${c}): ${u}`)}};function ma(u){return this.fromWireType(J[u>>>2>>>0])}var Cr=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,ha=(u,c)=>{for(var g=u>>1,$=g+c/2;!(g>=$)&&oe[g>>>0];)++g;if(g<<=1,32<g-u&&Cr)return Cr.decode(N.subarray(u>>>0,g>>>0));for(g="",$=0;!($>=c/2);++$){var T=K[u+2*$>>>1>>>0];if(T==0)break;g+=String.fromCharCode(T)}return g},an=(u,c,g)=>{if(g??=2147483647,2>g)return 0;g-=2;var $=c;g=g<2*u.length?g/2:u.length;for(var T=0;T<g;++T)K[c>>>1>>>0]=u.charCodeAt(T),c+=2;return K[c>>>1>>>0]=0,c-$},on=u=>2*u.length,sn=(u,c)=>{for(var g=0,$="";!(g>=c/4);){var T=k[u+4*g>>>2>>>0];if(T==0)break;++g,65536<=T?(T-=65536,$+=String.fromCharCode(55296|T>>10,56320|T&1023)):$+=String.fromCharCode(T)}return $},un=(u,c,g)=>{if(c>>>=0,g??=2147483647,4>g)return 0;var $=c;g=$+g-4;for(var T=0;T<u.length;++T){var M=u.charCodeAt(T);if(55296<=M&&57343>=M){var L=u.charCodeAt(++T);M=65536+((M&1023)<<10)|L&1023}if(k[c>>>2>>>0]=M,c+=4,c+4>g)break}return k[c>>>2>>>0]=0,c-$},Ir=u=>{for(var c=0,g=0;g<u.length;++g){var $=u.charCodeAt(g);55296<=$&&57343>=$&&++g,c+=4}return c},ar=(u,c)=>{var g=Lt[u];if(g===void 0)throw u=Nr(u),g=dt(u),He(u),new pt(c+" has unknown type "+g);return g},Tr=(u,c,g)=>{var $=[];return u=u.toWireType($,g),$.length&&(J[c>>>2>>>0]=te($)),u},Ht=u=>{try{u()}catch(c){Le(c)}};function ln(){var u=ne,c={};for(let[g,$]of Object.entries(u))c[g]=typeof $=="function"?function(){Ft.push(g);try{return $.apply(null,arguments)}finally{A||(Ft.pop(),ct&&bt===1&&Ft.length===0&&(bt=0,Ht(fr),typeof Fibers<"u"&&Fibers.Kb()))}}:$;return c}var bt=0,ct=null,Ar=0,Ft=[],Er={},Or={},dn=0,ir=null,cn=[];function pn(){return new Promise((u,c)=>{ir={resolve:u,reject:c}})}function kr(){var u=at(65548),c=u+12;J[u>>>2>>>0]=c,J[u+4>>>2>>>0]=c+65536,c=Ft[0];var g=Er[c];return g===void 0&&(g=dn++,Er[c]=g,Or[g]=c),k[u+8>>>2>>>0]=g,u}function or(u){if(!A){if(bt===0){var c=!1,g=!1;u(($=0)=>{if(!A&&(Ar=$,c=!0,g)){bt=2,Ht(()=>_n(ct)),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.resume(),$=!1;try{var T=(0,ne[Or[k[ct+8>>>2>>>0]]])()}catch(F){T=F,$=!0}var M=!1;if(!ct){var L=ir;L&&(ir=null,($?L.reject:L.resolve)(T),M=!0)}if($&&!M)throw T}}),g=!0,c||(bt=1,ct=kr(),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.pause(),Ht(()=>$n(ct)))}else bt===2?(bt=0,Ht(Sn),He(ct),ct=null,cn.forEach($=>{if(!A)try{$();try{R=R=$=R,r.onExit?.($),A=!0,d($,new rt($))}catch(T){T instanceof rt||T=="unwind"||d(1,T)}}catch(T){T instanceof rt||T=="unwind"||d(1,T)}})):Le(`invalid state: ${bt}`);return Ar}}function Rt(u){return or(c=>{u().then(c)})}var qt=[],fn={},sr=u=>{var c=fn[u];return c===void 0?dt(u):c},Pr=()=>typeof globalThis=="object"?globalThis:Function("return this")(),mn=u=>{var c=qt.length;return qt.push(u),c},Rr=(u,c)=>{for(var g=Array(u),$=0;$<u;++$)g[$]=ar(J[c+4*$>>>2>>>0],"parameter "+$);return g},Br=(u,c)=>Object.defineProperty(c,"name",{value:u});function ga(u){var c=Function;if(!(c instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof c} which is not a function`);var g=Br(c.name||"unknownFunctionName",function(){});return g.prototype=c.prototype,g=new g,u=c.apply(g,u),u instanceof Object?u:g}var Pe=u=>u%4===0&&(u%100!==0||u%400===0),ur=[0,31,60,91,121,152,182,213,244,274,305,335],lr=[0,31,59,90,120,151,181,212,243,273,304,334],Mr=u=>{var c=yt(u)+1,g=at(c);return g&&Vt(u,N,g,c),g},jt=[],zr=(u,c)=>{jt.length=0;for(var g;g=N[u++>>>0];){var $=g!=105;$&=g!=112,c+=$&&c%8?4:0,jt.push(g==112?J[c>>>2>>>0]:g==106?Re[c>>>3]:g==105?k[c>>>2>>>0]:_e[c>>>3>>>0]),c+=$?8:4}return jt},dr={},Dr=()=>{if(!cr){var u={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:s||"./this.program"},c;for(c in dr)dr[c]===void 0?delete u[c]:u[c]=dr[c];var g=[];for(c in u)g.push(`${c}=${u[c]}`);cr=g}return cr},cr,hn=[null,[],[]],gn=[31,29,31,30,31,30,31,31,30,31,30,31],Ur=[31,28,31,30,31,30,31,31,30,31,30,31];function yn(u){var c=Array(yt(u)+1);return Vt(u,c,0,c.length),c}function Wr(u,c,g,$){function T(O,ee,ye){for(O=typeof O=="number"?O.toString():O||"";O.length<ee;)O=ye[0]+O;return O}function M(O,ee){return T(O,ee,"0")}function L(O,ee){function ye(St){return 0>St?-1:0<St?1:0}var Ze;return(Ze=ye(O.getFullYear()-ee.getFullYear()))===0&&(Ze=ye(O.getMonth()-ee.getMonth()))===0&&(Ze=ye(O.getDate()-ee.getDate())),Ze}function F(O){switch(O.getDay()){case 0:return new Date(O.getFullYear()-1,11,29);case 1:return O;case 2:return new Date(O.getFullYear(),0,3);case 3:return new Date(O.getFullYear(),0,2);case 4:return new Date(O.getFullYear(),0,1);case 5:return new Date(O.getFullYear()-1,11,31);case 6:return new Date(O.getFullYear()-1,11,30)}}function Q(O){var ee=O.ab;for(O=new Date(new Date(O.bb+1900,0,1).getTime());0<ee;){var ye=O.getMonth(),Ze=(Pe(O.getFullYear())?gn:Ur)[ye];if(ee>Ze-O.getDate())ee-=Ze-O.getDate()+1,O.setDate(1),11>ye?O.setMonth(ye+1):(O.setMonth(0),O.setFullYear(O.getFullYear()+1));else{O.setDate(O.getDate()+ee);break}}return ye=new Date(O.getFullYear()+1,0,4),ee=F(new Date(O.getFullYear(),0,4)),ye=F(ye),0>=L(ee,O)?0>=L(ye,O)?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}u>>>=0,c>>>=0,g>>>=0,$>>>=0;var Y=J[$+40>>>2>>>0];$={Gb:k[$>>>2>>>0],Fb:k[$+4>>>2>>>0],hb:k[$+8>>>2>>>0],mb:k[$+12>>>2>>>0],ib:k[$+16>>>2>>>0],bb:k[$+20>>>2>>>0],Wa:k[$+24>>>2>>>0],ab:k[$+28>>>2>>>0],Jb:k[$+32>>>2>>>0],Eb:k[$+36>>>2>>>0],Hb:Y?qe(Y):""},g=qe(g),Y={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var se in Y)g=g.replace(new RegExp(se,"g"),Y[se]);var X="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),me="January February March April May June July August September October November December".split(" ");Y={"%a":O=>X[O.Wa].substring(0,3),"%A":O=>X[O.Wa],"%b":O=>me[O.ib].substring(0,3),"%B":O=>me[O.ib],"%C":O=>M((O.bb+1900)/100|0,2),"%d":O=>M(O.mb,2),"%e":O=>T(O.mb,2," "),"%g":O=>Q(O).toString().substring(2),"%G":O=>Q(O),"%H":O=>M(O.hb,2),"%I":O=>(O=O.hb,O==0?O=12:12<O&&(O-=12),M(O,2)),"%j":O=>{for(var ee=0,ye=0;ye<=O.ib-1;ee+=(Pe(O.bb+1900)?gn:Ur)[ye++]);return M(O.mb+ee,3)},"%m":O=>M(O.ib+1,2),"%M":O=>M(O.Fb,2),"%n":()=>`
`,"%p":O=>0<=O.hb&&12>O.hb?"AM":"PM","%S":O=>M(O.Gb,2),"%t":()=>"	","%u":O=>O.Wa||7,"%U":O=>M(Math.floor((O.ab+7-O.Wa)/7),2),"%V":O=>{var ee=Math.floor((O.ab+7-(O.Wa+6)%7)/7);if(2>=(O.Wa+371-O.ab-2)%7&&ee++,ee)ee==53&&(ye=(O.Wa+371-O.ab)%7,ye==4||ye==3&&Pe(O.bb)||(ee=1));else{ee=52;var ye=(O.Wa+7-O.ab-1)%7;(ye==4||ye==5&&Pe(O.bb%400-1))&&ee++}return M(ee,2)},"%w":O=>O.Wa,"%W":O=>M(Math.floor((O.ab+7-(O.Wa+6)%7)/7),2),"%y":O=>(O.bb+1900).toString().substring(2),"%Y":O=>O.bb+1900,"%z":O=>{O=O.Eb;var ee=0<=O;return O=Math.abs(O)/60,(ee?"+":"-")+("0000"+(O/60*100+O%60)).slice(-4)},"%Z":O=>O.Hb,"%%":()=>"%"},g=g.replace(/%%/g,"\0\0");for(se in Y)g.includes(se)&&(g=g.replace(new RegExp(se,"g"),Y[se]($)));return g=g.replace(/\0\0/g,"%"),se=yn(g),se.length>c?0:(z.set(se,u>>>0),se.length-1)}for(var bn=Array(256),pr=0;256>pr;++pr)bn[pr]=String.fromCharCode(pr);_r=bn,pt=r.BindingError=class extends Error{constructor(u){super(u),this.name="BindingError"}},r.InternalError=class extends Error{constructor(u){super(u),this.name="InternalError"}},Object.assign(xr.prototype,{get(u){return this.$a[u]},has(u){return this.$a[u]!==void 0},kb(u){var c=this.nb.pop()||this.$a.length;return this.$a[c]=u,c},jb(u){this.$a[u]=void 0,this.nb.push(u)}}),ze.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),ze.cb=ze.$a.length,r.count_emval_handles=()=>{for(var u=0,c=ze.cb;c<ze.$a.length;++c)ze.$a[c]!==void 0&&++u;return u};var wn={ia:function(u,c,g){return Rt(async()=>{await r.yb(u,c,g)})},a:function(u,c,g){throw u>>>=0,new zt(u).kb(c>>>0,g>>>0),$t=u,en++,$t},w:function(){return 0},ca:function(){},P:function(){},R:function(){},J:function(){return 0},aa:function(){},X:function(){},$:function(){},D:function(){},Q:function(){},N:function(){},ba:function(){},O:function(){},G:function(u,c,g,$,T){c>>>=0,c=dt(c);var M=c.indexOf("u")!=-1;M&&(T=(1n<<64n)-1n),ft(u>>>0,{name:c,fromWireType:L=>L,toWireType:function(L,F){if(typeof F!="bigint"&&typeof F!="number")throw new TypeError(`Cannot convert "${tn(F)}" to ${this.name}`);if(F<$||F>T)throw new TypeError(`Passing a number "${tn(F)}" from JS side to C/C++ side to an argument of type "${c}", which is outside the valid range [${$}, ${T}]!`);return F},argPackAdvance:8,readValueFromPointer:Sr(c,g>>>0,!M),eb:null})},ga:function(u,c,g,$){c=dt(c>>>0),ft(u>>>0,{name:c,fromWireType:function(T){return!!T},toWireType:function(T,M){return M?g:$},argPackAdvance:8,readValueFromPointer:function(T){return this.fromWireType(N[T>>>0])},eb:null})},fa:function(u,c){c=dt(c>>>0),ft(u>>>0,{name:c,fromWireType:g=>{var $=Ye(g);return nr(g),$},toWireType:(g,$)=>te($),argPackAdvance:8,readValueFromPointer:Gt,eb:null})},F:function(u,c,g){c=dt(c>>>0),ft(u>>>0,{name:c,fromWireType:$=>$,toWireType:($,T)=>T,argPackAdvance:8,readValueFromPointer:nn(c,g>>>0),eb:null})},t:function(u,c,g,$,T){if(u>>>=0,g>>>=0,c=dt(c>>>0),T===-1&&(T=4294967295),T=F=>F,$===0){var M=32-8*g;T=F=>F<<M>>>M}var L=c.includes("unsigned")?function(F,Q){return Q>>>0}:function(F,Q){return Q};ft(u,{name:c,fromWireType:T,toWireType:L,argPackAdvance:8,readValueFromPointer:Sr(c,g,$!==0),eb:null})},n:function(u,c,g){function $(M){return new T(z.buffer,J[M+4>>>2>>>0],J[M>>>2>>>0])}var T=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][c];g=dt(g>>>0),ft(u>>>0,{name:g,fromWireType:$,argPackAdvance:8,readValueFromPointer:$},{tb:!0})},H:function(u,c){c=dt(c>>>0);var g=c==="std::string";ft(u>>>0,{name:c,fromWireType:function($){var T=J[$>>>2>>>0],M=$+4;if(g)for(var L=M,F=0;F<=T;++F){var Q=M+F;if(F==T||N[Q>>>0]==0){if(L=qe(L,Q-L),Y===void 0)var Y=L;else Y+=String.fromCharCode(0),Y+=L;L=Q+1}}else{for(Y=Array(T),F=0;F<T;++F)Y[F]=String.fromCharCode(N[M+F>>>0]);Y=Y.join("")}return He($),Y},toWireType:function($,T){T instanceof ArrayBuffer&&(T=new Uint8Array(T));var M=typeof T=="string";if(!(M||T instanceof Uint8Array||T instanceof Uint8ClampedArray||T instanceof Int8Array))throw new pt("Cannot pass non-string to std::string");var L=g&&M?yt(T):T.length,F=at(4+L+1),Q=F+4;if(J[F>>>2>>>0]=L,g&&M)Vt(T,N,Q,L+1);else if(M)for(M=0;M<L;++M){var Y=T.charCodeAt(M);if(255<Y)throw He(Q),new pt("String has UTF-16 code units that do not fit in 8 bits");N[Q+M>>>0]=Y}else for(M=0;M<L;++M)N[Q+M>>>0]=T[M];return $!==null&&$.push(He,F),F},argPackAdvance:8,readValueFromPointer:ma,eb($){He($)}})},y:function(u,c,g){if(c>>>=0,g>>>=0,g=dt(g),c===2)var $=ha,T=an,M=on,L=()=>oe,F=1;else c===4&&($=sn,T=un,M=Ir,L=()=>J,F=2);ft(u>>>0,{name:g,fromWireType:Q=>{for(var Y=J[Q>>>2>>>0],se=L(),X,me=Q+4,O=0;O<=Y;++O){var ee=Q+4+O*c;(O==Y||se[ee>>>F]==0)&&(me=$(me,ee-me),X===void 0?X=me:(X+=String.fromCharCode(0),X+=me),me=ee+c)}return He(Q),X},toWireType:(Q,Y)=>{if(typeof Y!="string")throw new pt(`Cannot pass non-string to C++ string type ${g}`);var se=M(Y),X=at(4+se+c);return J[X>>>2]=se>>F,T(Y,X+4,se+c),Q!==null&&Q.push(He,X),X},argPackAdvance:8,readValueFromPointer:Gt,eb(Q){He(Q)}})},ha:function(u,c){c=dt(c>>>0),ft(u>>>0,{ub:!0,name:c,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},da:()=>1,s:function(u,c,g){return c>>>=0,g>>>=0,u=Ye(u>>>0),c=ar(c,"emval::as"),Tr(c,g,u)},v:function(u){return u>>>=0,Rt(()=>(u=Ye(u),u.then(te)))},o:function(u,c,g,$){return g>>>=0,$>>>=0,u=qt[u>>>0],c=Ye(c>>>0),u(null,c,g,$)},k:function(u,c,g,$,T){return g>>>=0,$>>>=0,T>>>=0,u=qt[u>>>0],c=Ye(c>>>0),g=sr(g),u(c,c[g],$,T)},b:nr,z:function(u,c){return c>>>=0,u=Ye(u>>>0),c=Ye(c),u==c},m:function(u){return u>>>=0,u===0?te(Pr()):(u=sr(u),te(Pr()[u]))},i:function(u,c,g){c=Rr(u,c>>>0);var $=c.shift();u--;var T=`return function (obj, func, destructorsRef, args) {
`,M=0,L=[];g===0&&L.push("obj");for(var F=["retType"],Q=[$],Y=0;Y<u;++Y)L.push("arg"+Y),F.push("argType"+Y),Q.push(c[Y]),T+=`  var arg${Y} = argType${Y}.readValueFromPointer(args${M?"+"+M:""});
`,M+=c[Y].argPackAdvance;for(T+=`  var rv = ${g===1?"new func":"func.call"}(${L.join(", ")});
`,Y=0;Y<u;++Y)c[Y].deleteObject&&(T+=`  argType${Y}.deleteObject(arg${Y});
`);return $.ub||(F.push("emval_returnValue"),Q.push(Tr),T+=`  return emval_returnValue(retType, destructorsRef, rv);
`),F.push(T+`};
`),u=ga(F).apply(null,Q),g=`methodCaller<(${c.map(se=>se.name).join(", ")}) => ${$.name}>`,mn(Br(g,u))},r:function(u,c){return c>>>=0,u=Ye(u>>>0),c=Ye(c),te(u[c])},f:function(u){u>>>=0,4<u&&(ze.get(u).pb+=1)},u:function(){return te([])},l:function(u){u=Ye(u>>>0);for(var c=Array(u.length),g=0;g<u.length;g++)c[g]=u[g];return te(c)},e:function(u){return te(sr(u>>>0))},j:function(){return te({})},h:function(u){u>>>=0;for(var c=Ye(u);c.length;){var g=c.pop();c.pop()(g)}nr(u)},g:function(u,c,g){c>>>=0,g>>>=0,u=Ye(u>>>0),c=Ye(c),g=Ye(g),u[c]=g},c:function(u,c){return c>>>=0,u=ar(u>>>0,"_emval_take_value"),u=u.readValueFromPointer(c),te(u)},U:function(u,c){u=-9007199254740992>u||9007199254740992<u?NaN:Number(u),c>>>=0,u=new Date(1e3*u),k[c>>>2>>>0]=u.getUTCSeconds(),k[c+4>>>2>>>0]=u.getUTCMinutes(),k[c+8>>>2>>>0]=u.getUTCHours(),k[c+12>>>2>>>0]=u.getUTCDate(),k[c+16>>>2>>>0]=u.getUTCMonth(),k[c+20>>>2>>>0]=u.getUTCFullYear()-1900,k[c+24>>>2>>>0]=u.getUTCDay(),k[c+28>>>2>>>0]=(u.getTime()-Date.UTC(u.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},V:function(u,c){u=-9007199254740992>u||9007199254740992<u?NaN:Number(u),c>>>=0,u=new Date(1e3*u),k[c>>>2>>>0]=u.getSeconds(),k[c+4>>>2>>>0]=u.getMinutes(),k[c+8>>>2>>>0]=u.getHours(),k[c+12>>>2>>>0]=u.getDate(),k[c+16>>>2>>>0]=u.getMonth(),k[c+20>>>2>>>0]=u.getFullYear()-1900,k[c+24>>>2>>>0]=u.getDay(),k[c+28>>>2>>>0]=(Pe(u.getFullYear())?ur:lr)[u.getMonth()]+u.getDate()-1|0,k[c+36>>>2>>>0]=-(60*u.getTimezoneOffset());var g=new Date(u.getFullYear(),6,1).getTimezoneOffset(),$=new Date(u.getFullYear(),0,1).getTimezoneOffset();k[c+32>>>2>>>0]=(g!=$&&u.getTimezoneOffset()==Math.min($,g))|0},W:function(u){u>>>=0;var c=new Date(k[u+20>>>2>>>0]+1900,k[u+16>>>2>>>0],k[u+12>>>2>>>0],k[u+8>>>2>>>0],k[u+4>>>2>>>0],k[u>>>2>>>0],0),g=k[u+32>>>2>>>0],$=c.getTimezoneOffset(),T=new Date(c.getFullYear(),6,1).getTimezoneOffset(),M=new Date(c.getFullYear(),0,1).getTimezoneOffset(),L=Math.min(M,T);return 0>g?k[u+32>>>2>>>0]=+(T!=M&&L==$):0<g!=(L==$)&&(T=Math.max(M,T),c.setTime(c.getTime()+6e4*((0<g?L:T)-$))),k[u+24>>>2>>>0]=c.getDay(),k[u+28>>>2>>>0]=(Pe(c.getFullYear())?ur:lr)[c.getMonth()]+c.getDate()-1|0,k[u>>>2>>>0]=c.getSeconds(),k[u+4>>>2>>>0]=c.getMinutes(),k[u+8>>>2>>>0]=c.getHours(),k[u+12>>>2>>>0]=c.getDate(),k[u+16>>>2>>>0]=c.getMonth(),k[u+20>>>2>>>0]=c.getYear(),u=c.getTime(),isNaN(u)?(k[vn()>>>2>>>0]=61,u=-1):u/=1e3,BigInt(u)},S:function(){return-52},T:function(){},L:function(u,c,g){function $(Q){return(Q=Q.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Q[1]:"GMT"}g>>>=0;var T=new Date().getFullYear(),M=new Date(T,0,1),L=new Date(T,6,1);T=M.getTimezoneOffset();var F=L.getTimezoneOffset();J[u>>>0>>>2>>>0]=60*Math.max(T,F),k[c>>>0>>>2>>>0]=+(T!=F),u=$(M),c=$(L),u=Mr(u),c=Mr(c),F<T?(J[g>>>2>>>0]=u,J[g+4>>>2>>>0]=c):(J[g>>>2>>>0]=c,J[g+4>>>2>>>0]=u)},A:()=>{Le("")},d:function(u,c,g){return u>>>=0,c=zr(c>>>0,g>>>0),Ge[u].apply(null,c)},I:function(u,c,g){return u>>>=0,c=zr(c>>>0,g>>>0),Ge[u].apply(null,c)},E:()=>Date.now(),M:function(){return 4294901760},q:()=>performance.now(),K:function(u){u>>>=0;var c=N.length;if(4294901760<u)return!1;for(var g=1;4>=g;g*=2){var $=c*(1+.2/g);$=Math.min($,u+100663296);var T=Math;$=Math.max(u,$);e:{T=(T.min.call(T,4294901760,$+(65536-$%65536)%65536)-E.buffer.byteLength+65535)/65536;try{E.grow(T),V();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},Z:function(u,c){u>>>=0,c>>>=0;var g=0;return Dr().forEach(($,T)=>{var M=c+g;for(T=J[u+4*T>>>2>>>0]=M,M=0;M<$.length;++M)z[T++>>>0>>>0]=$.charCodeAt(M);z[T>>>0>>>0]=0,g+=$.length+1}),0},_:function(u,c){u>>>=0,c>>>=0;var g=Dr();J[u>>>2>>>0]=g.length;var $=0;return g.forEach(T=>$+=T.length+1),J[c>>>2>>>0]=$,0},x:()=>52,C:function(){return 52},Y:function(){return 70},B:function(u,c,g,$){c>>>=0,g>>>=0,$>>>=0;for(var T=0,M=0;M<g;M++){var L=J[c>>>2>>>0],F=J[c+4>>>2>>>0];c+=8;for(var Q=0;Q<F;Q++){var Y=N[L+Q>>>0],se=hn[u];Y===0||Y===10?((u===1?x:S)(gt(se,0)),se.length=0):se.push(Y)}T+=F}return J[$>>>2>>>0]=T,0},ea:Wr,p:function(u,c,g,$){return Wr(u>>>0,c>>>0,g>>>0,$>>>0)}},ne=function(){function u(g){return ne=g.exports,ne=ln(),ne=ya(),E=ne.ja,V(),be.unshift(ne.ka),pe--,pe==0&&(Ce!==null&&(clearInterval(Ce),Ce=null),Te&&(g=Te,Te=null,g())),ne}var c={a:wn};if(pe++,r.instantiateWasm)try{return r.instantiateWasm(c,u)}catch(g){S(`Module.instantiateWasm callback failed with error: ${g}`),n(g)}return Fe(c,function(g){u(g.instance)}).catch(n),{}}();r._OrtInit=(u,c)=>(r._OrtInit=ne.la)(u,c),r._OrtGetLastError=(u,c)=>(r._OrtGetLastError=ne.ma)(u,c),r._OrtCreateSessionOptions=(u,c,g,$,T,M,L,F,Q,Y)=>(r._OrtCreateSessionOptions=ne.na)(u,c,g,$,T,M,L,F,Q,Y),r._OrtAppendExecutionProvider=(u,c)=>(r._OrtAppendExecutionProvider=ne.oa)(u,c),r._OrtAddFreeDimensionOverride=(u,c,g)=>(r._OrtAddFreeDimensionOverride=ne.pa)(u,c,g),r._OrtAddSessionConfigEntry=(u,c,g)=>(r._OrtAddSessionConfigEntry=ne.qa)(u,c,g),r._OrtReleaseSessionOptions=u=>(r._OrtReleaseSessionOptions=ne.ra)(u),r._OrtCreateSession=(u,c,g)=>(r._OrtCreateSession=ne.sa)(u,c,g),r._OrtReleaseSession=u=>(r._OrtReleaseSession=ne.ta)(u),r._OrtGetInputOutputCount=(u,c,g)=>(r._OrtGetInputOutputCount=ne.ua)(u,c,g),r._OrtGetInputName=(u,c)=>(r._OrtGetInputName=ne.va)(u,c),r._OrtGetOutputName=(u,c)=>(r._OrtGetOutputName=ne.wa)(u,c),r._OrtFree=u=>(r._OrtFree=ne.xa)(u),r._OrtCreateTensor=(u,c,g,$,T,M)=>(r._OrtCreateTensor=ne.ya)(u,c,g,$,T,M),r._OrtGetTensorData=(u,c,g,$,T)=>(r._OrtGetTensorData=ne.za)(u,c,g,$,T),r._OrtReleaseTensor=u=>(r._OrtReleaseTensor=ne.Aa)(u),r._OrtCreateRunOptions=(u,c,g,$)=>(r._OrtCreateRunOptions=ne.Ba)(u,c,g,$),r._OrtAddRunConfigEntry=(u,c,g)=>(r._OrtAddRunConfigEntry=ne.Ca)(u,c,g),r._OrtReleaseRunOptions=u=>(r._OrtReleaseRunOptions=ne.Da)(u),r._OrtCreateBinding=u=>(r._OrtCreateBinding=ne.Ea)(u),r._OrtBindInput=(u,c,g)=>(r._OrtBindInput=ne.Fa)(u,c,g),r._OrtBindOutput=(u,c,g,$)=>(r._OrtBindOutput=ne.Ga)(u,c,g,$),r._OrtClearBoundOutputs=u=>(r._OrtClearBoundOutputs=ne.Ha)(u),r._OrtReleaseBinding=u=>(r._OrtReleaseBinding=ne.Ia)(u),r._OrtRunWithBinding=(u,c,g,$,T)=>(r._OrtRunWithBinding=ne.Ja)(u,c,g,$,T),r._OrtRun=(u,c,g,$,T,M,L,F)=>(r._OrtRun=ne.Ka)(u,c,g,$,T,M,L,F),r._OrtEndProfiling=u=>(r._OrtEndProfiling=ne.La)(u),r._JsepOutput=(u,c,g)=>(r._JsepOutput=ne.Ma)(u,c,g),r._JsepGetNodeName=u=>(r._JsepGetNodeName=ne.Na)(u);var vn=()=>(vn=ne.Oa)(),at=r._malloc=u=>(at=r._malloc=ne.Pa)(u),He=r._free=u=>(He=r._free=ne.Qa)(u),Nr=u=>(Nr=ne.Ra)(u),Kt=()=>(Kt=ne.Ta)(),Vr=u=>(Vr=ne.Ua)(u),Lr=u=>(Lr=ne.Va)(u),$n=u=>($n=ne.Xa)(u),fr=()=>(fr=ne.Ya)(),_n=u=>(_n=ne.Za)(u),Sn=()=>(Sn=ne._a)();r.___start_em_js=1387603,r.___stop_em_js=1387764;function ya(){var u=ne;u=Object.assign({},u);var c=$=>()=>$()>>>0,g=$=>T=>$(T)>>>0;return u.Oa=c(u.Oa),u.Pa=g(u.Pa),u.Ra=g(u.Ra),u.Ta=c(u.Ta),u.Va=g(u.Va),u}r.stackAlloc=Lr,r.stackSave=Kt,r.stackRestore=Vr,r.UTF8ToString=qe,r.stringToUTF8=(u,c,g)=>Vt(u,N,c,g),r.lengthBytesUTF8=yt;var mr;Te=function u(){mr||xn(),mr||(Te=u)};function xn(){if(!(0<pe)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var u=r.preRun.shift();Me.unshift(u)}for(;0<Me.length;)Me.shift()(r);if(!(0<pe||mr||(mr=!0,r.calledRun=!0,A))){for(;0<be.length;)be.shift()(r);for(a(r);0<ge.length;)ge.shift()(r)}}}return xn(),t.ready}})();typeof Gi=="object"&&typeof Ca=="object"?Ca.exports=Li:typeof define=="function"&&define.amd&&define([],()=>Li)});var Fi=hr(()=>{});var qi=hr(()=>{});var ji={};Zt(ji,{cpus:()=>pd});var pd,Ki=q(()=>{pd=void 0});var Qi=hr((Zi,Ia)=>{"use strict";var Yi=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return _e.buffer!=pe.buffer&&fe(),pe}function a(){return _e.buffer!=pe.buffer&&fe(),Ce}function n(){return _e.buffer!=pe.buffer&&fe(),Te}function o(){return _e.buffer!=pe.buffer&&fe(),Le}function s(){return _e.buffer!=pe.buffer&&fe(),H}function d(){return _e.buffer!=pe.buffer&&fe(),re}var i=t,p,h;i.ready=new Promise((l,f)=>{p=l,h=f}),i.jsepInit=(l,f,w,I,P,W,G,le)=>{i.Qb=l,i.wb=f,i.yb=w,i.jb=I,i.xb=P,i.Ea=W,i.zb=G,i.Ab=le,f=(ie,ae,ue)=>(...Ie)=>{let Oe=He,B=ae?.();Ie=ie(...Ie);let ce=ae?.();return B!==ce&&(ie=ce,ue(B),ae=ue=null),He!=Oe?Sn():Ie},w=ie=>async(...ae)=>{try{if(i.bb)throw Error("Session already started");let ue=i.bb={Fb:ae[0],errors:[]},Ie=await ie(...ae);if(i.bb!==ue)throw Error("Session mismatch");l.flush();let Oe=ue.errors;if(0<Oe.length){let B=await Promise.all(Oe);if(B=B.filter(ce=>ce),0<B.length)throw Error(B.join(`
`))}return Ie}finally{i.bb=null}},i._OrtRun=w(f(i._OrtRun,()=>i._OrtRun,ie=>i._OrtRun=ie)),i._OrtRunWithBinding=w(f(i._OrtRunWithBinding,()=>i._OrtRunWithBinding,ie=>i._OrtRunWithBinding=ie)),i._OrtBindInput=f(i._OrtBindInput,()=>i._OrtBindInput,ie=>i._OrtBindInput=ie),i.jsepRegisterBuffer=(ie,ae,ue,Ie)=>l.registerBuffer(ie,ae,ue,Ie),i.jsepUnregisterBuffers=ie=>{l.unregisterBuffers(ie)},i.jsepGetBuffer=ie=>l.getBuffer(ie),i.jsepCreateDownloader=(ie,ae,ue)=>l.createDownloader(ie,ae,ue)};var m=Object.assign({},i),y="./this.program",v=(l,f)=>{throw f},b=typeof window=="object",_=typeof importScripts=="function",C=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",x=i.ENVIRONMENT_IS_PTHREAD||!1,S="";function E(l){return i.locateFile?i.locateFile(l,S):S+l}var A,R,z;if(C){var N=(Mn(),Bt(Bn)),K=(xa(),Bt(Sa));S=_?K.dirname(S)+"/":__dirname+"/",A=(f,w)=>(f=f.startsWith("file://")?new URL(f):K.normalize(f),N.readFileSync(f,w?void 0:"utf8")),z=f=>(f=A(f,!0),f.buffer||(f=new Uint8Array(f)),f),R=(f,w,I,P=!0)=>{f=f.startsWith("file://")?new URL(f):K.normalize(f),N.readFile(f,P?void 0:"utf8",(W,G)=>{W?I(W):w(P?G.buffer:G)})},!i.thisProgram&&1<process.argv.length&&(y=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),v=(f,w)=>{throw process.exitCode=f,w},i.inspect=()=>"[Emscripten Module object]";let l;try{l=Fi()}catch(f){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),f}global.Worker=l.Worker}else(b||_)&&(_?S=self.location.href:typeof document<"u"&&document.currentScript&&(S=document.currentScript.src),typeof e<"u"&&e&&(S=e),S.indexOf("blob:")!==0?S=S.substr(0,S.replace(/[?#].*/,"").lastIndexOf("/")+1):S="",C||(A=l=>{var f=new XMLHttpRequest;return f.open("GET",l,!1),f.send(null),f.responseText},_&&(z=l=>{var f=new XMLHttpRequest;return f.open("GET",l,!1),f.responseType="arraybuffer",f.send(null),new Uint8Array(f.response)}),R=(l,f,w)=>{var I=new XMLHttpRequest;I.open("GET",l,!0),I.responseType="arraybuffer",I.onload=()=>{I.status==200||I.status==0&&I.response?f(I.response):w()},I.onerror=w,I.send(null)}));C&&typeof performance>"u"&&(global.performance=qi().performance);var oe=console.log.bind(console),k=console.error.bind(console);C&&(oe=(...l)=>N.writeSync(1,l.join(" ")+`
`),k=(...l)=>N.writeSync(2,l.join(" ")+`
`));var J=i.print||oe,$e=i.printErr||k;Object.assign(i,m),m=null,i.thisProgram&&(y=i.thisProgram),i.quit&&(v=i.quit);var Re;i.wasmBinary&&(Re=i.wasmBinary);var Be=i.noExitRuntime||!0;typeof WebAssembly!="object"&&gt("no native wasm support detected");var _e,V,Me,be=!1,ge,pe,Ce,Te,Le,H,re;function fe(){var l=_e.buffer;i.HEAP8=pe=new Int8Array(l),i.HEAP16=new Int16Array(l),i.HEAP32=Te=new Int32Array(l),i.HEAPU8=Ce=new Uint8Array(l),i.HEAPU16=new Uint16Array(l),i.HEAPU32=Le=new Uint32Array(l),i.HEAPF32=H=new Float32Array(l),i.HEAPF64=re=new Float64Array(l)}var et=i.INITIAL_MEMORY||16777216;if(5242880<=et||gt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+et+"! (STACK_SIZE=5242880)"),x)_e=i.wasmMemory;else if(i.wasmMemory)_e=i.wasmMemory;else if(_e=new WebAssembly.Memory({initial:et/65536,maximum:65536,shared:!0}),!(_e.buffer instanceof SharedArrayBuffer))throw $e("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),C&&$e("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");fe(),et=_e.buffer.byteLength;var Ke=[],lt=[],Mt=[],Fe=0;function Ge(){return Be||0<Fe}var rt=0,zt=null,$t=null;function en(){rt++,i.monitorRunDependencies&&i.monitorRunDependencies(rt)}function $r(){if(rt--,i.monitorRunDependencies&&i.monitorRunDependencies(rt),rt==0&&(zt!==null&&(clearInterval(zt),zt=null),$t)){var l=$t;$t=null,l()}}function gt(l){throw i.onAbort&&i.onAbort(l),l="Aborted("+l+")",$e(l),be=!0,ge=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),h(l),l}function qe(l){return l.startsWith("data:application/octet-stream;base64,")}var yt;yt="ort-wasm-simd-threaded.wasm",qe(yt)||(yt=E(yt));function Vt(l){if(l==yt&&Re)return new Uint8Array(Re);if(z)return z(l);throw"both async and sync fetching of the wasm failed"}function tn(l){if(!Re&&(b||_)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(f=>{if(!f.ok)throw"failed to load wasm binary file at '"+l+"'";return f.arrayBuffer()}).catch(()=>Vt(l));if(R)return new Promise((f,w)=>{R(l,I=>f(new Uint8Array(I)),w)})}return Promise.resolve().then(()=>Vt(l))}function _r(l,f,w){return tn(l).then(I=>WebAssembly.instantiate(I,f)).then(I=>I).then(w,I=>{$e("failed to asynchronously prepare wasm: "+I),gt(I)})}function dt(l,f){var w=yt;return Re||typeof WebAssembly.instantiateStreaming!="function"||qe(w)||w.startsWith("file://")||C||typeof fetch!="function"?_r(w,l,f):fetch(w,{credentials:"same-origin"}).then(I=>WebAssembly.instantiateStreaming(I,l).then(f,function(P){return $e("wasm streaming compile failed: "+P),$e("falling back to ArrayBuffer instantiation"),_r(w,l,f)}))}var _t,Lt={912252:l=>{i.Ea("Abs",l,void 0)},912303:l=>{i.Ea("Neg",l,void 0)},912354:l=>{i.Ea("Floor",l,void 0)},912407:l=>{i.Ea("Ceil",l,void 0)},912459:l=>{i.Ea("Reciprocal",l,void 0)},912517:l=>{i.Ea("Sqrt",l,void 0)},912569:l=>{i.Ea("Exp",l,void 0)},912620:l=>{i.Ea("Erf",l,void 0)},912671:l=>{i.Ea("Sigmoid",l,void 0)},912726:l=>{i.Ea("Log",l,void 0)},912777:l=>{i.Ea("Sin",l,void 0)},912828:l=>{i.Ea("Cos",l,void 0)},912879:l=>{i.Ea("Tan",l,void 0)},912930:l=>{i.Ea("Asin",l,void 0)},912982:l=>{i.Ea("Acos",l,void 0)},913034:l=>{i.Ea("Atan",l,void 0)},913086:l=>{i.Ea("Sinh",l,void 0)},913138:l=>{i.Ea("Cosh",l,void 0)},913190:l=>{i.Ea("Asinh",l,void 0)},913243:l=>{i.Ea("Acosh",l,void 0)},913296:l=>{i.Ea("Atanh",l,void 0)},913349:l=>{i.Ea("Tanh",l,void 0)},913401:l=>{i.Ea("Not",l,void 0)},913452:(l,f,w)=>{i.Ea("ClipV10",l,{min:f,max:w})},913524:l=>{i.Ea("Clip",l,void 0)},913576:(l,f)=>{i.Ea("Elu",l,{alpha:f})},913634:l=>{i.Ea("Relu",l,void 0)},913686:(l,f)=>{i.Ea("LeakyRelu",l,{alpha:f})},913750:(l,f)=>{i.Ea("ThresholdedRelu",l,{alpha:f})},913820:(l,f)=>{i.Ea("Cast",l,{to:f})},913878:l=>{i.Ea("Add",l,void 0)},913929:l=>{i.Ea("Sub",l,void 0)},913980:l=>{i.Ea("Mul",l,void 0)},914031:l=>{i.Ea("Div",l,void 0)},914082:l=>{i.Ea("Pow",l,void 0)},914133:l=>{i.Ea("Equal",l,void 0)},914186:l=>{i.Ea("Greater",l,void 0)},914241:l=>{i.Ea("GreaterOrEqual",l,void 0)},914303:l=>{i.Ea("Less",l,void 0)},914355:l=>{i.Ea("LessOrEqual",l,void 0)},914414:(l,f,w,I,P)=>{i.Ea("ReduceMean",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},914578:(l,f,w,I,P)=>{i.Ea("ReduceMax",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},914741:(l,f,w,I,P)=>{i.Ea("ReduceMin",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},914904:(l,f,w,I,P)=>{i.Ea("ReduceProd",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915068:(l,f,w,I,P)=>{i.Ea("ReduceSum",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915231:(l,f,w,I,P)=>{i.Ea("ReduceL1",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915393:(l,f,w,I,P)=>{i.Ea("ReduceL2",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915555:(l,f,w,I,P)=>{i.Ea("ReduceLogSum",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915721:(l,f,w,I,P)=>{i.Ea("ReduceSumSquare",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},915890:(l,f,w,I,P)=>{i.Ea("ReduceLogSumExp",l,{keepDims:!!f,noopWithEmptyAxes:!!w,axes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},916059:l=>{i.Ea("Where",l,void 0)},916112:(l,f,w)=>{i.Ea("Transpose",l,{perm:f?Array.from(n().subarray(w>>>0,w+f>>>0)):[]})},916225:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe,B,ce)=>{i.Ea("ConvTranspose",l,{format:ie?"NHWC":"NCHW",autoPad:f,dilations:[w],group:I,kernel_shape:[P],pads:[W,G],strides:[le],wIsConst:()=>!!r()[ae>>>0],outputPadding:ue?Array.from(n().subarray(Ie>>>0,Ie+ue>>>0)):[],outputShape:Oe?Array.from(n().subarray(B>>>0,B+Oe>>>0)):[],activation:ze(ce)})},916639:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe,B)=>{i.Ea("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:f,dilations:Array.from(n().subarray(w>>>0,w+2>>>0)),group:I,kernelShape:Array.from(n().subarray(P>>>0,P+2>>>0)),pads:Array.from(n().subarray(W>>>0,W+4>>>0)),strides:Array.from(n().subarray(G>>>0,G+2>>>0)),wIsConst:()=>!!r()[ie>>>0],outputPadding:0<ae?Array.from(n().subarray(ue>>>0,ue+ae>>>0)):[],outputShape:0<Ie?Array.from(n().subarray(Oe>>>0,Oe+Ie>>>0)):[],activation:ze(B)})},917196:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe,B,ce)=>{i.Ea("ConvTranspose",l,{format:ie?"NHWC":"NCHW",autoPad:f,dilations:[w],group:I,kernel_shape:[P],pads:[W,G],strides:[le],wIsConst:()=>!!r()[ae>>>0],outputPadding:ue?Array.from(n().subarray(Ie>>>0,Ie+ue>>>0)):[],outputShape:Oe?Array.from(n().subarray(B>>>0,B+Oe>>>0)):[],activation:ze(ce)})},917610:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe,B)=>{i.Ea("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:f,dilations:Array.from(n().subarray(w>>>0,w+2>>>0)),group:I,kernelShape:Array.from(n().subarray(P>>>0,P+2>>>0)),pads:Array.from(n().subarray(W>>>0,W+4>>>0)),strides:Array.from(n().subarray(G>>>0,G+2>>>0)),wIsConst:()=>!!r()[ie>>>0],outputPadding:0<ae?Array.from(n().subarray(ue>>>0,ue+ae>>>0)):[],outputShape:0<Ie?Array.from(n().subarray(Oe>>>0,Oe+Ie>>>0)):[],activation:ze(B)})},918167:(l,f)=>{i.Ea("GlobalAveragePool",l,{format:f?"NHWC":"NCHW"})},918258:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe,B,ce,Ee)=>{i.Ea("AveragePool",l,{format:Ee?"NHWC":"NCHW",auto_pad:f,ceil_mode:w,count_include_pad:I,storage_order:P,dilations:[W,G],kernel_shape:[le,ie],pads:[ae,ue,Ie,Oe],strides:[B,ce]})},918542:(l,f)=>{i.Ea("GlobalAveragePool",l,{format:f?"NHWC":"NCHW"})},918633:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe,B,ce,Ee)=>{i.Ea("AveragePool",l,{format:Ee?"NHWC":"NCHW",auto_pad:f,ceil_mode:w,count_include_pad:I,storage_order:P,dilations:[W,G],kernel_shape:[le,ie],pads:[ae,ue,Ie,Oe],strides:[B,ce]})},918917:(l,f)=>{i.Ea("GlobalMaxPool",l,{format:f?"NHWC":"NCHW"})},919004:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe,B,ce,Ee)=>{i.Ea("MaxPool",l,{format:Ee?"NHWC":"NCHW",auto_pad:f,ceil_mode:w,count_include_pad:I,storage_order:P,dilations:[W,G],kernel_shape:[le,ie],pads:[ae,ue,Ie,Oe],strides:[B,ce]})},919284:(l,f)=>{i.Ea("GlobalMaxPool",l,{format:f?"NHWC":"NCHW"})},919371:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe,B,ce,Ee)=>{i.Ea("MaxPool",l,{format:Ee?"NHWC":"NCHW",auto_pad:f,ceil_mode:w,count_include_pad:I,storage_order:P,dilations:[W,G],kernel_shape:[le,ie],pads:[ae,ue,Ie,Oe],strides:[B,ce]})},919651:(l,f,w,I,P)=>{i.Ea("Gemm",l,{alpha:f,beta:w,transA:I,transB:P})},919755:l=>{i.Ea("MatMul",l,void 0)},919809:(l,f,w,I)=>{i.Ea("ArgMax",l,{keepDims:!!f,selectLastIndex:!!w,axis:I})},919917:(l,f,w,I)=>{i.Ea("ArgMin",l,{keepDims:!!f,selectLastIndex:!!w,axis:I})},920025:(l,f)=>{i.Ea("Softmax",l,{axis:f})},920088:(l,f)=>{i.Ea("Concat",l,{axis:f})},920148:(l,f,w,I,P)=>{i.Ea("Split",l,{axis:f,numOutputs:w,splitSizes:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},920293:l=>{i.Ea("Expand",l,void 0)},920347:(l,f)=>{i.Ea("Gather",l,{axis:Number(f)})},920418:(l,f)=>{i.Ea("GatherElements",l,{axis:Number(f)})},920497:(l,f,w,I,P,W,G,le,ie,ae,ue)=>{i.Ea("Resize",l,{antialias:f,axes:w?Array.from(n().subarray(I>>>0,I+w>>>0)):[],coordinateTransformMode:ze(P),cubicCoeffA:W,excludeOutside:G,extrapolationValue:le,keepAspectRatioPolicy:ze(ie),mode:ze(ae),nearestMode:ze(ue)})},920848:(l,f,w,I,P,W,G)=>{i.Ea("Slice",l,{starts:f?Array.from(n().subarray(w>>>0,w+f>>>0)):[],ends:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[],axes:W?Array.from(n().subarray(G>>>0,G+W>>>0)):[]})},921079:l=>{i.Ea("Tile",l,void 0)},921131:(l,f,w)=>{i.Ea("LayerNormalization",l,{axis:Number(f),epsilon:Number(w)})},921238:(l,f,w)=>{i.Ea("InstanceNormalization",l,{epsilon:f,format:w?"NHWC":"NCHW"})},921352:(l,f,w)=>{i.Ea("InstanceNormalization",l,{epsilon:f,format:w?"NHWC":"NCHW"})},921466:l=>{i.Ea("Range",l,void 0)},921519:(l,f)=>{i.Ea("Einsum",l,{equation:ze(f)})},921600:(l,f,w,I,P)=>{i.Ea("Pad",l,{mode:f,value:w,pads:I?Array.from(n().subarray(P>>>0,P+I>>>0)):[]})},921732:l=>{i.Ea("Gelu",l,void 0)},921784:l=>{i.Ea("BiasAdd",l,void 0)},921839:l=>{i.Ea("BiasSplitGelu",l,void 0)},921900:(l,f)=>{i.Ea("SkipLayerNormalization",l,{epsilon:f})},921981:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe)=>{i.Ea("Conv",l,{format:ie?"NHWC":"NCHW",auto_pad:f,dilations:[w],group:I,kernel_shape:[P],pads:W?Array.from(n().subarray(G>>>0,G+W>>>0)):[],strides:[le],w_is_const:()=>!!r()[ae>>>0],activation:ze(ue),activation_params:Ie?Array.from(s().subarray(Oe>>>0,Oe+Ie>>>0)):[]})},922362:(l,f,w,I,P,W,G,le,ie,ae,ue,Ie,Oe,B,ce,Ee)=>{i.Ea("Conv",l,{format:Ie?"NHWC":"NCHW",auto_pad:f,dilations:[w,I],group:P,kernel_shape:[W,G],pads:le?Array.from(n().subarray(ie>>>0,ie+le>>>0)):[],strides:[ae,ue],w_is_const:()=>!!r()[Oe>>>0],activation:ze(B),activation_params:ce?Array.from(s().subarray(Ee>>>0,Ee+ce>>>0)):[]})},922764:l=>{i.zb(l)},922798:(l,f)=>i.Ab(l,f,i.bb.Fb,i.bb.errors),922910:l=>i.wb(l),922943:l=>i.yb(l),922975:(l,f,w)=>{i.jb(l,f,w,!0)},923014:(l,f,w)=>{i.jb(l,f,w)}};function rr(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}function pt(l){l.terminate(),l.onmessage=()=>{}}function rn(l){(l=te.Qa[l])||gt(),te.Eb(l)}function ft(l){var f=te.tb();if(!f)return 6;te.Ya.push(f),te.Qa[l.Xa]=f,f.Xa=l.Xa;var w={cmd:"run",start_routine:l.Gb,arg:l.rb,pthread_ptr:l.Xa};return C&&f.unref(),f.postMessage(w,l.Mb),0}var Sr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,xr=(l,f,w)=>{f>>>=0;var I=f+w;for(w=f;l[w]&&!(w>=I);)++w;if(16<w-f&&l.buffer&&Sr)return Sr.decode(l.buffer instanceof SharedArrayBuffer?l.slice(f,w):l.subarray(f,w));for(I="";f<w;){var P=l[f++];if(P&128){var W=l[f++]&63;if((P&224)==192)I+=String.fromCharCode((P&31)<<6|W);else{var G=l[f++]&63;P=(P&240)==224?(P&15)<<12|W<<6|G:(P&7)<<18|W<<12|G<<6|l[f++]&63,65536>P?I+=String.fromCharCode(P):(P-=65536,I+=String.fromCharCode(55296|P>>10,56320|P&1023))}}else I+=String.fromCharCode(P)}return I},ze=(l,f)=>(l>>>=0)?xr(a(),l,f):"";function nr(l){if(x)return Pe(1,1,l);ge=l,Ge()||(te.Hb(),i.onExit&&i.onExit(l),be=!0),v(l,new rr(l))}var Ye=l=>{if(ge=l,x)throw nn(l),"unwind";nr(l)},te={ab:[],Ya:[],mb:[],Qa:{},gb:function(){x?te.vb():te.ub()},ub:function(){Ke.unshift(()=>{en(),te.Bb(()=>$r())})},vb:function(){te.receiveObjectTransfer=te.Db,te.threadInitTLS=te.lb,te.setExitStatus=te.kb,Be=!1},kb:function(l){ge=l},Sb:["$terminateWorker"],Hb:function(){for(var l of te.Ya)pt(l);for(l of te.ab)pt(l);te.ab=[],te.Ya=[],te.Qa=[]},Eb:function(l){var f=l.Xa;delete te.Qa[f],te.ab.push(l),te.Ya.splice(te.Ya.indexOf(l),1),l.Xa=0,Q(f)},Db:function(){},lb:function(){te.mb.forEach(l=>l())},Cb:l=>new Promise(f=>{l.onmessage=W=>{W=W.data;var G=W.cmd;if(W.targetThread&&W.targetThread!=$()){var le=te.Qa[W.Rb];le?le.postMessage(W,W.transferList):$e('Internal error! Worker sent a message "'+G+'" to target pthread '+W.targetThread+", but that thread no longer exists!")}else G==="checkMailbox"?or():G==="spawnThread"?ft(W):G==="cleanupThread"?rn(W.thread):G==="killThread"?(W=W.thread,G=te.Qa[W],delete te.Qa[W],pt(G),Q(W),te.Ya.splice(te.Ya.indexOf(G),1),G.Xa=0):G==="cancelThread"?te.Qa[W.thread].postMessage({cmd:"cancel"}):G==="loaded"?(l.loaded=!0,f(l)):G==="alert"?alert("Thread "+W.threadId+": "+W.text):W.target==="setimmediate"?l.postMessage(W):G==="callHandler"?i[W.handler](...W.args):G&&$e("worker sent an unknown command "+G)},l.onerror=W=>{throw $e("worker sent an error! "+W.filename+":"+W.lineno+": "+W.message),W},C&&(l.on("message",function(W){l.onmessage({data:W})}),l.on("error",function(W){l.onerror(W)}));var w=[],I=["onExit","onAbort","print","printErr"],P;for(P of I)i.hasOwnProperty(P)&&w.push(P);l.postMessage({cmd:"load",handlers:w,urlOrBlob:i.mainScriptUrlOrBlob||e,wasmMemory:_e,wasmModule:Me})}),Bb:function(l){l()},qb:function(){var l=E("ort-wasm-simd-threaded.worker.js");l=new Worker(l),te.ab.push(l)},tb:function(){return te.ab.length==0&&(te.qb(),te.Cb(te.ab[0])),te.ab.pop()}};i.PThread=te;var Gt=l=>{for(;0<l.length;)l.shift()(i)};i.establishStackSpace=function(){var l=$(),f=n()[l+52>>2>>>0];l=n()[l+56>>2>>>0],me(f,f-l),ee(f)};function nn(l){if(x)return Pe(2,0,l);Ye(l)}i.invokeEntryPoint=function(l,f){l=Ze.apply(null,[l,f]),Ge()?te.kb(l):Y(l)};function ma(l){this.fb=l-24,this.pb=function(f){o()[this.fb+4>>2>>>0]=f},this.ob=function(f){o()[this.fb+8>>2>>>0]=f},this.gb=function(f,w){this.nb(),this.pb(f),this.ob(w)},this.nb=function(){o()[this.fb+16>>2>>>0]=0}}var Cr=0,ha=0;function an(l,f,w,I){return x?Pe(3,1,l,f,w,I):on(l,f,w,I)}function on(l,f,w,I){if(l>>>=0,f>>>=0,w>>>=0,I>>>=0,typeof SharedArrayBuffer>"u")return $e("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var P=[];return x&&P.length===0?an(l,f,w,I):(l={Gb:w,Xa:l,rb:I,Mb:P},x?(l.Ob="spawnThread",postMessage(l,P),0):ft(l))}function sn(l,f,w){return x?Pe(4,1,l,f,w):0}function un(l,f){if(x)return Pe(5,1,l,f)}var Ir=l=>{for(var f=0,w=0;w<l.length;++w){var I=l.charCodeAt(w);127>=I?f++:2047>=I?f+=2:55296<=I&&57343>=I?(f+=4,++w):f+=3}return f},ar=(l,f,w,I)=>{if(w>>>=0,!(0<I))return 0;var P=w;I=w+I-1;for(var W=0;W<l.length;++W){var G=l.charCodeAt(W);if(55296<=G&&57343>=G){var le=l.charCodeAt(++W);G=65536+((G&1023)<<10)|le&1023}if(127>=G){if(w>=I)break;f[w++>>>0]=G}else{if(2047>=G){if(w+1>=I)break;f[w++>>>0]=192|G>>6}else{if(65535>=G){if(w+2>=I)break;f[w++>>>0]=224|G>>12}else{if(w+3>=I)break;f[w++>>>0]=240|G>>18,f[w++>>>0]=128|G>>12&63}f[w++>>>0]=128|G>>6&63}f[w++>>>0]=128|G&63}}return f[w>>>0]=0,w-P},Tr=(l,f,w)=>ar(l,a(),f,w);function Ht(l,f){if(x)return Pe(6,1,l,f)}function ln(l,f,w){if(x)return Pe(7,1,l,f,w)}function bt(l,f,w){return x?Pe(8,1,l,f,w):0}function ct(l,f){if(x)return Pe(9,1,l,f)}function Ar(l,f,w){if(x)return Pe(10,1,l,f,w)}function Ft(l,f,w,I){if(x)return Pe(11,1,l,f,w,I)}function Er(l,f,w,I){if(x)return Pe(12,1,l,f,w,I)}function Or(l,f,w,I){if(x)return Pe(13,1,l,f,w,I)}function dn(l){if(x)return Pe(14,1,l)}function ir(l,f){if(x)return Pe(15,1,l,f)}function cn(l,f,w){if(x)return Pe(16,1,l,f,w)}var pn=l=>{if(!be)try{if(l(),!Ge())try{x?Y(ge):Ye(ge)}catch(f){f instanceof rr||f=="unwind"||v(1,f)}}catch(f){f instanceof rr||f=="unwind"||v(1,f)}};function kr(l){l>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),l>>2,l).value.then(or),l+=128,Atomics.store(n(),l>>2,1))}i.__emscripten_thread_mailbox_await=kr;function or(){var l=$();l&&(kr(l),pn(()=>se()))}i.checkMailbox=or;var Rt=l=>l%4===0&&(l%100!==0||l%400===0),qt=[0,31,60,91,121,152,182,213,244,274,305,335],fn=[0,31,59,90,120,151,181,212,243,273,304,334];function sr(l,f,w,I,P,W,G,le){return x?Pe(17,1,l,f,w,I,P,W,G,le):-52}function Pr(l,f,w,I,P,W,G){if(x)return Pe(18,1,l,f,w,I,P,W,G)}var mn=l=>{var f=Ir(l)+1,w=T(f);return w&&Tr(l,w,f),w},Rr=[],Br=(l,f)=>{Rr.length=0;var w;for(f>>=2;w=a()[l++>>>0];)f+=w!=105&f,Rr.push(w==105?n()[f>>>0]:d()[f++>>>1]),++f;return Rr},ga=l=>{var f=O();return l=l(),ee(f),l};function Pe(l,f){var w=arguments.length-2,I=arguments;return ga(()=>{for(var P=ye(8*w),W=P>>3,G=0;G<w;G++){var le=I[2+G];d()[W+G>>>0]=le}return F(l,w,P,f)})}var ur=[],lr={},Mr=()=>{if(!jt){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:y||"./this.program"},f;for(f in lr)lr[f]===void 0?delete l[f]:l[f]=lr[f];var w=[];for(f in l)w.push(`${f}=${l[f]}`);jt=w}return jt},jt;function zr(l,f){if(x)return Pe(19,1,l,f);l>>>=0,f>>>=0;var w=0;return Mr().forEach(function(I,P){var W=f+w;for(P=o()[l+4*P>>2>>>0]=W,W=0;W<I.length;++W)r()[P++>>0>>>0]=I.charCodeAt(W);r()[P>>0>>>0]=0,w+=I.length+1}),0}function dr(l,f){if(x)return Pe(20,1,l,f);l>>>=0,f>>>=0;var w=Mr();o()[l>>2>>>0]=w.length;var I=0;return w.forEach(function(P){I+=P.length+1}),o()[f>>2>>>0]=I,0}function Dr(l){return x?Pe(21,1,l):52}function cr(l,f,w,I){return x?Pe(22,1,l,f,w,I):52}function hn(l,f,w,I,P){return x?Pe(23,1,l,f,w,I,P):70}var gn=[null,[],[]];function Ur(l,f,w,I){if(x)return Pe(24,1,l,f,w,I);f>>>=0,w>>>=0,I>>>=0;for(var P=0,W=0;W<w;W++){var G=o()[f>>2>>>0],le=o()[f+4>>2>>>0];f+=8;for(var ie=0;ie<le;ie++){var ae=a()[G+ie>>>0],ue=gn[l];ae===0||ae===10?((l===1?J:$e)(xr(ue,0)),ue.length=0):ue.push(ae)}P+=le}return o()[I>>2>>>0]=P,0}var yn=[31,29,31,30,31,30,31,31,30,31,30,31],Wr=[31,28,31,30,31,30,31,31,30,31,30,31];function bn(l){var f=Array(Ir(l)+1);return ar(l,f,0,f.length),f}var pr=(l,f)=>{r().set(l,f>>>0)};function wn(l,f,w,I){function P(B,ce,Ee){for(B=typeof B=="number"?B.toString():B||"";B.length<ce;)B=Ee[0]+B;return B}function W(B,ce){return P(B,ce,"0")}function G(B,ce){function Ee(pi){return 0>pi?-1:0<pi?1:0}var Yt;return(Yt=Ee(B.getFullYear()-ce.getFullYear()))===0&&(Yt=Ee(B.getMonth()-ce.getMonth()))===0&&(Yt=Ee(B.getDate()-ce.getDate())),Yt}function le(B){switch(B.getDay()){case 0:return new Date(B.getFullYear()-1,11,29);case 1:return B;case 2:return new Date(B.getFullYear(),0,3);case 3:return new Date(B.getFullYear(),0,2);case 4:return new Date(B.getFullYear(),0,1);case 5:return new Date(B.getFullYear()-1,11,31);case 6:return new Date(B.getFullYear()-1,11,30)}}function ie(B){var ce=B.Za;for(B=new Date(new Date(B.$a+1900,0,1).getTime());0<ce;){var Ee=B.getMonth(),Yt=(Rt(B.getFullYear())?yn:Wr)[Ee];if(ce>Yt-B.getDate())ce-=Yt-B.getDate()+1,B.setDate(1),11>Ee?B.setMonth(Ee+1):(B.setMonth(0),B.setFullYear(B.getFullYear()+1));else{B.setDate(B.getDate()+ce);break}}return Ee=new Date(B.getFullYear()+1,0,4),ce=le(new Date(B.getFullYear(),0,4)),Ee=le(Ee),0>=G(ce,B)?0>=G(Ee,B)?B.getFullYear()+1:B.getFullYear():B.getFullYear()-1}l>>>=0,f>>>=0,w>>>=0,I>>>=0;var ae=n()[I+40>>2>>>0];I={Kb:n()[I>>2>>>0],Jb:n()[I+4>>2>>>0],cb:n()[I+8>>2>>>0],ib:n()[I+12>>2>>>0],eb:n()[I+16>>2>>>0],$a:n()[I+20>>2>>>0],Wa:n()[I+24>>2>>>0],Za:n()[I+28>>2>>>0],Tb:n()[I+32>>2>>>0],Ib:n()[I+36>>2>>>0],Lb:ae?ze(ae):""},w=ze(w),ae={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ue in ae)w=w.replace(new RegExp(ue,"g"),ae[ue]);var Ie="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Oe="January February March April May June July August September October November December".split(" ");ae={"%a":B=>Ie[B.Wa].substring(0,3),"%A":B=>Ie[B.Wa],"%b":B=>Oe[B.eb].substring(0,3),"%B":B=>Oe[B.eb],"%C":B=>W((B.$a+1900)/100|0,2),"%d":B=>W(B.ib,2),"%e":B=>P(B.ib,2," "),"%g":B=>ie(B).toString().substring(2),"%G":B=>ie(B),"%H":B=>W(B.cb,2),"%I":B=>(B=B.cb,B==0?B=12:12<B&&(B-=12),W(B,2)),"%j":B=>{for(var ce=0,Ee=0;Ee<=B.eb-1;ce+=(Rt(B.$a+1900)?yn:Wr)[Ee++]);return W(B.ib+ce,3)},"%m":B=>W(B.eb+1,2),"%M":B=>W(B.Jb,2),"%n":()=>`
`,"%p":B=>0<=B.cb&&12>B.cb?"AM":"PM","%S":B=>W(B.Kb,2),"%t":()=>"	","%u":B=>B.Wa||7,"%U":B=>W(Math.floor((B.Za+7-B.Wa)/7),2),"%V":B=>{var ce=Math.floor((B.Za+7-(B.Wa+6)%7)/7);if(2>=(B.Wa+371-B.Za-2)%7&&ce++,ce)ce==53&&(Ee=(B.Wa+371-B.Za)%7,Ee==4||Ee==3&&Rt(B.$a)||(ce=1));else{ce=52;var Ee=(B.Wa+7-B.Za-1)%7;(Ee==4||Ee==5&&Rt(B.$a%400-1))&&ce++}return W(ce,2)},"%w":B=>B.Wa,"%W":B=>W(Math.floor((B.Za+7-(B.Wa+6)%7)/7),2),"%y":B=>(B.$a+1900).toString().substring(2),"%Y":B=>B.$a+1900,"%z":B=>{B=B.Ib;var ce=0<=B;return B=Math.abs(B)/60,(ce?"+":"-")+("0000"+(B/60*100+B%60)).slice(-4)},"%Z":B=>B.Lb,"%%":()=>"%"},w=w.replace(/%%/g,"\0\0");for(ue in ae)w.includes(ue)&&(w=w.replace(new RegExp(ue,"g"),ae[ue](I)));return w=w.replace(/\0\0/g,"%"),ue=bn(w),ue.length>f?0:(pr(ue,l),ue.length-1)}function ne(l){try{l()}catch(f){gt(f)}}function vn(l){var f={},w;for(w in l)(function(I){var P=l[I];f[I]=typeof P=="function"?function(){Kt.push(I);try{return P.apply(null,arguments)}finally{be||(Kt.pop()===I||gt(),He&&at===1&&Kt.length===0&&(at=0,Fe+=1,ne(ui),typeof Fibers<"u"&&Fibers.Ub()))}}:P})(w);return f}var at=0,He=null,Nr=0,Kt=[],Vr={},Lr={},$n=0,fr=null,_n=[];function Sn(){return new Promise((l,f)=>{fr={resolve:l,reject:f}})}function ya(){var l=T(65548),f=l+12;o()[l>>2>>>0]=f,o()[l+4>>2>>>0]=f+65536,f=Kt[0];var w=Vr[f];return w===void 0&&(w=$n++,Vr[f]=w,Lr[w]=f),f=w,n()[l+8>>2>>>0]=f,l}function mr(){var l=n()[He+8>>2>>>0];return l=V[Lr[l]],--Fe,l()}function xn(l){if(!be){if(at===0){var f=!1,w=!1;l((I=0)=>{if(!be&&(Nr=I,f=!0,w)){at=2,ne(()=>li(He)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),I=!1;try{var P=mr()}catch(le){P=le,I=!0}var W=!1;if(!He){var G=fr;G&&(fr=null,(I?G.reject:G.resolve)(P),W=!0)}if(I&&!W)throw P}}),w=!0,f||(at=1,He=ya(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),ne(()=>St(He)))}else at===2?(at=0,ne(di),M(He),He=null,_n.forEach(I=>pn(I))):gt(`invalid state: ${at}`);return Nr}}function u(l){return xn(f=>{l().then(f)})}te.gb();var c=[null,nr,nn,an,sn,un,Ht,ln,bt,ct,Ar,Ft,Er,Or,dn,ir,cn,sr,Pr,zr,dr,Dr,cr,hn,Ur],g={r:function(l,f,w){return u(async()=>{await i.xb(l,f,w)})},b:function(l,f,w){throw l>>>=0,new ma(l).gb(f>>>0,w>>>0),Cr=l,ha++,Cr},O:function(l){L(l>>>0,!_,1,!b,131072,!1),te.lb()},l:function(l){l>>>=0,x?postMessage({cmd:"cleanupThread",thread:l}):rn(l)},I:on,i:sn,U:un,E:Ht,G:ln,V:bt,S:ct,K:Ar,R:Ft,p:Er,F:Or,C:dn,T:ir,D:cn,q:()=>!0,A:function(l,f){l>>>=0,l==f>>>0?setTimeout(()=>or()):x?postMessage({targetThread:l,cmd:"checkMailbox"}):(l=te.Qa[l])&&l.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:kr,X:function(l){C&&te.Qa[l>>>0].ref()},u:function(l,f,w){l=f+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*f:NaN,w>>>=0,l=new Date(1e3*l),n()[w>>2>>>0]=l.getUTCSeconds(),n()[w+4>>2>>>0]=l.getUTCMinutes(),n()[w+8>>2>>>0]=l.getUTCHours(),n()[w+12>>2>>>0]=l.getUTCDate(),n()[w+16>>2>>>0]=l.getUTCMonth(),n()[w+20>>2>>>0]=l.getUTCFullYear()-1900,n()[w+24>>2>>>0]=l.getUTCDay(),l=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[w+28>>2>>>0]=l},v:function(l,f,w){l=f+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*f:NaN,w>>>=0,l=new Date(1e3*l),n()[w>>2>>>0]=l.getSeconds(),n()[w+4>>2>>>0]=l.getMinutes(),n()[w+8>>2>>>0]=l.getHours(),n()[w+12>>2>>>0]=l.getDate(),n()[w+16>>2>>>0]=l.getMonth(),n()[w+20>>2>>>0]=l.getFullYear()-1900,n()[w+24>>2>>>0]=l.getDay(),f=(Rt(l.getFullYear())?qt:fn)[l.getMonth()]+l.getDate()-1|0,n()[w+28>>2>>>0]=f,n()[w+36>>2>>>0]=-(60*l.getTimezoneOffset()),f=new Date(l.getFullYear(),6,1).getTimezoneOffset();var I=new Date(l.getFullYear(),0,1).getTimezoneOffset();l=(f!=I&&l.getTimezoneOffset()==Math.min(I,f))|0,n()[w+32>>2>>>0]=l},w:function(l){l>>>=0;var f=new Date(n()[l+20>>2>>>0]+1900,n()[l+16>>2>>>0],n()[l+12>>2>>>0],n()[l+8>>2>>>0],n()[l+4>>2>>>0],n()[l>>2>>>0],0),w=n()[l+32>>2>>>0],I=f.getTimezoneOffset(),P=new Date(f.getFullYear(),6,1).getTimezoneOffset(),W=new Date(f.getFullYear(),0,1).getTimezoneOffset(),G=Math.min(W,P);return 0>w?n()[l+32>>2>>>0]=+(P!=W&&G==I):0<w!=(G==I)&&(P=Math.max(W,P),f.setTime(f.getTime()+6e4*((0<w?G:P)-I))),n()[l+24>>2>>>0]=f.getDay(),w=(Rt(f.getFullYear())?qt:fn)[f.getMonth()]+f.getDate()-1|0,n()[l+28>>2>>>0]=w,n()[l>>2>>>0]=f.getSeconds(),n()[l+4>>2>>>0]=f.getMinutes(),n()[l+8>>2>>>0]=f.getHours(),n()[l+12>>2>>>0]=f.getDate(),n()[l+16>>2>>>0]=f.getMonth(),n()[l+20>>2>>>0]=f.getYear(),l=f.getTime()/1e3,X((_t=l,1<=+Math.abs(_t)?0<_t?+Math.floor(_t/4294967296)>>>0:~~+Math.ceil((_t-+(~~_t>>>0))/4294967296)>>>0:0)),l>>>0},s:sr,t:Pr,z:function(l,f,w){function I(ae){return(ae=ae.toTimeString().match(/\(([A-Za-z ]+)\)$/))?ae[1]:"GMT"}l>>>=0,f>>>=0,w>>>=0;var P=new Date().getFullYear(),W=new Date(P,0,1),G=new Date(P,6,1);P=W.getTimezoneOffset();var le=G.getTimezoneOffset(),ie=Math.max(P,le);o()[l>>2>>>0]=60*ie,n()[f>>2>>>0]=+(P!=le),l=I(W),f=I(G),l=mn(l),f=mn(f),le<P?(o()[w>>2>>>0]=l,o()[w+4>>2>>>0]=f):(o()[w>>2>>>0]=f,o()[w+4>>2>>>0]=l)},d:()=>{gt("")},c:function(l,f,w){return l>>>=0,f=Br(f>>>0,w>>>0),Lt[l].apply(null,f)},k:function(l,f,w){return l>>>=0,f=Br(f>>>0,w>>>0),Lt[l].apply(null,f)},m:function(){},j:function(){return Date.now()},W:()=>{throw Fe+=1,"unwind"},B:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return C?(Ki(),Bt(ji)).cpus().length:navigator.hardwareConcurrency},L:function(l,f,w,I){for(te.Pb=f>>>0,ur.length=w,f=I>>>0>>3,I=0;I<w;I++)ur[I]=d()[f+I>>>0];return(0>l?Lt[-l-1]:c[l]).apply(null,ur)},y:function(l){l>>>=0;var f=a().length;if(l<=f||4294901760<l)return!1;for(var w=1;4>=w;w*=2){var I=f*(1+.2/w);I=Math.min(I,l+100663296);var P=Math;I=Math.max(l,I);e:{P=P.min.call(P,4294901760,I+(65536-I%65536)%65536)-_e.buffer.byteLength+65535>>>16;try{_e.grow(P),fe();var W=1;break e}catch{}W=void 0}if(W)return!0}return!1},P:zr,Q:dr,H:Ye,h:Dr,o:cr,x:hn,n:Ur,a:_e||i.wasmMemory,J:wn,e:function(l,f,w,I){return wn(l>>>0,f>>>0,w>>>0,I>>>0)}};(function(){function l(w,I){return w=w.exports,w=vn(w),V=w=nd(w),te.mb.push(V.Da),lt.unshift(V.Y),Me=I,$r(),w}var f={a:g};if(en(),i.instantiateWasm)try{return i.instantiateWasm(f,l)}catch(w){$e("Module.instantiateWasm callback failed with error: "+w),h(w)}return dt(f,function(w){l(w.instance,w.module)}).catch(h),{}})(),i._OrtInit=(l,f)=>(i._OrtInit=V.Z)(l,f),i._OrtGetLastError=(l,f)=>(i._OrtGetLastError=V._)(l,f),i._OrtCreateSessionOptions=(l,f,w,I,P,W,G,le,ie,ae)=>(i._OrtCreateSessionOptions=V.$)(l,f,w,I,P,W,G,le,ie,ae),i._OrtAppendExecutionProvider=(l,f)=>(i._OrtAppendExecutionProvider=V.aa)(l,f),i._OrtAddFreeDimensionOverride=(l,f,w)=>(i._OrtAddFreeDimensionOverride=V.ba)(l,f,w),i._OrtAddSessionConfigEntry=(l,f,w)=>(i._OrtAddSessionConfigEntry=V.ca)(l,f,w),i._OrtReleaseSessionOptions=l=>(i._OrtReleaseSessionOptions=V.da)(l),i._OrtCreateSession=(l,f,w)=>(i._OrtCreateSession=V.ea)(l,f,w),i._OrtReleaseSession=l=>(i._OrtReleaseSession=V.fa)(l),i._OrtGetInputOutputCount=(l,f,w)=>(i._OrtGetInputOutputCount=V.ga)(l,f,w),i._OrtGetInputName=(l,f)=>(i._OrtGetInputName=V.ha)(l,f),i._OrtGetOutputName=(l,f)=>(i._OrtGetOutputName=V.ia)(l,f),i._OrtFree=l=>(i._OrtFree=V.ja)(l),i._OrtCreateTensor=(l,f,w,I,P,W)=>(i._OrtCreateTensor=V.ka)(l,f,w,I,P,W),i._OrtGetTensorData=(l,f,w,I,P)=>(i._OrtGetTensorData=V.la)(l,f,w,I,P),i._OrtReleaseTensor=l=>(i._OrtReleaseTensor=V.ma)(l),i._OrtCreateRunOptions=(l,f,w,I)=>(i._OrtCreateRunOptions=V.na)(l,f,w,I),i._OrtAddRunConfigEntry=(l,f,w)=>(i._OrtAddRunConfigEntry=V.oa)(l,f,w),i._OrtReleaseRunOptions=l=>(i._OrtReleaseRunOptions=V.pa)(l),i._OrtCreateBinding=l=>(i._OrtCreateBinding=V.qa)(l),i._OrtBindInput=(l,f,w)=>(i._OrtBindInput=V.ra)(l,f,w),i._OrtBindOutput=(l,f,w,I)=>(i._OrtBindOutput=V.sa)(l,f,w,I),i._OrtClearBoundOutputs=l=>(i._OrtClearBoundOutputs=V.ta)(l),i._OrtReleaseBinding=l=>(i._OrtReleaseBinding=V.ua)(l),i._OrtRunWithBinding=(l,f,w,I,P)=>(i._OrtRunWithBinding=V.va)(l,f,w,I,P),i._OrtRun=(l,f,w,I,P,W,G,le)=>(i._OrtRun=V.wa)(l,f,w,I,P,W,G,le),i._OrtEndProfiling=l=>(i._OrtEndProfiling=V.xa)(l),i._JsepOutput=(l,f,w)=>(i._JsepOutput=V.ya)(l,f,w),i._JsepGetNodeName=l=>(i._JsepGetNodeName=V.za)(l);var $=i._pthread_self=()=>($=i._pthread_self=V.Aa)(),T=i._malloc=l=>(T=i._malloc=V.Ba)(l),M=i._free=l=>(M=i._free=V.Ca)(l);i.__emscripten_tls_init=()=>(i.__emscripten_tls_init=V.Da)();var L=i.__emscripten_thread_init=(l,f,w,I,P,W)=>(L=i.__emscripten_thread_init=V.Fa)(l,f,w,I,P,W);i.__emscripten_thread_crashed=()=>(i.__emscripten_thread_crashed=V.Ga)();var F=(l,f,w,I)=>(F=V.Ha)(l,f,w,I),Q=l=>(Q=V.Ia)(l),Y=i.__emscripten_thread_exit=l=>(Y=i.__emscripten_thread_exit=V.Ja)(l),se=i.__emscripten_check_mailbox=()=>(se=i.__emscripten_check_mailbox=V.Ka)(),X=l=>(X=V.La)(l),me=(l,f)=>(me=V.Ma)(l,f),O=()=>(O=V.Na)(),ee=l=>(ee=V.Oa)(l),ye=l=>(ye=V.Pa)(l),Ze=i.dynCall_ii=(l,f)=>(Ze=i.dynCall_ii=V.Ra)(l,f),St=l=>(St=V.Sa)(l),ui=()=>(ui=V.Ta)(),li=l=>(li=V.Ua)(l),di=()=>(di=V.Va)();i.___start_em_js=923047,i.___stop_em_js=923208;function nd(l){l=Object.assign({},l);var f=I=>()=>I()>>>0,w=I=>P=>I(P)>>>0;return l.__errno_location=f(l.__errno_location),l.pthread_self=f(l.pthread_self),l.malloc=w(l.malloc),l.stackSave=f(l.stackSave),l.stackAlloc=w(l.stackAlloc),l}i.keepRuntimeAlive=Ge,i.wasmMemory=_e,i.stackAlloc=ye,i.stackSave=O,i.stackRestore=ee,i.UTF8ToString=ze,i.stringToUTF8=Tr,i.lengthBytesUTF8=Ir,i.ExitStatus=rr,i.PThread=te;var Cn;$t=function l(){Cn||ci(),Cn||($t=l)};function ci(){function l(){if(!Cn&&(Cn=!0,i.calledRun=!0,!be)&&(x||Gt(lt),p(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!x)){if(i.postRun)for(typeof i.postRun=="function"&&(i.postRun=[i.postRun]);i.postRun.length;){var f=i.postRun.shift();Mt.unshift(f)}Gt(Mt)}}if(!(0<rt))if(x)p(i),x||Gt(lt),startWorker(i);else{if(i.preRun)for(typeof i.preRun=="function"&&(i.preRun=[i.preRun]);i.preRun.length;)Ke.unshift(i.preRun.shift());Gt(Ke),0<rt||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),l()},1)):l())}}if(i.preInit)for(typeof i.preInit=="function"&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return ci(),t.ready}})();typeof Zi=="object"&&typeof Ia=="object"?Ia.exports=Yi:typeof define=="function"&&define.amd&&define([],()=>Yi)});var Xi=hr((om,fd)=>{fd.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\n'});var eo,md,Ta,Aa,zn,Ji,hd,gd,yd,to,Ve,gr=q(()=>{"use strict";eo=Hi();md=Qi(),Aa=!1,zn=!1,Ji=!1,hd=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},gd=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},yd=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",to=async e=>{if(Aa)return Promise.resolve();if(zn)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Ji)throw new Error("previous call to 'initializeWebAssembly()' failed.");zn=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=hd(r),o=a&&gd(),s=e.wasmPaths,d=typeof s=="string"?s:void 0,i=yd(o,n),p=typeof s=="object"?s[i]:void 0,h=!1,m=[];if(t>0&&m.push(new Promise(y=>{setTimeout(()=>{h=!0,y()},t)})),m.push(new Promise((y,v)=>{let b=n?md:eo,_={locateFile:(C,x)=>{if(n&&C.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Xi()],{type:"text/javascript"}));if(C.endsWith(".wasm")){if(p)return p;let S=d??x;return i==="ort-wasm-simd.wasm"?S+"ort-wasm-simd.jsep.wasm":i==="ort-wasm-simd-threaded.wasm"?S+"ort-wasm-simd-threaded.jsep.wasm":S+i}return x+C}};if(n)if(_.numThreads=r,typeof Blob>"u")_.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let C=`var ortWasmThreaded=${b.toString()};`;_.mainScriptUrlOrBlob=new Blob([C],{type:"text/javascript"})}b(_).then(C=>{zn=!1,Aa=!0,Ta=C,y()},C=>{zn=!1,Ji=!0,v(C)})})),await Promise.race(m),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Ve=()=>{if(Aa&&Ta)return Ta;throw new Error("WebAssembly is not initialized yet.")}});var Ne,Fr,De,Dn=q(()=>{"use strict";gr();Ne=(e,t)=>{let r=Ve(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},Fr=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,o])=>{let s=t?t+n:n;if(typeof o=="object")Fr(o,s+".",r,a);else if(typeof o=="string"||typeof o=="number")a(s,o.toString());else if(typeof o=="boolean")a(s,o?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof o}`)})},De=e=>{let t=Ve(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],o=t.HEAPU32[a/4+1],s=o?t.UTF8ToString(o):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${s}`)}finally{t.stackRestore(r)}}});var ro,no=q(()=>{"use strict";gr();Dn();ro=e=>{let t=Ve(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let o=0;return e?.tag!==void 0&&(o=Ne(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,o),r===0&&De("Can't create run options."),e?.extra!==void 0&&Fr(e.extra,"",new WeakSet,(s,d)=>{let i=Ne(s,a),p=Ne(d,a);t._OrtAddRunConfigEntry(r,i,p)!==0&&De(`Can't set a run config entry: ${s} - ${d}.`)}),[r,a]}catch(o){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(s=>t._free(s)),o}}});var bd,wd,vd,$d,ao,io=q(()=>{"use strict";gr();Dn();bd=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},wd=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},vd=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},$d=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"webnn":if(n="WEBNN",typeof a!="string"){let s=a;if(s?.deviceType){let d=Ne("deviceType",r),i=Ne(s.deviceType,r);Ve()._OrtAddSessionConfigEntry(e,d,i)!==0&&De(`Can't set a session config entry: 'deviceType' - ${s.deviceType}.`)}if(s?.numThreads){let d=s.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let i=Ne("numThreads",r),p=Ne(d.toString(),r);Ve()._OrtAddSessionConfigEntry(e,i,p)!==0&&De(`Can't set a session config entry: 'numThreads' - ${s.numThreads}.`)}if(s?.powerPreference){let d=Ne("powerPreference",r),i=Ne(s.powerPreference,r);Ve()._OrtAddSessionConfigEntry(e,d,i)!==0&&De(`Can't set a session config entry: 'powerPreference' - ${s.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let s=a;if(s?.preferredLayout){if(s.preferredLayout!=="NCHW"&&s.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${s.preferredLayout}`);let d=Ne("preferredLayout",r),i=Ne(s.preferredLayout,r);Ve()._OrtAddSessionConfigEntry(e,d,i)!==0&&De(`Can't set a session config entry: 'preferredLayout' - ${s.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let o=Ne(n,r);Ve()._OrtAppendExecutionProvider(e,o)!==0&&De(`Can't append execution provider: ${n}.`)}},ao=e=>{let t=Ve(),r=0,a=[],n=e||{};vd(n);try{let o=bd(n.graphOptimizationLevel??"all"),s=wd(n.executionMode??"sequential"),d=typeof n.logId=="string"?Ne(n.logId,a):0,i=n.logSeverityLevel??2;if(!Number.isInteger(i)||i<0||i>4)throw new Error(`log serverity level is not valid: ${i}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?Ne(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(o,!!n.enableCpuMemArena,!!n.enableMemPattern,s,!!n.enableProfiling,0,d,i,p,h),r===0&&De("Can't create session options."),n.executionProviders&&$d(r,n.executionProviders,a),n.enableGraphCapture!==void 0){if(typeof n.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${n.enableGraphCapture}`);let m=Ne("enableGraphCapture",a),y=Ne(n.enableGraphCapture.toString(),a);t._OrtAddSessionConfigEntry(r,m,y)!==0&&De(`Can't set a session config entry: 'enableGraphCapture' - ${n.enableGraphCapture}.`)}if(n.freeDimensionOverrides)for(let[m,y]of Object.entries(n.freeDimensionOverrides)){if(typeof m!="string")throw new Error(`free dimension override name must be a string: ${m}`);if(typeof y!="number"||!Number.isInteger(y)||y<0)throw new Error(`free dimension override value must be a non-negative integer: ${y}`);let v=Ne(m,a);t._OrtAddFreeDimensionOverride(r,v,y)!==0&&De(`Can't set a free dimension override: ${m} - ${y}.`)}return n.extra!==void 0&&Fr(n.extra,"",new WeakSet,(m,y)=>{let v=Ne(m,a),b=Ne(y,a);t._OrtAddSessionConfigEntry(r,v,b)!==0&&De(`Can't set a session config entry: ${m} - ${y}.`)}),[r,a]}catch(o){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(s=>t._free(s)),o}}});var Ea,Ut,qr,Un,jr,Wn,Oa,he=q(()=>{"use strict";Ea=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Ut=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},qr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Un=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},jr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Wn=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Oa=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Kr,ka=q(()=>{"use strict";Kr=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),a=[];for await(let n of r)a.push(n);return new Uint8Array(Buffer.concat(a))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),a=r?parseInt(r,10):0;if(a<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n=t.body.getReader(),o;try{o=new ArrayBuffer(a)}catch(d){if(d instanceof RangeError){let i=Math.ceil(a/65536);o=new WebAssembly.Memory({initial:i,maximum:i}).buffer}else throw d}let s=0;for(;;){let{done:d,value:i}=await n.read();if(d)break;let p=i.byteLength;new Uint8Array(o,s,p).set(i),s+=p}return new Uint8Array(o,0,a)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}});var _d,Sd,oo,so,uo,xd,Ue,Wt=q(()=>{"use strict";he();_d=["V","I","W","E","F"],Sd=(e,t)=>{console.log(`[${_d[e]},${new Date().toISOString()}]${t}`)},uo=(e,t)=>{oo=e,so=t},xd=(e,t)=>{let r=jr(e),a=jr(oo);r>=a&&Sd(r,typeof t=="function"?t():t)},Ue=(...e)=>{so&&xd(...e)}});var lo,co=q(()=>{"use strict";he();lo=(e,t)=>new(Un(t))(e)});var Nn=q(()=>{"use strict"});var Vn,Cd,po,Ra,Pa,mo,ho=q(()=>{"use strict";Wt();Nn();Vn=e=>Math.ceil(e/256)*256,Cd=1,po=()=>Cd++,Ra=async(e,t,r,a)=>{let n=Vn(r),o=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let s=e.getCommandEncoder();e.endComputePass(),s.copyBufferToBuffer(t,0,o,0,n),e.flush(),await o.mapAsync(GPUMapMode.READ);let d=o.getMappedRange();if(a){let i=a();return i.set(new Uint8Array(d,0,r)),i}else return new Uint8Array(d.slice(0,r))}finally{o.destroy()}},Pa=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,o=r.byteLength,s=Vn(o),d=this.storageCache.get(t);if(!d)return;if(d.originalSize!==o)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${o}`);let i=this.backend.device.createBuffer({mappedAtCreation:!0,size:s,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=i.getMappedRange();new Uint8Array(p).set(new Uint8Array(a,n,o)),i.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(i,0,d.gpuData.buffer,0,s),Ue("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(i)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let o=Vn(a.originalSize),s=this.backend.getCommandEncoder();this.backend.endComputePass(),s.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,o)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Ue("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`);this.externalBuffers.delete(a)}else n=po();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Ue("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Ue("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=Vn(t),n,o=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,s=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(o||s){let i=o?this.freeBuffers:this.freeUniformBuffers,p=i.get(a);p||(p=[],i.set(a,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let d={id:po(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Ue("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Ue("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);a&&await Ra(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}else{let t=this.capturedPendingBuffers.get(this.backend.currentSessionId);t||(t=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,t));for(let r of this.buffersPending)t.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(t){let r=this.capturedPendingBuffers.get(t);r&&(r.forEach(a=>{a.destroy()}),this.capturedPendingBuffers.delete(t))}},mo=(...e)=>new Pa(...e)});var Ba,Se,Je=q(()=>{"use strict";Ba=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},Se=e=>new Ba(e)});var Ma,xt,D,Jt,Ln,Gn,Hn,xe=q(()=>{"use strict";Ma=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},xt=class{static calcShape(t,r,a=!1){let n=t.length,o=r.length;if(n===0)return r;if(o===0)return t;let s=Math.max(t.length,r.length),d=new Array(s);if(a){if(n<2||o<2)return;let i=Ma.calcMatMulShape([t[n-2],t[n-1]],[r[o-2],r[o-1]]);if(i===void 0)return;[d[s-2],d[s-1]]=i}for(let i=a?3:1;i<=s;i++){let p=n-i<0?1:t[n-i],h=o-i<0?1:r[o-i];if(p!==h&&p>1&&h>1)return;d[s-i]=Math.max(p,h)}return d}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let o=1;o<=a;o++)if(t[a-o]!==1&&t[a-o]!==r[n-o])return!1;return!0}},D=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let a=t.length;if(a===0)return[];let n=new Array(a),o=a-1;for(;o>=0;){if(t[o]%r===0){n[o]=t[o]/r;break}if(r%t[o]!==0)throw new Error("cannot convert shape");n[o]=1,r/=t[o],o--}for(o--;o>=0;o--)n[o]=t[o];return n}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let o=r;o<a;o++){if(t[o]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[o]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,o)=>n+r[o]+r[o+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Jt=class e{static adjustPoolAttributes(t,r,a,n,o,s){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=a.length?a.push(r[d+2]):a[d]=r[d+2];for(let d=0;d<a.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<a.length;d++)if(d<o.length){if(o[d]<0)throw new Error("dilations should be greater than or equal to 1")}else o.push(1);for(let d=0;d<a.length*2;d++)if(d<s.length){if(s[d]<0)throw new Error("pad should be greater than or equal to 1")}else s.push(0);for(let d=0;d<a.length;d++){if(a[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(s[d]>=a[d]||s[d+a.length]>=a[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,o,s,d){if(d){if(o.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let i=0;i<t.length-2;i++)e.adjustPadAndReturnShape(t[i+(s?1:2)],r[i],a[i],n[i],o,i,i+t.length-2,d)}}static computePoolOutputShape(t,r,a,n,o,s,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let i=[r[0],r[1]];return e.computeShapeHelper(t,r,i,a,n,o,s,d),i}static computeConvOutputShape(t,r,a,n,o,s,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let i=[t[0],r[0]];return e.computeShapeHelper(!1,t,i,a,n,o,s,d),i}static computeShapeHelper(t,r,a,n,o,s,d,i){if(t)for(let p=0;p<r.length-2;p++)a.push(1);else for(let p=0;p<r.length-2;p++)a.push(e.adjustPadAndReturnShape(r[p+2],n[p],o[p],s[p],d,p,p+r.length-2,i))}static adjustPadAndReturnShape(t,r,a,n,o,s,d,i){let p=a*(n-1)+1;if(i&&i!=="NOTSET")switch(i){case"VALID":return o[s]=0,o[d]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let m=((t+r-1)/r-1)*r+n-t;return o[s]=Math.floor(i==="SAME_LOWER"?(m+1)/2:m/2),o[d]=m-o[s],Math.floor((t+m-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+o[s]+o[d]-p)/r+1)}},Ln=class{static getShapeOfGemmResult(t,r,a,n,o){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let s,d,i;r?(s=t[1],d=t[0]):(s=t[0],d=t[1]);let p=-1;if(n?(i=a[0],p=1):(i=a[1],p=0),a[p]!==d)throw new Error("dimension mismatch");if(s<=0||i<=0||d<=0)throw new Error("invalid shape specified");if(o&&!xt.isValidBroadcast(o,[s,i]))throw new Error("gemm: invalid bias shape for broadcast");return[s,i,d]}},Gn=-34028234663852886e22,Hn=34028234663852886e22});var Fn,Da,We,st,Z,je,tt,wt,ut,de,Ua,U,j,qn,za,go,yr,ve=q(()=>{"use strict";he();xe();Fn=64,Da=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},We=(e,t=1)=>{let r=Da(e,t);return typeof r=="string"?r:r[0]},st=(e,t=1)=>{let r=Da(e,t);return typeof r=="string"?r:r[1]},Z=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:D.computeStrides(r)})}),t},je=e=>e%4===0?4:e%2===0?2:1,tt=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,wt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,ut=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,de=(e,t,r,a)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?a==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:a==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Ua=(e,t,r,a,n)=>{let o=typeof r=="number",s=o?r:r.length,d=[...new Array(s).keys()],i=s<2?"u32":s<=4?`vec${s}<u32>`:`array<u32, ${s}>`,p=Da(t,n),h=typeof p=="string"?p:p[1],m=typeof p=="string"?p:p[0],y={indices:i,value:h,storage:m,tensor:t},v=H=>typeof H=="string"?H:`${H}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},_=o?"uniforms.":"",C=`${_}${e}_shape`,x=`${_}${e}_strides`,S="";for(let H=0;H<s-1;H++)S+=`
    let dim${H} = current / ${de(x,H,s)};
    let rest${H} = current % ${de(x,H,s)};
    indices[${H}] = dim${H};
    current = rest${H};
    `;S+=`indices[${s-1}] = current;`;let E=s<2?"":`
  fn o2i_${e}(offset: u32) -> ${y.indices} {
    var indices: ${y.indices};
    var current = offset;
    ${S}
    return indices;
  }`,A=H=>(b.offsetToIndices=!0,s<2?H:`o2i_${e}(${H})`),R=[];if(s>=2)for(let H=s-1;H>=0;H--)R.push(`${de(x,H,s)} * (indices[${H}])`);let z=s<2?"":`
  fn i2o_${e}(indices: ${y.indices}) -> u32 {
    return ${R.join("+")};
  }`,N=H=>(b.indicesToOffset=!0,s<2?H:`i2o_${e}(${H})`),K=(...H)=>s===0?"0u":`${y.indices}(${H.map(v).join(",")})`,oe=(H,re)=>s<2?`${H}`:`${de(H,re,s)}`,k=(H,re,fe)=>s<2?`${H}=${fe};`:`${de(H,re,s)}=${fe};`,J={},$e=(H,re)=>{b.broadcastedIndicesToOffset=!0;let fe=`${re.name}broadcastedIndicesTo${e}Offset`;if(fe in J)return`${fe}(${H})`;let et=[];for(let Ke=s-1;Ke>=0;Ke--){let lt=re.indicesGet("outputIndices",Ke+re.rank-s);et.push(`${oe(x,Ke)} * (${lt} % ${oe(C,Ke)})`)}return J[fe]=`fn ${fe}(outputIndices: ${re.type.indices}) -> u32 {
             return ${et.length>0?et.join("+"):"0u"};
           }`,`${fe}(${H})`},Re=(H,re)=>(()=>{if(y.storage===y.value)return`${e}[${H}]=${re};`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`${e}[${H}]=vec2<u32>(u32(${re}), select(0u, 0xFFFFFFFFu, ${re} < 0));`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`${e}[${H}]=vec2<u32>(u32(${re}), 0u);`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`${e}[${H}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${re}));`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),Be=H=>(()=>{if(y.storage===y.value)return`${e}[${H}]`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`i32(${e}[${H}].x)`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`u32(${e}[${H}].x)`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${H}] & 0xFFu), bool(${e}[${H}] & 0xFF00u), bool(${e}[${H}] & 0xFF0000u), bool(${e}[${H}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),_e=s<2?"":`
  fn get_${e}ByIndices(indices: ${y.indices}) -> ${h} {
    return ${Be(`i2o_${e}(indices)`)};
  }`,V=s<2?"":(()=>{let H=d.map(fe=>`d${fe}: u32`).join(", "),re=d.map(fe=>`d${fe}`).join(", ");return`
  fn get_${e}(${H}) -> ${h} {
    return get_${e}ByIndices(${K(re)});
  }`})(),Me=(...H)=>{if(H.length!==s)throw new Error(`indices length must be ${s}`);let re=H.map(v).join(",");return s===0?Be("0u"):s===1?Be(re[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${re})`)},be=H=>s<2?Be(H):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${H})`),ge=s<2?"":`
  fn set_${e}ByIndices(indices: ${y.indices}, value: ${h}) {
    ${Re(`i2o_${e}(indices)`,"value")}
  }`,pe=s<2?"":(()=>{let H=d.map(fe=>`d${fe}: u32`).join(", "),re=d.map(fe=>`d${fe}`).join(", ");return`
  fn set_${e}(${H}, value: ${h}) {
    set_${e}ByIndices(${K(re)}, value);
  }`})();return{impl:()=>{let H=[],re=!1;return b.offsetToIndices&&(H.push(E),re=!0),b.indicesToOffset&&(H.push(z),re=!0),b.broadcastedIndicesToOffset&&(Object.values(J).forEach(fe=>H.push(fe)),re=!0),b.set&&(H.push(pe),re=!0),b.setByIndices&&(H.push(ge),re=!0),b.get&&(H.push(V),re=!0),b.getByIndices&&(H.push(_e),re=!0),!o&&re&&H.unshift(`const ${C} = ${y.indices}(${r.join(",")});`,`const ${x} = ${y.indices}(${D.computeStrides(r).join(",")});`),H.join(`
`)},type:y,offsetToIndices:A,indicesToOffset:N,broadcastedIndicesToOffset:$e,indices:K,indicesGet:oe,indicesSet:k,set:(...H)=>{if(H.length!==s+1)throw new Error(`indices length must be ${s}`);let re=H[s];if(typeof re!="string")throw new Error("value must be string");let fe=H.slice(0,s).map(v).join(",");return s===0?Re("0u",re):s===1?Re(fe[0],re):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${fe}, ${re})`)},setByOffset:Re,setByIndices:(H,re)=>s<2?Re(H,re):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${H}, ${re});`),get:Me,getByOffset:Be,getByIndices:be,usage:a,name:e,strides:x,shape:C,rank:s}},U=(e,t,r,a=1)=>Ua(e,t,r,"input",a),j=(e,t,r,a=1)=>Ua(e,t,r,"output",a),qn=(e,t,r,a=1)=>Ua(e,t,r,"internal",a),za=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=Fn){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],o=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,s=o?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=o?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*a*n}u + local_idx;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${s}) {
    ${d}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,a=1){return this.uniforms.push({name:t,type:r,length:a}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a,length:n}of this.uniforms)if(n&&n>4)a==="f16"?t.push(`@align(16) ${r}:array<mat2x4<${a}>, ${Math.ceil(n/8)}>`):t.push(`${r}:array<vec4<${a}>, ${Math.ceil(n/4)}>`);else{let o=n==null||n===1?a:`vec${n}<${a}>`;t.push(`${r}:${o}`)}return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}},go=e=>new za(e),yr=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let o=r-1-n,s=e[o]||1;(t[t.length-1-n]||1)>1&&s===1&&a.unshift(o)}return a}});var Id,yo,Td,Ad,vt,bo,wo,br=q(()=>{"use strict";he();xe();Je();ve();Id=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},yo=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Td=(e,t)=>D.sortBasedOnPerm(e,yo(e.length,t)),Ad=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let o=0;o<t;++o)n.push(r.indicesSet("a",e[o],`i[${o}]`));return n.push("return a;}"),n.join(`
`)},vt=(e,t)=>{let r=e.dataType,a=e.dims.length,n=yo(a,t),o=Td(e.dims,n),s=j("output",r,o.length),d=U("a",r,a),i=p=>`
  ${p.registerUniform("output_size","u32").declareVariables(d,s)}

  ${Ad(n,a,d,s)}

  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${s.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${s.setByOffset("global_idx",d.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:p=>{let h=D.size(o);return{outputs:[{dims:o,dataType:p[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:[{type:12,data:h},...Z(p[0].dims,o)]}},getShaderSource:i}},bo=(e,t)=>{Id(e.inputs),e.compute(vt(e.inputs[0],t.perm))},wo=e=>Se({perm:e.perm})});var Ed,Od,kd,Pd,Rd,Bd,Md,zd,Dd,Ud,Ct,vo,$o,_o,So,xo,Co,Io,To,Ao,Eo,Oo=q(()=>{"use strict";he();xe();ve();jn();br();Ed={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Od={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},kd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Pd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Rd=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},Bd=(e,t)=>{let r=[],a=e.length;for(let o=0;o<a;o++)t.indexOf(o)===-1&&r.push(e[o]);let n=t.map(o=>e[o]);return[r,n]},Md=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let o=0;o<r;o++)t.indexOf(o)===-1?a.push(e[n++]):a.push(1);return a},zd=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Dd=(e,t)=>{let r=[];if(!zd(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},Ud=(e,t,r,a,n,o,s)=>{let d=r[0].dims,i=D.size(o),p=D.size(s),h=U("_A",r[0].dataType,d),m=j("output",n,o),y=32,v=`
          var<workgroup> aBestValues : array<${m.type.storage}, ${y}>;
       `;return{name:e,shaderCache:t,getShaderSource:_=>`
        ${_.registerUniform("reduceSize","u32").declareVariables(h,m)}
        ${v}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${_.mainStart(y)}

          let outputIndex = global_idx / ${y};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${m.type.storage}(${kd[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${y}) {
           let candidate = ${m.type.storage}(${h.getByOffset("offset + k")});
           bestValue = ${Ed[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${y}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Od[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${m.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${m.type.storage}(uniforms.reduceSize)`:`${Pd[a]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:o,dataType:n}],dispatchGroup:{x:i},programUniforms:[{type:12,data:p}]})}},Ct=(e,t,r,a)=>{let n=e.inputs.length===1?r:Wa(e.inputs,r),o=n.axes;o.length===0&&!n.noopWithEmptyAxes&&(o=e.inputs[0].dims.map((v,b)=>b));let s=D.normalizeAxes(o,e.inputs[0].dims.length),d=s,i=e.inputs[0],p=Dd(d,e.inputs[0].dims.length);p.length>0&&(i=e.compute(vt(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],d=Rd(d.length,i.dims.length));let[h,m]=Bd(i.dims,d),y=h;n.keepDims&&(y=Md(h,s)),e.compute(Ud(t,{hint:n.cacheKey,inputDependencies:["type"]},[i],a,e.inputs[0].dataType,y,m),{inputs:[i]})},vo=(e,t)=>{Ct(e,"ReduceMeanShared",t,"mean")},$o=(e,t)=>{Ct(e,"ReduceL1Shared",t,"l1")},_o=(e,t)=>{Ct(e,"ReduceL2Shared",t,"l2")},So=(e,t)=>{Ct(e,"ReduceLogSumExpShared",t,"logSumExp")},xo=(e,t)=>{Ct(e,"ReduceMaxShared",t,"max")},Co=(e,t)=>{Ct(e,"ReduceMinShared",t,"min")},Io=(e,t)=>{Ct(e,"ReduceProdShared",t,"prod")},To=(e,t)=>{Ct(e,"ReduceSumShared",t,"sum")},Ao=(e,t)=>{Ct(e,"ReduceSumSquareShared",t,"sumSquare")},Eo=(e,t)=>{Ct(e,"ReduceLogSumShared",t,"logSum")}});var It,Wd,Kn,Wa,Tt,Nd,Vd,Ld,Gd,Hd,Fd,qd,jd,Kd,Yd,At,ko,Po,Ro,Bo,Mo,zo,Do,Uo,Wo,No,jn=q(()=>{"use strict";he();xe();Je();ve();Oo();It=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Wd=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Kn=(e,t,r,a,n,o,s=!1,d=!1)=>{let i=[],p=r[0].dims,h=p.length,m=D.normalizeAxes(n,h),y=!d&&m.length===0;p.forEach((C,x)=>{y||m.indexOf(x)>=0?s&&i.push(1):i.push(C)});let v=i.length,b=D.size(i);return{name:e,shaderCache:t,getShaderSource:C=>{let x=[],S=U("_A",r[0].dataType,h),E=j("output",o,v),A=a(S,E,m),R=A[2];for(let z=0,N=0;z<h;z++)y||m.indexOf(z)>=0?(s&&N++,R=`for(var j${z}: u32 = 0; j${z} < ${p[z]}; j${z}++) {
                  ${A[2].includes("last_index")?`let last_index = j${z};`:""}
                  ${S.indicesSet("input_indices",z,`j${z}`)}
                  ${R}
                }`):(x.push(`${S.indicesSet("input_indices",z,E.indicesGet("output_indices",N))};`),N++);return`

        ${C.registerUniform("output_size","u32").declareVariables(S,E)}

        ${C.mainStart()}
          ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${S.type.indices};
          let output_indices = ${E.offsetToIndices("global_idx")};

          ${x.join(`
`)}
          ${A[0]}       // init ops for reduce max/min
          ${A[1]}
          ${R}
          ${A[3]}
          ${A.length===4?E.setByOffset("global_idx","value"):A.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:i,dataType:o}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:12,data:b},...Z(p,i)]})}},Wa=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),Se({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},Tt=(e,t,r,a)=>{let n=e.inputs,o=n.length===1?r:Wa(n,r);e.compute(Kn(t,{hint:o.cacheKey,inputDependencies:["rank"]},[n[0]],o.noopWithEmptyAxes&&o.axes.length===0?Wd:a,o.axes,n[0].dataType,o.keepDims,o.noopWithEmptyAxes),{inputs:[0]})},Nd=(e,t)=>{It(e.inputs),Tt(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,"value = log(value);"])},Vd=(e,t)=>{It(e.inputs),Tt(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByIndices("input_indices")});`,""])},Ld=(e,t)=>{It(e.inputs),Tt(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Gd=(e,t)=>{It(e.inputs),Tt(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByIndices("input_indices")});`,"value = log(value);"])},Hd=(e,t)=>{It(e.inputs),Tt(e,"ReduceMax",t,(a,n,o)=>{let s=[];for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&s.push(a.indicesSet("input_indices",d,0));return[`${s.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = max(value, ${a.getByIndices("input_indices")});`,""]})},Fd=(e,t)=>{It(e.inputs),Tt(e,"ReduceMean",t,(a,n,o)=>{let s=1;for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&(s*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${a.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${s});`]})},qd=(e,t)=>{It(e.inputs),Tt(e,"ReduceMin",t,(a,n,o)=>{let s=[];for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&s.push(`input_indices[${d}] = 0;`);return[`${s.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = min(value, ${a.getByIndices("input_indices")});`,""]})},jd=(e,t)=>{It(e.inputs),Tt(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByIndices("input_indices")};`,""])},Kd=(e,t)=>{It(e.inputs),Tt(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,""])},Yd=(e,t)=>{It(e.inputs),Tt(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += t * t;`,""])},At=(e,t,r)=>{if(t.length===0)return r;let a=1,n=1;for(let o=0;o<t.length;o++)t.indexOf(o)===-1?a*=e[o]:n*=e[o];return n<32&&a>1024},ko=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Fd(e,t):vo(e,t)},Po=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Vd(e,t):$o(e,t)},Ro=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ld(e,t):_o(e,t)},Bo=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Gd(e,t):So(e,t)},Mo=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Hd(e,t):xo(e,t)},zo=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?qd(e,t):Co(e,t)},Do=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?jd(e,t):Io(e,t)},Uo=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Kd(e,t):To(e,t)},Wo=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Yd(e,t):Ao(e,t)},No=(e,t)=>{At(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Nd(e,t):Eo(e,t)}});var Vo,Lo,Go,Na,Ho=q(()=>{"use strict";he();Je();jn();Vo=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Lo=(e,t)=>{Vo(e.inputs);let r=(a,n,o)=>{let s=[];for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&s.push(`input_indices[${d}] = 0;`);return[`${s.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Kn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Go=(e,t)=>{Vo(e.inputs);let r=(a,n,o)=>{let s=[];for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&s.push(`input_indices[${d}] = 0;`);return[`${s.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Kn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Na=e=>Se(e)});var Zd,Qd,Xd,Jd,Yn,ec,Fo,Va=q(()=>{"use strict";he();Nn();ve();Zd=(e,t)=>{let r=e[0],a=e[1],n=e[2],o=e[3],s=e[4],d=e[5];if(s&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let i=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(a.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(a.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==a.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let m=n.dims[0]/3,y=m,v=y;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let E of t.qkvHiddenSizes)if(E%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");m=t.qkvHiddenSizes[0],y=t.qkvHiddenSizes[1],v=t.qkvHiddenSizes[2]}let b=p;if(m!==y)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==m+y+v)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let _=0;if(s){if(y!==v)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(s.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(s.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(s.dims[1]!==i)throw new Error('Input "past" second dimension must be batch_size');if(s.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(s.dims[4]!==y/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(_=s.dims[3])}let C=b+_,x=-1,S=0;if(o)throw new Error("Mask not supported");if(s)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:i,sequenceLength:p,pastSequenceLength:_,kvSequenceLength:b,totalSequenceLength:C,maxSequenceLength:x,inputHiddenSize:h,hiddenSize:m,vHiddenSize:v,headSize:Math.floor(m/t.numHeads),vHeadSize:Math.floor(v/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:S,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Qd=(e,t,r,a)=>{let n=je(a),o=64,s=a/n;s<o?o=1:s/8<64&&(o=Math.ceil(s/8));let d=Math.ceil(a/n/o),i=[{type:t.dataType,data:1/a},{type:12,data:s},{type:12,data:d}],p=We(t.dataType,n),h=m=>{let y=j("x",t.dataType,t.dims,n),v="thread_max_vector";n===2?v="max(thread_max_vector.x, thread_max_vector.y)":n===4&&(v="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let b=st(t.dataType),_=[{name:"d_inv",type:b},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`
  var<workgroup> wgMax: array<f32, ${o}>;
  var<workgroup> wgSum: array<f32, ${o}>;
  ${m.registerUniforms(_).declareVariables(y)}
  ${m.mainStart([o,1,1])}
    let localOffset = local_idx * uniforms.elements_per_wg;
    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;

    var thread_max_vector = ${tt("f32",n,"-3.402823e+38f")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      thread_max_vector = max(${wt(b,n,"x[offset + i]")}, thread_max_vector);
    }
    wgMax[local_idx] = ${v};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${o}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${tt("f32",n,"0")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      sumVector += exp(${wt(b,n,"x[offset + i]")} - maxValue);
    }
    wgSum[local_idx] = ${ut("sumVector",n)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${o}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        x[offset + i] = ${tt(b,n,"uniforms.d_inv")};
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        let f32input = ${wt(b,n,"x[offset + i]")};
        x[offset + i] = ${y.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${o};${p};${n}`},getShaderSource:h,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:i})},{inputs:[t],outputs:[]})},Xd=(e,t,r,a,n,o)=>{let s=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],d=o.scale===0?1/Math.sqrt(n.headSize):o.scale,i=je(n.headSize),p=n.headSize/i,h=12,m={x:Math.ceil(n.totalSequenceLength/h),y:Math.ceil(n.sequenceLength/h),z:n.batchSize*n.numHeads},y=[{type:12,data:n.sequenceLength},{type:12,data:p},{type:12,data:n.totalSequenceLength},{type:12,data:n.kvSequenceLength},{type:t.dataType,data:d}],v=[t,r],b=C=>{let x=U("q",t.dataType,t.dims,i),S=U("key",r.dataType,r.dims,i),E=j("output",t.dataType,s),A=We(t.dataType),R=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:A}];return`
  const beta: ${A} = 1.0;
  const TILE_SIZE = ${h}u;

  var<workgroup> tileQ: array<${x.type.storage}, ${h*h}>;
  var<workgroup> tileK: array<${x.type.storage}, ${h*h}>;
  ${C.registerUniforms(R).declareVariables(x,S,E)}
  ${C.mainStart([h,h,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;

    var value = ${tt(A,i)};
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (lm < uniforms.M && ln < uniforms.N) {
      let outputIdx = headOffset + lm * uniforms.N + ln;
      output[outputIdx] = ${ut("value",i)} * uniforms.alpha;
    }
  }`},_=e.compute({name:"AttentionProbs",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType,gpuDataType:0}],dispatchGroup:m,programUniforms:y}),getShaderSource:b},{inputs:v,outputs:[-1]})[0];return Qd(e,_,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),_},Jd=(e,t,r,a)=>{let n=[a.batchSize,a.sequenceLength,a.vHiddenSize],o=12,s={x:Math.ceil(a.vHeadSize/o),y:Math.ceil(a.sequenceLength/o),z:a.batchSize*a.numHeads},d=[{type:12,data:a.sequenceLength},{type:12,data:a.totalSequenceLength},{type:12,data:a.vHeadSize},{type:12,data:a.numHeads},{type:12,data:a.vHiddenSize}],i=p=>{let h=U("probs",t.dataType,t.dims),m=U("v",r.dataType,r.dims),y=j("output",t.dataType,n),v=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`
  const TILE_SIZE = ${o}u;
  var<workgroup> tileQ: array<${h.type.value}, ${o*o}>;
  var<workgroup> tileK: array<${h.type.value}, ${o*o}>;
  ${p.registerUniforms(v).declareVariables(h,m,y)}
  ${p.mainStart([o,o,1])}
   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;

   var value = ${h.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
     if (m < uniforms.M && w + local_id.x < uniforms.K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < uniforms.N && w + local_id.y < uniforms.K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:s,programUniforms:d}),getShaderSource:i},{inputs:[t,r],outputs:[0]})[0]},Yn=(e,t,r,a,n,o,s,d,i,p,h)=>{let m=Xd(e,t,r,i,p,h);Jd(e,m,a,p)},ec=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],a=t.sequenceLength,n=t.inputHiddenSize,o=t.headSize,s=12,d={x:Math.ceil(t.headSize/s),y:Math.ceil(t.sequenceLength/s),z:t.batchSize*t.numHeads},i=[e.inputs[0],e.inputs[1],e.inputs[2]],p=[{type:12,data:a},{type:12,data:n},{type:12,data:o},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],h=m=>{let y=j("output_q",i[0].dataType,r),v=j("output_k",i[0].dataType,r),b=j("output_v",i[0].dataType,r),_=U("input",i[0].dataType,i[0].dims),C=U("weight",i[1].dataType,i[1].dims),x=U("bias",i[2].dataType,i[2].dims),S=_.type.storage,E=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${s}u;
  var<workgroup> tileInput: array<${S}, ${s*s}>;
  var<workgroup> tileWeightQ: array<${S}, ${s*s}>;
  var<workgroup> tileWeightK: array<${S}, ${s*s}>;
  var<workgroup> tileWeightV: array<${S}, ${s*s}>;
  ${m.registerUniforms(E).declareVariables(_,C,x,y,v,b)}
  ${m.mainStart([s,s,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${S}(0);
    var valueK = ${S}(0);
    var valueV = ${S}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:p}),getShaderSource:h},{inputs:i,outputs:[-1,-1,-1]})},Fo=(e,t)=>{let r=Zd(e.inputs,t),[a,n,o]=ec(e,r);return Yn(e,a,n,o,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var tc,rc,nc,qo,jo=q(()=>{"use strict";mt();he();xe();Je();ve();tc=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(a,n,o)=>{let s=n.length;if(s!==a.length)throw new Error(`${o}: num dimensions != ${s}`);n.forEach((d,i)=>{if(d!==a[i])throw new Error(`${o}: dim[${i}] do not match`)})};if(e[0].dims.length>1){let a=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,a,"Invalid input scale"),r(e[2].dims,a,"Invalid input B"),r(e[3].dims,a,"Invalid input mean"),r(e[4].dims,a,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},rc=(e,t)=>{let{epsilon:r,spatial:a,format:n}=t,o=e[0].dims,s=a?je(o[o.length-1]):1,d=n==="NHWC"&&o.length>1?s:1,i=D.size(o)/s,p=a,h=p?o.length:o,m=U("x",e[0].dataType,e[0].dims,s),y=U("scale",e[1].dataType,e[1].dims,d),v=U("bias",e[2].dataType,e[2].dims,d),b=U("inputMean",e[3].dataType,e[3].dims,d),_=U("inputVar",e[4].dataType,e[4].dims,d),C=j("y",e[0].dataType,h,s),x=()=>{let E="";if(a)E=`let cOffset = ${o.length===1?"0u":n==="NHWC"?`outputIndices[${o.length-1}] / ${s}`:"outputIndices[1]"};`;else if(n==="NCHW")E=`
            ${C.indicesSet("outputIndices","0","0")}
            let cOffset = ${C.indicesToOffset("outputIndices")};`;else{E=`var cIndices = ${y.type.indices}(0);
                       cIndices[0] = outputIndices[${o.length-1}];`;for(let A=1;A<y.rank;A++)E+=`cIndices[${A}] = outputIndices[${A}];`;E+=`let cOffset = ${y.indicesToOffset("cIndices")};`}return E},S=E=>`
  const epsilon = ${r};
  ${E.registerUniform("outputSize","u32").declareVariables(m,y,v,b,_,C)}
  ${E.mainStart()}
  ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${C.offsetToIndices(`global_idx * ${s}`)};
    ${x()}
    let scale = ${y.getByOffset("cOffset")};
    let bias = ${v.getByOffset("cOffset")};
    let inputMean = ${b.getByOffset("cOffset")};
    let inputVar = ${_.getByOffset("cOffset")};
    let x = ${m.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${C.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${a}_${s}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:S,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p?[{type:12,data:i},...Z(o)]:[{type:12,data:i}]})}},nc=e=>Se(e),qo=(e,t)=>{let{inputs:r,outputCount:a}=e,n=nc({...t,outputCount:a});if(Ae.webgpu.validateInputContent&&tc(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(rc(r,n))}});var ac,ic,Ko,Yo=q(()=>{"use strict";xe();ve();ac=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},ic=e=>{let t=e[0].dims,r=e[0].dims[2],a=D.size(t)/4,n=e[0].dataType,o=U("input",n,t,4),s=U("bias",n,[r],4),d=U("residual",n,t,4),i=j("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:h=>`
  const channels = ${r}u / 4;
  ${h.declareVariables(o,s,d,i)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${o.getByOffset("global_idx")}
      + ${s.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};
    ${i.setByOffset("global_idx","value")}
  }`}},Ko=e=>{ac(e.inputs),e.compute(ic(e.inputs))}});var oc,ke,Zo,Qo,Xo,Jo,es,ts,rs,ns,as,sc,is,os,ss,us,Zn,ls,Qn,ds,cs,ps,fs,ms,hs,gs,ys,bs,ws,vs,$s,_s,Ss,xs,Cs,Is,Ts,La,Ga,As,Es,Os,Xn=q(()=>{"use strict";he();xe();Je();ve();oc=(e,t,r,a,n,o)=>{let s=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let i=U("inputData",r,[s],4),p=j("outputData",a,[s],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(i,p)}

  ${o??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${i.getByOffset("global_idx")};
    ${p.setByOffset("global_idx",d)}
  }`},ke=(e,t,r,a,n,o=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:s=>oc(s,D.size(e.dims),e.dataType,o,r,a),getRunData:s=>({outputs:[{dims:e.dims,dataType:o}],dispatchGroup:{x:Math.ceil(D.size(s[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(D.size(e.dims)/4)}]})}),Zo=e=>{e.compute(ke(e.inputs[0],"Abs","abs"))},Qo=e=>{e.compute(ke(e.inputs[0],"Acos","acos"))},Xo=e=>{e.compute(ke(e.inputs[0],"Acosh","acosh"))},Jo=e=>{e.compute(ke(e.inputs[0],"Asin","asin"))},es=e=>{e.compute(ke(e.inputs[0],"Asinh","asinh"))},ts=e=>{e.compute(ke(e.inputs[0],"Atan","atan"))},rs=e=>{e.compute(ke(e.inputs[0],"Atanh","atanh"))},ns=e=>Se(e),as=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(ke(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},sc=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Gn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:Hn;return Se({min:t,max:r})},is=(e,t)=>{let r=e.inputs.length===1?t:sc(e.inputs),a=st(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${a}> = vec4(${a}(${r.min}));
    const clip_max_: vec4<${a}> = vec4(${a}(${r.max}));
`,r.cacheKey),{inputs:[0]})},os=e=>{e.compute(ke(e.inputs[0],"Ceil","ceil"))},ss=e=>{e.compute(ke(e.inputs[0],"Cos","cos"))},us=e=>{e.compute(ke(e.inputs[0],"Cosh","cosh"))},Zn=e=>Se(e),ls=(e,t)=>{let r=st(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Elu",a=>`elu_vf32(${a})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},Qn=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,ds=e=>{let t=st(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Qn(t)))},cs=e=>{e.compute(ke(e.inputs[0],"Exp","exp"))},ps=e=>{e.compute(ke(e.inputs[0],"Floor","floor"))},fs=e=>{let t=st(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Qn(t)))},ms=(e,t)=>{let r=st(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"LeakyRelu",a=>`select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},hs=e=>{e.compute(ke(e.inputs[0],"Not",t=>`!${t}`))},gs=e=>{e.compute(ke(e.inputs[0],"Neg",t=>`-${t}`))},ys=e=>{e.compute(ke(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},bs=e=>{let t=st(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},ws=e=>{e.compute(ke(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},vs=e=>Se(e),$s=(e,t)=>{let r=st(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"HardSigmoid",a=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${a} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},_s=e=>{e.compute(ke(e.inputs[0],"Sin","sin"))},Ss=e=>{e.compute(ke(e.inputs[0],"Sinh","sinh"))},xs=e=>{e.compute(ke(e.inputs[0],"Sqrt","sqrt"))},Cs=e=>{e.compute(ke(e.inputs[0],"Tan","tan"))},Is=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Ts=e=>{e.compute(ke(e.inputs[0],"Tanh",Is))},La=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${Is("v")};
}
`,Ga=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,As=e=>{let t=st(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"FastGelu",Ga,La(t),void 0,e.inputs[0].dataType))},Es=(e,t)=>{let r=st(e.inputs[0].dataType);return e.compute(ke(e.inputs[0],"ThresholdedRelu",a=>`select(vec4<${r}>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},Os=e=>{e.compute(ke(e.inputs[0],"Log","log"))}});var uc,lc,Ps,Rs=q(()=>{"use strict";xe();ve();Xn();uc=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},lc=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=U("input",e[0].dataType,e[0].dims,4),a=U("bias",e[0].dataType,[e[0].dims[2]],4),n=j("output",e[0].dataType,t,4),o=D.size(t)/4,s=We(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:i=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${i.declareVariables(r,a,n)}

  ${Qn(s)}

  ${i.mainStart()}
    ${i.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Ps=e=>{uc(e.inputs),e.compute(lc(e.inputs))}});var dc,cc,Et,Bs,Ms,zs,Ds,Us,Ws,Ns,Vs,Ls,Gs,Hs=q(()=>{"use strict";he();xe();ve();dc=(e,t,r,a,n,o,s,d,i,p,h,m)=>{let y,v;typeof d=="string"?y=v=(S,E)=>`${d}((${S}),(${E}))`:typeof d=="function"?y=v=d:(y=d.scalar,v=d.vector);let b=j("outputData",h,a.length,4),_=U("aData",i,t.length,4),C=U("bData",p,r.length,4),x;if(n)if(o){let S=D.size(t)===1,E=D.size(r)===1,A=t.length>0&&t[t.length-1]%4===0,R=r.length>0&&r[r.length-1]%4===0;S||E?x=b.setByOffset("global_idx",v(S?`${_.type.value}(${_.getByOffset("0")}.x)`:_.getByOffset("global_idx"),E?`${C.type.value}(${C.getByOffset("0")}.x)`:C.getByOffset("global_idx"))):x=`
            let outputIndices = ${b.offsetToIndices("global_idx * 4u")};
            let offsetA = ${_.broadcastedIndicesToOffset("outputIndices",b)};
            let offsetB = ${C.broadcastedIndicesToOffset("outputIndices",b)};
            ${b.setByOffset("global_idx",v(s||A?_.getByOffset("offsetA / 4u"):`${_.type.value}(${_.getByOffset("offsetA / 4u")}[offsetA % 4u])`,s||R?C.getByOffset("offsetB / 4u"):`${C.type.value}(${C.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else x=b.setByOffset("global_idx",v(_.getByOffset("global_idx"),C.getByOffset("global_idx")));else{if(!o)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let S=(E,A,R="")=>{let z=`aData[indexA${A}][componentA${A}]`,N=`bData[indexB${A}][componentB${A}]`;return`
            let outputIndices${A} = ${b.offsetToIndices(`global_idx * 4u + ${A}u`)};
            let offsetA${A} = ${_.broadcastedIndicesToOffset(`outputIndices${A}`,b)};
            let offsetB${A} = ${C.broadcastedIndicesToOffset(`outputIndices${A}`,b)};
            let indexA${A} = offsetA${A} / 4u;
            let indexB${A} = offsetB${A} / 4u;
            let componentA${A} = offsetA${A} % 4u;
            let componentB${A} = offsetB${A} % 4u;
            ${E}[${A}] = ${R}(${y(z,N)});
          `};h===9?x=`
            var data = vec4<u32>(0);
            ${S("data",0,"u32")}
            ${S("data",1,"u32")}
            ${S("data",2,"u32")}
            ${S("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:x=`
            ${S("outputData[global_idx]",0)}
            ${S("outputData[global_idx]",1)}
            ${S("outputData[global_idx]",2)}
            ${S("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(_,C,b)}

        ${m??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${x}
      }`},cc=(e,t,r,a,n,o,s=r.dataType)=>{let d=!D.areEqual(r.dims,a.dims),i=r.dims,p=D.size(r.dims),h=!1,m=!1,y=[d];if(d){let v=xt.calcShape(r.dims,a.dims,!1);if(!v)throw new Error("Can't perform binary op on the given tensors");i=v,p=D.size(i);let b=D.size(r.dims)===1,_=D.size(a.dims)===1,C=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,x=a.dims.length>0&&a.dims[a.dims.length-1]%4===0;y.push(b),y.push(_),y.push(C),y.push(x);let S=1;for(let E=1;E<i.length;E++){let A=r.dims[r.dims.length-E]??1,R=a.dims[a.dims.length-E]??1;if(A===R)S*=A;else break}S%4===0?(m=!0,h=!0):(b||_||C||x)&&(h=!0)}else h=!0;return y.push(h),{name:e,shaderCache:{hint:t+y.map(v=>v.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:v=>dc(v,r.dims,a.dims,i,h,d,m,n,r.dataType,a.dataType,s,o),getRunData:()=>({outputs:[{dims:i,dataType:s}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:[{type:12,data:Math.ceil(D.size(i)/4)},...Z(r.dims,a.dims,i)]})}},Et=(e,t,r,a,n,o)=>{e.compute(cc(t,n??"",e.inputs[0],e.inputs[1],r,a,o))},Bs=e=>{Et(e,"Add",(t,r)=>`${t}+${r}`)},Ms=e=>{Et(e,"Div",(t,r)=>`${t}/${r}`)},zs=e=>{Et(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Ds=e=>{Et(e,"Mul",(t,r)=>`${t}*${r}`)},Us=e=>{let t=U("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Et(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Ws=e=>{Et(e,"Sub",(t,r)=>`${t}-${r}`)},Ns=e=>{Et(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Vs=e=>{Et(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Ls=e=>{Et(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Gs=e=>{Et(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var fc,mc,hc,gc,Fs,qs,js=q(()=>{"use strict";he();xe();Je();ve();fc=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},mc=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,hc=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let o=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(o):n===0?a.push(`if (inputIndex == ${n}u) { ${o} }`):n===r-1?a.push(`else { ${o} }`):a.push(`else if (inputIndex == ${n}) { ${o} }`)}return a.join(`
`)},gc=(e,t)=>{let r=0,a=0,n=new Array(e.length);for(let A=0;A<e.length;A++){let R=D.size(e[A].dims);n[A]=R,R>r&&(r=R,a=A)}let o=e[a].dims.slice();if(t>=o.length||t<-1*o.length)throw new Error("axis specified for concat doesn't match input dimensionality");let s=t<0?o.length+t:t,d=o.slice(0);for(let A=0;A<e.length;A++){if(A===a)continue;let R=e[A].dims.slice();for(let z=0;z<o.length;z++)if(z===s)d[s]+=R[z];else if(o[z]!==R[z])throw new Error("non concat dimensions must match")}let i=D.size(d),p=new Array(e.length),h=new Array(e.length),m=e[0].dataType,y=0,v=[],b=[],_=[{type:12,data:i}];for(let A=0;A<e.length;++A)y+=e[A].dims[s],p[A]=y,b.push(e[A].dims.length),h[A]=U(`input${A}`,m,b[A]),v.push("rank"),_.push({type:12,data:p[A]});for(let A=0;A<e.length;++A)_.push(...Z(e[A].dims));_.push(...Z(d));let C=j("output",m,d.length),x=C.indicesGet("indices",s),S=Array.from(Array(p.length).keys()).map(A=>`uniforms.sizeInConcatAxis${A}`).join(","),E=A=>`

  ${(()=>{A.registerUniform("outputSize","u32");for(let R=0;R<e.length;R++)A.registerUniform(`sizeInConcatAxis${R}`,"u32");return A.declareVariables(...h,C)})()}

  ${mc(p.length,S)}

  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${C.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${x});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${p.length}u>(${S});
      ${x} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${hc(h,C)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:v},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:_}),getShaderSource:E}},Fs=(e,t)=>{fc(e.inputs);for(let r=0;r<e.inputs.length;r++)D.size(e.inputs[r].dims)===0&&e.inputs.slice(r,1);e.compute(gc(e.inputs,t.axis))},qs=e=>Se({axis:e.axis})});var Ot,kt,Pt,Jn,Nt=q(()=>{"use strict";he();xe();Ot=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},kt=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},Pt=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},Jn=e=>{let t=e?.activation||"";if(t==="HardSigmoid"){let[r,a]=e?.activation_params||[.2,.5];return{activation:t,alpha:r,beta:a}}else if(t==="Clip"){let[r,a]=e?.activation_params||[Gn,Hn];return{activation:t,clipMax:a,clipMin:r}}else if(t==="LeakyRelu"){let[r]=e?.activation_params||[.01];return{activation:t,alpha:r}}return{activation:t}}});var Qe,ea,ta=q(()=>{"use strict";Qe=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},ea=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var ra,Ha=q(()=>{"use strict";ra=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var yc,bc,Yr,Ks,wc,Zr,vc,na,Qr=q(()=>{"use strict";he();xe();ve();Nt();ta();yc=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,bc=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Yr=(e,t,r="f32",a,n=!1,o=32,s=!1,d=32)=>{let i=t[1]*e[1],p=t[0]*e[0],h=n?i:o,m=n?o:i,y=h/t[0],v=o/t[1];if(!((n&&y===4&&e[1]===4||!n&&(y===3||y===4))&&h%t[0]===0&&o%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${y} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${y} must be 3 or 4.
  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${y}<${r}>, ${h/y}>, ${m}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${o}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${y};
const tileInner = ${o};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${s?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${i};

  let num_tiles = ${s?`${Math.ceil(d/o)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${s?`i32(globalId.z) * ${d}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${v};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${yc(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${y===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${bc(n,y)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Ks=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,wc=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Zr=(e,t,r="f32",a,n=!1,o=32,s=!1,d=32,i=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],m=n?p:o,y=n?o:p;if(!(y%t[1]===0&&m%t[0]===0&&o%t[1]===0))throw new Error(`tileAHight ${y} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${m} must be divisible by workgroupSize[0]${t[0]}, tileInner ${o} must be divisible by workgroupSize[1]${t[1]}`);let v=y/t[1],b=m/t[0],_=o/t[1],C=i?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${p};
    let globalColStart = i32(workgroupId.x) * ${h};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${y}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${m}; inputCol = inputCol + ${t[0]}) {
          ${Ks(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${p};

let tileRowA = i32(localId.y) * ${v};
let tileColA = i32(localId.x) * ${b};
let tileRowB = i32(localId.y) * ${_};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Ks(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${wc(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${m}>, ${y}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${o}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${o};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${s?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${s?`${Math.ceil(d/o)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${s?`i32(globalId.z) * ${d}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${C}
  }
`},vc=(e,t,r,a,n,o=!1)=>{let[s,d,i]=n,[p,h,m,y]=a,v=yr(s,i),b=yr(d,i),_=We(a[0].type.tensor),C=()=>{let E=h.rank,A=p.rank,R=`var aIndices: ${h.type.indices};`;for(let z=E-2-1,N=A-1;z>=0;z--,N--)R+=`
aIndices[${z}] = ${A>1?`batchIndices[${N}]`:"batchIndices"};`;return v.forEach(z=>{R+=`
aIndices[${z}] = 0;`}),R+=`
aIndices[${E-2}] = u32(row);
                   aIndices[${E-1}] = u32(colIn);`,R},x=()=>{let E=m.rank,A=p.rank,R=`var bIndices: ${m.type.indices};`;for(let z=E-2-1,N=A-1;z>=0;z--,N--)R+=`
bIndices[${z}] = ${A>1?`batchIndices[${N}]`:"batchIndices"};`;return b.forEach(z=>{R+=`
bIndices[${z}] = 0;`}),R+=`
bIndices[${E-2}] = u32(row);
                   bIndices[${E-1}] = u32(colIn);`,R};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Qe(e,_)} {
      var value = ${Qe(e,_)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        ${C()}
        value = ${h.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Qe(e,_)} {
      var value = ${Qe(e,_)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        ${x()}
        value = ${m.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Qe(e,_)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${o?"bias[colIn]":`${Qe(e,_)}(bias[row])`};`:""}
        ${r}
        ${y.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},na=(e,t,r,a,n=!1)=>{let o=e[0].dims,s=e[1].dims,d=o.slice(0,-2),i=s.slice(0,-2),p=a?a.slice(0,-2):r.slice(0,-2),h=D.size(p),m=o[o.length-2],y=o[o.length-1],v=s[s.length-1],b=y%4===0&&v%4===0,_=m<=8?[4,1,1]:[4,4,1],C=[8,8,1],x=[Math.ceil(v/C[0]/_[0]),Math.ceil(m/C[1]/_[1]),Math.ceil(h/C[2]/_[2])],S=b?4:1,E=[...d,m,y/S],A=E.length,R=[...i,y,v/S],z=R.length,N=[h,m,v/S],K=[{type:6,data:m},{type:6,data:v},{type:6,data:y}];kt(t,K),K.push(...Z(p,E,R));let oe=["rank","rank"],k=e.length>2;k&&(K.push(...Z(e[2].dims)),oe.push("rank")),K.push(...Z(N));let J=$e=>{let Re=p.length,Be=qn("batchDims",e[0].dataType,Re,1),_e=We(e[0].dataType),V=U("a",e[0].dataType,A,S),Me=U("b",e[1].dataType,z,S),be=j("result",e[0].dataType,N.length,S),ge=[V,Me];if(k){let H=n?S:1;ge.push(U("bias",e[2].dataType,e[2].dims.length,H))}let pe=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Pt(t,pe);let Ce=We(be.type.tensor),Te=Ot(t,be.type.value,Ce),Le=vc(S,k,Te,[Be,V,Me,be],[d,i,p],n);return`
  ${$e.registerUniforms(pe).registerInternalVariables(Be).declareVariables(...ge,be)}
  ${Le}
  ${b?Yr(_,C,_e,Be):Zr(_,C,_e,Be)}
                   `};return{name:"MatMul",shaderCache:{hint:`${_};${t.activation};${b};${n}`,inputDependencies:oe},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:x[0],y:x[1],z:x[2]},programUniforms:K}),getShaderSource:J}}});var $c,Ys,Zs=q(()=>{"use strict";he();Wt();ve();Nt();ta();Ha();Qr();$c=(e,t,r,a,n=!1,o,s=4,d=4,i=4,p="f32")=>{let h=k=>{switch(k){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${k} is not supported.`)}},m=k=>{switch(k){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${k} is not supported.`)}},y=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,v=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",_=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",C=e?"row":"col",x=e?"col":"row",S=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${C} / outWidth;
    let outCol = ${C} % outWidth;

    let WRow = ${x} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${x} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${x} % inChannels;
    var resData = ${Qe(s,p)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${_}) {
      ${y}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${h(s)}
    }
    return resData;`,E=e?t&&a?`
    let col = colIn * ${s};
    ${S}`:`
    let col = colIn * ${s};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${S}
    }
    return ${Qe(s,p)}(0.0);`:a&&r?`
    let col = colIn * ${s};
    ${S}`:`
    let col = colIn * ${s};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${S}
    }
    return ${Qe(s,p)}(0.0);`,A=`${m(d)}`,R=Qe(i,p),z=e?Qe(s,p):Qe(d,p),N=e?Qe(d,p):Qe(s,p),K=Ot(o,R,p);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${z} {
      ${e?E:A}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${N} {
      ${e?A:E}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${R}) {
      let col = colIn * ${i};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${v}
      ${ea(n)}
      ${K}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Ys=(e,t,r,a,n,o,s,d)=>{let i=t.format==="NHWC",p=i?e[0].dims[3]:e[0].dims[1],h=r[0],m=i?r[2]:r[3],y=i?r[1]:r[2],v=i?r[3]:r[1],b=i&&(p%4===0||p%3===0)&&v%4===0,_=i?v:m*y,C=i?m*y:v,x=[8,8,1],S=a<=8?[4,1,1]:[4,4,1],E=[Math.ceil(_/x[0]/S[0]),Math.ceil(C/x[1]/S[1]),Math.ceil(h/x[2]/S[2])];Ue("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${E}`);let A=b?i&&p%4!==0?3:4:1,R=x[1]*S[1],z=x[0]*S[0],N=Math.max(x[0]*A,x[1]),K=a%R===0,oe=n%z===0,k=o%N===0,J=b?[A,4,4]:[1,1,1],$e=[{type:6,data:a},{type:6,data:n},{type:6,data:o},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];kt(t,$e),$e.push(...Z(e[0].dims,e[1].dims));let Re=["rank","rank"];s&&($e.push(...Z(e[2].dims)),Re.push("rank")),$e.push(...Z(r));let Be=_e=>{let V=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Pt(t,V);let Me=b?4:1,be=We(e[0].dataType),ge=`
      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${be}>`:be}) {
        result[flatIndex] = ${b?`vec4<${be}>`:be}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${be}>`:be}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);
      }`,pe=U("x",e[0].dataType,e[0].dims.length,A===3?1:A),Ce=U("w",e[1].dataType,e[1].dims.length,Me),Te=[pe,Ce],Le=j("result",e[0].dataType,r.length,Me);if(s){let H=U("bias",e[2].dataType,e[2].dims.length,Me);Te.push(H),ge+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${be}>`:be} {
          return bias[coords.${i?"w":"y"}${b?"/ 4":""}];
        }`}return`
        ${ra("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${_e.registerUniforms(V).declareVariables(...Te,Le)}
        ${ge}
        ${$c(i,K,oe,k,s,t,J[0],J[1],J[2],be)}
        ${b?Yr(S,x,be,void 0,!i,N):Zr(S,x,be,void 0,!i,N,!1,void 0,d)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${A};${b};${K};${oe};${k};${R};${z};${N}`,inputDependencies:Re},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:$e}),getShaderSource:Be}}});var Fa,Qs=q(()=>{"use strict";he();xe();ve();ja();Nt();Fa=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",o=e[0].dims,s=e[1].dims,d=s[0]/t.group,i=t.format==="NHWC",p=qa(o,s,t.dilations,t.pads,t.strides,i),h=D.size(p),m=[{type:12,data:h},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:d}];kt(t,m),m.push(...Z(o,s,p));let y=["rank","rank"];a&&(m.push(...Z(e[2].dims)),y.push("rank")),m.push(...Z(p));let v=b=>{let _=j("output",e[0].dataType,p.length),C=We(_.type.tensor),x=Ot(t,_.type.value,C),S=U("x",e[0].dataType,o.length),E=U("w",e[1].dataType,s.length),A=[S,E];a&&A.push(U("b",e[2].dataType,e[2].dims));let R=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return Pt(t,R),`
  ${b.registerUniforms(R).declareVariables(...A,_)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${_.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${i?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${i?1:2}], outputIndices[${i?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel / uniforms.output_channels_per_group;

    var value: ${_.type.value} = ${_.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[${i?1:2}]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[${i?2:3}]) {
            continue;
          }

          let xVal = ${i?S.get("batch","xHeight","xWidth","input_channel"):S.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${E.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${x}
    ${_.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:y},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:m}),getShaderSource:v}}});var Ka,_c,Xs,Ya=q(()=>{"use strict";he();xe();Qr();ve();Nt();Ka=(e,t,r,a,n=!1)=>{let o=e[0].dims,s=e[1].dims,d=o[o.length-2],i=s[s.length-1],p=o[o.length-1],h=je(i),m=je(p),y=je(d),v=D.size(r)/h/y,b=e.length>2,_=a?a.slice(0,-2):r.slice(0,-2),x=[D.size(_),d,i],S=[{type:12,data:v},{type:12,data:d},{type:12,data:i},{type:12,data:p}];kt(t,S),S.push(...Z(_,o,s)),b&&S.push(...Z(e[2].dims)),S.push(...Z(x));let E=A=>{let R=qn("batch_dims",e[0].dataType,_.length),z=U("a",e[0].dataType,o.length,m),N=U("b",e[1].dataType,s.length,h),K=j("output",e[0].dataType,x.length,h),oe=We(K.type.tensor),k=Ot(t,K.type.value,oe),J=[z,N],$e="";if(b){let pe=n?h:1;J.push(U("bias",e[2].dataType,e[2].dims.length,pe)),$e=`${n?`value += bias[col / ${pe}];`:`value += ${K.type.value}(bias[row + i]);`}`}let Re=o.slice(0,-2),Be=s.slice(0,-2),_e=yr(Re,_),V=yr(Be,_),Me=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Pt(t,Me);let be=(pe,Ce)=>{let Te=pe.rank,Le=pe.name;if(Te===2)return`var ${Le}_indices = ${pe.type.indices}(0u, 0u);`;let H=R.rank,re=`var ${Le}_indices: ${pe.type.indices};`;for(let fe=Te-2-1,et=H-1;fe>=0;fe--,et--)re+=`
${Le}_indices[${fe}] = ${H>1?`batch_indices[${et}]`:"batch_indices"};`;return Ce.forEach(fe=>{re+=`
${Le}_indices[${fe}] = 0;`}),re+=`${Le}_indices[${Te-2}] = 0u;
                     ${Le}_indices[${Te-1}] = 0u;`,re},ge=()=>{let pe=`var a_data: ${z.type.value};`;for(let Ce=0;Ce<m;Ce++)pe+=`
              let b_data${Ce} = b[(b_offset + (k + ${Ce}) * uniforms.N + col) / ${h}];`;for(let Ce=0;Ce<y;Ce++){pe+=`a_data = a[(a_offset + (row + ${Ce}) * uniforms.K + k) / ${m}];`;for(let Te=0;Te<m;Te++)pe+=`
            values[${Ce}] = fma(${N.type.value}(a_data${m===1?"":`[${Te}]`}), b_data${Te}, values[${Ce}]);
`}return pe};return`
  ${A.registerUniforms(Me).registerInternalVariables(R).declareVariables(...J,K)}
  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${h})) * ${h};
    var index1 = global_idx / (uniforms.N / ${h});
    let stride1 = uniforms.M / ${y};
    let row = (index1 % stride1) * ${y};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${R.offsetToIndices("batch")};`}
    ${be(z,_e)}
    let a_offset = ${z.indicesToOffset("a_indices")};
    ${be(N,V)}
    let b_offset = ${N.indicesToOffset("b_indices")};
    var values: array<${K.type.value}, ${y}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${m}) {
      ${ge()}
    }
    for (var i = 0u; i < ${y}u; i++) {
      var value = values[i];
      ${$e}
      ${k}
      let cur_indices = ${K.type.indices}(batch, row + i, col);
      let offset = ${K.indicesToOffset("cur_indices")};
      ${K.setByOffset(`offset / ${h}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${h};${m};${y};${n}`,inputDependencies:b?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:S}),getShaderSource:E}},_c=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Xs=e=>{_c(e.inputs);let t=xt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],a=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&a<8?e.compute(Ka(e.inputs,{activation:""},t)):e.compute(na(e.inputs,{activation:""},t))}});var qa,Js,Sc,eu,Za,xc,Cc,Qa,ja=q(()=>{"use strict";xe();Zs();Qr();Qs();Nt();Ya();br();qa=(e,t,r,a,n,o)=>{let s=e[0],d=e.slice(o?1:2,o?3:4),i=d.length,p=t[0],m=t.slice(2).map((b,_)=>b+(b-1)*(r[_]-1)),v=d.map((b,_)=>b+a[_]+a[_+i]).map((b,_)=>Math.floor((b-m[_]+n[_])/n[_]));return v.splice(0,0,s),v.splice(o?3:1,0,p),v},Js=[2,3,1,0],Sc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},eu=(e,t)=>{let r=e.kernelShape.slice();for(let o=2;o<t[1].dims.length;++o)r[o-2]===0&&(r[o-2]=t[1].dims[o]);let a=e.pads.slice();Jt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a}),n},Za=e=>{let t=Jn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,o=e.group,s=e.kernel_shape,d=e.pads,i=e.strides,p=e.w_is_const();return{autoPad:a,format:r,dilations:n,group:o,kernelShape:s,pads:d,strides:i,wIsConst:p,...t,cacheKey:`${e.format};${t.activation};`}},xc=(e,t,r)=>{let a=eu(r,t),n=r.format==="NHWC";if(r.group!==1){e.compute(Fa(t,a));return}let o=t.length===3,s=t[0].dims[n?1:2],d=t[0].dims[n?2:3],i=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],m=qa(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),y=m[n?1:2],v=m[n?2:3],b=m[n?3:1],_=n&&p===s&&h===d&&r.pads[0]===0&&r.pads[1]===0;if(_||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let z=m[0],N,K,oe,k=[];if(n){let Re=e.kernelCustomData.wT??e.compute(vt(t[1],Js),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Re),_){let Be=s*d*i;N=t[0].reshape([1,z,Be]),K=Re.reshape([1,Be,b]),oe=[1,z,b]}else N=t[0].reshape([z,s*d,i]),K=Re.reshape([1,i,b]),oe=[z,y*v,b];k.push(N),k.push(K)}else N=t[0].reshape([z,i,s*d]),K=t[1].reshape([1,b,i]),oe=[z,b,y*v],k.push(K),k.push(N);o&&k.push(t[2]);let J=oe[2],$e=k[0].dims[k[0].dims.length-1];J<8&&$e<8?e.compute(Ka(k,a,m,oe,n),{inputs:k}):e.compute(na(k,a,m,oe,n),{inputs:k});return}let C=!0,x=e.kernelCustomData.wT??e.compute(vt(t[1],Js),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=x);let S=[t[0],x];o&&S.push(t[2]);let E=n?y*v:b,A=n?b:y*v,R=p*h*i;e.compute(Ys(S,a,m,E,A,R,o,C),{inputs:S})},Cc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],o=[1].concat(t.strides),s=[1].concat(t.dilations),d=[1].concat(t.kernelShape),i=eu({...t,pads:n,strides:o,dilations:s,kernelShape:d},a);e.compute(Fa(a,i,p=>r?[p[0],p[2],p[3]]:[]))},Qa=(e,t)=>{Sc(e.inputs,t),e.inputs[0].dims.length===3?Cc(e,t):xc(e,e.inputs,t)}});var Ic,tu,ru=q(()=>{"use strict";he();Wt();ve();Nt();ta();Ha();Qr();Ic=(e,t=!1,r,a=4)=>{let n=Qe(a,"f32"),o=x=>{switch(x){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${x} is not supported.`)}},s=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,d=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,i=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",p=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",h=e?"row":"col",m=e?"col":"row",y=`
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${h} / outWidth;
      let outCol = ${h} % outWidth;

      let WRow = ${m} / (uniforms.filter_dims[1] * inChannels);
      let WCol = ${m} / inChannels % uniforms.filter_dims[1];
      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(${i}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${m} % inChannels;
      ${s}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${a}];`,v=e?`
      let col = colIn * ${a};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
        ${y}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${a};
      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
        ${y}
      }
      return ${n}(0.0);`,b=`
      let col = colIn * ${a};
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);
      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];
      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${o(a)}
      }
      return ${n}(0.0);
      `,_=Ot(r,n);return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?v:b}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?b:v}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${a};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${d}
      ${ea(t)}
      ${_}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${a}] = value;
    }
  }`},tu=(e,t,r,a,n,o,s,d)=>{let i=t.format==="NHWC",p=i?e[0].dims[3]:e[0].dims[1],h=r[0],m=i?r[2]:r[3],y=i?r[1]:r[2],v=i?r[3]:r[1],b=i?p%4===0&&v%4===0:m%4===0&&v%4===0,_=i?v:m*y,C=i?m*y:v,x=b?[8,8,1]:[_<=4||C<=4?4:16,_>4&&C<=4?4:16,1],S=b?[4,4,1]:[_<=4?1:4,_>4&&C<=4?1:4,1],E=[Math.ceil(_/x[0]/S[0]),Math.ceil(C/x[1]/S[1]),Math.ceil(h/x[2]/S[2])];Ue("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${E}`);let A=b?4:1,R=Math.max(x[0]*A,x[1]),z=b?4:1,N=[t.kernelShape[i?1:2],t.kernelShape[i?2:3]],K=[N[0]+(t.dilations[0]<=1?0:(N[0]-1)*(t.dilations[0]-1)),N[1]+(t.dilations[1]<=1?0:(N[1]-1)*(t.dilations[1]-1))],oe=[K[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),K[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],k=[{type:6,data:a},{type:6,data:n},{type:6,data:o},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:N},{type:6,data:oe}];kt(t,k),k.push(...Z(e[0].dims,e[1].dims));let J=["rank","rank"];s&&(k.push(...Z(e[2].dims)),J.push("rank")),k.push(...Z(r));let $e=Re=>{let Be=U("x",e[0].dataType,e[0].dims.length,z),_e=U("w",e[1].dataType,e[1].dims.length,1),V=j("result",e[0].dataType,r.length,z),Me=[Be,_e],be="";if(s){let pe=U("bias",e[2].dataType,e[2].dims.length,z);Me.push(pe),be+=`
          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {
            return bias[coords.${i?"w":"y"}${b?"/ 4":""}];
          }`}let ge=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:N.length},{name:"pads",type:"i32",length:oe.length}];return Pt(t,ge),`
        ${ra("uniforms.result_strides")}
        ${Re.registerUniforms(ge).declareVariables(...Me,V)};
        ${be}
        ${Ic(i,s,t,A)}
        ${b?Yr(S,x,"f32",void 0,!i,R):Zr(S,x,"f32",void 0,!i,R,!1,void 0,d)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${S};${x};${b}`,inputDependencies:J},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:k}),getShaderSource:$e}}});var Tc,Xa,nu=q(()=>{"use strict";he();Wt();xe();ve();Tc=(e,t,r,a,n,o=!1,s,d,i=!1)=>{let p=i?1:2,h=i?2:3,m=i?3:1,y=o?2:1,v=`
  fn setOutputAtIndex(flatIndex : u32, value : ${o?`vec4<${s}>`:s}) {
    result[flatIndex] = ${o?`vec4<${s}>`:s}(value);
  }`;a&&(v+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${o?`vec4<${s}>`:s} {
      return bias[coords.${i?"w":"y"}${o?"/ 4":""}];
    }`);let b=o?4:1,_=U("W",t[1].dataType,t[1].dims.length,b),C=U("Dy",t[0].dataType,t[0].dims.length,b),x=[C,_];a&&x.push(U("bias",t[2].dataType,[r[m]].length,b));let S=j("result",t[0].dataType,r.length,b),E=`{
        let batch: u32 = ${n?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];
        let r = ${n?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];
        let c = ${n?"global_id.y":"workgroup_id.y"} * ${y};
        let d1: u32 = ${n?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${s}>, ${y}>;
        for (var i = 0; i < ${y}; i++) {
          dotProd[i] = vec4<${s}>(0.0);
        }
        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {
          var dyR = (${s}(dyCorner.x) + ${s}(wR)) / ${s}(uniforms.strides.x);
          let wRPerm = uniforms.filter_dims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${s}(uniforms.Dy_shape[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {
            let dyC = (${s}(dyCorner.y) + ${s}(wC)) / ${s}(uniforms.strides.y);
            let dyC2 = (${s}(dyCorner.y) + 1.0 + ${s}(wC)) / ${s}(uniforms.strides.y);
            let wCPerm = uniforms.filter_dims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${s}(uniforms.Dy_shape[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${s}(uniforms.Dy_shape[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${C.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${s}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${C.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${s}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = uniforms.Dy_shape[${m}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${C.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${s}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${C.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${s}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${y}; i = i + 1) {
          let value = dotProd[i] + ${a?"bias[c+i]":`vec4<${s}>(0.0)`};
          ${S.set("batch","r","c + i","d1","value")};
        }
      }`,A=`
          let outputIndices = ${S.offsetToIndices("global_idx")};
          let batch = ${S.indicesGet("outputIndices",0)};
          let d1 = ${S.indicesGet("outputIndices",m)};
          let r = ${S.indicesGet("outputIndices",p)};
          let c = ${S.indicesGet("outputIndices",h)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / uniforms.output_channels_per_group;
          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${s}(0.0);
          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
            if (wR % uniforms.dilations.x != 0) {
              continue;
            }
            let dyR = (${s}(dyRCorner) + ${s}(wR)) / ${s}(uniforms.strides[0]);
            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
            if (dyR < 0.0 || dyR >= ${s}(uniforms.Dy_shape[${p}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
              if (wC % uniforms.dilations.y != 0) {
                continue;
              }
              let dyC = (${s}(dyCCorner) + ${s}(wC)) / ${s}(uniforms.strides.y);
              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
              if (dyC < 0.0 || dyC >= ${s}(uniforms.Dy_shape[${h}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * uniforms.input_channels_per_group;
              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {
                let xValue = ${i?C.get("batch","idyR","idyC","inputChannel"):C.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${_.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${a?"bias[d1]":`${s}(0.0)`};
          ${S.setByOffset("global_idx","value")};
        `;return`
  ${e.registerUniforms(d).declareVariables(...x,S)}
  ${v}

    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
  ${o?E:A}}`},Xa=(e,t,r)=>{let a=e.length>2,n=t.outputShape,o=D.size(n),s=[Math.ceil(o/64),1,1];Ue("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${s}`);let d=t.format==="NHWC",i=["rank","rank"],p=[t.strides[0],t.strides[1]],h=[t.kernelShape[d?1:2],t.kernelShape[d?2:3]],m=[t.dilations[0],t.dilations[1]],y=[h[0]+(t.dilations[0]<=1?0:(t.kernelShape[d?1:2]-1)*(t.dilations[0]-1)),h[1]+(t.dilations[1]<=1?0:(t.kernelShape[d?2:3]-1)*(t.dilations[1]-1))],v=[y[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),y[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],b=!1,_=t.group,C=e[1].dims,x=C[0]/_,S=C[1],E=[{type:6,data:o},{type:12,data:p},{type:12,data:h},{type:12,data:m},{type:12,data:y},{type:6,data:v},{type:12,data:x},{type:12,data:S},...Z(e[0].dims,e[1].dims)];a&&(E.push(...Z(e[2].dims)),i.push("rank")),E.push(...Z(n));let A=s[1]===1&&s[2]===1,R=z=>{let N=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:p.length},{name:"filter_dims",type:"u32",length:h.length},{name:"dilations",type:"u32",length:h.length},{name:"effective_filter_dims",type:"u32",length:y.length},{name:"pads",type:"i32",length:v.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],K=We(e[0].dataType);return`${Tc(z,e,n,a,A,b,K,N,d)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:i},getRunData:()=>({dispatchGroup:{x:s[0],y:s[1],z:s[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}],programUniforms:E}),getShaderSource:R}}});var Ac,Ec,Oc,au,iu,kc,Pc,Rc,Bc,ou,su=q(()=>{"use strict";ru();nu();Nt();br();Ac=(e,t,r,a,n,o)=>(e-1)*t+r+(a-1)*n+1-o,Ec=(e,t,r,a,n)=>{let o=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=o,r[n]=e-o):t==="SAME_LOWER"&&(r[a]=e-o,r[n]=o)},Oc=(e,t,r,a,n,o,s,d,i,p)=>{let h=e.length-2,m=p.length===0;if(i.length===0)for(let b=0;b<h;++b)i.push(0);let y=e[0],v=t[d?3:1]*n;for(let b=0,_=e.length-h-(d?1:0);b<h;++b,++_){let C=e[_],x=m?C*s[b]:p[b],S=Ac(C,s[b],o[b],t[_],r[b],x);Ec(S,a,o,b,b+h),m&&p.push(s[b]*(C-1)+i[b]+(t[_]-1)*r[b]+1-o[b]-o[b+h])}p.splice(0,0,y),p.splice(d?3:1,0,v)},au=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((m,y)=>m*y,1)===0){r.length=0;for(let m=2;m<t[1].dims.length;++m)r.push(t[1].dims[m])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),o=e.outputShape.slice(),s=e.outputPadding.slice(),d=t[0].dims,i=e.dilations.slice();if(i.reduce((m,y)=>m+y,0)===0){let m=t[0].dims.length-2;i=new Array(m).fill(1)}let p=e.strides.slice();if(p.reduce((m,y)=>m+y,0)===0){let m=t[0].dims.length-2;p=new Array(m).fill(1)}Oc(d,r,i,e.autoPad,e.group,n,p,a,s,o);let h=Object.assign({},e);return Object.assign(h,{kernelShape:r,pads:n,outputPadding:s,outputShape:o,dilations:i,strides:p}),h},iu=e=>{let t=Jn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,o=e.group,s=e.kernelShape,d=e.pads,i=e.strides,p=e.wIsConst(),h=e.outputPadding,m=e.outputShape;return{autoPad:a,format:r,dilations:n,group:o,kernelShape:s,outputPadding:h,outputShape:m,pads:d,strides:i,wIsConst:p,...t,cacheKey:`${e.format};${t.activation};`}},kc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let o=e[0].dims.length-2;if(t.dilations.reduce((h,m)=>h+m,0)>0&&t.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(t.strides.reduce((h,m)=>h+m,0)>0&&t.strides.length!==o)throw new Error(`strides should be ${o}D`);if(t.pads.reduce((h,m)=>h+m,0)>0&&t.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(t.outputPadding.length!==o&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${o}D`);if(t.kernelShape.reduce((h,m)=>h+m,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Pc=[2,3,1,0],Rc=(e,t,r)=>{let a=au(r,t),n=r.format==="NHWC",o=a.outputShape,s=o[n?3:1],d=t[0].dims[n?3:1];if(a.group!==1||s===1&&d===1){e.compute(Xa(t,a));return}let i=o[n?1:2],p=o[n?2:3],h=t[1].dims[2],m=t[1].dims[3],y=n?i*p:s,v=n?s:i*p,b=h*m*d,_=!0,C=e.kernelCustomData.wT??e.compute(vt(t[1],Pc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=C);let x=[t[0],C],S=t.length===3;S&&(!n&&t[2].dims.length===1?x.push(t[2].reshape([t[2].dims[0],1,1])):x.push(t[2])),e.compute(tu(x,a,o,y,v,b,S,_),{inputs:x})},Bc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let o=t.dilations;(o.length===0||o[0]===0)&&(o=[1]);let s=t.strides;(s.length===0||s[0]===0)&&(s=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],s=[1].concat(s),o=[1].concat(o),n=[1].concat(n);let i=au({...t,pads:d,strides:s,dilations:o,kernelShape:n},a);e.compute(Xa(a,i,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},ou=(e,t)=>{kc(e.inputs,t),e.inputs[0].dims.length===3?Bc(e,t):Rc(e,e.inputs,t)}});var Mc,uu,lu,du=q(()=>{"use strict";he();xe();Je();ve();Mc=(e,t,r,a)=>{let n=D.size(t),o=t.length,s=U("input",e,o),d=j("output",e,o),i=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),p=D.normalizeAxis(i,o),h=m=>{let y=` i32(${s.indicesGet("inputIndices","uniforms.axis")}) `,v=de("uniforms.input_shape","uniforms.axis",o),b=a.reverse?y+(a.exclusive?" + 1":""):"0",_=a.reverse?v:y+(a.exclusive?"":" + 1");return`
                ${m.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(s,d)}
                ${m.mainStart()}
                  ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${d.offsetToIndices("global_idx")};
                  var sum = ${d.type.value}(0);
                  let first : i32 = ${b};
                  let last : i32 = ${_};
                  for (var i : i32 = first; i < last; i++) {
                    ${s.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${s.getByIndices("inputIndices")};
                  }
                  ${d.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:a.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},{type:6,data:p},...Z(t,t)]}),getShaderSource:h}},uu=(e,t)=>{let r=e.inputs[0].dims,a=e.inputs[0].dataType,n=e.inputs[1];e.compute(Mc(a,r,n,t),{inputs:[0]})},lu=e=>{let t=e.exclusive===1,r=e.reverse===1;return Se({exclusive:t,reverse:r})}});var Ja,aa,cu,zc,Dc,ei,ti,pu,Uc,fu,mu,hu=q(()=>{"use strict";he();xe();Je();ve();Ja="[a-zA-Z]|\\.\\.\\.",aa="("+Ja+")+",cu="^"+aa+"$",zc="("+aa+",)*"+aa,Dc="^"+zc+"$",ei=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},ti=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(Dc)))throw new Error("Invalid LHS term");if(a.split(",").forEach((d,i)=>{let p=t[i].dims.slice();if(!d.match(RegExp(cu)))throw new Error("Invalid LHS term");let h=this.processTerm(d,!0,p,i);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,i])=>i.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(aa)))throw new Error("Invalid RHS");n.match(RegExp(Ja,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(d);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let o=a.length,s=!1,d=[],i=0;if(!t.match(RegExp(cu))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Ja,"g")),h=new ei(n);return p?.forEach((m,y)=>{if(m==="..."){if(s)throw new Error("Only one ellipsis is allowed per input term");s=!0;let v=o-p.length+1;if(v<0)throw new Error("Ellipsis out of bounds");if(d=a.slice(i,i+v),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<d.length;b++){let _=String.fromCharCode("0".charCodeAt(0)+b);h.addSymbol(_,y+b),this.addSymbol(_,a[i++],n)}}else h.addSymbol(m,y+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(m,a[i++],n)}),h}},pu=e=>e+"_max",Uc=(e,t,r,a)=>{let o=e.map(h=>h.length).map((h,m)=>U(`input${m}`,t,h)),s=D.size(a),d=j("output",t,a.length),i=[...r.symbolToInfo.keys()].filter(h=>!r.rhs.symbolToIndices.has(h)),p=h=>{let m=[],y="var prod = 1.0;",v="var sum = 0.0;",b="sum += prod;",_=[],C=[],x=[],S=[],E=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((R,z)=>{if(r.rhs.symbolToIndices.has(z)){let N=r.rhs.symbolToIndices.get(z)?.[0];N!==void 0&&r.lhs.forEach((K,oe)=>{if(R.inputIndices.includes(oe)){let k=K.symbolToIndices.get(z);if(k===void 0)throw new Error("Invalid symbol error");k.forEach(J=>{m.push(`${o[oe].indicesSet(`input${oe}Indices`,J,d.indicesGet("outputIndices",N))}`)})}})}else r.lhs.forEach((N,K)=>{if(R.inputIndices.includes(K)){let oe=N.symbolToIndices.get(z);if(oe===void 0)throw new Error("Invalid symbol error");oe.forEach(k=>{_.push(`${o[K].indicesSet(`input${K}Indices`,k,`${z}`)}`)}),S.push(`prod *= ${o[K].getByIndices(`input${K}Indices`)};`)}}),C.push(`for(var ${z}: u32 = 0; ${z} < uniforms.${pu(z)}; ${z}++) {`),x.push("}")});let A=E?[...m,`let sum = ${o.map((R,z)=>R.getByIndices(`input${z}Indices`)).join(" * ")};`]:[...m,v,...C,..._,y,...S,b,...x];return`
            ${h.registerUniforms(i.map(R=>({name:`${pu(R)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...o,d)}

            ${h.mainStart()}
            ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${d.offsetToIndices("global_idx")};
            ${o.map((R,z)=>`var input${z}Indices: ${o[z].type.indices};`).join(`
`)}
            ${A.join(`
`)};
            ${d.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let h=i.filter(y=>r.symbolToInfo.has(y)).map(y=>({type:12,data:r.symbolToInfo.get(y)?.dimValue||0}));h.push({type:12,data:s});let m=e.map((y,v)=>[...Z(y)]).reduce((y,v)=>y.concat(v),h);return m.push(...Z(a)),{outputs:[{dims:a,dataType:t}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:m}},getShaderSource:p}},fu=(e,t)=>{let r=new ti(e.inputs,t.equation),a=r.outputDims,n=e.inputs.map((o,s)=>o.dims);e.compute(Uc(n,e.inputs[0].dataType,r,a))},mu=e=>{let t=e.equation.replace(/\s+/g,"");return Se({equation:t})}});var Wc,gu,Nc,Vc,yu,bu=q(()=>{"use strict";he();xe();ve();Wc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},gu=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},Nc=(e,t)=>e.length>t.length?gu(e,t):gu(t,e),Vc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=Nc(t,r),n=e[0].dataType,o=n===9?4:1,s=Math.ceil(D.size(a)/o),d=p=>{let h=U("input",n,t.length,o),m=j("output",n,a.length,o),y;if(n===9){let v=(b,_,C="")=>`
          let outputIndices${_} = ${m.offsetToIndices(`outputOffset + ${_}u`)};
          let offset${_} = ${h.broadcastedIndicesToOffset(`outputIndices${_}`,m)};
          let index${_} = offset${_} / 4u;
          let component${_} = offset${_} % 4u;
          ${b}[${_}] = ${C}(${h.getByOffset(`index${_}`)}[component${_}]);
        `;y=`
        let outputOffset = global_idx * ${o};
        var data = vec4<u32>(0);
        ${v("data",0,"u32")}
        ${v("data",1,"u32")}
        ${v("data",2,"u32")}
        ${v("data",3,"u32")}
        ${m.setByOffset("global_idx","data")}
      }`}else y=`
        let outputIndices = ${m.offsetToIndices("global_idx")};
        let inputOffset = ${h.broadcastedIndicesToOffset("outputIndices",m)};
        ${m.setByOffset("global_idx",h.getByOffset("inputOffset"))}
      }`;return`
    ${p.registerUniform("vec_size","u32").declareVariables(h,m)}
    ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${y}`},i=[{type:12,data:s},...Z(t,a)];return{name:"Expand",shaderCache:{hint:`${a.length}`,inputDependencies:["rank"]},getShaderSource:d,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:i})}},yu=e=>{Wc(e.inputs),e.compute(Vc(e.inputs),{inputs:[0]})}});var Lc,wu,vu=q(()=>{"use strict";he();xe();ve();Xn();Lc=e=>{let t=e[0].dataType,r=D.size(e[0].dims),a=D.size(e[1].dims),n=a%4===0,o=s=>{let d=U("x",t,[1],4),i=U("bias",t,[1],4),p=j("y",t,[1],4),h=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],m=v=>`
      let bias${v}_offset: u32 = (global_idx * 4 + ${v}) % uniforms.bias_size;
      let bias${v} = ${i.getByOffset(`bias${v}_offset / 4`)}[bias${v}_offset % 4];`,y=n?`
      let bias = ${i.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${m(0)}${m(1)}${m(2)}${m(3)}
      let bias = ${d.type.value}(bias0, bias1, bias2, bias3);`;return`${s.registerUniforms(h).declareVariables(d,i,p)}

    ${La(st(t))}

    ${s.mainStart(Fn)}
      ${s.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${d.getByOffset("global_idx")};
      ${y}
      let x_in = x + bias;
      ${p.setByOffset("global_idx",Ga("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${n}`,inputDependencies:["type","type"]},getShaderSource:o,getRunData:s=>({outputs:[{dims:s[0].dims,dataType:s[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:a}],dispatchGroup:{x:Math.ceil(r/Fn/4)}})}},wu=e=>{e.inputs.length<2||D.size(e.inputs[1].dims)===0?As(e):e.compute(Lc(e.inputs))}});var Gc,Hc,$u,_u,Su=q(()=>{"use strict";he();xe();Je();ve();Gc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Hc=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,o=D.normalizeAxis(t.axis,n),s=r.slice(0);s.splice(o,1,...a);let d=r[o],i=e[0].dataType===9?4:1,p=Math.ceil(D.size(s)/i),h=[{type:12,data:p},{type:6,data:d},{type:12,data:o},...Z(e[0].dims,e[1].dims,s)],m=y=>{let v=U("data",e[0].dataType,e[0].dims.length,i),b=U("inputIndices",e[1].dataType,e[1].dims.length),_=j("output",e[0].dataType,s.length,i),C=S=>{let E=a.length,A=`var indicesIndices${S}  = ${b.type.indices}(0);`;for(let R=0;R<E;R++)A+=`${E>1?`indicesIndices${S}[${R}]`:`indicesIndices${S}`} = ${s.length>1?`outputIndices${S}[uniforms.axis + ${R}]`:`outputIndices${S}`};`;A+=`
          var idx${S} = ${b.getByIndices(`indicesIndices${S}`)};
          if (idx${S} < 0) {
            idx${S} = idx${S} + uniforms.axisDimLimit;
          }
          var dataIndices${S} = ${v.type.indices}(0);
        `;for(let R=0,z=0;R<n;R++)R===o?(A+=`${n>1?`dataIndices${S}[${R}]`:`dataIndices${S}`} = u32(idx${S});`,z+=E):(A+=`${n>1?`dataIndices${S}[${R}]`:`dataIndices${S}`} = ${s.length>1?`outputIndices${S}[${z}]`:`outputIndices${S}`};`,z++);return A},x;if(e[0].dataType===9){let S=(E,A,R="")=>`
          let outputIndices${A} = ${_.offsetToIndices(`outputOffset + ${A}u`)};
          ${C(A)};
          let offset${A} = ${v.indicesToOffset(`dataIndices${A}`)};
          let index${A} = offset${A} / 4u;
          let component${A} = offset${A} % 4u;
          ${E}[${A}] = ${R}(${v.getByOffset(`index${A}`)}[component${A}]);
        `;x=`
        let outputOffset = global_idx * ${i};
        var value = vec4<u32>(0);
        ${S("value",0,"u32")}
        ${S("value",1,"u32")}
        ${S("value",2,"u32")}
        ${S("value",3,"u32")}
        ${_.setByOffset("global_idx","value")}
      `}else x=`
      let outputIndices = ${_.offsetToIndices("global_idx")};
      ${C("")};
      let value = ${v.getByIndices("dataIndices")};
      ${_.setByOffset("global_idx","value")};
      `;return`
      ${y.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(v,b,_)}
      ${y.mainStart()}
        ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${x}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:m}},$u=e=>Se({axis:e.axis}),_u=(e,t)=>{let r=e.inputs;Gc(r),e.compute(Hc(e.inputs,t))}});var Fc,qc,xu,Cu,Iu=q(()=>{"use strict";he();xe();Je();ve();Fc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},qc=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,o=e[1].dims,s=e[1].dataType,d=D.normalizeAxis(t.axis,n),i=r[d],p=o.slice(0),h=D.size(p),m=U("input",a,n),y=U("indicesInput",s,o.length),v=j("output",a,p.length),b=[{type:12,data:h},{type:6,data:i},{type:12,data:d}];return b.push(...Z(r,o,p)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:b}),getShaderSource:x=>`
      ${x.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(m,y,v)}
      ${x.mainStart()}
      ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${v.offsetToIndices("global_idx")};

      var idx = ${y.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${m.type.indices}(outputIndices);
      ${m.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${m.getByIndices("inputIndices")};

      ${v.setByOffset("global_idx","value")};
  }`}},xu=e=>Se({axis:e.axis}),Cu=(e,t)=>{let r=e.inputs;Fc(r),e.compute(qc(e.inputs,t))}});var jc,Kc,Tu,Au,Eu=q(()=>{"use strict";he();xe();ve();jc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Kc=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,o,s]=Ln.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),d=[n,o];if(!d)throw new Error("Can't use gemm on the given tensors");let i=D.size(d),p=[{type:12,data:i},{type:12,data:n},{type:12,data:o},{type:12,data:s},{type:1,data:t.alpha},{type:1,data:t.beta}],h=["type","type"];e.length===3&&(p.push(...Z(e[2].dims)),h.push("rank")),p.push(...Z(d));let m=y=>{let v="";t.transA&&t.transB?v="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?v="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?v="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(v="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let b=t.alpha===1?"":"value *= uniforms.alpha;",_=U("a",e[0].dataType,e[0].dims),C=U("b",e[1].dataType,e[1].dims),x=_.type.value,S=null,E=[_,C];e.length===3&&(S=U("c",e[2].dataType,e[2].dims.length),E.push(S));let A=j("output",e[0].dataType,d.length);E.push(A);let R=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${y.registerUniforms(R).declareVariables(...E)}

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${x}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${v}
    }

    ${b}
    ${(()=>S!=null?`let cOffset = ${S.broadcastedIndicesToOffset("vec2(m, n)",A)}; value += ${x}(uniforms.beta) * ${S.getByOffset("cOffset")};`:"")()}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p}),getShaderSource:m}},Tu=e=>{let t=e.transA,r=e.transB,a=e.alpha,n=e.beta;return{transA:t,transB:r,alpha:a,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Au=(e,t)=>{jc(e.inputs),e.compute(Kc(e.inputs,t))}});var Yc,Zc,Qc,Ou,ku=q(()=>{"use strict";he();xe();ve();Yc=(e,t)=>{let r=e[0].dims,a=r,n=2,o=D.sizeToDimension(r,n),s=D.sizeFromDimension(r,n),d=je(s),i=s/d,p=[r[0],r[1],i],h=["rank","type","type"],m=[{type:12,data:s},{type:12,data:i}];m.push(...Z(p,p));let y=v=>{let b=U("x",e[0].dataType,p.length,d),_=U("scale",e[1].dataType,e[1].dims),C=U("bias",e[2].dataType,e[2].dims),x=j("output",e[0].dataType,p.length,d),S=[b,_,C,x],E=b.type.value,A=d===1?"f32":`vec${d}<f32>`,R=64,z=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${A}, ${R}>;
  const workgroupSize = ${R}u;
  ${v.registerUniforms(z).declareVariables(...S)}
  ${v.mainStart(R)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${A}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${A}(${b.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${ut("workgroupShared[0]",d)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${A}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${A}(${b.get("batch","channel","h")}) - ${A}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${ut("workgroupShared[0]",d)};
    }
    workgroupBarrier();

    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));
    let channelScale = invStdDev * f32(${_.getByOffset("channel")});
    let channelShift = f32(${C.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${b.get("batch","channel","h")} * ${E}(${A}(channelScale)) + ${E}(${A}(channelShift));
      ${x.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${d}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:o},programUniforms:m}),getShaderSource:y}},Zc=(e,t,r,a,n,o,s,d)=>{let i=je(s),p=64,h=i===1?"vec2f":`mat2x${i}f`,m=i===1?"f32":`vec${i}f`,y=(z,N)=>`${h}(${z}, ${N})`,v=n*s/i,b=Math.ceil(o/p),_=["type"],C=[{type:12,data:b},{type:12,data:o},{type:12,data:Math.floor(s/i)},{type:12,data:Math.floor(o*s/i)}],x=z=>{let N=U("input",t.dataType,t.dims,i);return`
  ${z.declareVariables(N)}
  @group(0) @binding(1) var<storage, read_write> output : array<${h}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${z.mainStart(p)}
    let currentImageNumber = global_idx / ${p} / uniforms.C;
    let currentChannelNumber = (global_idx / ${p}) % uniforms.C;
    let wgId = global_idx % ${p};
    let wgOffset = wgId * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${tt("f32",i)};
    var squaredSum = ${tt("f32",i)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${m}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${y("sum","squaredSum")};
  }`},S=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${i}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:[n,s,p,2],dataType:1}],dispatchGroup:{x:n*s/i},programUniforms:C}),getShaderSource:x},{inputs:[t],outputs:[-1]})[0],E=[{type:12,data:v},{type:12,data:o},{type:12,data:Math.floor(s/i)},{type:12,data:Math.floor(p*s/i)}],A=["type","type","type"],R=z=>{let N=U("scale",r.dataType,r.dims,i),K=U("bias",a.dataType,a.dims,i);return`
  @group(0) @binding(0) var<storage, read> input : array<${h}>;
  @group(0) @binding(1) var<storage, read> scale : array<${N.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${K.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${h}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${z.mainStart()}
    ${z.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${tt("f32",i)};
    var squaredSum = ${tt("f32",i)};
    for (var i: u32 = 0; i < ${p}; i++) {
        let value = input[offset + i + currentChannelNumber * ${p}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${d}));
    let channelScale = invStdDev * ${m}(scale[currentChannelNumber]);
    let channelShift = ${m}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${y("channelScale","channelShift")};
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${i};${d}`,inputDependencies:A},getRunData:()=>({outputs:[{dims:[n,s,2],dataType:1}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:E}),getShaderSource:R},{inputs:[S,r,a],outputs:[-1]})[0]},Qc=(e,t,r)=>{let a=t[0].dims,n=a,o=a[0],s=a[a.length-1],d=D.sizeFromDimension(a,1)/s,i=je(s),p=D.size(n)/i,h=[{type:12,data:d},{type:12,data:Math.floor(s/i)}],m=["type","type"],y=Zc(e,t[0],t[1],t[2],o,d,s,r.epsilon),v=b=>{let _=We(t[0].dataType),C=i===1?"vec2f":`mat2x${i}f`,x=i===1?_:`vec${i}<${_}>`,S=U("input",t[0].dataType,t[0].dims,i),E=j("output",t[0].dataType,n,i);return`
  @group(0) @binding(0) var<storage, read> input : array<${S.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${C}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${E.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${b.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${x}(scale[0]), ${x}(scale[1]));
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${i}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:v},{inputs:[t[0],y]})},Ou=(e,t)=>{t.format==="NHWC"?Qc(e,e.inputs,t):e.compute(Yc(e.inputs,t))}});var Xc,Jc,Pu,Ru=q(()=>{"use strict";he();xe();ve();Xc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Jc=(e,t,r)=>{let a=e[0].dims,n=e[1],o=e[2],s=a,d=D.normalizeAxis(t.axis,a.length),i=D.sizeToDimension(a,d),p=D.sizeFromDimension(a,d),h=D.size(n.dims),m=o?D.size(o.dims):0;if(h!==p||o&&m!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${h} and bias size of ${m}`);let y=[];for(let A=0;A<a.length;++A)A<d?y.push(a[A]):y.push(1);let v=je(p),b=["type","type"],_=[{type:12,data:i},{type:1,data:p},{type:12,data:Math.floor(p/v)},{type:1,data:t.epsilon}];o&&b.push("type");let C=r>1,x=r>2,S=A=>{let R=We(e[0].dataType),z=[U("x",e[0].dataType,e[0].dims,v),U("scale",n.dataType,n.dims,v)];o&&z.push(U("bias",o.dataType,o.dims,v)),z.push(j("output",e[0].dataType,s,v)),C&&z.push(j("mean_data_output",1,y)),x&&z.push(j("inv_std_output",1,y));let N=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${A.registerUniforms(N).declareVariables(...z)}
  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var meanVector = ${tt("f32",v)};
    var meanSquareVector = ${tt("f32",v)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${wt(R,v,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${ut("meanVector",v)} / uniforms.norm_size;
    let invStdDev =
        inverseSqrt(${ut("meanSquareVector",v)} / uniforms.norm_size - mean * mean + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${wt(R,v,"x[j + offset]")};
      let f32scale = ${wt(R,v,"scale[j]")};
      output[j + offset] = ${z[0].type.value}((f32input - mean) * invStdDev * f32scale
        ${o?`+ ${wt(R,v,"bias[j]")}`:""}
      );
    }

    ${C?"mean_data_output[global_idx] = mean":""};
    ${x?"inv_std_output[global_idx] = invStdDev":""};
  }`},E=[{dims:s,dataType:e[0].dataType}];return C&&E.push({dims:y,dataType:1}),x&&E.push({dims:y,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${v};${r}`,inputDependencies:b},getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(i/64)},programUniforms:_}),getShaderSource:S}},Pu=(e,t)=>{Xc(e.inputs),e.compute(Jc(e.inputs,t,e.outputCount))}});var ep,tp,Bu,Mu,zu=q(()=>{"use strict";he();xe();Je();ve();ep=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],a=r.dims.length;if(r.dims[a-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let n=Math.floor((t.k+t.blockSize-1)/t.blockSize),o=t.blockSize/8*t.bits,s=e[1];if(!D.areEqual(s.dims,[t.n,n,o]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let i=e[2].dims;if(D.size(i)!==t.n*n)throw new Error("scales input size error.");if(e.length===4){let h=e[3].dims,m=t.bits>4?t.n*n:t.n*Math.floor((n+1)/2);if(D.size(h)!==m)throw new Error("zeroPoints input size error.")}},tp=(e,t)=>{let r=e[0],a=e[1],n=e[2],o=r.dims.length,s=r.dims.slice(0,o-1).concat(t.n),d=D.size(s),i=[{type:12,data:d},{type:12,data:t.k},{type:12,data:t.n},{type:12,data:t.accuracyLevel},{type:12,data:t.bits},{type:12,data:t.blockSize}];i.push(...Z(r.dims)),i.push(...Z(D.convertShape(a.dims))),i.push(...Z(n.dims)),e.length===4&&i.push(...Z(D.convertShape(e[3].dims))),i.push(...Z(s));let p=h=>{let m=U("a",e[0].dataType,e[0].dims.length),y=U("b",12,e[1].dims.length),v=U("scales",e[2].dataType,e[2].dims.length),b=[m,y,v],_=e.length===4?U("zero_points",12,e[3].dims.length):void 0;_&&b.push(_);let C=j("output",e[0].dataType,s.length),x=[{name:"output_size",type:"u32"},{name:"k",type:"u32"},{name:"n",type:"u32"},{name:"accuracy_level",type:"u32"},{name:"bits",type:"u32"},{name:"block_size",type:"u32"}],S=Math.floor((t.k+t.blockSize-1)/t.blockSize),A=t.blockSize/8*t.bits/4,R=We(e[0].dataType);return`
        fn ortUnpack8x4snorm(value: u32) -> array<${R}, 8>{
          var result = array<${R}, 8>();
          var offset: u32 = 0;
          let count: u32 = 4;
          for (var i: u32 = 0; i < 8u; i++) {
            result[i] = ${R}(extractBits(value, offset, count));
            offset += count;
          }
          return result;
        }
        ${h.registerUniforms(x).declareVariables(...b,C)}
        ${h.mainStart()}
          ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var value: ${R} = 0.0;
          let output_indices = ${C.offsetToIndices("global_idx")};
          var a_indices: ${m.type.indices} = output_indices;
          var n = ${C.indicesGet("output_indices",o-1)};
          // Two zero points are packed into one byte because uniforms.bits <= 4.
          // zero_point_offset is either 0 or 4. It is bit offset within one byte.
          // TODO support zero_point_offset for bits > 4
          ${_?`
            var zero_point_index: u32 = n * ((${S} + 1) / 2) / 4;
            var zero_point_word: u32 = ${_.getByOffset("zero_point_index")};
            var zero_point_offset: u32 = 0;`:""}
          var scale_idex = n * ${S};
          var b_indices: ${y.type.indices};
          ${y.indicesSet("b_indices","0","n")};
          var block_offset: u32 = 0;
          for (var block: u32 = 0; block < ${S}; block++) {
            // The scale and zero points are computed per block.
            let scale = ${v.getByOffset("scale_idex")};
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point: ${R} = ${_?`${R}(extractBits(zero_point_word, zero_point_offset, 4))`:8};
            ${y.indicesSet("b_indices","1","block")};
            var word_offset: u32 = block_offset;
            for (var word: u32 = 0; word < ${A}; word++) {
              ${y.indicesSet("b_indices","2","word")};
              let b_value = ${y.getByIndices("b_indices")};
              let b_quantized_values: array<${R}, 8> = ortUnpack8x4snorm(b_value);
              // Number of B elements per 32-bit word is 32/bits = 32/4 = 8
              var offset: u32 = word_offset;
              for (var i: u32 = 0; i < 8; i++) {
                ${m.indicesSet("a_indices",o-1,"offset")};
                let a_value = ${m.getByIndices("a_indices")};
                let b_quantized_value = b_quantized_values[i];
                let b_dequantized_value = (b_quantized_value - zero_point) * scale;
                value += a_value * b_dequantized_value;
                offset++;
              }
              word_offset += 8;
            }
            scale_idex++;
            ${_?`
            if (zero_point_offset == 28) {
              zero_point_offset = 0;
              zero_point_index++;
              zero_point_word = ${_.getByOffset("zero_point_index")};
            } else {
              zero_point_offset += 4;
            }`:""}
            block_offset += uniforms.block_size;
          }
          ${C.setByOffset("global_idx","value")};
        }
        `};return{name:"MatMulNBits",shaderCache:{hint:`${t.cacheKey};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:i}),getShaderSource:p}},Bu=(e,t)=>{ep(e.inputs,t),e.compute(tp(e.inputs,t))},Mu=e=>Se(e)});var rp,Uu,Du,np,ri,Wu,Nu=q(()=>{"use strict";he();xe();Je();Nn();Va();ve();br();rp=(e,t)=>{let r=e[0],a=e[1],n=e[2],o=e[3],s=e[4],d=e[5],i=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,m=r.dims[0],y=r.dims[1],v=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=y,_=0,C=0,x=Math.floor(v/t.numHeads);if(i&&p){if(i.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(p.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');_=i.dims[2],C=i.dims[2]}else if(i||p)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let S;if(a){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(a.dims.length<3||a.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(a.dims.length===3){if(a.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');S=2,b=a.dims[1]}else if(a.dims.length===5){if(a.dims[2]!==t.numHeads||a.dims[3]!==2||a.dims[4]!==x)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');S=5,b=a.dims[1]}else{if(a.dims[1]!==t.numHeads||a.dims[3]!==x)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');S=0,b=a.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');S=3}if(o){if(o.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let E=0;if(s){E=8;let K=s.dims;throw K.length===1?K[0]===m?E=1:K[0]===3*m+2&&(E=3):K.length===2&&K[0]===m&&K[1]===b&&(E=5),E===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let A=!1,R=v;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(b!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');R=n.dims[2]}else{if(b!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');R=n.dims[1]*n.dims[3],A=!0}}let z=_+b,N=!1;if(s)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(i)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:m,sequenceLength:y,pastSequenceLength:_,kvSequenceLength:b,totalSequenceLength:z,maxSequenceLength:C,inputHiddenSize:0,hiddenSize:v,vHiddenSize:R,headSize:x,vHeadSize:Math.floor(R/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:E,scale:t.scale,broadcastResPosBias:N,passPastInKv:A,qkvFormat:S}},Uu=e=>Se({...e}),Du=Se({perm:[0,2,1,3]}),np=(e,t,r,a,n,o,s)=>{let d=[a,n,o],i=D.size(d),p=[{type:12,data:i},{type:12,data:s},{type:12,data:o}],h=m=>{let y=j("qkv_with_bias",t.dataType,d),v=U("qkv",t.dataType,d),b=U("bias",r.dataType,d),_=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${m.registerUniforms(_).declareVariables(v,b,y)}
  ${m.mainStart()}
    ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},ri=(e,t,r,a,n,o,s,d)=>{let i=o;if(s){if(a===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return i=np(e,o,s,t,a,r*n,d),i=i.reshape([t,a,r,n]),e.compute(vt(i,Du.perm),{inputs:[i],outputs:[-1]})[0]}else return o.dims.length===3&&(i=o.reshape([t,a,r,n])),e.compute(vt(i,Du.perm),{inputs:[i],outputs:[-1]})[0]},Wu=(e,t)=>{let r=rp(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let a=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=ri(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(a)return Yn(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let o=ri(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),s=ri(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Yn(e,n,o,s,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var ap,ip,op,sp,up,lp,dp,cp,Vu,Lu=q(()=>{"use strict";he();xe();ve();ap=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},ip=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
            k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${de("uniforms.x_shape",n,t)})) {
              break;
            }
            offset += k * i32(${de("uniforms.x_strides",n,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${a}
            value = x[offset];
          }
      `},op=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${de("uniforms.x_shape",n,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${de("uniforms.x_shape",n,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${de("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},sp=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${de("uniforms.x_shape",n,t)})) {
                  k = i32(${de("uniforms.x_shape",n,t)}) - 1;
                }
                offset += k * i32(${de("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},up=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};
                if (k < 0)  {
                  k += i32(${de("uniforms.x_shape",n,t)}]);
                }
                if (k >= i32(${de("uniforms.x_shape",n,t)})) {
                  k -= i32(${de("uniforms.x_shape",n,t)});
                }
                offset += k * i32(${de("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},lp=(e,t,r)=>{switch(r.mode){case 0:return ip(e,t,r.pads.length);case 1:return op(e,t,r.pads.length);case 2:return sp(e,t,r.pads.length);case 3:return up(e,t,r.pads.length);default:throw new Error("Invalid mode")}},dp=(e,t)=>{let r=D.padShape(e[0].dims.slice(),t.pads),a=e[0].dims,n=D.size(r),o=[{type:12,data:n},{type:12,data:t.pads}];t.mode===0&&o.push({type:e[0].dataType,data:t.value}),o.push(...Z(e[0].dims,r));let s=["rank"],d=i=>{let p=j("output",e[0].dataType,r.length),h=U("x",e[0].dataType,a.length),m=h.type.value,y=lp(p,a.length,t),v=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&v.push({name:"constant_value",type:m}),`
            ${i.registerUniforms(v).declareVariables(h,p)}
            ${i.mainStart()}
            ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${p.offsetToIndices("global_idx")};

            var value = ${m}(0);
            ${y}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:s},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(D.size(r)/64)},programUniforms:o}),getShaderSource:d}},cp=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,o=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let i=0;i<d.length;i++)o[Number(d[i])]=Number(r[i]),o[Number(d[i])+n]=Number(r[i+d.length])}else r.forEach((d,i)=>o[Number(i)]=Number(d));let s=[];return o.forEach(d=>s.push(d)),{mode:t.mode,value:a,pads:s}}else return t},Vu=(e,t)=>{ap(e.inputs);let r=cp(e.inputs,t);e.compute(dp(e.inputs,r),{inputs:[0]})}});var ia,Gu,Hu,Fu,qu,pp,fp,ju,Ku,Yu,Zu,Qu,Xu,Ju,el,tl,rl,nl,al,il=q(()=>{"use strict";mt();he();xe();ve();ia=e=>{if(Ae.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Gu=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let o=Object.hasOwnProperty.call(t,"dilations"),s=t.kernelShape.slice(),d=t.strides.slice(),i=o?t.dilations.slice():[],p=t.pads.slice();Jt.adjustPoolAttributes(r,n,s,d,i,p);let h=Jt.computePoolOutputShape(r,n,d,i,s,p,t.autoPad),m=Object.assign({},t);o?Object.assign(m,{kernelShape:s,strides:d,pads:p,dilations:i,cacheKey:t.cacheKey}):Object.assign(m,{kernelShape:s,strides:d,pads:p,cacheKey:t.cacheKey});let y=h.slice();return y.push(y.splice(1,1)[0]),[m,a?y:h]},Hu=(e,t)=>{let r=t.format==="NHWC",a=D.size(e),n=D.size(t.kernelShape),o=[{type:12,data:a},{type:12,data:n}],s=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],i=t.strides[t.strides.length-1],p=t.pads[t.pads.length/2-1],h=t.pads[t.pads.length-1],m=!!(p+h);o.push({type:12,data:d},{type:12,data:i},{type:12,data:p},{type:12,data:h}),s.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let y=!1;if(t.kernelShape.length===2){let v=t.kernelShape[t.kernelShape.length-2],b=t.strides[t.strides.length-2],_=t.pads[t.pads.length/2-2],C=t.pads[t.pads.length-2];y=!!(_+C),o.push({type:12,data:v},{type:12,data:b},{type:12,data:_},{type:12,data:C}),s.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[o,s,!0,m,y]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=D.computeStrides(t.kernelShape);o.push({type:12,data:d},{type:12,data:t.pads},{type:12,data:t.strides}),s.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let i=t.pads.reduce((p,h)=>p+h);return[o,s,!!i,!1,!1]}},Fu=(e,t,r,a,n,o,s,d,i,p,h,m)=>{let y=n.format==="NHWC",v=t.type.value,b=j("output",t.type.tensor,a);if(n.kernelShape.length<=2){let _="",C="",x="",S=r-(y?2:1);if(h?_=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${S}] < 0 || xIndices[${S}]
                      >= uniforms.x_shape[${S}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${o}
                }`:_=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${o}
                }`,n.kernelShape.length===2){let A=r-(y?3:2);m?C=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${A}] = indices[${A}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${A}] < 0 || xIndices[${A}] >= uniforms.x_shape[${A}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:C=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${A}] = indices[${A}] * uniforms.sh - uniforms.phStart + j;
                `,x=`
              }
            `}return`
            ${e.registerUniforms(i).declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var value = ${v}(${d});
              var pad = 0;
              ${C}
              ${_}
              ${x}
              ${s}

              output[global_idx] = value;
            }`}else{if(y)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let _=n.kernelShape.length,C=n.pads.length,x="";return p?x=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${o}
              }`:x=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${o}
            `,`
            ${e.registerUniforms(i).declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var offsets: array<u32, ${_}>;

              var value = ${v}(${d});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${_-1}u; j++) {
                  offsets[j] = offset / ${de("uniforms.kernelStrides","j",_)};
                  offset -= offsets[j] * ${de("uniforms.kernelStrides","j",_)};
                }
                offsets[${_-1}] = offset;

                isPad = false;
                for (var j = ${r-_}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${de("uniforms.strides",`j - ${r-_}u`,_)}
                    + offsets[j - ${r-_}u] - ${de("uniforms.pads","j - 2u",C)};
                  ${x}
              }
              ${s}

              output[global_idx] = value;
            }`}},qu=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,pp=e=>`${qu(e)};${e.countIncludePad}`,fp=e=>`${qu(e)};${e.storageOrder};${e.dilations}`,ju=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Ku=(e,t,r,a)=>{let[n,o]=Gu(t,a,r),s=U("x",t.dataType,t.dims.length),d=s.type.value,i="value += x_val;",p="";n.countIncludePad?p+=`value /= ${d}(uniforms.kernelSize);`:p+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[h,m,y,v,b]=Hu(o,n);h.push(...Z(t.dims,o));let _=["rank"];return{name:e,shaderCache:{hint:`${a.cacheKey};${y};${v};${b}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(o)/64)},programUniforms:h}),getShaderSource:C=>Fu(C,s,t.dims.length,o.length,n,i,p,0,m,y,v,b)}},Yu=e=>{let t=e.count_include_pad!==0,r=ju(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let a={countIncludePad:t,...r,cacheKey:""};return{...a,cacheKey:pp(a)}},Zu=(e,t)=>{ia(e.inputs),e.compute(Ku("AveragePool",e.inputs[0],!1,t))},Qu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Xu=e=>{let t=e.format;return{format:t,...Qu,cacheKey:t}},Ju=(e,t)=>{ia(e.inputs),e.compute(Ku("GlobalAveragePool",e.inputs[0],!0,t))},el=(e,t,r,a)=>{let[n,o]=Gu(t,a,r),s=`
      value = max(x_val, value);
    `,d="",i=U("x",t.dataType,t.dims.length),p=["rank"],[h,m,y,v,b]=Hu(o,n);return h.push(...Z(t.dims,o)),{name:e,shaderCache:{hint:`${a.cacheKey};${y};${v};${b}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(o)/64)},programUniforms:h}),getShaderSource:_=>Fu(_,i,t.dims.length,o.length,n,s,d,-1e5,m,y,v,b)}},tl=(e,t)=>{ia(e.inputs),e.compute(el("MaxPool",e.inputs[0],!1,t))},rl=e=>{let t=e.storage_order,r=e.dilations,a=ju(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:t,dilations:r,...a,cacheKey:""};return{...n,cacheKey:fp(n)}},nl=e=>{let t=e.format;return{format:t,...Qu,cacheKey:t}},al=(e,t)=>{ia(e.inputs),e.compute(el("GlobalMaxPool",e.inputs[0],!0,t))}});var hp,gp,ol,sl=q(()=>{"use strict";mt();he();ve();hp=(e,t,r)=>{let a=e===t,n=e<t&&r<0,o=e>t&&r>0;if(a||n||o)throw new Error("Range these inputs' contents are invalid.")},gp=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),o=[n],s=n,d=[{type:12,data:s},{type:a,data:e},{type:a,data:r},...Z(o)],i=p=>{let h=j("output",a,o.length),m=h.type.value,y=[{name:"outputSize",type:"u32"},{name:"start",type:m},{name:"delta",type:m}];return`
        ${p.registerUniforms(y).declareVariables(h)}
        ${p.mainStart()}
        ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${m}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${a}`},getShaderSource:i,getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:d})}},ol=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Ae.webgpu.validateInputContent&&hp(t,r,a),e.compute(gp(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var yp,bp,wp,vp,$p,_p,Sp,xp,Cp,Ip,Tp,ul,Ap,Ep,Op,kp,Pp,ll,dl,cl=q(()=>{"use strict";he();xe();Je();ve();yp=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},bp=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,o)=>a[n]=e[o]),a},wp=(e,t,r,a,n,o)=>{let[s,d,i]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(s>0&&e.length>s&&e[s].dims.length>0)e[s].getFloat32Array().forEach(h=>o.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(h=>a.push(h)),a.length!==0&&a.length!==p&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");yp(a,t),t.axes.length>0&&bp(a,t.axes,p).forEach((h,m)=>a[m]=h)}if(i>0&&e.length>i&&(e[i].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},vp=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",$p=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",_p=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((o,s)=>{a[o]=n[s],a[s+r]=n[t.length+s]}),a):n},Sp=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(o=>n.push(o)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((o,s)=>n[o]=r[s])}else r.forEach(o=>n.push(o));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((o,s)=>Math.round(o*t[s]))}return n},xp=(e,t,r)=>{let a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(o=>t[o]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(o=>t[o]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(o=>t[o]=a),r.axes.forEach(o=>n[o]=Math.round(e[o]*t[o]))):(t.fill(a,0,t.length),n.forEach((o,s)=>n[s]=Math.round(o*t[s]))),n},Cp=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${de("uniforms.scales","i",a)};
        var roi_low = ${de("uniforms.roi","i",n)};
        var roi_hi = ${de("uniforms.roi",`i + ${t.length}`,n)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${de("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${de("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,Ip=(e,t,r,a,n,o,s)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${a.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${de("uniforms.scales","i",n)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${de("uniforms.roi","i",o)};
          var roi_hi = ${de("uniforms.roi",`i + ${r.length}`,o)};
          var input_shape_i = ${de("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${de("uniforms.output_shape","i",a.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${s} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,Tp=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${de("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,ul=(e,t,r,a)=>e.rank>a?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",Ap=(e,t,r,a,n)=>{let[s,d,i,p]=r.length===2?[-1,0,1,-1]:[0,2,3,1],h=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(row, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(col, ${r[i]} - 1))`)};
      ${ul(e,p,s,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${h} = originalIndices[${d}];
      var col:${h} = originalIndices[${i}];
      ${a?`if (row < 0 || row > (${r[d]} - 1) || col < 0 || col > (${r[i]} - 1)) {
        return ${n};
      }`:""};
      row = max(0, min(row, ${r[d]} - 1));
      col = max(0, min(col, ${r[i]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${p}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${s}])`:"0"};
      var x11: ${h} = getInputValue(batch, channel, row1, col1);
      var x12: ${h} = getInputValue(batch, channel, row1, col2);
      var x21: ${h} = getInputValue(batch, channel, row2, col1);
      var x22: ${h} = getInputValue(batch, channel, row2, col2);
      var dx1: ${h} = abs(row - ${h}(row1));
      var dx2: ${h} = abs(${h}(row2) - row);
      var dy1: ${h} = abs(col - ${h}(col1));
      var dy2: ${h} = abs(${h}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Ep=(e,t,r,a,n,o,s,d,i,p)=>{let h=r.length===2,m=!0,[y,v]=h?[0,1]:m?[2,3]:[1,2],b=e.type.value,_=C=>{let x=C===y?"row":"col";return`
      fn ${x}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${b} {
        var output_index = ${t.indicesGet("output_indices",C)};
        var originalIdx: ${b} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[C]},
        ${a[C]}, ${r[C]}, ${o[C]}, ${o[C]} + ${r.length});
        var fractOriginalIdx: ${b} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${d} && (originalIdx < 0 || originalIdx > (${r[C]} - 1))) {
          return ${i};
        }
        var data: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${x}: ${b} = originalIdx + ${b}(i);
          if (${x} < 0 || ${x} >= ${r[C]}) {
            ${(()=>p?`coefs[i + 1] = 0.0;
                        continue;`:d?`return ${i};`:`${x} = max(0, min(${x}, ${r[C]} - 1));`)()};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",C,`u32(${x})`)};
          data[i + 1] = ${C===y?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${_(y)};
    ${_(v)};
  fn getCubicInterpolationCoefs(s: ${b}) -> array<${b}, 4> {
    var absS = abs(s);
    var coeffs: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${b} = 1.0 - absS;
    var twoMinusAbsS: ${b} = 2.0 - absS;
    var onePlusAbsS: ${b} = 1.0 + absS;
    coeffs[0] = ((${s} * onePlusAbsS - 5 * ${s}) * onePlusAbsS + 8 * ${s}) * onePlusAbsS - 4 * ${s};
    coeffs[1] = ((${s} + 2) * absS - (${s} + 3)) * absS * absS + 1;
    coeffs[2] = ((${s} + 2) * oneMinusAbsS - (${s} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${s} * twoMinusAbsS - 5 * ${s}) * twoMinusAbsS + 8 * ${s}) * twoMinusAbsS - 4 * ${s};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${b}, 4>, coefs: array<${b}, 4>) -> ${b} {
    var coefsSum: ${b} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${b} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},Op=(e,t,r,a,n)=>{let[s,d,i,p,h]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],m=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${m} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(depth, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(height, ${r[i]} - 1))`)};
      ${e.indicesSet("input_indices",p,`max(0, min(width, ${r[p]} - 1))`)};
      ${ul(e,h,s,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${m} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${m} = originalIndices[${d}];
      var height:${m} = originalIndices[${i}];
      var width:${m} = originalIndices[${p}];
      ${a?`if (depth < 0 || depth > (${r[d]} - 1) || height < 0 || height > (${r[i]} - 1) || width < 0 || (width > ${r[p]} - 1)) {
      return ${n};
        }`:""};

    depth = max(0, min(depth, ${r[d]} - 1));
      height = max(0, min(height, ${r[i]} - 1));
      width = max(0, min(width, ${r[p]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${h}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${s}])`:"0"};

      var x111: ${m} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${m} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${m} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${m} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${m} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${m} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${m} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${m} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${m} = abs(depth - ${m}(depth1));
      var dx2: ${m} = abs(${m}(depth2) - depth);
      var dy1: ${m} = abs(height - ${m}(height1));
      var dy2: ${m} = abs(${m}(height2) - height);
      var dz1: ${m} = abs(width - ${m}(width1));
      var dz2: ${m} = abs(${m}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},kp=(e,t,r,a,n,o)=>{let s=e.dims,d=_p(o,t.axes,s.length),i=Sp(s,a,n,t.axes),p=a.slice();a.length===0&&(p=s.map((S,E)=>S===0?1:i[E]/S),t.keepAspectRatioPolicy!=="stretch"&&(i=xp(s,p,t)));let h=j("output",e.dataType,i.length),m=U("input",e.dataType,s.length),y=D.size(i),v=s.length===i.length&&s.every((S,E)=>S===i[E]),b=t.coordinateTransformMode==="tf_crop_and_resize",_=t.extrapolationValue,C=m.type.value,x=S=>`
      ${v?"":`
      ${vp(t.coordinateTransformMode,C)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${Tp(m,s)};
              ${$p(t.nearestMode,r,C)};
              ${Ip(m,h,s,i,p.length,d.length,b)};
              `;case"linear":return`
              ${Cp(h,s,i,p.length,d.length)};
              ${(()=>{if(s.length===2||s.length===4)return`${Ap(m,h,s,b,_)}`;if(s.length===3||s.length===5)return`${Op(m,h,s,b,_)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(s.length===2||s.length===4)return`${Ep(m,h,s,i,p,d,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${S.registerUniform("output_size","u32").registerUniform("scales","f32",p.length).registerUniform("roi","f32",d.length).declareVariables(m,h)}
      ${S.mainStart()}
        ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${v?"output[global_idx] = input[global_idx];":`
        let output_indices = ${h.offsetToIndices("global_idx")};
        var input_indices: ${m.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${m.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${s.length===2||s.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${d.length>0?d:""}|${v}|${s}`,inputDependencies:["rank"]},getShaderSource:x,getRunData:()=>({outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:[{type:12,data:y},{type:1,data:p},{type:1,data:d},...Z(s,i)]})}},Pp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},ll=(e,t)=>{let r=[],a=[],n=[],o=Pp(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");wp(e.inputs,t,o,r,a,n),e.compute(kp(e.inputs[0],t,o,r,a,n),{inputs:[0]})},dl=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,o=e.excludeOutside!==0,s=e.extrapolationValue,d=e.keepAspectRatioPolicy,i=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return Se({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:o,extrapolationValue:s,keepAspectRatioPolicy:d,mode:i,nearestMode:p})}});var Rp,Bp,pl,fl=q(()=>{"use strict";he();xe();ve();Rp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],o=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==o)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let s=e[3];if(s.dims.length!==1)throw new Error("Beta must be 1D");if(s.dims[s.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let s=e[4];if(s.dims.length!==1)throw new Error("Bias must be 1D");if(s.dims[s.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},Bp=(e,t,r,a)=>{let n=e[0].dims,o=D.size(n),s=n,d=o,i=n.slice(-1)[0],p=a?n.slice(0,-1).concat(1):[],h=e.length>3,m=e.length>4,y=a&&r>1,v=a&&r>2,b=r>3,_=je(i),C=[{type:12,data:d},{type:12,data:_},{type:12,data:i},{type:1,data:t.epsilon}],x=E=>{let A=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],R=[U("x",e[0].dataType,e[0].dims,_),U("skip",e[1].dataType,e[1].dims,_),U("gamma",e[2].dataType,e[2].dims,_)];h&&R.push(U("beta",e[3].dataType,e[3].dims,_)),m&&R.push(U("bias",e[4].dataType,e[4].dims,_)),R.push(j("output",e[0].dataType,s,_)),y&&R.push(j("mean_output",1,p)),v&&R.push(j("inv_std_output",1,p)),b&&R.push(j("input_skip_bias_sum",e[0].dataType,s,_));let z=We(e[0].dataType);return`

      ${E.registerUniforms(A).declareVariables(...R)}

      ${E.mainStart()}
        ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}
        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        let offset = global_idx * hidden_size_vectorized;
        var sum = ${tt("f32",_)};
        var squareSum = ${tt("f32",_)};
        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${m?"bias[i]":"0.0"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${b?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${wt(z,_,"value")};
          sum += f32_value;
          squareSum += f32_value * f32_value;
        }
        let mean = ${ut("sum",_)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${ut("squareSum",_)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);
        ${y?"mean_output[global_idx] = mean;":""}
        ${v?"inv_std_output[global_idx] = inv_std_dev;":""}
        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {
          output[offset + i] = (output[offset + i] - ${z}(mean)) * ${z}(inv_std_dev) * gamma[i] + ${h?"beta[i]":"0.0"};
        }
      }`},S=[{dims:s,dataType:e[0].dataType}];return r>1&&S.push({dims:p,dataType:1}),r>2&&S.push({dims:p,dataType:1}),r>3&&S.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${_};${y};${v};${b}`,inputDependencies:e.map((E,A)=>"type")},getShaderSource:x,getRunData:()=>({outputs:S,dispatchGroup:{x:Math.ceil(d/i/64)},programUniforms:C})}},pl=(e,t)=>{Rp(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(Bp(e.inputs,t,e.outputCount,!1),{outputs:a})}});var Mp,oa,zp,ml,Dp,Up,hl,gl,yl=q(()=>{"use strict";he();xe();Je();ve();Mp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},oa=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},zp=(e,t)=>{if(e.length>1){let r=oa(e,1),a=oa(e,2),n=oa(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),Se({starts:r,ends:a,axes:n})}else return t},ml=(e,t,r,a,n)=>{let o=e;return e<0&&(o+=r[a[t]]),n[t]<0?Math.max(0,Math.min(o,r[a[t]]-1)):Math.max(0,Math.min(o,r[a[t]]))},Dp=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${de("uniforms.input_shape","i",r.length)};
            let steps_i = ${de("uniforms.steps","i",r.length)};
            let signs_i = ${de("uniforms.signs","i",r.length)};
            let starts_i = ${de("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Up=(e,t)=>{let r=e[0].dims,a=D.size(r),n=t.axes.length>0?D.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],o=oa(e,4);o.forEach(x=>x!==0||(()=>{throw new Error("step cannot be 0")})),o.length===0&&(o=Array(n.length).fill(1));let s=t.starts.map((x,S)=>ml(x,S,r,n,o)),d=t.ends.map((x,S)=>ml(x,S,r,n,o));if(n.length!==s.length||n.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let x=0;x<r.length;++x)n.includes(x)||(s.splice(x,0,0),d.splice(x,0,r[x]),o.splice(x,0,1));let i=o.map(x=>Math.sign(x));o.forEach((x,S,E)=>{if(x<0){let A=(d[S]-s[S])/x,R=s[S],z=R+A*o[S];s[S]=z,d[S]=R,E[S]=-x}});let p=r.slice(0);n.forEach((x,S)=>{p[x]=Math.ceil((d[x]-s[x])/o[x])});let h={dims:p,dataType:e[0].dataType},m=j("output",e[0].dataType,p.length),y=U("input",e[0].dataType,e[0].dims.length),v=D.size(p),b=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:s.length},{name:"signs",type:"i32",length:i.length},{name:"steps",type:"u32",length:o.length}],_=[{type:12,data:v},{type:12,data:s},{type:6,data:i},{type:12,data:o},...Z(e[0].dims,p)],C=x=>`
      ${x.registerUniforms(b).declareVariables(y,m)}
        ${Dp(y,m,r)}
        ${x.mainStart()}
          ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${m.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${m.setByOffset("global_idx",y.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${i.length}_${s.length}_${o.length}`,inputDependencies:["rank"]},getShaderSource:C,getRunData:()=>({outputs:[h],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:_})}},hl=(e,t)=>{Mp(e.inputs,t);let r=zp(e.inputs,t);e.compute(Up(e.inputs,r),{inputs:[0]})},gl=e=>{let t=e.starts,r=e.ends,a=e.axes;return Se({starts:t,ends:r,axes:a})}});var Wp,Np,bl,wl,vl=q(()=>{"use strict";he();xe();Je();ve();Wp=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Np=(e,t)=>{let r=e.dims,a=D.size(r),n=64,o=t.axis;if(o<0&&(o=r.length+o),o<r.length-1)throw new Error("softmax only supports last axis for now.");let s=r[o],d=a/s,i=je(s),p=s/i,h=(C,x)=>x===4?`max(max(${C}.x, ${C}.y), max(${C}.z, ${C}.w))`:x===2?`max(${C}.x, ${C}.y)`:x===3?`max(max(${C}.x, ${C}.y), ${C}.z)`:C,m=U("x",e.dataType,e.dims,i),y=j("result",e.dataType,e.dims,i),v=m.type.value,b=We(e.dataType)==="f32"?`var threadMax = ${v}(-3.402823e+38f);`:`var threadMax = ${v}(-65504.0h);`,_=C=>`
      var<workgroup> rowMaxShared : ${v};
      var<workgroup> rowSumShared : ${v};
      var<workgroup> threadShared : array<${v}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${v} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${v}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${C.registerUniform("packedCols","i32").declareVariables(m,y)}
      ${C.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${b}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${v}(${h("threadShared[0]",i)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${v}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${v}(${ut("threadShared[0]",i)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${i}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:12,data:p}]}),getShaderSource:_}},bl=(e,t)=>{Wp(e.inputs),e.compute(Np(e.inputs[0],t))},wl=e=>Se({axis:e.axis})});var Vp,Lp,Gp,Hp,Fp,$l,_l,Sl=q(()=>{"use strict";he();xe();Je();ve();Vp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Lp=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),Se({numOutputs:a,axis:t.axis,splitSizes:r})},Gp=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${de("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Hp=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (output_number == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${a}) { ${n} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Fp=(e,t)=>{let r=e[0].dims,a=D.size(r),n=e[0].dataType,o=D.normalizeAxis(t.axis,r.length),s=new Array(t.numOutputs),d=U("input",n,r),i=new Array(t.numOutputs),p=[],h=[],m=0,y=[{type:12,data:a}];for(let b=0;b<t.numOutputs;b++){m+=t.splitSizes[b],i[b]=m;let _=r.slice();_[t.axis]=t.splitSizes[b],h.push(_),s[b]=j(`output${b}`,n,_),p.push({dims:h[b],dataType:e[0].dataType})}y.push({type:12,data:i},...Z(r,...h));let v=b=>`
  ${b.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",i.length).declareVariables(d,...s)}
  ${Gp(i.length)}
  ${Hp(s)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${d.offsetToIndices("global_idx")};
    var index = ${d.indicesGet("indices",o)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${de("uniforms.size_in_split_axis","output_number - 1u",i.length)};
      ${d.indicesSet("indices",o,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:`${t.cacheKey};${r}`,inputDependencies:["rank"]},getShaderSource:v,getRunData:()=>({outputs:p,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:y})}},$l=(e,t)=>{Vp(e.inputs);let r=e.inputs.length===1?t:Lp(e.inputs,t);e.compute(Fp(e.inputs,r),{inputs:[0]})},_l=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Se({axis:t,numOutputs:a,splitSizes:r})}});var xl,qp,jp,Kp,Cl,Il=q(()=>{"use strict";he();xe();ve();xl=e=>Array.from(e.getBigInt64Array(),Number),qp=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(xl(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},jp=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},Kp=e=>{let t=e[0].dims,r=xl(e[1]),a=jp(t,r),n=D.size(a),o=e[0].dataType,s=U("input",o,t.length),d=j("output",o,a.length),i=p=>`
      const inputShape = ${s.indices(...t)};
      ${p.registerUniform("output_size","u32").declareVariables(s,d)}
      ${p.mainStart()}
      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${d.offsetToIndices("global_idx")};
      var input_indices: ${s.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${s.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;

        ${s.indicesSet("input_indices","i","input_dim_value")}
      }
      ${d.setByOffset("global_idx",s.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},...Z(e[0].dims,a)]}),getShaderSource:i}},Cl=e=>{qp(e.inputs),e.compute(Kp(e.inputs),{inputs:[0]})}});var Yp,Zp,Tl,Al=q(()=>{"use strict";he();xe();ve();Yp=(e,t,r,a,n)=>{let o=j("output_data",n,r.length,4),s=U("a_data",t[1].dataType,t[1].dims.length,4),d=U("b_data",t[2].dataType,t[2].dims.length,4),i=U("c_data",t[0].dataType,t[0].dims.length,4),p,h=(m,y,v)=>`select(${y}, ${m}, ${v})`;if(!a)p=o.setByOffset("global_idx",h(s.getByOffset("global_idx"),d.getByOffset("global_idx"),i.getByOffset("global_idx")));else{let m=(y,v,b="")=>{let _=`a_data[index_a${v}][component_a${v}]`,C=`b_data[index_b${v}][component_b${v}]`,x=`bool(c_data[index_c${v}] & ${4278190080>>>(3-v)*8}u)`;return`
            let output_indices${v} = ${o.offsetToIndices(`global_idx * 4u + ${v}u`)};
            let offset_a${v} = ${s.broadcastedIndicesToOffset(`output_indices${v}`,o)};
            let offset_b${v} = ${d.broadcastedIndicesToOffset(`output_indices${v}`,o)};
            let offset_c${v} = ${i.broadcastedIndicesToOffset(`output_indices${v}`,o)};
            let index_a${v} = offset_a${v} / 4u;
            let index_b${v} = offset_b${v} / 4u;
            let index_c${v} = offset_c${v} / 4u;
            let component_a${v} = offset_a${v} % 4u;
            let component_b${v} = offset_b${v} % 4u;
            ${y}[${v}] = ${b}(${h(_,C,x)});
          `};n===9?p=`
            var data = vec4<u32>(0);
            ${m("data",0,"u32")}
            ${m("data",1,"u32")}
            ${m("data",2,"u32")}
            ${m("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:p=`
            ${m("output_data[global_idx]",0)}
            ${m("output_data[global_idx]",1)}
            ${m("output_data[global_idx]",2)}
            ${m("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(i,s,d,o)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${p}
      }`},Zp=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,o=!(D.areEqual(t,r)&&D.areEqual(r,a)),s=t,d=D.size(t);if(o){let p=xt.calcShape(xt.calcShape(t,r,!1),a,!1);if(!p)throw new Error("Can't perform where op on the given tensors");s=p,d=D.size(s)}let i=Math.ceil(d/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:p=>Yp(p,e,s,o,n),getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:12,data:i},...Z(a,t,r,s)]})}},Tl=e=>{e.compute(Zp(e.inputs))}});var El,Ol=q(()=>{"use strict";Ho();Va();jo();Yo();Rs();Hs();js();ja();su();du();hu();bu();vu();Su();Iu();Eu();ku();Ru();Ya();zu();Nu();Lu();il();sl();jn();cl();fl();yl();vl();Sl();Il();br();Xn();Al();El=new Map([["Abs",[Zo]],["Acos",[Qo]],["Acosh",[Xo]],["Add",[Bs]],["ArgMax",[Go,Na]],["ArgMin",[Lo,Na]],["Asin",[Jo]],["Asinh",[es]],["Atan",[ts]],["Atanh",[rs]],["Attention",[Fo]],["AveragePool",[Zu,Yu]],["BatchNormalization",[qo]],["BiasAdd",[Ko]],["BiasSplitGelu",[Ps]],["Cast",[as,ns]],["Ceil",[os]],["Clip",[is]],["Concat",[Fs,qs]],["Conv",[Qa,Za]],["ConvTranspose",[ou,iu]],["Cos",[ss]],["Cosh",[us]],["CumSum",[uu,lu]],["Div",[Ms]],["Einsum",[fu,mu]],["Elu",[ls,Zn]],["Equal",[zs]],["Erf",[ds]],["Exp",[cs]],["Expand",[yu]],["FastGelu",[wu]],["Floor",[ps]],["FusedConv",[Qa,Za]],["Gather",[_u,$u]],["GatherElements",[Cu,xu]],["Gelu",[fs]],["Gemm",[Au,Tu]],["GlobalAveragePool",[Ju,Xu]],["GlobalMaxPool",[al,nl]],["Greater",[Ns]],["GreaterOrEqual",[Ls]],["HardSigmoid",[$s,vs]],["InstanceNormalization",[Ou]],["LayerNormalization",[Pu]],["LeakyRelu",[ms,Zn]],["Less",[Vs]],["LessOrEqual",[Gs]],["Log",[Os]],["MatMul",[Xs]],["MatMulNBits",[Bu,Mu]],["MaxPool",[tl,rl]],["Mul",[Ds]],["MultiHeadAttention",[Wu,Uu]],["Neg",[gs]],["Not",[hs]],["Pad",[Vu]],["Pow",[Us]],["Range",[ol]],["Reciprocal",[ys]],["ReduceMin",[zo]],["ReduceMean",[ko]],["ReduceMax",[Mo]],["ReduceSum",[Uo]],["ReduceProd",[Do]],["ReduceL1",[Po]],["ReduceL2",[Ro]],["ReduceLogSum",[No]],["ReduceLogSumExp",[Bo]],["ReduceSumSquare",[Wo]],["Relu",[bs]],["Resize",[ll,dl]],["Sigmoid",[ws]],["Sin",[_s]],["Sinh",[Ss]],["Slice",[hl,gl]],["SkipLayerNormalization",[pl]],["Split",[$l,_l]],["Sqrt",[xs]],["Softmax",[bl,wl]],["Sub",[Ws]],["Tan",[Cs]],["Tanh",[Ts]],["ThresholdedRelu",[Es,Zn]],["Tile",[Cl]],["Transpose",[bo,wo]],["Where",[Tl]]])});var sa,kl=q(()=>{"use strict";mt();Wt();ve();sa=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,o){it(t.programInfo.name);let s=this.backend.device,d=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let i=[];for(let h of r)i.push({binding:i.length,resource:{buffer:h.buffer}});for(let h of a)i.push({binding:i.length,resource:{buffer:h.buffer}});o&&i.push({binding:i.length,resource:o});let p=s.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:i,label:t.programInfo.name});if(this.backend.sessionStatus==="capturing"){let h={kernelId:this.backend.currentKernelId,computePipeline:t.computePipeline,bindGroup:p,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(h)}d.setPipeline(t.computePipeline),d.setBindGroup(0,p),d.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),ot(t.programInfo.name)}dispose(){}build(t,r){it(t.name);let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let o=go(r),s=t.getShaderSource(o),d=`${n.join(`
`)}
${o.additionalImplementations}
${s}`,i=a.createShaderModule({code:d,label:t.name});Ue("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let p=a.createComputePipeline({compute:{module:i,entryPoint:"main"},layout:"auto",label:t.name});return ot(t.name),{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,o=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=o&&a<=o&&n<=o)return[r,a,n];let s=r*a*n,d=Math.ceil(Math.sqrt(s));if(d>o){if(d=Math.ceil(Math.cbrt(s)),d>o)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var Qp,Xp,ua,Pl=q(()=>{"use strict";mt();he();Wt();co();ho();Ol();kl();Qp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let o=e[a].dims.length;r.push(`${n};${o}`);break}case"dims":{let o=e[a].dims.join(",");r.push(`${n};${o}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},Xp=(e,t,r)=>{let a=e.name;return e.shaderCache?.hint&&(a+="["+e.shaderCache.hint+"]"),a+=":"+r+`:${Qp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,a},ua=class{constructor(){this.currentSessionId=null;this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionStatus="default";this.capturedCommandList=new Map;this.capturedPendingKernels=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("chromium-experimental-timestamp-query-inside-passes")?a.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=mo(this),this.programManager=new sa(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,uo(t.logLevel,!!t.debug),this.device.onuncapturederror=o=>{o.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${o.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=t.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;it(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),a=this.pendingQueries.get(t);for(let n=0;n<r.length/2;n++){let o=a[n],s=o.kernelId,d=this.kernels.get(s),i=d.kernelType,p=d.kernelName,h=o.programName,m=o.inputTensorViews,y=o.outputTensorViews,v=r[n*2],b=r[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=v);let _=Number(v-this.queryTimeBase),C=Number(b-this.queryTimeBase);if(!Number.isSafeInteger(_)||!Number.isSafeInteger(C))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:m.map(x=>({dims:x.dims,dataType:Ut(x.dataType)})),outputsMetadata:y.map(x=>({dims:x.dims,dataType:Ut(x.dataType)})),kernelId:s,kernelType:i,kernelName:p,programName:h,startTime:_,endTime:C});else{let x="";m.forEach((E,A)=>{x+=`input[${A}]: [${E.dims}] | ${Ut(E.dataType)}, `});let S="";y.forEach((E,A)=>{S+=`output[${A}]: [${E.dims}] | ${Ut(E.dataType)}, `}),console.log(`[profiling] kernel "${s}|${i}|${p}|${h}" ${x}${S}execution time: ${C-_} ns`)}Hr("GPU",`${h}::${v}::${b}`)}t.unmap(),this.pendingQueries.delete(t)}),ot()}run(t,r,a,n,o){it(t.name);let s=[];for(let S=0;S<r.length;++S){let E=this.gpuDataManager.get(r[S].data);E?s[S]=E:s[S]=this.gpuDataManager.create(4)}let{outputs:d,dispatchGroup:i,programUniforms:p}=t.getRunData(r),h=a.length===0?d.map((S,E)=>E):a;if(h.length!==d.length)throw new Error(`Output size ${h.length} must be equal to ${d.length}.`);let m=[],y=[];for(let S=0;S<d.length;++S){if(!Number.isInteger(h[S])||h[S]<-3||h[S]>=d.length)throw new Error(`Invalid output index: ${h[S]}`);if(h[S]===-3)continue;let E=h[S]===-1,A=h[S]===-2,R=E||A?o(d[S].dataType,d[S].dims):n(h[S],d[S].dataType,d[S].dims),z=this.gpuDataManager.get(R.data);if(!z)throw new Error(`no GPU data for output: ${R.data}`);if(E&&this.temporaryData.push(z),A){let N=this.kernelPersistentData.get(this.currentKernelId);N||(N=[],this.kernelPersistentData.set(this.currentKernelId,N)),N.push(z)}m.push(R),y.push(z)}let v;if(p){let S=0,E=[];p.forEach(N=>{let K=typeof N.data=="number"?[N.data]:N.data;if(K.length===0)return;let oe=N.type===10?2:4,k,J;N.type===10?(J=K.length>4?16:K.length>2?8:K.length*oe,k=K.length>4?16:oe*K.length):(J=K.length<=2?K.length*oe:16,k=16),S=Math.ceil(S/J)*J,E.push(S);let $e=N.type===10?8:4;S+=K.length>4?Math.ceil(K.length/$e)*k:K.length*oe});let A=16;S=Math.ceil(S/A)*A;let R=new ArrayBuffer(S);p.forEach((N,K)=>{let oe=E[K],k=typeof N.data=="number"?[N.data]:N.data;if(N.type===6)new Int32Array(R,oe,k.length).set(k);else if(N.type===12)new Uint32Array(R,oe,k.length).set(k);else if(N.type===10)new Uint16Array(R,oe,k.length).set(k);else if(N.type===1)new Float32Array(R,oe,k.length).set(k);else throw new Error(`Unsupported uniform type: ${Ut(N.type)}`)});let z=this.gpuDataManager.create(S,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(z.buffer,0,R,0,S),this.gpuDataManager.release(z.id),v={offset:0,size:S,buffer:z.buffer}}let b=this.programManager.normalizeDispatchGroupSize(i),_=b[1]===1&&b[2]===1,C=Xp(t,r,_),x=this.programManager.getArtifact(C);if(x||(x=this.programManager.build(t,b),this.programManager.setArtifact(C,x),Ue("info",()=>`[artifact] key: ${C}, programName: ${t.name}`)),Ue("info",()=>`[ProgramManager] run "${t.name}" (key=${C}) with ${b[0]}x${b[1]}x${b[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let S={kernelId:this.currentKernelId,programName:x.programInfo.name,inputTensorViews:r,outputTensorViews:m};this.pendingKernels.push(S),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(S)}return this.programManager.run(x,s,y,b,v),ot(t.name),m}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let o=El.get(t);if(!o)throw new Error(`kernel not implemented: ${t}`);let s={kernelType:t,kernelName:n,kernelEntry:o[0],attributes:[o[1],a]};this.kernels.set(r,s)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let o=n.kernelType,s=n.kernelName,d=n.kernelEntry,i=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${o}] ${s}" is not allowed to be called recursively`);this.currentKernelId=t,i[0]&&(i[1]=i[0](i[1]),i[0]=void 0),Ue("info",()=>`[WebGPU] Start to run kernel "[${o}] ${s}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),d(r,i[1]),0}catch(h){return a.push(Promise.resolve(`[WebGPU] Kernel "[${o}] ${s}" failed. ${h}`)),1}finally{p&&a.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${o}] ${s}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let o=this.sessionExternalDataMapping.get(t);o||(o=new Map,this.sessionExternalDataMapping.set(t,o));let s=o.get(r),d=this.gpuDataManager.registerExternalBuffer(a,n,s?.[1]);return o.set(r,[d,a]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await Ra(this,t,r);return lo(n.buffer,a)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Ue("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Ue("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Ue("info","replay"),this.sessionStatus="replaying";let t=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),a=t.length;this.pendingKernels=[];for(let n=0;n<a;n++){let o=this.getComputePassEncoder(),s=t[n];this.writeTimestamp(this.pendingDispatchNumber*2),o.setPipeline(s.computePipeline),o.setBindGroup(0,s.bindGroup),o.dispatchWorkgroups(...s.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(r[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(t){this.unregisterBuffers(t),this.capturedCommandList.has(t)&&this.capturedCommandList.delete(t),this.capturedPendingKernels.has(t)&&this.capturedPendingKernels.delete(t),this.gpuDataManager.onReleaseSession(t)}onRunStart(t){this.currentSessionId=t,this.setQueryType()}}});var Rl={};Zt(Rl,{init:()=>Jp});var Xr,ni,Jp,Bl=q(()=>{"use strict";he();Pl();Wt();xe();Xr=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(D.size(t)!==D.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},ni=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,o=a>>>2;this.opKernelContext=n[o++];let s=n[o++];this.outputCount=n[o++],this.customDataOffset=n[o++],this.customDataSize=n[o++];let d=[];for(let i=0;i<s;i++){let p=n[o++],h=n[o++],m=n[o++],y=[];for(let v=0;v<m;v++)y.push(n[o++]);d.push(new Xr(t,p,h,y))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],o=(d,i,p)=>new Xr(this.module,i,this.output(d,p),p),s=(d,i)=>{let p=qr(d);if(!p)throw new Error(`Unsupported data type: ${d}`);let h=p*D.size(i);return new Xr(this.module,d,this.backend.gpuDataManager.create(h).id,i)};return this.backend.run(t,a,n,o,s)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),o=n>>2;this.module.HEAPU32[o++]=r.length;for(let s=0;s<r.length;s++)this.module.HEAPU32[o++]=r[s];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},Jp=async(e,t,r)=>{let a=e.jsepInit;if(!a)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let n=new ua;await n.initialize(t,r),a(n,o=>n.alloc(o),o=>n.free(o),(o,s,d,i=!1)=>{if(i)Ue("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${o}, dst=${s}, size=${d}`),n.memcpy(o,s);else{Ue("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${o}, gpuDataId=${s}, size=${d}`);let p=e.HEAPU8.subarray(o>>>0,(o>>>0)+d);n.upload(s,p)}},async(o,s,d)=>{Ue("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${o}, dataOffset=${s}, size=${d}`),await n.download(o,()=>e.HEAPU8.subarray(s>>>0,(s>>>0)+d))},(o,s,d)=>n.createKernel(o,s,d,e.UTF8ToString(e._JsepGetNodeName(s))),o=>n.releaseKernel(o),(o,s,d,i)=>{Ue("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${d}, kernel=${o}, contextDataOffset=${s}`);let p=new ni(e,n,s);return n.computeKernel(o,p,i)},()=>n.captureBegin(),()=>n.captureEnd(),()=>n.replay())}});var ef,zl,Dl,er,tf,ai,Ul,Wl,Ml,Nl,Vl,Ll,Gl=q(()=>{"use strict";no();io();he();gr();Dn();ka();ef=(e,t)=>{Ve()._OrtInit(e,t)!==0&&De("Can't initialize onnxruntime.")},zl=async e=>{ef(e.wasm.numThreads,jr(e.logLevel))},Dl=async(e,t)=>{if(t==="webgpu"||t==="webnn"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let a=(Bl(),Bt(Rl)).init;await a(Ve(),e,r)}},er=new Map,tf=e=>{let t=Ve(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&De("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},ai=e=>{let t=Ve(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Ul=async(e,t)=>{let r,a,n=Ve();Array.isArray(e)?[r,a]=e:e.buffer===n.HEAPU8.buffer?[r,a]=[e.byteOffset,e.byteLength]:[r,a]=ai(e);let o=0,s=0,d=0,i=[],p=[],h=[];try{if([s,i]=ao(t),t?.externalData&&n.mountExternalData){let S=[];for(let E of t.externalData){let A=typeof E=="string"?E:E.path;S.push(Kr(typeof E=="string"?E:E.data).then(R=>{n.mountExternalData(A,R)}))}await Promise.all(S)}o=await n._OrtCreateSession(r,a,s),o===0&&De("Can't create a session.");let[m,y]=tf(o),v=!!t?.enableGraphCapture,b=[],_=[],C=[];for(let S=0;S<m;S++){let E=n._OrtGetInputName(o,S);E===0&&De("Can't get an input name."),p.push(E),b.push(n.UTF8ToString(E))}for(let S=0;S<y;S++){let E=n._OrtGetOutputName(o,S);E===0&&De("Can't get an output name."),h.push(E);let A=n.UTF8ToString(E);_.push(A);{if(v&&t?.preferredOutputLocation===void 0){C.push("gpu-buffer");continue}let R=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[A]??"cpu";if(R!=="cpu"&&R!=="cpu-pinned"&&R!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${R}.`);if(v&&R!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${R}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);C.push(R)}}let x=null;return C.some(S=>S==="gpu-buffer")&&(d=n._OrtCreateBinding(o),d===0&&De("Can't create IO binding."),x={handle:d,outputPreferredLocations:C,outputPreferredLocationsEncoded:C.map(S=>Oa(S))}),er.set(o,[o,p,h,x,v,!1]),[o,b,_]}catch(m){throw p.forEach(y=>n._OrtFree(y)),h.forEach(y=>n._OrtFree(y)),d!==0&&n._OrtReleaseBinding(d),o!==0&&n._OrtReleaseSession(o),m}finally{n._free(r),s!==0&&n._OrtReleaseSessionOptions(s),i.forEach(m=>n._free(m)),n.unmountExternalData?.()}},Wl=e=>{let t=Ve(),r=er.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,o,s,d]=r;s&&(d&&t._OrtClearBoundOutputs(s.handle),t._OrtReleaseBinding(s.handle)),t.jsepOnReleaseSession?.(e),n.forEach(i=>t._OrtFree(i)),o.forEach(i=>t._OrtFree(i)),t._OrtReleaseSession(a),er.delete(e)},Ml=(e,t,r,a,n,o=!1)=>{if(!e){t.push(0);return}let s=Ve(),d=e[0],i=e[1],p=e[3],h,m;if(d==="string"&&p==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(o&&p!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${n} when enableGraphCapture is true.`);if(p==="gpu-buffer"){let b=e[2].gpuBuffer,_=qr(Ea(d));m=i.reduce((C,x)=>C*x,1)*_,h=s.jsepRegisterBuffer(a,n,b,m)}else{let b=e[2];if(Array.isArray(b)){m=4*b.length,h=s._malloc(m),r.push(h);let _=h/4;for(let C=0;C<b.length;C++){if(typeof b[C]!="string")throw new TypeError(`tensor data at index ${C} is not a string`);s.HEAPU32[_++]=Ne(b[C],r)}}else m=b.byteLength,h=s._malloc(m),r.push(h),s.HEAPU8.set(new Uint8Array(b.buffer,b.byteOffset,m),h)}let y=s.stackSave(),v=s.stackAlloc(4*i.length);try{let b=v/4;i.forEach(C=>s.HEAP32[b++]=C);let _=s._OrtCreateTensor(Ea(d),h,m,v,i.length,Oa(p));_===0&&De(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push(_)}finally{s.stackRestore(y)}},Nl=async(e,t,r,a,n,o)=>{let s=Ve(),d=er.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let i=d[0],p=d[1],h=d[2],m=d[3],y=d[4],v=d[5],b=t.length,_=a.length,C=0,x=[],S=[],E=[],A=[],R=s.stackSave(),z=s.stackAlloc(b*4),N=s.stackAlloc(b*4),K=s.stackAlloc(_*4),oe=s.stackAlloc(_*4);try{[C,x]=ro(o);for(let V=0;V<b;V++)Ml(r[V],S,A,e,t[V],y);for(let V=0;V<_;V++)Ml(n[V],E,A,e,b+a[V],y);let k=z/4,J=N/4,$e=K/4,Re=oe/4;for(let V=0;V<b;V++)s.HEAPU32[k++]=S[V],s.HEAPU32[J++]=p[t[V]];for(let V=0;V<_;V++)s.HEAPU32[$e++]=E[V],s.HEAPU32[Re++]=h[a[V]];if(m&&!v){let{handle:V,outputPreferredLocations:Me,outputPreferredLocationsEncoded:be}=m;if(p.length!==b)throw new Error(`input count from feeds (${b}) is expected to be always equal to model's input count (${p.length}).`);for(let ge=0;ge<b;ge++){let pe=t[ge];await s._OrtBindInput(V,p[pe],S[ge])!==0&&De(`Can't bind input[${ge}] for session=${e}.`)}for(let ge=0;ge<_;ge++){let pe=a[ge];n[ge]?.[3]?s._OrtBindOutput(V,h[pe],E[ge],0)!==0&&De(`Can't bind pre-allocated output[${ge}] for session=${e}.`):s._OrtBindOutput(V,h[pe],0,be[pe])!==0&&De(`Can't bind output[${ge}] to ${Me[ge]} for session=${e}.`)}er.set(e,[i,p,h,m,y,!0])}s.jsepOnRunStart?.(i);let Be;m?Be=await s._OrtRunWithBinding(i,m.handle,_,K,C):Be=await s._OrtRun(i,N,z,b,oe,_,K,C),Be!==0&&De("failed to call OrtRun().");let _e=[];for(let V=0;V<_;V++){let Me=s.HEAPU32[K/4+V];if(Me===E[V]){_e.push(n[V]);continue}let be=s.stackSave(),ge=s.stackAlloc(4*4),pe=!1,Ce,Te=0;try{s._OrtGetTensorData(Me,ge,ge+4,ge+8,ge+12)!==0&&De(`Can't access output tensor data on index ${V}.`);let H=ge/4,re=s.HEAPU32[H++];Te=s.HEAPU32[H++];let fe=s.HEAPU32[H++],et=s.HEAPU32[H++],Ke=[];for(let Fe=0;Fe<et;Fe++)Ke.push(s.HEAPU32[fe/4+Fe]);s._OrtFree(fe);let lt=Ke.reduce((Fe,Ge)=>Fe*Ge,1);Ce=Ut(re);let Mt=m?.outputPreferredLocations[a[V]];if(Ce==="string"){if(Mt==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Fe=[],Ge=Te/4;for(let rt=0;rt<lt;rt++){let zt=s.HEAPU32[Ge++],$t=rt===lt-1?void 0:s.HEAPU32[Ge]-zt;Fe.push(s.UTF8ToString(zt,$t))}_e.push([Ce,Ke,Fe,"cpu"])}else if(Mt==="gpu-buffer"&&lt>0){let Fe=s.jsepGetBuffer(Te),Ge=qr(re);if(Ge===void 0||!Wn(Ce))throw new Error(`Unsupported data type: ${Ce}`);pe=!0,_e.push([Ce,Ke,{gpuBuffer:Fe,download:s.jsepCreateDownloader(Fe,lt*Ge,Ce),dispose:()=>{s._OrtReleaseTensor(Me)}},"gpu-buffer"])}else{let Fe=Un(Ce),Ge=new Fe(lt);new Uint8Array(Ge.buffer,Ge.byteOffset,Ge.byteLength).set(s.HEAPU8.subarray(Te,Te+Ge.byteLength)),_e.push([Ce,Ke,Ge,"cpu"])}}finally{s.stackRestore(be),Ce==="string"&&Te&&s._free(Te),pe||s._OrtReleaseTensor(Me)}}return m&&!y&&(s._OrtClearBoundOutputs(m.handle),er.set(e,[i,p,h,m,y,!1])),_e}finally{s.stackRestore(R),S.forEach(k=>s._OrtReleaseTensor(k)),E.forEach(k=>s._OrtReleaseTensor(k)),A.forEach(k=>s._free(k)),C!==0&&s._OrtReleaseRunOptions(C),x.forEach(k=>s._free(k))}},Vl=e=>{let t=Ve(),r=er.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&De("Can't get an profile file name."),t._OrtFree(n)},Ll=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var Hl=hr((vv,nf)=>{nf.exports='/*!\n * ONNX Runtime Web v1.18.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var qn=Object.defineProperty;var rl=Object.getOwnPropertyDescriptor;var nl=Object.getOwnPropertyNames;var ol=Object.prototype.hasOwnProperty;var Y=(e,t)=>()=>(e&&(t=e(e=0)),t);var kr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),pn=(e,t)=>{for(var r in t)qn(e,r,{get:t[r],enumerable:!0})},al=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of nl(t))!ol.call(e,n)&&n!==r&&qn(e,n,{get:()=>t[n],enumerable:!(o=rl(t,n))||o.enumerable});return e};var Nt=e=>al(qn({},"__esModule",{value:!0}),e);var mn={};pn(mn,{createReadStream:()=>Uo,readFile:()=>il,readFileSync:()=>sl});var il,sl,Uo,fn=Y(()=>{il=void 0,sl=void 0,Uo=void 0});var Kn={};pn(Kn,{join:()=>ul});var ul,Yn=Y(()=>{ul=void 0});var No=kr((Wo,Zn)=>{"use strict";var Vo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((i,d)=>{o=i,n=d}),r.mountExternalData=(i,d)=>{(r.gb||(r.gb=new Map)).set(i,d)},r.unmountExternalData=()=>{delete r.gb},r.jsepInit=(i,d,f,w,A,D,G,F,Q,K,se)=>{r.Ib=i,r.vb=d,r.zb=f,r.ob=w,r.yb=A,r.Sa=D,r.Ab=G,r.Cb=F,r.wb=Q,r.xb=K,r.Bb=se,d=(X,fe,P)=>(...ee)=>{let ye=it,Ye=fe?.();ee=X(...ee);let gt=fe?.();return Ye!==gt&&(X=gt,P(Ye),fe=P=null),it!=ye?Qr():ee},f=X=>async(...fe)=>{try{if(r.fb)throw Error("Session already started");let P=r.fb={Db:fe[0],errors:[]},ee=await X(...fe);if(r.fb!==P)throw Error("Session mismatch");i.flush();let ye=P.errors;if(0<ye.length){let Ye=await Promise.all(ye);if(Ye=Ye.filter(gt=>gt),0<Ye.length)throw Error(Ye.join(`\n`))}return ee}finally{r.fb=null}},r._OrtCreateSession=d(r._OrtCreateSession,()=>r._OrtCreateSession,X=>r._OrtCreateSession=X),r._OrtRun=f(d(r._OrtRun,()=>r._OrtRun,X=>r._OrtRun=X)),r._OrtRunWithBinding=f(d(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,X=>r._OrtRunWithBinding=X)),r._OrtBindInput=d(r._OrtBindInput,()=>r._OrtBindInput,X=>r._OrtBindInput=X),r.jsepRegisterBuffer=(X,fe,P,ee)=>i.registerBuffer(X,fe,P,ee),r.jsepGetBuffer=X=>i.getBuffer(X),r.jsepCreateDownloader=(X,fe,P)=>i.createDownloader(X,fe,P),r.jsepOnReleaseSession=X=>{i.onReleaseSession(X)},r.jsepOnRunStart=X=>i.onRunStart(X)};var s=Object.assign({},r),l="./this.program",c=(i,d)=>{throw d},a=typeof window=="object",m=typeof importScripts=="function",g=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",h="",v,_,b;if(g){var S=(fn(),Nt(mn)),I=(Yn(),Nt(Kn));h=m?I.dirname(h)+"/":__dirname+"/",v=(i,d)=>(i=re(i)?new URL(i):I.normalize(i),S.readFileSync(i,d?void 0:"utf8")),b=i=>(i=v(i,!0),i.buffer||(i=new Uint8Array(i)),i),_=(i,d,f,w=!0)=>{i=re(i)?new URL(i):I.normalize(i),S.readFile(i,w?void 0:"utf8",(A,D)=>{A?f(A):d(w?D.buffer:D)})},!r.thisProgram&&1<process.argv.length&&(l=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),c=(i,d)=>{throw process.exitCode=i,d},r.inspect=()=>"[Emscripten Module object]"}else(a||m)&&(m?h=self.location.href:typeof document<"u"&&document.currentScript&&(h=document.currentScript.src),e&&(h=e),h.indexOf("blob:")!==0?h=h.substr(0,h.replace(/[?#].*/,"").lastIndexOf("/")+1):h="",v=i=>{var d=new XMLHttpRequest;return d.open("GET",i,!1),d.send(null),d.responseText},m&&(b=i=>{var d=new XMLHttpRequest;return d.open("GET",i,!1),d.responseType="arraybuffer",d.send(null),new Uint8Array(d.response)}),_=(i,d,f)=>{var w=new XMLHttpRequest;w.open("GET",i,!0),w.responseType="arraybuffer",w.onload=()=>{w.status==200||w.status==0&&w.response?d(w.response):f()},w.onerror=f,w.send(null)});var x=console.log.bind(console),$=console.error.bind(console);Object.assign(r,s),s=null,typeof WebAssembly!="object"&&Ne("no native wasm support detected");var E,T=!1,B,M,W,q,ie,O,J,$e,ke,Re,_e;function N(){var i=E.buffer;r.HEAP8=M=new Int8Array(i),r.HEAP16=q=new Int16Array(i),r.HEAPU8=W=new Uint8Array(i),r.HEAPU16=ie=new Uint16Array(i),r.HEAP32=O=new Int32Array(i),r.HEAPU32=J=new Uint32Array(i),r.HEAPF32=$e=new Float32Array(i),r.HEAPF64=_e=new Float64Array(i),r.HEAP64=ke=new BigInt64Array(i),r.HEAPU64=Re=new BigUint64Array(i)}var Be=[],be=[],ge=[],pe=0,Ce=null,Ae=null;function Ne(i){throw i="Aborted("+i+")",$(i),T=!0,B=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),n(i),i}var L=i=>i.startsWith("data:application/octet-stream;base64,"),re=i=>i.startsWith("file://"),me;if(me="ort-wasm-simd.wasm",!L(me)){var Xe=me;me=r.locateFile?r.locateFile(Xe,h):h+Xe}function qe(i){if(b)return b(i);throw"both async and sync fetching of the wasm failed"}function ot(i){if(a||m){if(typeof fetch=="function"&&!re(i))return fetch(i,{credentials:"same-origin"}).then(d=>{if(!d.ok)throw"failed to load wasm binary file at \'"+i+"\'";return d.arrayBuffer()}).catch(()=>qe(i));if(_)return new Promise((d,f)=>{_(i,w=>d(new Uint8Array(w)),f)})}return Promise.resolve().then(()=>qe(i))}function At(i,d,f){return ot(i).then(w=>WebAssembly.instantiate(w,d)).then(w=>w).then(f,w=>{$(`failed to asynchronously prepare wasm: ${w}`),Ne(w)})}function Le(i,d){var f=me;return typeof WebAssembly.instantiateStreaming!="function"||L(f)||re(f)||g||typeof fetch!="function"?At(f,i,d):fetch(f,{credentials:"same-origin"}).then(w=>WebAssembly.instantiateStreaming(w,i).then(d,function(A){return $(`wasm streaming compile failed: ${A}`),$("falling back to ArrayBuffer instantiation"),At(f,i,d)}))}var Ge={1374704:(i,d,f,w)=>{if(typeof r>"u"||!r.gb)return 1;if(i=Fe(i>>>0),i.startsWith("./")&&(i=i.substring(2)),i=r.gb.get(i),!i)return 2;if(d>>>=0,f>>>=0,d+f>i.byteLength)return 3;try{return W.set(i.subarray(d,d+f),w>>>0>>>0),0}catch{return 4}},1375205:(i,d,f)=>{f=Fe(f);let w=new Uint8Array(d);w.set(W.subarray(i>>>0,i+d>>>0)),typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string"?(fn(),Nt(mn)).writeFileSync(f,w):(i=new File([w],f,{type:"application/octet-stream"}),i=URL.createObjectURL(i),window.open(i,"_blank"))},1375713:()=>{r.wb()},1375744:()=>{r.xb()},1375773:()=>{r.Bb()},1375798:i=>r.vb(i),1375831:i=>r.zb(i),1375863:(i,d,f)=>{r.ob(i,d,f,!0)},1375902:(i,d,f)=>{r.ob(i,d,f)},1375935:i=>{r.Sa("Abs",i,void 0)},1375986:i=>{r.Sa("Neg",i,void 0)},1376037:i=>{r.Sa("Floor",i,void 0)},1376090:i=>{r.Sa("Ceil",i,void 0)},1376142:i=>{r.Sa("Reciprocal",i,void 0)},1376200:i=>{r.Sa("Sqrt",i,void 0)},1376252:i=>{r.Sa("Exp",i,void 0)},1376303:i=>{r.Sa("Erf",i,void 0)},1376354:i=>{r.Sa("Sigmoid",i,void 0)},1376409:(i,d,f)=>{r.Sa("HardSigmoid",i,{alpha:d,beta:f})},1376488:i=>{r.Sa("Log",i,void 0)},1376539:i=>{r.Sa("Sin",i,void 0)},1376590:i=>{r.Sa("Cos",i,void 0)},1376641:i=>{r.Sa("Tan",i,void 0)},1376692:i=>{r.Sa("Asin",i,void 0)},1376744:i=>{r.Sa("Acos",i,void 0)},1376796:i=>{r.Sa("Atan",i,void 0)},1376848:i=>{r.Sa("Sinh",i,void 0)},1376900:i=>{r.Sa("Cosh",i,void 0)},1376952:i=>{r.Sa("Asinh",i,void 0)},1377005:i=>{r.Sa("Acosh",i,void 0)},1377058:i=>{r.Sa("Atanh",i,void 0)},1377111:i=>{r.Sa("Tanh",i,void 0)},1377163:i=>{r.Sa("Not",i,void 0)},1377214:(i,d,f)=>{r.Sa("Clip",i,{min:d,max:f})},1377283:i=>{r.Sa("Clip",i,void 0)},1377335:(i,d)=>{r.Sa("Elu",i,{alpha:d})},1377393:i=>{r.Sa("Relu",i,void 0)},1377445:(i,d)=>{r.Sa("LeakyRelu",i,{alpha:d})},1377509:(i,d)=>{r.Sa("ThresholdedRelu",i,{alpha:d})},1377579:(i,d)=>{r.Sa("Cast",i,{to:d})},1377637:i=>{r.Sa("Add",i,void 0)},1377688:i=>{r.Sa("Sub",i,void 0)},1377739:i=>{r.Sa("Mul",i,void 0)},1377790:i=>{r.Sa("Div",i,void 0)},1377841:i=>{r.Sa("Pow",i,void 0)},1377892:i=>{r.Sa("Equal",i,void 0)},1377945:i=>{r.Sa("Greater",i,void 0)},1378e3:i=>{r.Sa("GreaterOrEqual",i,void 0)},1378062:i=>{r.Sa("Less",i,void 0)},1378114:i=>{r.Sa("LessOrEqual",i,void 0)},1378173:(i,d,f,w,A)=>{r.Sa("ReduceMean",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1378332:(i,d,f,w,A)=>{r.Sa("ReduceMax",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1378490:(i,d,f,w,A)=>{r.Sa("ReduceMin",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1378648:(i,d,f,w,A)=>{r.Sa("ReduceProd",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1378807:(i,d,f,w,A)=>{r.Sa("ReduceSum",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1378965:(i,d,f,w,A)=>{r.Sa("ReduceL1",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1379122:(i,d,f,w,A)=>{r.Sa("ReduceL2",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1379279:(i,d,f,w,A)=>{r.Sa("ReduceLogSum",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1379440:(i,d,f,w,A)=>{r.Sa("ReduceSumSquare",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1379604:(i,d,f,w,A)=>{r.Sa("ReduceLogSumExp",i,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1379768:i=>{r.Sa("Where",i,void 0)},1379821:(i,d,f)=>{r.Sa("Transpose",i,{perm:d?Array.from(O.subarray(d>>>0,f>>>0)):[]})},1379929:(i,d,f,w,A,D,G,F,Q,K,se,X,fe,P,ee)=>{r.Sa("ConvTranspose",i,{format:Q?"NHWC":"NCHW",autoPad:d,dilations:[f],group:w,kernel_shape:[A],pads:[D,G],strides:[F],wIsConst:()=>!!M[K>>>0],outputPadding:se?Array.from(O.subarray(se>>>0,X>>>0)):[],outputShape:fe?Array.from(O.subarray(fe>>>0,P>>>0)):[],activation:Fe(ee)})},1380331:(i,d,f,w,A,D,G,F,Q,K,se,X,fe,P)=>{r.Sa("ConvTranspose",i,{format:F?"NHWC":"NCHW",autoPad:d,dilations:Array.from(O.subarray(f>>>0,(f>>>0)+2>>>0)),group:w,kernelShape:Array.from(O.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(O.subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(O.subarray(G>>>0,(G>>>0)+2>>>0)),wIsConst:()=>!!M[Q>>>0],outputPadding:K?Array.from(O.subarray(K>>>0,se>>>0)):[],outputShape:X?Array.from(O.subarray(X>>>0,fe>>>0)):[],activation:Fe(P)})},1380896:(i,d,f,w,A,D,G,F,Q,K,se,X,fe,P,ee)=>{r.Sa("ConvTranspose",i,{format:Q?"NHWC":"NCHW",autoPad:d,dilations:[f],group:w,kernel_shape:[A],pads:[D,G],strides:[F],wIsConst:()=>!!M[K>>>0],outputPadding:se?Array.from(O.subarray(se>>>0,X>>>0)):[],outputShape:fe?Array.from(O.subarray(fe>>>0,P>>>0)):[],activation:Fe(ee)})},1381298:(i,d,f,w,A,D,G,F,Q,K,se,X,fe,P)=>{r.Sa("ConvTranspose",i,{format:F?"NHWC":"NCHW",autoPad:d,dilations:Array.from(O.subarray(f>>>0,(f>>>0)+2>>>0)),group:w,kernelShape:Array.from(O.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(O.subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(O.subarray(G>>>0,(G>>>0)+2>>>0)),wIsConst:()=>!!M[Q>>>0],outputPadding:K?Array.from(O.subarray(K>>>0,se>>>0)):[],outputShape:X?Array.from(O.subarray(X>>>0,fe>>>0)):[],activation:Fe(P)})},1381863:(i,d)=>{r.Sa("GlobalAveragePool",i,{format:d?"NHWC":"NCHW"})},1381954:(i,d,f,w,A,D,G,F,Q,K,se,X,fe,P,ee,ye)=>{r.Sa("AveragePool",i,{format:ye?"NHWC":"NCHW",auto_pad:d,ceil_mode:f,count_include_pad:w,storage_order:A,dilations:[D,G],kernel_shape:[F,Q],pads:[K,se,X,fe],strides:[P,ee]})},1382238:(i,d)=>{r.Sa("GlobalAveragePool",i,{format:d?"NHWC":"NCHW"})},1382329:(i,d,f,w,A,D,G,F,Q,K,se,X,fe,P,ee,ye)=>{r.Sa("AveragePool",i,{format:ye?"NHWC":"NCHW",auto_pad:d,ceil_mode:f,count_include_pad:w,storage_order:A,dilations:[D,G],kernel_shape:[F,Q],pads:[K,se,X,fe],strides:[P,ee]})},1382613:(i,d)=>{r.Sa("GlobalMaxPool",i,{format:d?"NHWC":"NCHW"})},1382700:(i,d,f,w,A,D,G,F,Q,K,se,X,fe,P,ee,ye)=>{r.Sa("MaxPool",i,{format:ye?"NHWC":"NCHW",auto_pad:d,ceil_mode:f,count_include_pad:w,storage_order:A,dilations:[D,G],kernel_shape:[F,Q],pads:[K,se,X,fe],strides:[P,ee]})},1382980:(i,d)=>{r.Sa("GlobalMaxPool",i,{format:d?"NHWC":"NCHW"})},1383067:(i,d,f,w,A,D,G,F,Q,K,se,X,fe,P,ee,ye)=>{r.Sa("MaxPool",i,{format:ye?"NHWC":"NCHW",auto_pad:d,ceil_mode:f,count_include_pad:w,storage_order:A,dilations:[D,G],kernel_shape:[F,Q],pads:[K,se,X,fe],strides:[P,ee]})},1383347:(i,d,f,w,A)=>{r.Sa("Gemm",i,{alpha:d,beta:f,transA:w,transB:A})},1383451:i=>{r.Sa("MatMul",i,void 0)},1383505:(i,d,f,w)=>{r.Sa("ArgMax",i,{keepDims:!!d,selectLastIndex:!!f,axis:w})},1383613:(i,d,f,w)=>{r.Sa("ArgMin",i,{keepDims:!!d,selectLastIndex:!!f,axis:w})},1383721:(i,d)=>{r.Sa("Softmax",i,{axis:d})},1383784:(i,d)=>{r.Sa("Concat",i,{axis:d})},1383844:(i,d,f,w,A)=>{r.Sa("Split",i,{axis:d,numOutputs:f,splitSizes:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1383984:i=>{r.Sa("Expand",i,void 0)},1384038:(i,d)=>{r.Sa("Gather",i,{axis:Number(d)})},1384109:(i,d)=>{r.Sa("GatherElements",i,{axis:Number(d)})},1384188:(i,d,f,w,A,D,G,F,Q,K,se)=>{r.Sa("Resize",i,{antialias:d,axes:f?Array.from(O.subarray(f>>>0,w>>>0)):[],coordinateTransformMode:Fe(A),cubicCoeffA:D,excludeOutside:G,extrapolationValue:F,keepAspectRatioPolicy:Fe(Q),mode:Fe(K),nearestMode:Fe(se)})},1384534:(i,d,f,w,A,D,G)=>{r.Sa("Slice",i,{starts:d?Array.from(O.subarray(d>>>0,f>>>0)):[],ends:w?Array.from(O.subarray(w>>>0,A>>>0)):[],axes:D?Array.from(O.subarray(D>>>0,G>>>0)):[]})},1384750:i=>{r.Sa("Tile",i,void 0)},1384802:(i,d,f)=>{r.Sa("LayerNormalization",i,{axis:Number(d),epsilon:Number(f)})},1384909:(i,d,f)=>{r.Sa("InstanceNormalization",i,{epsilon:d,format:f?"NHWC":"NCHW"})},1385023:(i,d,f)=>{r.Sa("InstanceNormalization",i,{epsilon:d,format:f?"NHWC":"NCHW"})},1385137:i=>{r.Sa("Range",i,void 0)},1385190:(i,d)=>{r.Sa("Einsum",i,{equation:Fe(d)})},1385271:(i,d,f,w,A)=>{r.Sa("Pad",i,{mode:d,value:f,pads:w?Array.from(O.subarray(w>>>0,A>>>0)):[]})},1385398:(i,d,f,w,A,D)=>{r.Sa("BatchNormalization",i,{epsilon:d,momentum:f,spatial:!!A,trainingMode:!!w,format:D?"NHWC":"NCHW"})},1385567:(i,d,f,w,A,D)=>{r.Sa("BatchNormalization",i,{epsilon:d,momentum:f,spatial:!!A,trainingMode:!!w,format:D?"NHWC":"NCHW"})},1385736:(i,d,f)=>{r.Sa("CumSum",i,{exclusive:Number(d),reverse:Number(f)})},1385833:(i,d,f,w,A,D,G,F,Q)=>{r.Sa("Attention",i,{numHeads:d,isUnidirectional:f,maskFilterValue:w,scale:A,doRotary:D,qkvHiddenSizes:G?Array.from(O.subarray(Number(F)>>>0,Number(F)+G>>>0)):[],pastPresentShareBuffer:!!Q})},1386105:i=>{r.Sa("BiasAdd",i,void 0)},1386160:i=>{r.Sa("BiasSplitGelu",i,void 0)},1386221:i=>{r.Sa("FastGelu",i,void 0)},1386277:(i,d,f,w,A,D,G,F,Q,K,se,X,fe)=>{r.Sa("Conv",i,{format:Q?"NHWC":"NCHW",auto_pad:d,dilations:[f],group:w,kernel_shape:[A],pads:D?Array.from(O.subarray(D>>>0,G>>>0)):[],strides:[F],w_is_const:()=>!!M[K>>>0],activation:Fe(se),activation_params:X?Array.from($e.subarray(X>>>0,fe>>>0)):[]})},1386647:(i,d,f,w,A,D,G,F,Q,K,se,X,fe,P,ee,ye)=>{r.Sa("Conv",i,{format:X?"NHWC":"NCHW",auto_pad:d,dilations:[f,w],group:A,kernel_shape:[D,G],pads:F?Array.from(O.subarray(F>>>0,Q>>>0)):[],strides:[K,se],w_is_const:()=>!!M[fe>>>0],activation:Fe(P),activation_params:ee?Array.from($e.subarray(ee>>>0,ye>>>0)):[]})},1387038:i=>{r.Sa("Gelu",i,void 0)},1387090:(i,d,f,w,A,D)=>{r.Sa("MatMulNBits",i,{k:d,n:f,accuracyLevel:w,bits:A,blockSize:D})},1387217:(i,d,f,w,A,D)=>{r.Sa("MultiHeadAttention",i,{numHeads:d,isUnidirectional:f,maskFilterValue:w,scale:A,doRotary:D})},1387376:(i,d)=>{r.Sa("SkipLayerNormalization",i,{epsilon:d})},1387457:i=>{r.Ab(i)},1387491:(i,d)=>r.Cb(i,d,r.fb.Db,r.fb.errors)};function et(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Tt(i){this.cb=i-24,this.rb=function(d){J[this.cb+4>>>2>>>0]=d},this.qb=function(d){J[this.cb+8>>>2>>>0]=d},this.kb=function(d,f){this.jb(),this.rb(d),this.qb(f)},this.jb=function(){J[this.cb+16>>>2>>>0]=0}}var ft=0,Wr=0,dr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,lt=(i,d,f)=>{d>>>=0;var w=d+f;for(f=d;i[f]&&!(f>=w);)++f;if(16<f-d&&i.buffer&&dr)return dr.decode(i.subarray(d,f));for(w="";d<f;){var A=i[d++];if(A&128){var D=i[d++]&63;if((A&224)==192)w+=String.fromCharCode((A&31)<<6|D);else{var G=i[d++]&63;A=(A&240)==224?(A&15)<<12|D<<6|G:(A&7)<<18|D<<12|G<<6|i[d++]&63,65536>A?w+=String.fromCharCode(A):(A-=65536,w+=String.fromCharCode(55296|A>>10,56320|A&1023))}}else w+=String.fromCharCode(A)}return w},Fe=(i,d)=>(i>>>=0)?lt(W,i,d):"",dt=i=>{for(var d=0,f=0;f<i.length;++f){var w=i.charCodeAt(f);127>=w?d++:2047>=w?d+=2:55296<=w&&57343>=w?(d+=4,++f):d+=3}return d},kt=(i,d,f,w)=>{if(f>>>=0,!(0<w))return 0;var A=f;w=f+w-1;for(var D=0;D<i.length;++D){var G=i.charCodeAt(D);if(55296<=G&&57343>=G){var F=i.charCodeAt(++D);G=65536+((G&1023)<<10)|F&1023}if(127>=G){if(f>=w)break;d[f++>>>0]=G}else{if(2047>=G){if(f+1>=w)break;d[f++>>>0]=192|G>>6}else{if(65535>=G){if(f+2>=w)break;d[f++>>>0]=224|G>>12}else{if(f+3>=w)break;d[f++>>>0]=240|G>>18,d[f++>>>0]=128|G>>12&63}d[f++>>>0]=128|G>>6&63}d[f++>>>0]=128|G&63}}return d[f>>>0]=0,f-A},Nr=i=>{if(i===null)return"null";var d=typeof i;return d==="object"||d==="array"||d==="function"?i.toString():""+i},cr,at=i=>{for(var d="";W[i>>>0];)d+=cr[W[i++>>>0]];return d},ht={},Rt={},qt={},st;function Gr(i,d,f={}){var w=d.name;if(!i)throw new st(`type "${w}" must have a positive integer typeid pointer`);if(Rt.hasOwnProperty(i)){if(f.tb)return;throw new st(`Cannot register type \'${w}\' twice`)}Rt[i]=d,delete qt[i],ht.hasOwnProperty(i)&&(d=ht[i],delete ht[i],d.forEach(A=>A()))}function ut(i,d,f={}){if(!("argPackAdvance"in d))throw new TypeError("registerType registeredInstance requires argPackAdvance");Gr(i,d,f)}var pr=(i,d,f)=>{switch(d){case 1:return f?w=>M[w>>>0>>>0]:w=>W[w>>>0>>>0];case 2:return f?w=>q[w>>>1>>>0]:w=>ie[w>>>1>>>0];case 4:return f?w=>O[w>>>2>>>0]:w=>J[w>>>2>>>0];case 8:return f?w=>ke[w>>>3]:w=>Re[w>>>3];default:throw new TypeError(`invalid integer width (${d}): ${i}`)}};function mr(){this.$a=[void 0],this.nb=[]}var De=new mr;function Kt(i){i>>>=0,i>=De.cb&&--De.get(i).pb===0&&De.jb(i)}var Ke=i=>{if(!i)throw new st("Cannot use deleted val. handle = "+i);return De.get(i).value},te=i=>{switch(i){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return De.kb({pb:1,value:i})}};function Bt(i){return this.fromWireType(O[i>>>2>>>0])}var Hr=(i,d)=>{switch(d){case 4:return function(f){return this.fromWireType($e[f>>>2>>>0])};case 8:return function(f){return this.fromWireType(_e[f>>>3>>>0])};default:throw new TypeError(`invalid float width (${d}): ${i}`)}};function Hn(i){return this.fromWireType(J[i>>>2>>>0])}var fr=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Ln=(i,d)=>{for(var f=i>>1,w=f+d/2;!(f>=w)&&ie[f>>>0];)++f;if(f<<=1,32<f-i&&fr)return fr.decode(W.subarray(i>>>0,f>>>0));for(f="",w=0;!(w>=d/2);++w){var A=q[i+2*w>>>1>>>0];if(A==0)break;f+=String.fromCharCode(A)}return f},Lr=(i,d,f)=>{if(f??=2147483647,2>f)return 0;f-=2;var w=d;f=f<2*i.length?f/2:i.length;for(var A=0;A<f;++A)q[d>>>1>>>0]=i.charCodeAt(A),d+=2;return q[d>>>1>>>0]=0,d-w},Fr=i=>2*i.length,jr=(i,d)=>{for(var f=0,w="";!(f>=d/4);){var A=O[i+4*f>>>2>>>0];if(A==0)break;++f,65536<=A?(A-=65536,w+=String.fromCharCode(55296|A>>10,56320|A&1023)):w+=String.fromCharCode(A)}return w},qr=(i,d,f)=>{if(d>>>=0,f??=2147483647,4>f)return 0;var w=d;f=w+f-4;for(var A=0;A<i.length;++A){var D=i.charCodeAt(A);if(55296<=D&&57343>=D){var G=i.charCodeAt(++A);D=65536+((D&1023)<<10)|G&1023}if(O[d>>>2>>>0]=D,d+=4,d+4>f)break}return O[d>>>2>>>0]=0,d-w},hr=i=>{for(var d=0,f=0;f<i.length;++f){var w=i.charCodeAt(f);55296<=w&&57343>=w&&++f,d+=4}return d},Yt=(i,d)=>{var f=Rt[i];if(f===void 0)throw i=Er(i),f=at(i),He(i),new st(d+" has unknown type "+f);return f},gr=(i,d,f)=>{var w=[];return i=i.toWireType(w,f),w.length&&(J[d>>>2>>>0]=te(w)),i},Dt=i=>{try{i()}catch(d){Ne(d)}};function Kr(){var i=ne,d={};for(let[f,w]of Object.entries(i))d[f]=typeof w=="function"?function(){Mt.push(f);try{return w.apply(null,arguments)}finally{T||(Mt.pop(),it&&ct===1&&Mt.length===0&&(ct=0,Dt(or),typeof Fibers<"u"&&Fibers.Kb()))}}:w;return d}var ct=0,it=null,yr=0,Mt=[],br={},wr={},Yr=0,Zt=null,Zr=[];function Qr(){return new Promise((i,d)=>{Zt={resolve:i,reject:d}})}function vr(){var i=tt(65548),d=i+12;J[i>>>2>>>0]=d,J[i+4>>>2>>>0]=d+65536,d=Mt[0];var f=br[d];return f===void 0&&(f=Yr++,br[d]=f,wr[f]=d),O[i+8>>>2>>>0]=f,i}function Qt(i){if(!T){if(ct===0){var d=!1,f=!1;i((w=0)=>{if(!T&&(yr=w,d=!0,f)){ct=2,Dt(()=>un(it)),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.resume(),w=!1;try{var A=(0,ne[wr[O[it+8>>>2>>>0]]])()}catch(F){A=F,w=!0}var D=!1;if(!it){var G=Zt;G&&(Zt=null,(w?G.reject:G.resolve)(A),D=!0)}if(w&&!D)throw A}}),f=!0,d||(ct=1,it=vr(),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.pause(),Dt(()=>sn(it)))}else ct===2?(ct=0,Dt(ln),He(it),it=null,Zr.forEach(w=>{if(!T)try{w();try{B=B=w=B,r.onExit?.(w),T=!0,c(w,new et(w))}catch(A){A instanceof et||A=="unwind"||c(1,A)}}catch(A){A instanceof et||A=="unwind"||c(1,A)}})):Ne(`invalid state: ${ct}`);return yr}}function It(i){return Qt(d=>{i().then(d)})}var zt=[],Xr={},Xt=i=>{var d=Xr[i];return d===void 0?at(i):d},$r=()=>typeof globalThis=="object"?globalThis:Function("return this")(),Jr=i=>{var d=zt.length;return zt.push(i),d},_r=(i,d)=>{for(var f=Array(i),w=0;w<i;++w)f[w]=Yt(J[d+4*w>>>2>>>0],"parameter "+w);return f},Sr=(i,d)=>Object.defineProperty(d,"name",{value:i});function Fn(i){var d=Function;if(!(d instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof d} which is not a function`);var f=Sr(d.name||"unknownFunctionName",function(){});return f.prototype=d.prototype,f=new f,i=d.apply(f,i),i instanceof Object?i:f}var Oe=i=>i%4===0&&(i%100!==0||i%400===0),Jt=[0,31,60,91,121,152,182,213,244,274,305,335],er=[0,31,59,90,120,151,181,212,243,273,304,334],xr=i=>{var d=dt(i)+1,f=tt(d);return f&&kt(i,W,f,d),f},Ut=[],Cr=(i,d)=>{Ut.length=0;for(var f;f=W[i++>>>0];){var w=f!=105;w&=f!=112,d+=w&&d%8?4:0,Ut.push(f==112?J[d>>>2>>>0]:f==106?ke[d>>>3]:f==105?O[d>>>2>>>0]:_e[d>>>3>>>0]),d+=w?8:4}return Ut},tr={},Ir=()=>{if(!rr){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:l||"./this.program"},d;for(d in tr)tr[d]===void 0?delete i[d]:i[d]=tr[d];var f=[];for(d in i)f.push(`${d}=${i[d]}`);rr=f}return rr},rr,en=[null,[],[]],tn=[31,29,31,30,31,30,31,31,30,31,30,31],Ar=[31,28,31,30,31,30,31,31,30,31,30,31];function rn(i){var d=Array(dt(i)+1);return kt(i,d,0,d.length),d}function Tr(i,d,f,w){function A(P,ee,ye){for(P=typeof P=="number"?P.toString():P||"";P.length<ee;)P=ye[0]+P;return P}function D(P,ee){return A(P,ee,"0")}function G(P,ee){function ye(gt){return 0>gt?-1:0<gt?1:0}var Ye;return(Ye=ye(P.getFullYear()-ee.getFullYear()))===0&&(Ye=ye(P.getMonth()-ee.getMonth()))===0&&(Ye=ye(P.getDate()-ee.getDate())),Ye}function F(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function Q(P){var ee=P.ab;for(P=new Date(new Date(P.bb+1900,0,1).getTime());0<ee;){var ye=P.getMonth(),Ye=(Oe(P.getFullYear())?tn:Ar)[ye];if(ee>Ye-P.getDate())ee-=Ye-P.getDate()+1,P.setDate(1),11>ye?P.setMonth(ye+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+ee);break}}return ye=new Date(P.getFullYear()+1,0,4),ee=F(new Date(P.getFullYear(),0,4)),ye=F(ye),0>=G(ee,P)?0>=G(ye,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}i>>>=0,d>>>=0,f>>>=0,w>>>=0;var K=J[w+40>>>2>>>0];w={Gb:O[w>>>2>>>0],Fb:O[w+4>>>2>>>0],hb:O[w+8>>>2>>>0],mb:O[w+12>>>2>>>0],ib:O[w+16>>>2>>>0],bb:O[w+20>>>2>>>0],Wa:O[w+24>>>2>>>0],ab:O[w+28>>>2>>>0],Jb:O[w+32>>>2>>>0],Eb:O[w+36>>>2>>>0],Hb:K?Fe(K):""},f=Fe(f),K={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var se in K)f=f.replace(new RegExp(se,"g"),K[se]);var X="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),fe="January February March April May June July August September October November December".split(" ");K={"%a":P=>X[P.Wa].substring(0,3),"%A":P=>X[P.Wa],"%b":P=>fe[P.ib].substring(0,3),"%B":P=>fe[P.ib],"%C":P=>D((P.bb+1900)/100|0,2),"%d":P=>D(P.mb,2),"%e":P=>A(P.mb,2," "),"%g":P=>Q(P).toString().substring(2),"%G":P=>Q(P),"%H":P=>D(P.hb,2),"%I":P=>(P=P.hb,P==0?P=12:12<P&&(P-=12),D(P,2)),"%j":P=>{for(var ee=0,ye=0;ye<=P.ib-1;ee+=(Oe(P.bb+1900)?tn:Ar)[ye++]);return D(P.mb+ee,3)},"%m":P=>D(P.ib+1,2),"%M":P=>D(P.Fb,2),"%n":()=>`\n`,"%p":P=>0<=P.hb&&12>P.hb?"AM":"PM","%S":P=>D(P.Gb,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>D(Math.floor((P.ab+7-P.Wa)/7),2),"%V":P=>{var ee=Math.floor((P.ab+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.ab-2)%7&&ee++,ee)ee==53&&(ye=(P.Wa+371-P.ab)%7,ye==4||ye==3&&Oe(P.bb)||(ee=1));else{ee=52;var ye=(P.Wa+7-P.ab-1)%7;(ye==4||ye==5&&Oe(P.bb%400-1))&&ee++}return D(ee,2)},"%w":P=>P.Wa,"%W":P=>D(Math.floor((P.ab+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.bb+1900).toString().substring(2),"%Y":P=>P.bb+1900,"%z":P=>{P=P.Eb;var ee=0<=P;return P=Math.abs(P)/60,(ee?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Hb,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(se in K)f.includes(se)&&(f=f.replace(new RegExp(se,"g"),K[se](w)));return f=f.replace(/\\0\\0/g,"%"),se=rn(f),se.length>d?0:(M.set(se,i>>>0),se.length-1)}for(var nn=Array(256),nr=0;256>nr;++nr)nn[nr]=String.fromCharCode(nr);cr=nn,st=r.BindingError=class extends Error{constructor(i){super(i),this.name="BindingError"}},r.InternalError=class extends Error{constructor(i){super(i),this.name="InternalError"}},Object.assign(mr.prototype,{get(i){return this.$a[i]},has(i){return this.$a[i]!==void 0},kb(i){var d=this.nb.pop()||this.$a.length;return this.$a[d]=i,d},jb(i){this.$a[i]=void 0,this.nb.push(i)}}),De.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),De.cb=De.$a.length,r.count_emval_handles=()=>{for(var i=0,d=De.cb;d<De.$a.length;++d)De.$a[d]!==void 0&&++i;return i};var on={ia:function(i,d,f){return It(async()=>{await r.yb(i,d,f)})},a:function(i,d,f){throw i>>>=0,new Tt(i).kb(d>>>0,f>>>0),ft=i,Wr++,ft},w:function(){return 0},ca:function(){},P:function(){},R:function(){},J:function(){return 0},aa:function(){},X:function(){},$:function(){},D:function(){},Q:function(){},N:function(){},ba:function(){},O:function(){},G:function(i,d,f,w,A){d>>>=0,d=at(d);var D=d.indexOf("u")!=-1;D&&(A=(1n<<64n)-1n),ut(i>>>0,{name:d,fromWireType:G=>G,toWireType:function(G,F){if(typeof F!="bigint"&&typeof F!="number")throw new TypeError(`Cannot convert "${Nr(F)}" to ${this.name}`);if(F<w||F>A)throw new TypeError(`Passing a number "${Nr(F)}" from JS side to C/C++ side to an argument of type "${d}", which is outside the valid range [${w}, ${A}]!`);return F},argPackAdvance:8,readValueFromPointer:pr(d,f>>>0,!D),eb:null})},ga:function(i,d,f,w){d=at(d>>>0),ut(i>>>0,{name:d,fromWireType:function(A){return!!A},toWireType:function(A,D){return D?f:w},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(W[A>>>0])},eb:null})},fa:function(i,d){d=at(d>>>0),ut(i>>>0,{name:d,fromWireType:f=>{var w=Ke(f);return Kt(f),w},toWireType:(f,w)=>te(w),argPackAdvance:8,readValueFromPointer:Bt,eb:null})},F:function(i,d,f){d=at(d>>>0),ut(i>>>0,{name:d,fromWireType:w=>w,toWireType:(w,A)=>A,argPackAdvance:8,readValueFromPointer:Hr(d,f>>>0),eb:null})},t:function(i,d,f,w,A){if(i>>>=0,f>>>=0,d=at(d>>>0),A===-1&&(A=4294967295),A=F=>F,w===0){var D=32-8*f;A=F=>F<<D>>>D}var G=d.includes("unsigned")?function(F,Q){return Q>>>0}:function(F,Q){return Q};ut(i,{name:d,fromWireType:A,toWireType:G,argPackAdvance:8,readValueFromPointer:pr(d,f,w!==0),eb:null})},n:function(i,d,f){function w(D){return new A(M.buffer,J[D+4>>>2>>>0],J[D>>>2>>>0])}var A=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][d];f=at(f>>>0),ut(i>>>0,{name:f,fromWireType:w,argPackAdvance:8,readValueFromPointer:w},{tb:!0})},H:function(i,d){d=at(d>>>0);var f=d==="std::string";ut(i>>>0,{name:d,fromWireType:function(w){var A=J[w>>>2>>>0],D=w+4;if(f)for(var G=D,F=0;F<=A;++F){var Q=D+F;if(F==A||W[Q>>>0]==0){if(G=Fe(G,Q-G),K===void 0)var K=G;else K+=String.fromCharCode(0),K+=G;G=Q+1}}else{for(K=Array(A),F=0;F<A;++F)K[F]=String.fromCharCode(W[D+F>>>0]);K=K.join("")}return He(w),K},toWireType:function(w,A){A instanceof ArrayBuffer&&(A=new Uint8Array(A));var D=typeof A=="string";if(!(D||A instanceof Uint8Array||A instanceof Uint8ClampedArray||A instanceof Int8Array))throw new st("Cannot pass non-string to std::string");var G=f&&D?dt(A):A.length,F=tt(4+G+1),Q=F+4;if(J[F>>>2>>>0]=G,f&&D)kt(A,W,Q,G+1);else if(D)for(D=0;D<G;++D){var K=A.charCodeAt(D);if(255<K)throw He(Q),new st("String has UTF-16 code units that do not fit in 8 bits");W[Q+D>>>0]=K}else for(D=0;D<G;++D)W[Q+D>>>0]=A[D];return w!==null&&w.push(He,F),F},argPackAdvance:8,readValueFromPointer:Hn,eb(w){He(w)}})},y:function(i,d,f){if(d>>>=0,f>>>=0,f=at(f),d===2)var w=Ln,A=Lr,D=Fr,G=()=>ie,F=1;else d===4&&(w=jr,A=qr,D=hr,G=()=>J,F=2);ut(i>>>0,{name:f,fromWireType:Q=>{for(var K=J[Q>>>2>>>0],se=G(),X,fe=Q+4,P=0;P<=K;++P){var ee=Q+4+P*d;(P==K||se[ee>>>F]==0)&&(fe=w(fe,ee-fe),X===void 0?X=fe:(X+=String.fromCharCode(0),X+=fe),fe=ee+d)}return He(Q),X},toWireType:(Q,K)=>{if(typeof K!="string")throw new st(`Cannot pass non-string to C++ string type ${f}`);var se=D(K),X=tt(4+se+d);return J[X>>>2]=se>>F,A(K,X+4,se+d),Q!==null&&Q.push(He,X),X},argPackAdvance:8,readValueFromPointer:Bt,eb(Q){He(Q)}})},ha:function(i,d){d=at(d>>>0),ut(i>>>0,{ub:!0,name:d,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},da:()=>1,s:function(i,d,f){return d>>>=0,f>>>=0,i=Ke(i>>>0),d=Yt(d,"emval::as"),gr(d,f,i)},v:function(i){return i>>>=0,It(()=>(i=Ke(i),i.then(te)))},o:function(i,d,f,w){return f>>>=0,w>>>=0,i=zt[i>>>0],d=Ke(d>>>0),i(null,d,f,w)},k:function(i,d,f,w,A){return f>>>=0,w>>>=0,A>>>=0,i=zt[i>>>0],d=Ke(d>>>0),f=Xt(f),i(d,d[f],w,A)},b:Kt,z:function(i,d){return d>>>=0,i=Ke(i>>>0),d=Ke(d),i==d},m:function(i){return i>>>=0,i===0?te($r()):(i=Xt(i),te($r()[i]))},i:function(i,d,f){d=_r(i,d>>>0);var w=d.shift();i--;var A=`return function (obj, func, destructorsRef, args) {\n`,D=0,G=[];f===0&&G.push("obj");for(var F=["retType"],Q=[w],K=0;K<i;++K)G.push("arg"+K),F.push("argType"+K),Q.push(d[K]),A+=`  var arg${K} = argType${K}.readValueFromPointer(args${D?"+"+D:""});\n`,D+=d[K].argPackAdvance;for(A+=`  var rv = ${f===1?"new func":"func.call"}(${G.join(", ")});\n`,K=0;K<i;++K)d[K].deleteObject&&(A+=`  argType${K}.deleteObject(arg${K});\n`);return w.ub||(F.push("emval_returnValue"),Q.push(gr),A+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),F.push(A+`};\n`),i=Fn(F).apply(null,Q),f=`methodCaller<(${d.map(se=>se.name).join(", ")}) => ${w.name}>`,Jr(Sr(f,i))},r:function(i,d){return d>>>=0,i=Ke(i>>>0),d=Ke(d),te(i[d])},f:function(i){i>>>=0,4<i&&(De.get(i).pb+=1)},u:function(){return te([])},l:function(i){i=Ke(i>>>0);for(var d=Array(i.length),f=0;f<i.length;f++)d[f]=i[f];return te(d)},e:function(i){return te(Xt(i>>>0))},j:function(){return te({})},h:function(i){i>>>=0;for(var d=Ke(i);d.length;){var f=d.pop();d.pop()(f)}Kt(i)},g:function(i,d,f){d>>>=0,f>>>=0,i=Ke(i>>>0),d=Ke(d),f=Ke(f),i[d]=f},c:function(i,d){return d>>>=0,i=Yt(i>>>0,"_emval_take_value"),i=i.readValueFromPointer(d),te(i)},U:function(i,d){i=-9007199254740992>i||9007199254740992<i?NaN:Number(i),d>>>=0,i=new Date(1e3*i),O[d>>>2>>>0]=i.getUTCSeconds(),O[d+4>>>2>>>0]=i.getUTCMinutes(),O[d+8>>>2>>>0]=i.getUTCHours(),O[d+12>>>2>>>0]=i.getUTCDate(),O[d+16>>>2>>>0]=i.getUTCMonth(),O[d+20>>>2>>>0]=i.getUTCFullYear()-1900,O[d+24>>>2>>>0]=i.getUTCDay(),O[d+28>>>2>>>0]=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},V:function(i,d){i=-9007199254740992>i||9007199254740992<i?NaN:Number(i),d>>>=0,i=new Date(1e3*i),O[d>>>2>>>0]=i.getSeconds(),O[d+4>>>2>>>0]=i.getMinutes(),O[d+8>>>2>>>0]=i.getHours(),O[d+12>>>2>>>0]=i.getDate(),O[d+16>>>2>>>0]=i.getMonth(),O[d+20>>>2>>>0]=i.getFullYear()-1900,O[d+24>>>2>>>0]=i.getDay(),O[d+28>>>2>>>0]=(Oe(i.getFullYear())?Jt:er)[i.getMonth()]+i.getDate()-1|0,O[d+36>>>2>>>0]=-(60*i.getTimezoneOffset());var f=new Date(i.getFullYear(),6,1).getTimezoneOffset(),w=new Date(i.getFullYear(),0,1).getTimezoneOffset();O[d+32>>>2>>>0]=(f!=w&&i.getTimezoneOffset()==Math.min(w,f))|0},W:function(i){i>>>=0;var d=new Date(O[i+20>>>2>>>0]+1900,O[i+16>>>2>>>0],O[i+12>>>2>>>0],O[i+8>>>2>>>0],O[i+4>>>2>>>0],O[i>>>2>>>0],0),f=O[i+32>>>2>>>0],w=d.getTimezoneOffset(),A=new Date(d.getFullYear(),6,1).getTimezoneOffset(),D=new Date(d.getFullYear(),0,1).getTimezoneOffset(),G=Math.min(D,A);return 0>f?O[i+32>>>2>>>0]=+(A!=D&&G==w):0<f!=(G==w)&&(A=Math.max(D,A),d.setTime(d.getTime()+6e4*((0<f?G:A)-w))),O[i+24>>>2>>>0]=d.getDay(),O[i+28>>>2>>>0]=(Oe(d.getFullYear())?Jt:er)[d.getMonth()]+d.getDate()-1|0,O[i>>>2>>>0]=d.getSeconds(),O[i+4>>>2>>>0]=d.getMinutes(),O[i+8>>>2>>>0]=d.getHours(),O[i+12>>>2>>>0]=d.getDate(),O[i+16>>>2>>>0]=d.getMonth(),O[i+20>>>2>>>0]=d.getYear(),i=d.getTime(),isNaN(i)?(O[an()>>>2>>>0]=61,i=-1):i/=1e3,BigInt(i)},S:function(){return-52},T:function(){},L:function(i,d,f){function w(Q){return(Q=Q.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Q[1]:"GMT"}f>>>=0;var A=new Date().getFullYear(),D=new Date(A,0,1),G=new Date(A,6,1);A=D.getTimezoneOffset();var F=G.getTimezoneOffset();J[i>>>0>>>2>>>0]=60*Math.max(A,F),O[d>>>0>>>2>>>0]=+(A!=F),i=w(D),d=w(G),i=xr(i),d=xr(d),F<A?(J[f>>>2>>>0]=i,J[f+4>>>2>>>0]=d):(J[f>>>2>>>0]=d,J[f+4>>>2>>>0]=i)},A:()=>{Ne("")},d:function(i,d,f){return i>>>=0,d=Cr(d>>>0,f>>>0),Ge[i].apply(null,d)},I:function(i,d,f){return i>>>=0,d=Cr(d>>>0,f>>>0),Ge[i].apply(null,d)},E:()=>Date.now(),M:function(){return 4294901760},q:()=>performance.now(),K:function(i){i>>>=0;var d=W.length;if(4294901760<i)return!1;for(var f=1;4>=f;f*=2){var w=d*(1+.2/f);w=Math.min(w,i+100663296);var A=Math;w=Math.max(i,w);e:{A=(A.min.call(A,4294901760,w+(65536-w%65536)%65536)-E.buffer.byteLength+65535)/65536;try{E.grow(A),N();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},Z:function(i,d){i>>>=0,d>>>=0;var f=0;return Ir().forEach((w,A)=>{var D=d+f;for(A=J[i+4*A>>>2>>>0]=D,D=0;D<w.length;++D)M[A++>>>0>>>0]=w.charCodeAt(D);M[A>>>0>>>0]=0,f+=w.length+1}),0},_:function(i,d){i>>>=0,d>>>=0;var f=Ir();J[i>>>2>>>0]=f.length;var w=0;return f.forEach(A=>w+=A.length+1),J[d>>>2>>>0]=w,0},x:()=>52,C:function(){return 52},Y:function(){return 70},B:function(i,d,f,w){d>>>=0,f>>>=0,w>>>=0;for(var A=0,D=0;D<f;D++){var G=J[d>>>2>>>0],F=J[d+4>>>2>>>0];d+=8;for(var Q=0;Q<F;Q++){var K=W[G+Q>>>0],se=en[i];K===0||K===10?((i===1?x:$)(lt(se,0)),se.length=0):se.push(K)}A+=F}return J[w>>>2>>>0]=A,0},ea:Tr,p:function(i,d,f,w){return Tr(i>>>0,d>>>0,f>>>0,w>>>0)}},ne=function(){function i(f){return ne=f.exports,ne=Kr(),ne=jn(),E=ne.ja,N(),be.unshift(ne.ka),pe--,pe==0&&(Ce!==null&&(clearInterval(Ce),Ce=null),Ae&&(f=Ae,Ae=null,f())),ne}var d={a:on};if(pe++,r.instantiateWasm)try{return r.instantiateWasm(d,i)}catch(f){$(`Module.instantiateWasm callback failed with error: ${f}`),n(f)}return Le(d,function(f){i(f.instance)}).catch(n),{}}();r._OrtInit=(i,d)=>(r._OrtInit=ne.la)(i,d),r._OrtGetLastError=(i,d)=>(r._OrtGetLastError=ne.ma)(i,d),r._OrtCreateSessionOptions=(i,d,f,w,A,D,G,F,Q,K)=>(r._OrtCreateSessionOptions=ne.na)(i,d,f,w,A,D,G,F,Q,K),r._OrtAppendExecutionProvider=(i,d)=>(r._OrtAppendExecutionProvider=ne.oa)(i,d),r._OrtAddFreeDimensionOverride=(i,d,f)=>(r._OrtAddFreeDimensionOverride=ne.pa)(i,d,f),r._OrtAddSessionConfigEntry=(i,d,f)=>(r._OrtAddSessionConfigEntry=ne.qa)(i,d,f),r._OrtReleaseSessionOptions=i=>(r._OrtReleaseSessionOptions=ne.ra)(i),r._OrtCreateSession=(i,d,f)=>(r._OrtCreateSession=ne.sa)(i,d,f),r._OrtReleaseSession=i=>(r._OrtReleaseSession=ne.ta)(i),r._OrtGetInputOutputCount=(i,d,f)=>(r._OrtGetInputOutputCount=ne.ua)(i,d,f),r._OrtGetInputName=(i,d)=>(r._OrtGetInputName=ne.va)(i,d),r._OrtGetOutputName=(i,d)=>(r._OrtGetOutputName=ne.wa)(i,d),r._OrtFree=i=>(r._OrtFree=ne.xa)(i),r._OrtCreateTensor=(i,d,f,w,A,D)=>(r._OrtCreateTensor=ne.ya)(i,d,f,w,A,D),r._OrtGetTensorData=(i,d,f,w,A)=>(r._OrtGetTensorData=ne.za)(i,d,f,w,A),r._OrtReleaseTensor=i=>(r._OrtReleaseTensor=ne.Aa)(i),r._OrtCreateRunOptions=(i,d,f,w)=>(r._OrtCreateRunOptions=ne.Ba)(i,d,f,w),r._OrtAddRunConfigEntry=(i,d,f)=>(r._OrtAddRunConfigEntry=ne.Ca)(i,d,f),r._OrtReleaseRunOptions=i=>(r._OrtReleaseRunOptions=ne.Da)(i),r._OrtCreateBinding=i=>(r._OrtCreateBinding=ne.Ea)(i),r._OrtBindInput=(i,d,f)=>(r._OrtBindInput=ne.Fa)(i,d,f),r._OrtBindOutput=(i,d,f,w)=>(r._OrtBindOutput=ne.Ga)(i,d,f,w),r._OrtClearBoundOutputs=i=>(r._OrtClearBoundOutputs=ne.Ha)(i),r._OrtReleaseBinding=i=>(r._OrtReleaseBinding=ne.Ia)(i),r._OrtRunWithBinding=(i,d,f,w,A)=>(r._OrtRunWithBinding=ne.Ja)(i,d,f,w,A),r._OrtRun=(i,d,f,w,A,D,G,F)=>(r._OrtRun=ne.Ka)(i,d,f,w,A,D,G,F),r._OrtEndProfiling=i=>(r._OrtEndProfiling=ne.La)(i),r._JsepOutput=(i,d,f)=>(r._JsepOutput=ne.Ma)(i,d,f),r._JsepGetNodeName=i=>(r._JsepGetNodeName=ne.Na)(i);var an=()=>(an=ne.Oa)(),tt=r._malloc=i=>(tt=r._malloc=ne.Pa)(i),He=r._free=i=>(He=r._free=ne.Qa)(i),Er=i=>(Er=ne.Ra)(i),Vt=()=>(Vt=ne.Ta)(),Pr=i=>(Pr=ne.Ua)(i),Or=i=>(Or=ne.Va)(i),sn=i=>(sn=ne.Xa)(i),or=()=>(or=ne.Ya)(),un=i=>(un=ne.Za)(i),ln=()=>(ln=ne._a)();r.___start_em_js=1387603,r.___stop_em_js=1387764;function jn(){var i=ne;i=Object.assign({},i);var d=w=>()=>w()>>>0,f=w=>A=>w(A)>>>0;return i.Oa=d(i.Oa),i.Pa=f(i.Pa),i.Ra=f(i.Ra),i.Ta=d(i.Ta),i.Va=f(i.Va),i}r.stackAlloc=Or,r.stackSave=Vt,r.stackRestore=Pr,r.UTF8ToString=Fe,r.stringToUTF8=(i,d,f)=>kt(i,W,d,f),r.lengthBytesUTF8=dt;var ar;Ae=function i(){ar||dn(),ar||(Ae=i)};function dn(){if(!(0<pe)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var i=r.preRun.shift();Be.unshift(i)}for(;0<Be.length;)Be.shift()(r);if(!(0<pe||ar||(ar=!0,r.calledRun=!0,T))){for(;0<be.length;)be.shift()(r);for(o(r);0<ge.length;)ge.shift()(r)}}}return dn(),t.ready}})();typeof Wo=="object"&&typeof Zn=="object"?Zn.exports=Vo:typeof define=="function"&&define.amd&&define([],()=>Vo)});var Go=kr(()=>{});var Ho=kr(()=>{});var Lo={};pn(Lo,{cpus:()=>ll});var ll,Fo=Y(()=>{ll=void 0});var Ko=kr((qo,Qn)=>{"use strict";var jo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return _e.buffer!=pe.buffer&&me(),pe}function o(){return _e.buffer!=pe.buffer&&me(),Ce}function n(){return _e.buffer!=pe.buffer&&me(),Ae}function s(){return _e.buffer!=pe.buffer&&me(),Ne}function l(){return _e.buffer!=pe.buffer&&me(),L}function c(){return _e.buffer!=pe.buffer&&me(),re}var a=t,m,g;a.ready=new Promise((u,p)=>{m=u,g=p}),a.jsepInit=(u,p,y,C,k,V,H,le)=>{a.Qb=u,a.wb=p,a.yb=y,a.jb=C,a.xb=k,a.Ea=V,a.zb=H,a.Ab=le,p=(ae,oe,ue)=>(...Ie)=>{let Ee=He,R=oe?.();Ie=ae(...Ie);let ce=oe?.();return R!==ce&&(ae=ce,ue(R),oe=ue=null),He!=Ee?ln():Ie},y=ae=>async(...oe)=>{try{if(a.bb)throw Error("Session already started");let ue=a.bb={Fb:oe[0],errors:[]},Ie=await ae(...oe);if(a.bb!==ue)throw Error("Session mismatch");u.flush();let Ee=ue.errors;if(0<Ee.length){let R=await Promise.all(Ee);if(R=R.filter(ce=>ce),0<R.length)throw Error(R.join(`\n`))}return Ie}finally{a.bb=null}},a._OrtRun=y(p(a._OrtRun,()=>a._OrtRun,ae=>a._OrtRun=ae)),a._OrtRunWithBinding=y(p(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,ae=>a._OrtRunWithBinding=ae)),a._OrtBindInput=p(a._OrtBindInput,()=>a._OrtBindInput,ae=>a._OrtBindInput=ae),a.jsepRegisterBuffer=(ae,oe,ue,Ie)=>u.registerBuffer(ae,oe,ue,Ie),a.jsepUnregisterBuffers=ae=>{u.unregisterBuffers(ae)},a.jsepGetBuffer=ae=>u.getBuffer(ae),a.jsepCreateDownloader=(ae,oe,ue)=>u.createDownloader(ae,oe,ue)};var h=Object.assign({},a),v="./this.program",_=(u,p)=>{throw p},b=typeof window=="object",S=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",x=a.ENVIRONMENT_IS_PTHREAD||!1,$="";function E(u){return a.locateFile?a.locateFile(u,$):$+u}var T,B,M;if(I){var W=(fn(),Nt(mn)),q=(Yn(),Nt(Kn));$=S?q.dirname($)+"/":__dirname+"/",T=(p,y)=>(p=p.startsWith("file://")?new URL(p):q.normalize(p),W.readFileSync(p,y?void 0:"utf8")),M=p=>(p=T(p,!0),p.buffer||(p=new Uint8Array(p)),p),B=(p,y,C,k=!0)=>{p=p.startsWith("file://")?new URL(p):q.normalize(p),W.readFile(p,k?void 0:"utf8",(V,H)=>{V?C(V):y(k?H.buffer:H)})},!a.thisProgram&&1<process.argv.length&&(v=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),_=(p,y)=>{throw process.exitCode=p,y},a.inspect=()=>"[Emscripten Module object]";let u;try{u=Go()}catch(p){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),p}global.Worker=u.Worker}else(b||S)&&(S?$=self.location.href:typeof document<"u"&&document.currentScript&&($=document.currentScript.src),typeof e<"u"&&e&&($=e),$.indexOf("blob:")!==0?$=$.substr(0,$.replace(/[?#].*/,"").lastIndexOf("/")+1):$="",I||(T=u=>{var p=new XMLHttpRequest;return p.open("GET",u,!1),p.send(null),p.responseText},S&&(M=u=>{var p=new XMLHttpRequest;return p.open("GET",u,!1),p.responseType="arraybuffer",p.send(null),new Uint8Array(p.response)}),B=(u,p,y)=>{var C=new XMLHttpRequest;C.open("GET",u,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?p(C.response):y()},C.onerror=y,C.send(null)}));I&&typeof performance>"u"&&(global.performance=Ho().performance);var ie=console.log.bind(console),O=console.error.bind(console);I&&(ie=(...u)=>W.writeSync(1,u.join(" ")+`\n`),O=(...u)=>W.writeSync(2,u.join(" ")+`\n`));var J=a.print||ie,$e=a.printErr||O;Object.assign(a,h),h=null,a.thisProgram&&(v=a.thisProgram),a.quit&&(_=a.quit);var ke;a.wasmBinary&&(ke=a.wasmBinary);var Re=a.noExitRuntime||!0;typeof WebAssembly!="object"&&lt("no native wasm support detected");var _e,N,Be,be=!1,ge,pe,Ce,Ae,Ne,L,re;function me(){var u=_e.buffer;a.HEAP8=pe=new Int8Array(u),a.HEAP16=new Int16Array(u),a.HEAP32=Ae=new Int32Array(u),a.HEAPU8=Ce=new Uint8Array(u),a.HEAPU16=new Uint16Array(u),a.HEAPU32=Ne=new Uint32Array(u),a.HEAPF32=L=new Float32Array(u),a.HEAPF64=re=new Float64Array(u)}var Xe=a.INITIAL_MEMORY||16777216;if(5242880<=Xe||lt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Xe+"! (STACK_SIZE=5242880)"),x)_e=a.wasmMemory;else if(a.wasmMemory)_e=a.wasmMemory;else if(_e=new WebAssembly.Memory({initial:Xe/65536,maximum:65536,shared:!0}),!(_e.buffer instanceof SharedArrayBuffer))throw $e("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&$e("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");me(),Xe=_e.buffer.byteLength;var qe=[],ot=[],At=[],Le=0;function Ge(){return Re||0<Le}var et=0,Tt=null,ft=null;function Wr(){et++,a.monitorRunDependencies&&a.monitorRunDependencies(et)}function dr(){if(et--,a.monitorRunDependencies&&a.monitorRunDependencies(et),et==0&&(Tt!==null&&(clearInterval(Tt),Tt=null),ft)){var u=ft;ft=null,u()}}function lt(u){throw a.onAbort&&a.onAbort(u),u="Aborted("+u+")",$e(u),be=!0,ge=1,u=new WebAssembly.RuntimeError(u+". Build with -sASSERTIONS for more info."),g(u),u}function Fe(u){return u.startsWith("data:application/octet-stream;base64,")}var dt;dt="ort-wasm-simd-threaded.wasm",Fe(dt)||(dt=E(dt));function kt(u){if(u==dt&&ke)return new Uint8Array(ke);if(M)return M(u);throw"both async and sync fetching of the wasm failed"}function Nr(u){if(!ke&&(b||S)){if(typeof fetch=="function"&&!u.startsWith("file://"))return fetch(u,{credentials:"same-origin"}).then(p=>{if(!p.ok)throw"failed to load wasm binary file at \'"+u+"\'";return p.arrayBuffer()}).catch(()=>kt(u));if(B)return new Promise((p,y)=>{B(u,C=>p(new Uint8Array(C)),y)})}return Promise.resolve().then(()=>kt(u))}function cr(u,p,y){return Nr(u).then(C=>WebAssembly.instantiate(C,p)).then(C=>C).then(y,C=>{$e("failed to asynchronously prepare wasm: "+C),lt(C)})}function at(u,p){var y=dt;return ke||typeof WebAssembly.instantiateStreaming!="function"||Fe(y)||y.startsWith("file://")||I||typeof fetch!="function"?cr(y,u,p):fetch(y,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,u).then(p,function(k){return $e("wasm streaming compile failed: "+k),$e("falling back to ArrayBuffer instantiation"),cr(y,u,p)}))}var ht,Rt={912252:u=>{a.Ea("Abs",u,void 0)},912303:u=>{a.Ea("Neg",u,void 0)},912354:u=>{a.Ea("Floor",u,void 0)},912407:u=>{a.Ea("Ceil",u,void 0)},912459:u=>{a.Ea("Reciprocal",u,void 0)},912517:u=>{a.Ea("Sqrt",u,void 0)},912569:u=>{a.Ea("Exp",u,void 0)},912620:u=>{a.Ea("Erf",u,void 0)},912671:u=>{a.Ea("Sigmoid",u,void 0)},912726:u=>{a.Ea("Log",u,void 0)},912777:u=>{a.Ea("Sin",u,void 0)},912828:u=>{a.Ea("Cos",u,void 0)},912879:u=>{a.Ea("Tan",u,void 0)},912930:u=>{a.Ea("Asin",u,void 0)},912982:u=>{a.Ea("Acos",u,void 0)},913034:u=>{a.Ea("Atan",u,void 0)},913086:u=>{a.Ea("Sinh",u,void 0)},913138:u=>{a.Ea("Cosh",u,void 0)},913190:u=>{a.Ea("Asinh",u,void 0)},913243:u=>{a.Ea("Acosh",u,void 0)},913296:u=>{a.Ea("Atanh",u,void 0)},913349:u=>{a.Ea("Tanh",u,void 0)},913401:u=>{a.Ea("Not",u,void 0)},913452:(u,p,y)=>{a.Ea("ClipV10",u,{min:p,max:y})},913524:u=>{a.Ea("Clip",u,void 0)},913576:(u,p)=>{a.Ea("Elu",u,{alpha:p})},913634:u=>{a.Ea("Relu",u,void 0)},913686:(u,p)=>{a.Ea("LeakyRelu",u,{alpha:p})},913750:(u,p)=>{a.Ea("ThresholdedRelu",u,{alpha:p})},913820:(u,p)=>{a.Ea("Cast",u,{to:p})},913878:u=>{a.Ea("Add",u,void 0)},913929:u=>{a.Ea("Sub",u,void 0)},913980:u=>{a.Ea("Mul",u,void 0)},914031:u=>{a.Ea("Div",u,void 0)},914082:u=>{a.Ea("Pow",u,void 0)},914133:u=>{a.Ea("Equal",u,void 0)},914186:u=>{a.Ea("Greater",u,void 0)},914241:u=>{a.Ea("GreaterOrEqual",u,void 0)},914303:u=>{a.Ea("Less",u,void 0)},914355:u=>{a.Ea("LessOrEqual",u,void 0)},914414:(u,p,y,C,k)=>{a.Ea("ReduceMean",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},914578:(u,p,y,C,k)=>{a.Ea("ReduceMax",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},914741:(u,p,y,C,k)=>{a.Ea("ReduceMin",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},914904:(u,p,y,C,k)=>{a.Ea("ReduceProd",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},915068:(u,p,y,C,k)=>{a.Ea("ReduceSum",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},915231:(u,p,y,C,k)=>{a.Ea("ReduceL1",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},915393:(u,p,y,C,k)=>{a.Ea("ReduceL2",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},915555:(u,p,y,C,k)=>{a.Ea("ReduceLogSum",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},915721:(u,p,y,C,k)=>{a.Ea("ReduceSumSquare",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},915890:(u,p,y,C,k)=>{a.Ea("ReduceLogSumExp",u,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},916059:u=>{a.Ea("Where",u,void 0)},916112:(u,p,y)=>{a.Ea("Transpose",u,{perm:p?Array.from(n().subarray(y>>>0,y+p>>>0)):[]})},916225:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee,R,ce)=>{a.Ea("ConvTranspose",u,{format:ae?"NHWC":"NCHW",autoPad:p,dilations:[y],group:C,kernel_shape:[k],pads:[V,H],strides:[le],wIsConst:()=>!!r()[oe>>>0],outputPadding:ue?Array.from(n().subarray(Ie>>>0,Ie+ue>>>0)):[],outputShape:Ee?Array.from(n().subarray(R>>>0,R+Ee>>>0)):[],activation:De(ce)})},916639:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee,R)=>{a.Ea("ConvTranspose",u,{format:le?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(y>>>0,y+2>>>0)),group:C,kernelShape:Array.from(n().subarray(k>>>0,k+2>>>0)),pads:Array.from(n().subarray(V>>>0,V+4>>>0)),strides:Array.from(n().subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!r()[ae>>>0],outputPadding:0<oe?Array.from(n().subarray(ue>>>0,ue+oe>>>0)):[],outputShape:0<Ie?Array.from(n().subarray(Ee>>>0,Ee+Ie>>>0)):[],activation:De(R)})},917196:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee,R,ce)=>{a.Ea("ConvTranspose",u,{format:ae?"NHWC":"NCHW",autoPad:p,dilations:[y],group:C,kernel_shape:[k],pads:[V,H],strides:[le],wIsConst:()=>!!r()[oe>>>0],outputPadding:ue?Array.from(n().subarray(Ie>>>0,Ie+ue>>>0)):[],outputShape:Ee?Array.from(n().subarray(R>>>0,R+Ee>>>0)):[],activation:De(ce)})},917610:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee,R)=>{a.Ea("ConvTranspose",u,{format:le?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(y>>>0,y+2>>>0)),group:C,kernelShape:Array.from(n().subarray(k>>>0,k+2>>>0)),pads:Array.from(n().subarray(V>>>0,V+4>>>0)),strides:Array.from(n().subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!r()[ae>>>0],outputPadding:0<oe?Array.from(n().subarray(ue>>>0,ue+oe>>>0)):[],outputShape:0<Ie?Array.from(n().subarray(Ee>>>0,Ee+Ie>>>0)):[],activation:De(R)})},918167:(u,p)=>{a.Ea("GlobalAveragePool",u,{format:p?"NHWC":"NCHW"})},918258:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee,R,ce,Te)=>{a.Ea("AveragePool",u,{format:Te?"NHWC":"NCHW",auto_pad:p,ceil_mode:y,count_include_pad:C,storage_order:k,dilations:[V,H],kernel_shape:[le,ae],pads:[oe,ue,Ie,Ee],strides:[R,ce]})},918542:(u,p)=>{a.Ea("GlobalAveragePool",u,{format:p?"NHWC":"NCHW"})},918633:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee,R,ce,Te)=>{a.Ea("AveragePool",u,{format:Te?"NHWC":"NCHW",auto_pad:p,ceil_mode:y,count_include_pad:C,storage_order:k,dilations:[V,H],kernel_shape:[le,ae],pads:[oe,ue,Ie,Ee],strides:[R,ce]})},918917:(u,p)=>{a.Ea("GlobalMaxPool",u,{format:p?"NHWC":"NCHW"})},919004:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee,R,ce,Te)=>{a.Ea("MaxPool",u,{format:Te?"NHWC":"NCHW",auto_pad:p,ceil_mode:y,count_include_pad:C,storage_order:k,dilations:[V,H],kernel_shape:[le,ae],pads:[oe,ue,Ie,Ee],strides:[R,ce]})},919284:(u,p)=>{a.Ea("GlobalMaxPool",u,{format:p?"NHWC":"NCHW"})},919371:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee,R,ce,Te)=>{a.Ea("MaxPool",u,{format:Te?"NHWC":"NCHW",auto_pad:p,ceil_mode:y,count_include_pad:C,storage_order:k,dilations:[V,H],kernel_shape:[le,ae],pads:[oe,ue,Ie,Ee],strides:[R,ce]})},919651:(u,p,y,C,k)=>{a.Ea("Gemm",u,{alpha:p,beta:y,transA:C,transB:k})},919755:u=>{a.Ea("MatMul",u,void 0)},919809:(u,p,y,C)=>{a.Ea("ArgMax",u,{keepDims:!!p,selectLastIndex:!!y,axis:C})},919917:(u,p,y,C)=>{a.Ea("ArgMin",u,{keepDims:!!p,selectLastIndex:!!y,axis:C})},920025:(u,p)=>{a.Ea("Softmax",u,{axis:p})},920088:(u,p)=>{a.Ea("Concat",u,{axis:p})},920148:(u,p,y,C,k)=>{a.Ea("Split",u,{axis:p,numOutputs:y,splitSizes:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},920293:u=>{a.Ea("Expand",u,void 0)},920347:(u,p)=>{a.Ea("Gather",u,{axis:Number(p)})},920418:(u,p)=>{a.Ea("GatherElements",u,{axis:Number(p)})},920497:(u,p,y,C,k,V,H,le,ae,oe,ue)=>{a.Ea("Resize",u,{antialias:p,axes:y?Array.from(n().subarray(C>>>0,C+y>>>0)):[],coordinateTransformMode:De(k),cubicCoeffA:V,excludeOutside:H,extrapolationValue:le,keepAspectRatioPolicy:De(ae),mode:De(oe),nearestMode:De(ue)})},920848:(u,p,y,C,k,V,H)=>{a.Ea("Slice",u,{starts:p?Array.from(n().subarray(y>>>0,y+p>>>0)):[],ends:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[],axes:V?Array.from(n().subarray(H>>>0,H+V>>>0)):[]})},921079:u=>{a.Ea("Tile",u,void 0)},921131:(u,p,y)=>{a.Ea("LayerNormalization",u,{axis:Number(p),epsilon:Number(y)})},921238:(u,p,y)=>{a.Ea("InstanceNormalization",u,{epsilon:p,format:y?"NHWC":"NCHW"})},921352:(u,p,y)=>{a.Ea("InstanceNormalization",u,{epsilon:p,format:y?"NHWC":"NCHW"})},921466:u=>{a.Ea("Range",u,void 0)},921519:(u,p)=>{a.Ea("Einsum",u,{equation:De(p)})},921600:(u,p,y,C,k)=>{a.Ea("Pad",u,{mode:p,value:y,pads:C?Array.from(n().subarray(k>>>0,k+C>>>0)):[]})},921732:u=>{a.Ea("Gelu",u,void 0)},921784:u=>{a.Ea("BiasAdd",u,void 0)},921839:u=>{a.Ea("BiasSplitGelu",u,void 0)},921900:(u,p)=>{a.Ea("SkipLayerNormalization",u,{epsilon:p})},921981:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee)=>{a.Ea("Conv",u,{format:ae?"NHWC":"NCHW",auto_pad:p,dilations:[y],group:C,kernel_shape:[k],pads:V?Array.from(n().subarray(H>>>0,H+V>>>0)):[],strides:[le],w_is_const:()=>!!r()[oe>>>0],activation:De(ue),activation_params:Ie?Array.from(l().subarray(Ee>>>0,Ee+Ie>>>0)):[]})},922362:(u,p,y,C,k,V,H,le,ae,oe,ue,Ie,Ee,R,ce,Te)=>{a.Ea("Conv",u,{format:Ie?"NHWC":"NCHW",auto_pad:p,dilations:[y,C],group:k,kernel_shape:[V,H],pads:le?Array.from(n().subarray(ae>>>0,ae+le>>>0)):[],strides:[oe,ue],w_is_const:()=>!!r()[Ee>>>0],activation:De(R),activation_params:ce?Array.from(l().subarray(Te>>>0,Te+ce>>>0)):[]})},922764:u=>{a.zb(u)},922798:(u,p)=>a.Ab(u,p,a.bb.Fb,a.bb.errors),922910:u=>a.wb(u),922943:u=>a.yb(u),922975:(u,p,y)=>{a.jb(u,p,y,!0)},923014:(u,p,y)=>{a.jb(u,p,y)}};function qt(u){this.name="ExitStatus",this.message=`Program terminated with exit(${u})`,this.status=u}function st(u){u.terminate(),u.onmessage=()=>{}}function Gr(u){(u=te.Qa[u])||lt(),te.Eb(u)}function ut(u){var p=te.tb();if(!p)return 6;te.Ya.push(p),te.Qa[u.Xa]=p,p.Xa=u.Xa;var y={cmd:"run",start_routine:u.Gb,arg:u.rb,pthread_ptr:u.Xa};return I&&p.unref(),p.postMessage(y,u.Mb),0}var pr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,mr=(u,p,y)=>{p>>>=0;var C=p+y;for(y=p;u[y]&&!(y>=C);)++y;if(16<y-p&&u.buffer&&pr)return pr.decode(u.buffer instanceof SharedArrayBuffer?u.slice(p,y):u.subarray(p,y));for(C="";p<y;){var k=u[p++];if(k&128){var V=u[p++]&63;if((k&224)==192)C+=String.fromCharCode((k&31)<<6|V);else{var H=u[p++]&63;k=(k&240)==224?(k&15)<<12|V<<6|H:(k&7)<<18|V<<12|H<<6|u[p++]&63,65536>k?C+=String.fromCharCode(k):(k-=65536,C+=String.fromCharCode(55296|k>>10,56320|k&1023))}}else C+=String.fromCharCode(k)}return C},De=(u,p)=>(u>>>=0)?mr(o(),u,p):"";function Kt(u){if(x)return Oe(1,1,u);ge=u,Ge()||(te.Hb(),a.onExit&&a.onExit(u),be=!0),_(u,new qt(u))}var Ke=u=>{if(ge=u,x)throw Hr(u),"unwind";Kt(u)},te={ab:[],Ya:[],mb:[],Qa:{},gb:function(){x?te.vb():te.ub()},ub:function(){qe.unshift(()=>{Wr(),te.Bb(()=>dr())})},vb:function(){te.receiveObjectTransfer=te.Db,te.threadInitTLS=te.lb,te.setExitStatus=te.kb,Re=!1},kb:function(u){ge=u},Sb:["$terminateWorker"],Hb:function(){for(var u of te.Ya)st(u);for(u of te.ab)st(u);te.ab=[],te.Ya=[],te.Qa=[]},Eb:function(u){var p=u.Xa;delete te.Qa[p],te.ab.push(u),te.Ya.splice(te.Ya.indexOf(u),1),u.Xa=0,Q(p)},Db:function(){},lb:function(){te.mb.forEach(u=>u())},Cb:u=>new Promise(p=>{u.onmessage=V=>{V=V.data;var H=V.cmd;if(V.targetThread&&V.targetThread!=w()){var le=te.Qa[V.Rb];le?le.postMessage(V,V.transferList):$e(\'Internal error! Worker sent a message "\'+H+\'" to target pthread \'+V.targetThread+", but that thread no longer exists!")}else H==="checkMailbox"?Qt():H==="spawnThread"?ut(V):H==="cleanupThread"?Gr(V.thread):H==="killThread"?(V=V.thread,H=te.Qa[V],delete te.Qa[V],st(H),Q(V),te.Ya.splice(te.Ya.indexOf(H),1),H.Xa=0):H==="cancelThread"?te.Qa[V.thread].postMessage({cmd:"cancel"}):H==="loaded"?(u.loaded=!0,p(u)):H==="alert"?alert("Thread "+V.threadId+": "+V.text):V.target==="setimmediate"?u.postMessage(V):H==="callHandler"?a[V.handler](...V.args):H&&$e("worker sent an unknown command "+H)},u.onerror=V=>{throw $e("worker sent an error! "+V.filename+":"+V.lineno+": "+V.message),V},I&&(u.on("message",function(V){u.onmessage({data:V})}),u.on("error",function(V){u.onerror(V)}));var y=[],C=["onExit","onAbort","print","printErr"],k;for(k of C)a.hasOwnProperty(k)&&y.push(k);u.postMessage({cmd:"load",handlers:y,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:_e,wasmModule:Be})}),Bb:function(u){u()},qb:function(){var u=E("ort-wasm-simd-threaded.worker.js");u=new Worker(u),te.ab.push(u)},tb:function(){return te.ab.length==0&&(te.qb(),te.Cb(te.ab[0])),te.ab.pop()}};a.PThread=te;var Bt=u=>{for(;0<u.length;)u.shift()(a)};a.establishStackSpace=function(){var u=w(),p=n()[u+52>>2>>>0];u=n()[u+56>>2>>>0],fe(p,p-u),ee(p)};function Hr(u){if(x)return Oe(2,0,u);Ke(u)}a.invokeEntryPoint=function(u,p){u=Ye.apply(null,[u,p]),Ge()?te.kb(u):K(u)};function Hn(u){this.fb=u-24,this.pb=function(p){s()[this.fb+4>>2>>>0]=p},this.ob=function(p){s()[this.fb+8>>2>>>0]=p},this.gb=function(p,y){this.nb(),this.pb(p),this.ob(y)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var fr=0,Ln=0;function Lr(u,p,y,C){return x?Oe(3,1,u,p,y,C):Fr(u,p,y,C)}function Fr(u,p,y,C){if(u>>>=0,p>>>=0,y>>>=0,C>>>=0,typeof SharedArrayBuffer>"u")return $e("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var k=[];return x&&k.length===0?Lr(u,p,y,C):(u={Gb:y,Xa:u,rb:C,Mb:k},x?(u.Ob="spawnThread",postMessage(u,k),0):ut(u))}function jr(u,p,y){return x?Oe(4,1,u,p,y):0}function qr(u,p){if(x)return Oe(5,1,u,p)}var hr=u=>{for(var p=0,y=0;y<u.length;++y){var C=u.charCodeAt(y);127>=C?p++:2047>=C?p+=2:55296<=C&&57343>=C?(p+=4,++y):p+=3}return p},Yt=(u,p,y,C)=>{if(y>>>=0,!(0<C))return 0;var k=y;C=y+C-1;for(var V=0;V<u.length;++V){var H=u.charCodeAt(V);if(55296<=H&&57343>=H){var le=u.charCodeAt(++V);H=65536+((H&1023)<<10)|le&1023}if(127>=H){if(y>=C)break;p[y++>>>0]=H}else{if(2047>=H){if(y+1>=C)break;p[y++>>>0]=192|H>>6}else{if(65535>=H){if(y+2>=C)break;p[y++>>>0]=224|H>>12}else{if(y+3>=C)break;p[y++>>>0]=240|H>>18,p[y++>>>0]=128|H>>12&63}p[y++>>>0]=128|H>>6&63}p[y++>>>0]=128|H&63}}return p[y>>>0]=0,y-k},gr=(u,p,y)=>Yt(u,o(),p,y);function Dt(u,p){if(x)return Oe(6,1,u,p)}function Kr(u,p,y){if(x)return Oe(7,1,u,p,y)}function ct(u,p,y){return x?Oe(8,1,u,p,y):0}function it(u,p){if(x)return Oe(9,1,u,p)}function yr(u,p,y){if(x)return Oe(10,1,u,p,y)}function Mt(u,p,y,C){if(x)return Oe(11,1,u,p,y,C)}function br(u,p,y,C){if(x)return Oe(12,1,u,p,y,C)}function wr(u,p,y,C){if(x)return Oe(13,1,u,p,y,C)}function Yr(u){if(x)return Oe(14,1,u)}function Zt(u,p){if(x)return Oe(15,1,u,p)}function Zr(u,p,y){if(x)return Oe(16,1,u,p,y)}var Qr=u=>{if(!be)try{if(u(),!Ge())try{x?K(ge):Ke(ge)}catch(p){p instanceof qt||p=="unwind"||_(1,p)}}catch(p){p instanceof qt||p=="unwind"||_(1,p)}};function vr(u){u>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),u>>2,u).value.then(Qt),u+=128,Atomics.store(n(),u>>2,1))}a.__emscripten_thread_mailbox_await=vr;function Qt(){var u=w();u&&(vr(u),Qr(()=>se()))}a.checkMailbox=Qt;var It=u=>u%4===0&&(u%100!==0||u%400===0),zt=[0,31,60,91,121,152,182,213,244,274,305,335],Xr=[0,31,59,90,120,151,181,212,243,273,304,334];function Xt(u,p,y,C,k,V,H,le){return x?Oe(17,1,u,p,y,C,k,V,H,le):-52}function $r(u,p,y,C,k,V,H){if(x)return Oe(18,1,u,p,y,C,k,V,H)}var Jr=u=>{var p=hr(u)+1,y=A(p);return y&&gr(u,y,p),y},_r=[],Sr=(u,p)=>{_r.length=0;var y;for(p>>=2;y=o()[u++>>>0];)p+=y!=105&p,_r.push(y==105?n()[p>>>0]:c()[p++>>>1]),++p;return _r},Fn=u=>{var p=P();return u=u(),ee(p),u};function Oe(u,p){var y=arguments.length-2,C=arguments;return Fn(()=>{for(var k=ye(8*y),V=k>>3,H=0;H<y;H++){var le=C[2+H];c()[V+H>>>0]=le}return F(u,y,k,p)})}var Jt=[],er={},xr=()=>{if(!Ut){var u={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:v||"./this.program"},p;for(p in er)er[p]===void 0?delete u[p]:u[p]=er[p];var y=[];for(p in u)y.push(`${p}=${u[p]}`);Ut=y}return Ut},Ut;function Cr(u,p){if(x)return Oe(19,1,u,p);u>>>=0,p>>>=0;var y=0;return xr().forEach(function(C,k){var V=p+y;for(k=s()[u+4*k>>2>>>0]=V,V=0;V<C.length;++V)r()[k++>>0>>>0]=C.charCodeAt(V);r()[k>>0>>>0]=0,y+=C.length+1}),0}function tr(u,p){if(x)return Oe(20,1,u,p);u>>>=0,p>>>=0;var y=xr();s()[u>>2>>>0]=y.length;var C=0;return y.forEach(function(k){C+=k.length+1}),s()[p>>2>>>0]=C,0}function Ir(u){return x?Oe(21,1,u):52}function rr(u,p,y,C){return x?Oe(22,1,u,p,y,C):52}function en(u,p,y,C,k){return x?Oe(23,1,u,p,y,C,k):70}var tn=[null,[],[]];function Ar(u,p,y,C){if(x)return Oe(24,1,u,p,y,C);p>>>=0,y>>>=0,C>>>=0;for(var k=0,V=0;V<y;V++){var H=s()[p>>2>>>0],le=s()[p+4>>2>>>0];p+=8;for(var ae=0;ae<le;ae++){var oe=o()[H+ae>>>0],ue=tn[u];oe===0||oe===10?((u===1?J:$e)(mr(ue,0)),ue.length=0):ue.push(oe)}k+=le}return s()[C>>2>>>0]=k,0}var rn=[31,29,31,30,31,30,31,31,30,31,30,31],Tr=[31,28,31,30,31,30,31,31,30,31,30,31];function nn(u){var p=Array(hr(u)+1);return Yt(u,p,0,p.length),p}var nr=(u,p)=>{r().set(u,p>>>0)};function on(u,p,y,C){function k(R,ce,Te){for(R=typeof R=="number"?R.toString():R||"";R.length<ce;)R=Te[0]+R;return R}function V(R,ce){return k(R,ce,"0")}function H(R,ce){function Te(zo){return 0>zo?-1:0<zo?1:0}var Wt;return(Wt=Te(R.getFullYear()-ce.getFullYear()))===0&&(Wt=Te(R.getMonth()-ce.getMonth()))===0&&(Wt=Te(R.getDate()-ce.getDate())),Wt}function le(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function ae(R){var ce=R.Za;for(R=new Date(new Date(R.$a+1900,0,1).getTime());0<ce;){var Te=R.getMonth(),Wt=(It(R.getFullYear())?rn:Tr)[Te];if(ce>Wt-R.getDate())ce-=Wt-R.getDate()+1,R.setDate(1),11>Te?R.setMonth(Te+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+ce);break}}return Te=new Date(R.getFullYear()+1,0,4),ce=le(new Date(R.getFullYear(),0,4)),Te=le(Te),0>=H(ce,R)?0>=H(Te,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}u>>>=0,p>>>=0,y>>>=0,C>>>=0;var oe=n()[C+40>>2>>>0];C={Kb:n()[C>>2>>>0],Jb:n()[C+4>>2>>>0],cb:n()[C+8>>2>>>0],ib:n()[C+12>>2>>>0],eb:n()[C+16>>2>>>0],$a:n()[C+20>>2>>>0],Wa:n()[C+24>>2>>>0],Za:n()[C+28>>2>>>0],Tb:n()[C+32>>2>>>0],Ib:n()[C+36>>2>>>0],Lb:oe?De(oe):""},y=De(y),oe={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ue in oe)y=y.replace(new RegExp(ue,"g"),oe[ue]);var Ie="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ee="January February March April May June July August September October November December".split(" ");oe={"%a":R=>Ie[R.Wa].substring(0,3),"%A":R=>Ie[R.Wa],"%b":R=>Ee[R.eb].substring(0,3),"%B":R=>Ee[R.eb],"%C":R=>V((R.$a+1900)/100|0,2),"%d":R=>V(R.ib,2),"%e":R=>k(R.ib,2," "),"%g":R=>ae(R).toString().substring(2),"%G":R=>ae(R),"%H":R=>V(R.cb,2),"%I":R=>(R=R.cb,R==0?R=12:12<R&&(R-=12),V(R,2)),"%j":R=>{for(var ce=0,Te=0;Te<=R.eb-1;ce+=(It(R.$a+1900)?rn:Tr)[Te++]);return V(R.ib+ce,3)},"%m":R=>V(R.eb+1,2),"%M":R=>V(R.Jb,2),"%n":()=>`\n`,"%p":R=>0<=R.cb&&12>R.cb?"AM":"PM","%S":R=>V(R.Kb,2),"%t":()=>"	","%u":R=>R.Wa||7,"%U":R=>V(Math.floor((R.Za+7-R.Wa)/7),2),"%V":R=>{var ce=Math.floor((R.Za+7-(R.Wa+6)%7)/7);if(2>=(R.Wa+371-R.Za-2)%7&&ce++,ce)ce==53&&(Te=(R.Wa+371-R.Za)%7,Te==4||Te==3&&It(R.$a)||(ce=1));else{ce=52;var Te=(R.Wa+7-R.Za-1)%7;(Te==4||Te==5&&It(R.$a%400-1))&&ce++}return V(ce,2)},"%w":R=>R.Wa,"%W":R=>V(Math.floor((R.Za+7-(R.Wa+6)%7)/7),2),"%y":R=>(R.$a+1900).toString().substring(2),"%Y":R=>R.$a+1900,"%z":R=>{R=R.Ib;var ce=0<=R;return R=Math.abs(R)/60,(ce?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Lb,"%%":()=>"%"},y=y.replace(/%%/g,"\\0\\0");for(ue in oe)y.includes(ue)&&(y=y.replace(new RegExp(ue,"g"),oe[ue](C)));return y=y.replace(/\\0\\0/g,"%"),ue=nn(y),ue.length>p?0:(nr(ue,u),ue.length-1)}function ne(u){try{u()}catch(p){lt(p)}}function an(u){var p={},y;for(y in u)(function(C){var k=u[C];p[C]=typeof k=="function"?function(){Vt.push(C);try{return k.apply(null,arguments)}finally{be||(Vt.pop()===C||lt(),He&&tt===1&&Vt.length===0&&(tt=0,Le+=1,ne(Ro),typeof Fibers<"u"&&Fibers.Ub()))}}:k})(y);return p}var tt=0,He=null,Er=0,Vt=[],Pr={},Or={},sn=0,or=null,un=[];function ln(){return new Promise((u,p)=>{or={resolve:u,reject:p}})}function jn(){var u=A(65548),p=u+12;s()[u>>2>>>0]=p,s()[u+4>>2>>>0]=p+65536,p=Vt[0];var y=Pr[p];return y===void 0&&(y=sn++,Pr[p]=y,Or[y]=p),p=y,n()[u+8>>2>>>0]=p,u}function ar(){var u=n()[He+8>>2>>>0];return u=N[Or[u]],--Le,u()}function dn(u){if(!be){if(tt===0){var p=!1,y=!1;u((C=0)=>{if(!be&&(Er=C,p=!0,y)){tt=2,ne(()=>Bo(He)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),C=!1;try{var k=ar()}catch(le){k=le,C=!0}var V=!1;if(!He){var H=or;H&&(or=null,(C?H.reject:H.resolve)(k),V=!0)}if(C&&!V)throw k}}),y=!0,p||(tt=1,He=jn(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),ne(()=>gt(He)))}else tt===2?(tt=0,ne(Do),D(He),He=null,un.forEach(C=>Qr(C))):lt(`invalid state: ${tt}`);return Er}}function i(u){return dn(p=>{u().then(p)})}te.gb();var d=[null,Kt,Hr,Lr,jr,qr,Dt,Kr,ct,it,yr,Mt,br,wr,Yr,Zt,Zr,Xt,$r,Cr,tr,Ir,rr,en,Ar],f={r:function(u,p,y){return i(async()=>{await a.xb(u,p,y)})},b:function(u,p,y){throw u>>>=0,new Hn(u).gb(p>>>0,y>>>0),fr=u,Ln++,fr},O:function(u){G(u>>>0,!S,1,!b,131072,!1),te.lb()},l:function(u){u>>>=0,x?postMessage({cmd:"cleanupThread",thread:u}):Gr(u)},I:Fr,i:jr,U:qr,E:Dt,G:Kr,V:ct,S:it,K:yr,R:Mt,p:br,F:wr,C:Yr,T:Zt,D:Zr,q:()=>!0,A:function(u,p){u>>>=0,u==p>>>0?setTimeout(()=>Qt()):x?postMessage({targetThread:u,cmd:"checkMailbox"}):(u=te.Qa[u])&&u.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:vr,X:function(u){I&&te.Qa[u>>>0].ref()},u:function(u,p,y){u=p+2097152>>>0<4194305-!!u?(u>>>0)+4294967296*p:NaN,y>>>=0,u=new Date(1e3*u),n()[y>>2>>>0]=u.getUTCSeconds(),n()[y+4>>2>>>0]=u.getUTCMinutes(),n()[y+8>>2>>>0]=u.getUTCHours(),n()[y+12>>2>>>0]=u.getUTCDate(),n()[y+16>>2>>>0]=u.getUTCMonth(),n()[y+20>>2>>>0]=u.getUTCFullYear()-1900,n()[y+24>>2>>>0]=u.getUTCDay(),u=(u.getTime()-Date.UTC(u.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[y+28>>2>>>0]=u},v:function(u,p,y){u=p+2097152>>>0<4194305-!!u?(u>>>0)+4294967296*p:NaN,y>>>=0,u=new Date(1e3*u),n()[y>>2>>>0]=u.getSeconds(),n()[y+4>>2>>>0]=u.getMinutes(),n()[y+8>>2>>>0]=u.getHours(),n()[y+12>>2>>>0]=u.getDate(),n()[y+16>>2>>>0]=u.getMonth(),n()[y+20>>2>>>0]=u.getFullYear()-1900,n()[y+24>>2>>>0]=u.getDay(),p=(It(u.getFullYear())?zt:Xr)[u.getMonth()]+u.getDate()-1|0,n()[y+28>>2>>>0]=p,n()[y+36>>2>>>0]=-(60*u.getTimezoneOffset()),p=new Date(u.getFullYear(),6,1).getTimezoneOffset();var C=new Date(u.getFullYear(),0,1).getTimezoneOffset();u=(p!=C&&u.getTimezoneOffset()==Math.min(C,p))|0,n()[y+32>>2>>>0]=u},w:function(u){u>>>=0;var p=new Date(n()[u+20>>2>>>0]+1900,n()[u+16>>2>>>0],n()[u+12>>2>>>0],n()[u+8>>2>>>0],n()[u+4>>2>>>0],n()[u>>2>>>0],0),y=n()[u+32>>2>>>0],C=p.getTimezoneOffset(),k=new Date(p.getFullYear(),6,1).getTimezoneOffset(),V=new Date(p.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(V,k);return 0>y?n()[u+32>>2>>>0]=+(k!=V&&H==C):0<y!=(H==C)&&(k=Math.max(V,k),p.setTime(p.getTime()+6e4*((0<y?H:k)-C))),n()[u+24>>2>>>0]=p.getDay(),y=(It(p.getFullYear())?zt:Xr)[p.getMonth()]+p.getDate()-1|0,n()[u+28>>2>>>0]=y,n()[u>>2>>>0]=p.getSeconds(),n()[u+4>>2>>>0]=p.getMinutes(),n()[u+8>>2>>>0]=p.getHours(),n()[u+12>>2>>>0]=p.getDate(),n()[u+16>>2>>>0]=p.getMonth(),n()[u+20>>2>>>0]=p.getYear(),u=p.getTime()/1e3,X((ht=u,1<=+Math.abs(ht)?0<ht?+Math.floor(ht/4294967296)>>>0:~~+Math.ceil((ht-+(~~ht>>>0))/4294967296)>>>0:0)),u>>>0},s:Xt,t:$r,z:function(u,p,y){function C(oe){return(oe=oe.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?oe[1]:"GMT"}u>>>=0,p>>>=0,y>>>=0;var k=new Date().getFullYear(),V=new Date(k,0,1),H=new Date(k,6,1);k=V.getTimezoneOffset();var le=H.getTimezoneOffset(),ae=Math.max(k,le);s()[u>>2>>>0]=60*ae,n()[p>>2>>>0]=+(k!=le),u=C(V),p=C(H),u=Jr(u),p=Jr(p),le<k?(s()[y>>2>>>0]=u,s()[y+4>>2>>>0]=p):(s()[y>>2>>>0]=p,s()[y+4>>2>>>0]=u)},d:()=>{lt("")},c:function(u,p,y){return u>>>=0,p=Sr(p>>>0,y>>>0),Rt[u].apply(null,p)},k:function(u,p,y){return u>>>=0,p=Sr(p>>>0,y>>>0),Rt[u].apply(null,p)},m:function(){},j:function(){return Date.now()},W:()=>{throw Le+=1,"unwind"},B:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return I?(Fo(),Nt(Lo)).cpus().length:navigator.hardwareConcurrency},L:function(u,p,y,C){for(te.Pb=p>>>0,Jt.length=y,p=C>>>0>>3,C=0;C<y;C++)Jt[C]=c()[p+C>>>0];return(0>u?Rt[-u-1]:d[u]).apply(null,Jt)},y:function(u){u>>>=0;var p=o().length;if(u<=p||4294901760<u)return!1;for(var y=1;4>=y;y*=2){var C=p*(1+.2/y);C=Math.min(C,u+100663296);var k=Math;C=Math.max(u,C);e:{k=k.min.call(k,4294901760,C+(65536-C%65536)%65536)-_e.buffer.byteLength+65535>>>16;try{_e.grow(k),me();var V=1;break e}catch{}V=void 0}if(V)return!0}return!1},P:Cr,Q:tr,H:Ke,h:Ir,o:rr,x:en,n:Ar,a:_e||a.wasmMemory,J:on,e:function(u,p,y,C){return on(u>>>0,p>>>0,y>>>0,C>>>0)}};(function(){function u(y,C){return y=y.exports,y=an(y),N=y=tl(y),te.mb.push(N.Da),ot.unshift(N.Y),Be=C,dr(),y}var p={a:f};if(Wr(),a.instantiateWasm)try{return a.instantiateWasm(p,u)}catch(y){$e("Module.instantiateWasm callback failed with error: "+y),g(y)}return at(p,function(y){u(y.instance,y.module)}).catch(g),{}})(),a._OrtInit=(u,p)=>(a._OrtInit=N.Z)(u,p),a._OrtGetLastError=(u,p)=>(a._OrtGetLastError=N._)(u,p),a._OrtCreateSessionOptions=(u,p,y,C,k,V,H,le,ae,oe)=>(a._OrtCreateSessionOptions=N.$)(u,p,y,C,k,V,H,le,ae,oe),a._OrtAppendExecutionProvider=(u,p)=>(a._OrtAppendExecutionProvider=N.aa)(u,p),a._OrtAddFreeDimensionOverride=(u,p,y)=>(a._OrtAddFreeDimensionOverride=N.ba)(u,p,y),a._OrtAddSessionConfigEntry=(u,p,y)=>(a._OrtAddSessionConfigEntry=N.ca)(u,p,y),a._OrtReleaseSessionOptions=u=>(a._OrtReleaseSessionOptions=N.da)(u),a._OrtCreateSession=(u,p,y)=>(a._OrtCreateSession=N.ea)(u,p,y),a._OrtReleaseSession=u=>(a._OrtReleaseSession=N.fa)(u),a._OrtGetInputOutputCount=(u,p,y)=>(a._OrtGetInputOutputCount=N.ga)(u,p,y),a._OrtGetInputName=(u,p)=>(a._OrtGetInputName=N.ha)(u,p),a._OrtGetOutputName=(u,p)=>(a._OrtGetOutputName=N.ia)(u,p),a._OrtFree=u=>(a._OrtFree=N.ja)(u),a._OrtCreateTensor=(u,p,y,C,k,V)=>(a._OrtCreateTensor=N.ka)(u,p,y,C,k,V),a._OrtGetTensorData=(u,p,y,C,k)=>(a._OrtGetTensorData=N.la)(u,p,y,C,k),a._OrtReleaseTensor=u=>(a._OrtReleaseTensor=N.ma)(u),a._OrtCreateRunOptions=(u,p,y,C)=>(a._OrtCreateRunOptions=N.na)(u,p,y,C),a._OrtAddRunConfigEntry=(u,p,y)=>(a._OrtAddRunConfigEntry=N.oa)(u,p,y),a._OrtReleaseRunOptions=u=>(a._OrtReleaseRunOptions=N.pa)(u),a._OrtCreateBinding=u=>(a._OrtCreateBinding=N.qa)(u),a._OrtBindInput=(u,p,y)=>(a._OrtBindInput=N.ra)(u,p,y),a._OrtBindOutput=(u,p,y,C)=>(a._OrtBindOutput=N.sa)(u,p,y,C),a._OrtClearBoundOutputs=u=>(a._OrtClearBoundOutputs=N.ta)(u),a._OrtReleaseBinding=u=>(a._OrtReleaseBinding=N.ua)(u),a._OrtRunWithBinding=(u,p,y,C,k)=>(a._OrtRunWithBinding=N.va)(u,p,y,C,k),a._OrtRun=(u,p,y,C,k,V,H,le)=>(a._OrtRun=N.wa)(u,p,y,C,k,V,H,le),a._OrtEndProfiling=u=>(a._OrtEndProfiling=N.xa)(u),a._JsepOutput=(u,p,y)=>(a._JsepOutput=N.ya)(u,p,y),a._JsepGetNodeName=u=>(a._JsepGetNodeName=N.za)(u);var w=a._pthread_self=()=>(w=a._pthread_self=N.Aa)(),A=a._malloc=u=>(A=a._malloc=N.Ba)(u),D=a._free=u=>(D=a._free=N.Ca)(u);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=N.Da)();var G=a.__emscripten_thread_init=(u,p,y,C,k,V)=>(G=a.__emscripten_thread_init=N.Fa)(u,p,y,C,k,V);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=N.Ga)();var F=(u,p,y,C)=>(F=N.Ha)(u,p,y,C),Q=u=>(Q=N.Ia)(u),K=a.__emscripten_thread_exit=u=>(K=a.__emscripten_thread_exit=N.Ja)(u),se=a.__emscripten_check_mailbox=()=>(se=a.__emscripten_check_mailbox=N.Ka)(),X=u=>(X=N.La)(u),fe=(u,p)=>(fe=N.Ma)(u,p),P=()=>(P=N.Na)(),ee=u=>(ee=N.Oa)(u),ye=u=>(ye=N.Pa)(u),Ye=a.dynCall_ii=(u,p)=>(Ye=a.dynCall_ii=N.Ra)(u,p),gt=u=>(gt=N.Sa)(u),Ro=()=>(Ro=N.Ta)(),Bo=u=>(Bo=N.Ua)(u),Do=()=>(Do=N.Va)();a.___start_em_js=923047,a.___stop_em_js=923208;function tl(u){u=Object.assign({},u);var p=C=>()=>C()>>>0,y=C=>k=>C(k)>>>0;return u.__errno_location=p(u.__errno_location),u.pthread_self=p(u.pthread_self),u.malloc=y(u.malloc),u.stackSave=p(u.stackSave),u.stackAlloc=y(u.stackAlloc),u}a.keepRuntimeAlive=Ge,a.wasmMemory=_e,a.stackAlloc=ye,a.stackSave=P,a.stackRestore=ee,a.UTF8ToString=De,a.stringToUTF8=gr,a.lengthBytesUTF8=hr,a.ExitStatus=qt,a.PThread=te;var cn;ft=function u(){cn||Mo(),cn||(ft=u)};function Mo(){function u(){if(!cn&&(cn=!0,a.calledRun=!0,!be)&&(x||Bt(ot),m(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),!x)){if(a.postRun)for(typeof a.postRun=="function"&&(a.postRun=[a.postRun]);a.postRun.length;){var p=a.postRun.shift();At.unshift(p)}Bt(At)}}if(!(0<et))if(x)m(a),x||Bt(ot),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)qe.unshift(a.preRun.shift());Bt(qe),0<et||(a.setStatus?(a.setStatus("Running..."),setTimeout(function(){setTimeout(function(){a.setStatus("")},1),u()},1)):u())}}if(a.preInit)for(typeof a.preInit=="function"&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return Mo(),t.ready}})();typeof qo=="object"&&typeof Qn=="object"?Qn.exports=jo:typeof define=="function"&&define.amd&&define([],()=>jo)});var Yo=kr((up,dl)=>{dl.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\\n\'});var eo,Et,Br,gn,Dr,ta,to,he=Y(()=>{"use strict";eo=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Et=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Br=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],gn=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Dr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},ta=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",to=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var yn=Y(()=>{"use strict"});var na=Y(()=>{"use strict";yn()});var oa,aa=Y(()=>{"use strict";oa="1.18.0"});var ia,Gt,ro=Y(()=>{"use strict";aa();ia="warning",Gt={wasm:{},webgl:{},webgpu:{},versions:{common:oa},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);ia=e}},get logLevel(){return ia}};Object.defineProperty(Gt,"logLevel",{enumerable:!0})});var ir,sa=Y(()=>{"use strict";ro();ir=Gt});var ua=Y(()=>{"use strict"});var la=Y(()=>{"use strict";bn()});var ca=Y(()=>{"use strict"});var pa=Y(()=>{"use strict";bn()});var bn=Y(()=>{"use strict";ua();la();ca();pa()});var wn=Y(()=>{"use strict";bn()});var no,ma,Ht,Lt,oo=Y(()=>{"use strict";ro();no=(e,t)=>{Gt.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},ma=(e,t)=>{let r=new Error().stack?.split(/\\r\\n|\\r|\\n/g)||[],o=!1;for(let n=0;n<r.length;n++){if(o&&!r[n].includes("TRACE_FUNC")){let s=`FUNC_${e}::${r[n].trim().split(" ")[1]}`;t&&(s+=`::${t}`),no("CPU",s);return}r[n].includes("TRACE_FUNC")&&(o=!0)}},Ht=e=>{Gt.wasm.trace&&ma("BEGIN",e)},Lt=e=>{Gt.wasm.trace&&ma("END",e)}});var fa=Y(()=>{"use strict";yn();wn();oo()});var ha=Y(()=>{"use strict";fa()});var ga=Y(()=>{"use strict"});var ya=Y(()=>{"use strict";yn();wn()});var ba=Y(()=>{"use strict";ya()});var sr=Y(()=>{"use strict";na();sa();ha();wn();oo();ga();ba()});var $l,_l,wa,va,$a,Sl,ze,Pt=Y(()=>{"use strict";he();$l=["V","I","W","E","F"],_l=(e,t)=>{console.log(`[${$l[e]},${new Date().toISOString()}]${t}`)},$a=(e,t)=>{wa=e,va=t},Sl=(e,t)=>{let r=Dr(e),o=Dr(wa);r>=o&&_l(r,typeof t=="function"?t():t)},ze=(...e)=>{va&&Sl(...e)}});var _a,Sa=Y(()=>{"use strict";he();_a=(e,t)=>new(gn(t))(e)});var vn=Y(()=>{"use strict"});var $n,xl,xa,io,ao,Ia,Aa=Y(()=>{"use strict";Pt();vn();$n=e=>Math.ceil(e/256)*256,xl=1,xa=()=>xl++,io=async(e,t,r,o)=>{let n=$n(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let l=e.getCommandEncoder();e.endComputePass(),l.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let c=s.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(c,0,r)),a}else return new Uint8Array(c.slice(0,r))}finally{s.destroy()}},ao=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map}upload(t,r){let o=r.buffer,n=r.byteOffset,s=r.byteLength,l=$n(s),c=this.storageCache.get(t);if(!c)return;if(c.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${c.originalSize}, data size=${s}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:l,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),m=a.getMappedRange();new Uint8Array(m).set(new Uint8Array(o,n,s)),a.unmap();let g=this.backend.getCommandEncoder();this.backend.endComputePass(),g.copyBufferToBuffer(a,0,c.gpuData.buffer,0,l),ze("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=$n(o.originalSize),l=this.backend.getCommandEncoder();this.backend.endComputePass(),l.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return ze("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!`);this.externalBuffers.delete(o)}else n=xa();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),ze("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),ze("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=$n(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,l=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||l){let a=s?this.freeBuffers:this.freeUniformBuffers,m=a.get(o);m||(m=[],a.set(o,m)),m.length>0?n=m.pop():n=this.backend.device.createBuffer({size:o,usage:r})}else n=this.backend.device.createBuffer({size:o,usage:r});let c={id:xa(),type:0,buffer:n};return this.storageCache.set(c.id,{gpuData:c,originalSize:t}),ze("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${c.id}`),c}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return ze("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);o&&await io(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}else{let t=this.capturedPendingBuffers.get(this.backend.currentSessionId);t||(t=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,t));for(let r of this.buffersPending)t.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(t){let r=this.capturedPendingBuffers.get(t);r&&(r.forEach(o=>{o.destroy()}),this.capturedPendingBuffers.delete(t))}},Ia=(...e)=>new ao(...e)});var so,Se,Qe=Y(()=>{"use strict";so=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},Se=e=>new so(e)});var uo,yt,z,Ft,_n,Sn,xn,xe=Y(()=>{"use strict";uo=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},yt=class{static calcShape(t,r,o=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let l=Math.max(t.length,r.length),c=new Array(l);if(o){if(n<2||s<2)return;let a=uo.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(a===void 0)return;[c[l-2],c[l-1]]=a}for(let a=o?3:1;a<=l;a++){let m=n-a<0?1:t[n-a],g=s-a<0?1:r[s-a];if(m!==g&&m>1&&g>1)return;c[l-a]=Math.max(m,g)}return c}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let s=1;s<=o;s++)if(t[o-s]!==1&&t[o-s]!==r[n-s])return!1;return!0}},z=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let o=t.length;if(o===0)return[];let n=new Array(o),s=o-1;for(;s>=0;){if(t[s]%r===0){n[s]=t[s]/r;break}if(r%t[s]!==0)throw new Error("cannot convert shape");n[s]=1,r/=t[s],s--}for(s--;s>=0;s--)n[s]=t[s];return n}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let s=r;s<o;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,s)=>n+r[s]+r[s+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},Ft=class e{static adjustPoolAttributes(t,r,o,n,s,l){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let c=0;c<r.length-2;c++)c>=o.length?o.push(r[c+2]):o[c]=r[c+2];for(let c=0;c<o.length;c++)if(c<n.length){if(n[c]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let c=0;c<o.length;c++)if(c<s.length){if(s[c]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let c=0;c<o.length*2;c++)if(c<l.length){if(l[c]<0)throw new Error("pad should be greater than or equal to 1")}else l.push(0);for(let c=0;c<o.length;c++){if(o[c]<=0)throw new Error("kernel shapes need to be greater than 0");if(l[c]>=o[c]||l[c+o.length]>=o[c])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,s,l,c){if(c){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(l?1:2)],r[a],o[a],n[a],s,a,a+t.length-2,c)}}static computePoolOutputShape(t,r,o,n,s,l,c){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,s,l,c),a}static computeConvOutputShape(t,r,o,n,s,l,c){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,s,l,c),a}static computeShapeHelper(t,r,o,n,s,l,c,a){if(t)for(let m=0;m<r.length-2;m++)o.push(1);else for(let m=0;m<r.length-2;m++)o.push(e.adjustPadAndReturnShape(r[m+2],n[m],s[m],l[m],c,m,m+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,s,l,c,a){let m=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return s[l]=0,s[c]=0,Math.floor((t-m)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let h=((t+r-1)/r-1)*r+n-t;return s[l]=Math.floor(a==="SAME_LOWER"?(h+1)/2:h/2),s[c]=h-s[l],Math.floor((t+h-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[l]+s[c]-m)/r+1)}},_n=class{static getShapeOfGemmResult(t,r,o,n,s){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let l,c,a;r?(l=t[1],c=t[0]):(l=t[0],c=t[1]);let m=-1;if(n?(a=o[0],m=1):(a=o[1],m=0),o[m]!==c)throw new Error("dimension mismatch");if(l<=0||a<=0||c<=0)throw new Error("invalid shape specified");if(s&&!yt.isValidBroadcast(s,[l,a]))throw new Error("gemm: invalid bias shape for broadcast");return[l,a,c]}},Sn=-34028234663852886e22,xn=34028234663852886e22});var Cn,co,Ue,rt,Z,je,Je,pt,nt,de,po,U,j,In,lo,Ta,ur,ve=Y(()=>{"use strict";he();xe();Cn=64,co=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ue=(e,t=1)=>{let r=co(e,t);return typeof r=="string"?r:r[0]},rt=(e,t=1)=>{let r=co(e,t);return typeof r=="string"?r:r[1]},Z=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:z.computeStrides(r)})}),t},je=e=>e%4===0?4:e%2===0?2:1,Je=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,pt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,nt=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,de=(e,t,r,o)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?o==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:o==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,po=(e,t,r,o,n)=>{let s=typeof r=="number",l=s?r:r.length,c=[...new Array(l).keys()],a=l<2?"u32":l<=4?`vec${l}<u32>`:`array<u32, ${l}>`,m=co(t,n),g=typeof m=="string"?m:m[1],h=typeof m=="string"?m:m[0],v={indices:a,value:g,storage:h,tensor:t},_=L=>typeof L=="string"?L:`${L}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},S=s?"uniforms.":"",I=`${S}${e}_shape`,x=`${S}${e}_strides`,$="";for(let L=0;L<l-1;L++)$+=`\n    let dim${L} = current / ${de(x,L,l)};\n    let rest${L} = current % ${de(x,L,l)};\n    indices[${L}] = dim${L};\n    current = rest${L};\n    `;$+=`indices[${l-1}] = current;`;let E=l<2?"":`\n  fn o2i_${e}(offset: u32) -> ${v.indices} {\n    var indices: ${v.indices};\n    var current = offset;\n    ${$}\n    return indices;\n  }`,T=L=>(b.offsetToIndices=!0,l<2?L:`o2i_${e}(${L})`),B=[];if(l>=2)for(let L=l-1;L>=0;L--)B.push(`${de(x,L,l)} * (indices[${L}])`);let M=l<2?"":`\n  fn i2o_${e}(indices: ${v.indices}) -> u32 {\n    return ${B.join("+")};\n  }`,W=L=>(b.indicesToOffset=!0,l<2?L:`i2o_${e}(${L})`),q=(...L)=>l===0?"0u":`${v.indices}(${L.map(_).join(",")})`,ie=(L,re)=>l<2?`${L}`:`${de(L,re,l)}`,O=(L,re,me)=>l<2?`${L}=${me};`:`${de(L,re,l)}=${me};`,J={},$e=(L,re)=>{b.broadcastedIndicesToOffset=!0;let me=`${re.name}broadcastedIndicesTo${e}Offset`;if(me in J)return`${me}(${L})`;let Xe=[];for(let qe=l-1;qe>=0;qe--){let ot=re.indicesGet("outputIndices",qe+re.rank-l);Xe.push(`${ie(x,qe)} * (${ot} % ${ie(I,qe)})`)}return J[me]=`fn ${me}(outputIndices: ${re.type.indices}) -> u32 {\n             return ${Xe.length>0?Xe.join("+"):"0u"};\n           }`,`${me}(${L})`},ke=(L,re)=>(()=>{if(v.storage===v.value)return`${e}[${L}]=${re};`;if(v.storage==="vec2<u32>"&&v.value==="i32")return`${e}[${L}]=vec2<u32>(u32(${re}), select(0u, 0xFFFFFFFFu, ${re} < 0));`;if(v.storage==="vec2<u32>"&&v.value==="u32")return`${e}[${L}]=vec2<u32>(u32(${re}), 0u);`;if(v.storage==="u32"&&v.value==="vec4<bool>")return`${e}[${L}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${re}));`;throw new Error(`not supported combination of storage type ${v.storage} and value type ${v.value} yet`)})(),Re=L=>(()=>{if(v.storage===v.value)return`${e}[${L}]`;if(v.storage==="vec2<u32>"&&v.value==="i32")return`i32(${e}[${L}].x)`;if(v.storage==="vec2<u32>"&&v.value==="u32")return`u32(${e}[${L}].x)`;if(v.storage==="u32"&&v.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${L}] & 0xFFu), bool(${e}[${L}] & 0xFF00u), bool(${e}[${L}] & 0xFF0000u), bool(${e}[${L}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${v.storage} and value type ${v.value} yet`)})(),_e=l<2?"":`\n  fn get_${e}ByIndices(indices: ${v.indices}) -> ${g} {\n    return ${Re(`i2o_${e}(indices)`)};\n  }`,N=l<2?"":(()=>{let L=c.map(me=>`d${me}: u32`).join(", "),re=c.map(me=>`d${me}`).join(", ");return`\n  fn get_${e}(${L}) -> ${g} {\n    return get_${e}ByIndices(${q(re)});\n  }`})(),Be=(...L)=>{if(L.length!==l)throw new Error(`indices length must be ${l}`);let re=L.map(_).join(",");return l===0?Re("0u"):l===1?Re(re[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${re})`)},be=L=>l<2?Re(L):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${L})`),ge=l<2?"":`\n  fn set_${e}ByIndices(indices: ${v.indices}, value: ${g}) {\n    ${ke(`i2o_${e}(indices)`,"value")}\n  }`,pe=l<2?"":(()=>{let L=c.map(me=>`d${me}: u32`).join(", "),re=c.map(me=>`d${me}`).join(", ");return`\n  fn set_${e}(${L}, value: ${g}) {\n    set_${e}ByIndices(${q(re)}, value);\n  }`})();return{impl:()=>{let L=[],re=!1;return b.offsetToIndices&&(L.push(E),re=!0),b.indicesToOffset&&(L.push(M),re=!0),b.broadcastedIndicesToOffset&&(Object.values(J).forEach(me=>L.push(me)),re=!0),b.set&&(L.push(pe),re=!0),b.setByIndices&&(L.push(ge),re=!0),b.get&&(L.push(N),re=!0),b.getByIndices&&(L.push(_e),re=!0),!s&&re&&L.unshift(`const ${I} = ${v.indices}(${r.join(",")});`,`const ${x} = ${v.indices}(${z.computeStrides(r).join(",")});`),L.join(`\n`)},type:v,offsetToIndices:T,indicesToOffset:W,broadcastedIndicesToOffset:$e,indices:q,indicesGet:ie,indicesSet:O,set:(...L)=>{if(L.length!==l+1)throw new Error(`indices length must be ${l}`);let re=L[l];if(typeof re!="string")throw new Error("value must be string");let me=L.slice(0,l).map(_).join(",");return l===0?ke("0u",re):l===1?ke(me[0],re):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${me}, ${re})`)},setByOffset:ke,setByIndices:(L,re)=>l<2?ke(L,re):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${L}, ${re});`),get:Be,getByOffset:Re,getByIndices:be,usage:o,name:e,strides:x,shape:I,rank:l}},U=(e,t,r,o=1)=>po(e,t,r,"input",o),j=(e,t,r,o=1)=>po(e,t,r,"output",o),In=(e,t,r,o=1)=>po(e,t,r,"internal",o),lo=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=Cn){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,l=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,c=s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_idx;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${l}) {\n    ${c}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:n}of this.uniforms)if(n&&n>4)o==="f16"?t.push(`@align(16) ${r}:array<mat2x4<${o}>, ${Math.ceil(n/8)}>`):t.push(`${r}:array<vec4<${o}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?o:`vec${n}<${o}>`;t.push(`${r}:${s}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},Ta=e=>new lo(e),ur=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let s=r-1-n,l=e[s]||1;(t[t.length-1-n]||1)>1&&l===1&&o.unshift(s)}return o}});var Cl,Ea,Il,Al,mt,Pa,Oa,lr=Y(()=>{"use strict";he();xe();Qe();ve();Cl=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Ea=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Il=(e,t)=>z.sortBasedOnPerm(e,Ea(e.length,t)),Al=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},mt=(e,t)=>{let r=e.dataType,o=e.dims.length,n=Ea(o,t),s=Il(e.dims,n),l=j("output",r,s.length),c=U("a",r,o),a=m=>`\n  ${m.registerUniform("output_size","u32").declareVariables(c,l)}\n\n  ${Al(n,o,c,l)}\n\n  ${m.mainStart()}\n    ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${l.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${l.setByOffset("global_idx",c.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:m=>{let g=z.size(s);return{outputs:[{dims:s,dataType:m[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:[{type:12,data:g},...Z(m[0].dims,s)]}},getShaderSource:a}},Pa=(e,t)=>{Cl(e.inputs),e.compute(mt(e.inputs[0],t.perm))},Oa=e=>Se({perm:e.perm})});var Tl,El,Pl,Ol,kl,Rl,Bl,Dl,Ml,zl,bt,ka,Ra,Ba,Da,Ma,za,Ua,Va,Wa,Na,Ga=Y(()=>{"use strict";he();xe();ve();An();lr();Tl={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},El={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Pl={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Ol={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},kl=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},Rl=(e,t)=>{let r=[],o=e.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},Bl=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?o.push(e[n++]):o.push(1);return o},Dl=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Ml=(e,t)=>{let r=[];if(!Dl(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},zl=(e,t,r,o,n,s,l)=>{let c=r[0].dims,a=z.size(s),m=z.size(l),g=U("_A",r[0].dataType,c),h=j("output",n,s),v=32,_=`\n          var<workgroup> aBestValues : array<${h.type.storage}, ${v}>;\n       `;return{name:e,shaderCache:t,getShaderSource:S=>`\n        ${S.registerUniform("reduceSize","u32").declareVariables(g,h)}\n        ${_}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${S.mainStart(v)}\n\n          let outputIndex = global_idx / ${v};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${h.type.storage}(${Pl[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${v}) {\n           let candidate = ${h.type.storage}(${g.getByOffset("offset + k")});\n           bestValue = ${Tl[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${v}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${El[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${h.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${h.type.storage}(uniforms.reduceSize)`:`${Ol[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:12,data:m}]})}},bt=(e,t,r,o)=>{let n=e.inputs.length===1?r:mo(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((_,b)=>b));let l=z.normalizeAxes(s,e.inputs[0].dims.length),c=l,a=e.inputs[0],m=Ml(c,e.inputs[0].dims.length);m.length>0&&(a=e.compute(mt(e.inputs[0],m),{inputs:[0],outputs:[-1]})[0],c=kl(c.length,a.dims.length));let[g,h]=Rl(a.dims,c),v=g;n.keepDims&&(v=Bl(g,l)),e.compute(zl(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,v,h),{inputs:[a]})},ka=(e,t)=>{bt(e,"ReduceMeanShared",t,"mean")},Ra=(e,t)=>{bt(e,"ReduceL1Shared",t,"l1")},Ba=(e,t)=>{bt(e,"ReduceL2Shared",t,"l2")},Da=(e,t)=>{bt(e,"ReduceLogSumExpShared",t,"logSumExp")},Ma=(e,t)=>{bt(e,"ReduceMaxShared",t,"max")},za=(e,t)=>{bt(e,"ReduceMinShared",t,"min")},Ua=(e,t)=>{bt(e,"ReduceProdShared",t,"prod")},Va=(e,t)=>{bt(e,"ReduceSumShared",t,"sum")},Wa=(e,t)=>{bt(e,"ReduceSumSquareShared",t,"sumSquare")},Na=(e,t)=>{bt(e,"ReduceLogSumShared",t,"logSum")}});var wt,Ul,Tn,mo,vt,Vl,Wl,Nl,Gl,Hl,Ll,Fl,jl,ql,Kl,$t,Ha,La,Fa,ja,qa,Ka,Ya,Za,Qa,Xa,An=Y(()=>{"use strict";he();xe();Qe();ve();Ga();wt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Ul=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Tn=(e,t,r,o,n,s,l=!1,c=!1)=>{let a=[],m=r[0].dims,g=m.length,h=z.normalizeAxes(n,g),v=!c&&h.length===0;m.forEach((I,x)=>{v||h.indexOf(x)>=0?l&&a.push(1):a.push(I)});let _=a.length,b=z.size(a);return{name:e,shaderCache:t,getShaderSource:I=>{let x=[],$=U("_A",r[0].dataType,g),E=j("output",s,_),T=o($,E,h),B=T[2];for(let M=0,W=0;M<g;M++)v||h.indexOf(M)>=0?(l&&W++,B=`for(var j${M}: u32 = 0; j${M} < ${m[M]}; j${M}++) {\n                  ${T[2].includes("last_index")?`let last_index = j${M};`:""}\n                  ${$.indicesSet("input_indices",M,`j${M}`)}\n                  ${B}\n                }`):(x.push(`${$.indicesSet("input_indices",M,E.indicesGet("output_indices",W))};`),W++);return`\n\n        ${I.registerUniform("output_size","u32").declareVariables($,E)}\n\n        ${I.mainStart()}\n          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${$.type.indices};\n          let output_indices = ${E.offsetToIndices("global_idx")};\n\n          ${x.join(`\n`)}\n          ${T[0]}       // init ops for reduce max/min\n          ${T[1]}\n          ${B}\n          ${T[3]}\n          ${T.length===4?E.setByOffset("global_idx","value"):T.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:12,data:b},...Z(m,a)]})}},mo=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),Se({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},vt=(e,t,r,o)=>{let n=e.inputs,s=n.length===1?r:mo(n,r);e.compute(Tn(t,{hint:s.cacheKey,inputDependencies:["rank"]},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?Ul:o,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},Vl=(e,t)=>{wt(e.inputs),vt(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,"value = log(value);"])},Wl=(e,t)=>{wt(e.inputs),vt(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByIndices("input_indices")});`,""])},Nl=(e,t)=>{wt(e.inputs),vt(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Gl=(e,t)=>{wt(e.inputs),vt(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByIndices("input_indices")});`,"value = log(value);"])},Hl=(e,t)=>{wt(e.inputs),vt(e,"ReduceMax",t,(o,n,s)=>{let l=[];for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&l.push(o.indicesSet("input_indices",c,0));return[`${l.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = max(value, ${o.getByIndices("input_indices")});`,""]})},Ll=(e,t)=>{wt(e.inputs),vt(e,"ReduceMean",t,(o,n,s)=>{let l=1;for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&(l*=e.inputs[0].dims[c]);return["var sum = f32(0);","",`sum += f32(${o.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${l});`]})},Fl=(e,t)=>{wt(e.inputs),vt(e,"ReduceMin",t,(o,n,s)=>{let l=[];for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&l.push(`input_indices[${c}] = 0;`);return[`${l.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = min(value, ${o.getByIndices("input_indices")});`,""]})},jl=(e,t)=>{wt(e.inputs),vt(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByIndices("input_indices")};`,""])},ql=(e,t)=>{wt(e.inputs),vt(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,""])},Kl=(e,t)=>{wt(e.inputs),vt(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += t * t;`,""])},$t=(e,t,r)=>{if(t.length===0)return r;let o=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?o*=e[s]:n*=e[s];return n<32&&o>1024},Ha=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ll(e,t):ka(e,t)},La=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Wl(e,t):Ra(e,t)},Fa=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Nl(e,t):Ba(e,t)},ja=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Gl(e,t):Da(e,t)},qa=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Hl(e,t):Ma(e,t)},Ka=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Fl(e,t):za(e,t)},Ya=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?jl(e,t):Ua(e,t)},Za=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ql(e,t):Va(e,t)},Qa=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Kl(e,t):Wa(e,t)},Xa=(e,t)=>{$t(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Vl(e,t):Na(e,t)}});var Ja,ei,ti,fo,ri=Y(()=>{"use strict";he();Qe();An();Ja=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},ei=(e,t)=>{Ja(e.inputs);let r=(o,n,s)=>{let l=[];for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&l.push(`input_indices[${c}] = 0;`);return[`${l.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Tn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},ti=(e,t)=>{Ja(e.inputs);let r=(o,n,s)=>{let l=[];for(let c=0;c<o.rank;c++)(s.indexOf(c)>=0||s.length===0)&&l.push(`input_indices[${c}] = 0;`);return[`${l.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Tn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},fo=e=>Se(e)});var Yl,Zl,Ql,Xl,En,Jl,ni,ho=Y(()=>{"use strict";he();vn();ve();Yl=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],l=e[4],c=e[5];if(l&&c)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],m=r.dims[1],g=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==g)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let h=n.dims[0]/3,v=h,_=v;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let E of t.qkvHiddenSizes)if(E%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");h=t.qkvHiddenSizes[0],v=t.qkvHiddenSizes[1],_=t.qkvHiddenSizes[2]}let b=m;if(h!==v)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==h+v+_)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let S=0;if(l){if(v!==_)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(l.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(l.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(l.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(l.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(l.dims[4]!==v/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(S=l.dims[3])}let I=b+S,x=-1,$=0;if(s)throw new Error("Mask not supported");if(l)throw new Error("past is not supported");if(c)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:m,pastSequenceLength:S,kvSequenceLength:b,totalSequenceLength:I,maxSequenceLength:x,inputHiddenSize:g,hiddenSize:h,vHiddenSize:_,headSize:Math.floor(h/t.numHeads),vHeadSize:Math.floor(_/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:$,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Zl=(e,t,r,o)=>{let n=je(o),s=64,l=o/n;l<s?s=1:l/8<64&&(s=Math.ceil(l/8));let c=Math.ceil(o/n/s),a=[{type:t.dataType,data:1/o},{type:12,data:l},{type:12,data:c}],m=Ue(t.dataType,n),g=h=>{let v=j("x",t.dataType,t.dims,n),_="thread_max_vector";n===2?_="max(thread_max_vector.x, thread_max_vector.y)":n===4&&(_="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let b=rt(t.dataType),S=[{name:"d_inv",type:b},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${s}>;\n  var<workgroup> wgSum: array<f32, ${s}>;\n  ${h.registerUniforms(S).declareVariables(v)}\n  ${h.mainStart([s,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${Je("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${pt(b,n,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${_};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${s}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Je("f32",n,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${pt(b,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${nt("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${s}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${Je(b,n,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${pt(b,n,"x[offset + i]")};\n        x[offset + i] = ${v.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${s};${m};${n}`},getShaderSource:g,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:a})},{inputs:[t],outputs:[]})},Ql=(e,t,r,o,n,s)=>{let l=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],c=s.scale===0?1/Math.sqrt(n.headSize):s.scale,a=je(n.headSize),m=n.headSize/a,g=12,h={x:Math.ceil(n.totalSequenceLength/g),y:Math.ceil(n.sequenceLength/g),z:n.batchSize*n.numHeads},v=[{type:12,data:n.sequenceLength},{type:12,data:m},{type:12,data:n.totalSequenceLength},{type:12,data:n.kvSequenceLength},{type:t.dataType,data:c}],_=[t,r],b=I=>{let x=U("q",t.dataType,t.dims,a),$=U("key",r.dataType,r.dims,a),E=j("output",t.dataType,l),T=Ue(t.dataType),B=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:T}];return`\n  const beta: ${T} = 1.0;\n  const TILE_SIZE = ${g}u;\n\n  var<workgroup> tileQ: array<${x.type.storage}, ${g*g}>;\n  var<workgroup> tileK: array<${x.type.storage}, ${g*g}>;\n  ${I.registerUniforms(B).declareVariables(x,$,E)}\n  ${I.mainStart([g,g,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${Je(T,a)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (lm < uniforms.M && ln < uniforms.N) {\n      let outputIdx = headOffset + lm * uniforms.N + ln;\n      output[outputIdx] = ${nt("value",a)} * uniforms.alpha;\n    }\n  }`},S=e.compute({name:"AttentionProbs",shaderCache:{hint:`${a}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:h,programUniforms:v}),getShaderSource:b},{inputs:_,outputs:[-1]})[0];return Zl(e,S,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),S},Xl=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],s=12,l={x:Math.ceil(o.vHeadSize/s),y:Math.ceil(o.sequenceLength/s),z:o.batchSize*o.numHeads},c=[{type:12,data:o.sequenceLength},{type:12,data:o.totalSequenceLength},{type:12,data:o.vHeadSize},{type:12,data:o.numHeads},{type:12,data:o.vHiddenSize}],a=m=>{let g=U("probs",t.dataType,t.dims),h=U("v",r.dataType,r.dims),v=j("output",t.dataType,n),_=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`\n  const TILE_SIZE = ${s}u;\n  var<workgroup> tileQ: array<${g.type.value}, ${s*s}>;\n  var<workgroup> tileK: array<${g.type.value}, ${s*s}>;\n  ${m.registerUniforms(_).declareVariables(g,h,v)}\n  ${m.mainStart([s,s,1])}\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${g.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:l,programUniforms:c}),getShaderSource:a},{inputs:[t,r],outputs:[0]})[0]},En=(e,t,r,o,n,s,l,c,a,m,g)=>{let h=Ql(e,t,r,a,m,g);Xl(e,h,o,m)},Jl=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=t.sequenceLength,n=t.inputHiddenSize,s=t.headSize,l=12,c={x:Math.ceil(t.headSize/l),y:Math.ceil(t.sequenceLength/l),z:t.batchSize*t.numHeads},a=[e.inputs[0],e.inputs[1],e.inputs[2]],m=[{type:12,data:o},{type:12,data:n},{type:12,data:s},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],g=h=>{let v=j("output_q",a[0].dataType,r),_=j("output_k",a[0].dataType,r),b=j("output_v",a[0].dataType,r),S=U("input",a[0].dataType,a[0].dims),I=U("weight",a[1].dataType,a[1].dims),x=U("bias",a[2].dataType,a[2].dims),$=S.type.storage,E=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`\n  const TILE_SIZE = ${l}u;\n  var<workgroup> tileInput: array<${$}, ${l*l}>;\n  var<workgroup> tileWeightQ: array<${$}, ${l*l}>;\n  var<workgroup> tileWeightK: array<${$}, ${l*l}>;\n  var<workgroup> tileWeightV: array<${$}, ${l*l}>;\n  ${h.registerUniforms(E).declareVariables(S,I,x,v,_,b)}\n  ${h.mainStart([l,l,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${$}(0);\n    var valueK = ${$}(0);\n    var valueV = ${$}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:c,programUniforms:m}),getShaderSource:g},{inputs:a,outputs:[-1,-1,-1]})},ni=(e,t)=>{let r=Yl(e.inputs,t),[o,n,s]=Jl(e,r);return En(e,o,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var ed,td,rd,oi,ai=Y(()=>{"use strict";sr();he();xe();Qe();ve();ed=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,s)=>{let l=n.length;if(l!==o.length)throw new Error(`${s}: num dimensions != ${l}`);n.forEach((c,a)=>{if(c!==o[a])throw new Error(`${s}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},td=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,s=e[0].dims,l=o?je(s[s.length-1]):1,c=n==="NHWC"&&s.length>1?l:1,a=z.size(s)/l,m=o,g=m?s.length:s,h=U("x",e[0].dataType,e[0].dims,l),v=U("scale",e[1].dataType,e[1].dims,c),_=U("bias",e[2].dataType,e[2].dims,c),b=U("inputMean",e[3].dataType,e[3].dims,c),S=U("inputVar",e[4].dataType,e[4].dims,c),I=j("y",e[0].dataType,g,l),x=()=>{let E="";if(o)E=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${l}`:"outputIndices[1]"};`;else if(n==="NCHW")E=`\n            ${I.indicesSet("outputIndices","0","0")}\n            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{E=`var cIndices = ${v.type.indices}(0);\n                       cIndices[0] = outputIndices[${s.length-1}];`;for(let T=1;T<v.rank;T++)E+=`cIndices[${T}] = outputIndices[${T}];`;E+=`let cOffset = ${v.indicesToOffset("cIndices")};`}return E},$=E=>`\n  const epsilon = ${r};\n  ${E.registerUniform("outputSize","u32").declareVariables(h,v,_,b,S,I)}\n  ${E.mainStart()}\n  ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${I.offsetToIndices(`global_idx * ${l}`)};\n    ${x()}\n    let scale = ${v.getByOffset("cOffset")};\n    let bias = ${_.getByOffset("cOffset")};\n    let inputMean = ${b.getByOffset("cOffset")};\n    let inputVar = ${S.getByOffset("cOffset")};\n    let x = ${h.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${I.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${l}`,inputDependencies:m?["rank","type","type","type","type"]:void 0},getShaderSource:$,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:m?[{type:12,data:a},...Z(s)]:[{type:12,data:a}]})}},rd=e=>Se(e),oi=(e,t)=>{let{inputs:r,outputCount:o}=e,n=rd({...t,outputCount:o});if(ir.webgpu.validateInputContent&&ed(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(td(r,n))}});var nd,od,ii,si=Y(()=>{"use strict";xe();ve();nd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},od=e=>{let t=e[0].dims,r=e[0].dims[2],o=z.size(t)/4,n=e[0].dataType,s=U("input",n,t,4),l=U("bias",n,[r],4),c=U("residual",n,t,4),a=j("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:g=>`\n  const channels = ${r}u / 4;\n  ${g.declareVariables(s,l,c,a)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${l.getByOffset("global_idx % channels")} + ${c.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},ii=e=>{nd(e.inputs),e.compute(od(e.inputs))}});var ad,Pe,ui,li,di,ci,pi,mi,fi,hi,gi,id,yi,bi,wi,vi,Pn,$i,On,_i,Si,xi,Ci,Ii,Ai,Ti,Ei,Pi,Oi,ki,Ri,Bi,Di,Mi,zi,Ui,Vi,go,yo,Wi,Ni,Gi,kn=Y(()=>{"use strict";he();xe();Qe();ve();ad=(e,t,r,o,n,s)=>{let l=Math.ceil(t/4),c="";typeof n=="string"?c=`${n}(a)`:c=n("a");let a=U("inputData",r,[l],4),m=j("outputData",o,[l],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,m)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${m.setByOffset("global_idx",c)}\n  }`},Pe=(e,t,r,o,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:l=>ad(l,z.size(e.dims),e.dataType,s,r,o),getRunData:l=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(z.size(l[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(z.size(e.dims)/4)}]})}),ui=e=>{e.compute(Pe(e.inputs[0],"Abs","abs"))},li=e=>{e.compute(Pe(e.inputs[0],"Acos","acos"))},di=e=>{e.compute(Pe(e.inputs[0],"Acosh","acosh"))},ci=e=>{e.compute(Pe(e.inputs[0],"Asin","asin"))},pi=e=>{e.compute(Pe(e.inputs[0],"Asinh","asinh"))},mi=e=>{e.compute(Pe(e.inputs[0],"Atan","atan"))},fi=e=>{e.compute(Pe(e.inputs[0],"Atanh","atanh"))},hi=e=>Se(e),gi=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Pe(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},id=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Sn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:xn;return Se({min:t,max:r})},yi=(e,t)=>{let r=e.inputs.length===1?t:id(e.inputs),o=rt(e.inputs[0].dataType);e.compute(Pe(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},bi=e=>{e.compute(Pe(e.inputs[0],"Ceil","ceil"))},wi=e=>{e.compute(Pe(e.inputs[0],"Cos","cos"))},vi=e=>{e.compute(Pe(e.inputs[0],"Cosh","cosh"))},Pn=e=>Se(e),$i=(e,t)=>{let r=rt(e.inputs[0].dataType);e.compute(Pe(e.inputs[0],"Elu",o=>`elu_vf32(${o})`,`\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},On=(e="f32")=>`\nconst r0: ${e} = 0.3275911;\nconst r1: ${e} = 0.254829592;\nconst r2: ${e} = -0.284496736;\nconst r3: ${e} = 1.421413741;\nconst r4: ${e} = -1.453152027;\nconst r5: ${e} = 1.061405429;\n\nfn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,_i=e=>{let t=rt(e.inputs[0].dataType);e.compute(Pe(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,On(t)))},Si=e=>{e.compute(Pe(e.inputs[0],"Exp","exp"))},xi=e=>{e.compute(Pe(e.inputs[0],"Floor","floor"))},Ci=e=>{let t=rt(e.inputs[0].dataType);e.compute(Pe(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,On(t)))},Ii=(e,t)=>{let r=rt(e.inputs[0].dataType);e.compute(Pe(e.inputs[0],"LeakyRelu",o=>`select(leaky_relu_alpha_ * ${o}, ${o}, ${o} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},Ai=e=>{e.compute(Pe(e.inputs[0],"Not",t=>`!${t}`))},Ti=e=>{e.compute(Pe(e.inputs[0],"Neg",t=>`-${t}`))},Ei=e=>{e.compute(Pe(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},Pi=e=>{let t=rt(e.inputs[0].dataType);e.compute(Pe(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},Oi=e=>{e.compute(Pe(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},ki=e=>Se(e),Ri=(e,t)=>{let r=rt(e.inputs[0].dataType);e.compute(Pe(e.inputs[0],"HardSigmoid",o=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${o} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},Bi=e=>{e.compute(Pe(e.inputs[0],"Sin","sin"))},Di=e=>{e.compute(Pe(e.inputs[0],"Sinh","sinh"))},Mi=e=>{e.compute(Pe(e.inputs[0],"Sqrt","sqrt"))},zi=e=>{e.compute(Pe(e.inputs[0],"Tan","tan"))},Ui=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Vi=e=>{e.compute(Pe(e.inputs[0],"Tanh",Ui))},go=(e="f32")=>`\nconst fast_gelu_a: ${e} = 0.5;\nconst fast_gelu_b: ${e} = 0.7978845608028654;\nconst fast_gelu_c: ${e} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${e}>) -> vec4<${e}> {\n  return ${Ui("v")};\n}\n`,yo=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Wi=e=>{let t=rt(e.inputs[0].dataType);e.compute(Pe(e.inputs[0],"FastGelu",yo,go(t),void 0,e.inputs[0].dataType))},Ni=(e,t)=>{let r=rt(e.inputs[0].dataType);return e.compute(Pe(e.inputs[0],"ThresholdedRelu",o=>`select(vec4<${r}>(0.0), ${o}, ${o} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},Gi=e=>{e.compute(Pe(e.inputs[0],"Log","log"))}});var sd,ud,Li,Fi=Y(()=>{"use strict";xe();ve();kn();sd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},ud=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=U("input",e[0].dataType,e[0].dims,4),o=U("bias",e[0].dataType,[e[0].dims[2]],4),n=j("output",e[0].dataType,t,4),s=z.size(t)/4,l=Ue(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${On(l)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},Li=e=>{sd(e.inputs),e.compute(ud(e.inputs))}});var ld,dd,_t,ji,qi,Ki,Yi,Zi,Qi,Xi,Ji,es,ts,rs=Y(()=>{"use strict";he();xe();ve();ld=(e,t,r,o,n,s,l,c,a,m,g,h)=>{let v,_;typeof c=="string"?v=_=($,E)=>`${c}((${$}),(${E}))`:typeof c=="function"?v=_=c:(v=c.scalar,_=c.vector);let b=j("outputData",g,o.length,4),S=U("aData",a,t.length,4),I=U("bData",m,r.length,4),x;if(n)if(s){let $=z.size(t)===1,E=z.size(r)===1,T=t.length>0&&t[t.length-1]%4===0,B=r.length>0&&r[r.length-1]%4===0;$||E?x=b.setByOffset("global_idx",_($?`${S.type.value}(${S.getByOffset("0")}.x)`:S.getByOffset("global_idx"),E?`${I.type.value}(${I.getByOffset("0")}.x)`:I.getByOffset("global_idx"))):x=`\n            let outputIndices = ${b.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${S.broadcastedIndicesToOffset("outputIndices",b)};\n            let offsetB = ${I.broadcastedIndicesToOffset("outputIndices",b)};\n            ${b.setByOffset("global_idx",_(l||T?S.getByOffset("offsetA / 4u"):`${S.type.value}(${S.getByOffset("offsetA / 4u")}[offsetA % 4u])`,l||B?I.getByOffset("offsetB / 4u"):`${I.type.value}(${I.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else x=b.setByOffset("global_idx",_(S.getByOffset("global_idx"),I.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let $=(E,T,B="")=>{let M=`aData[indexA${T}][componentA${T}]`,W=`bData[indexB${T}][componentB${T}]`;return`\n            let outputIndices${T} = ${b.offsetToIndices(`global_idx * 4u + ${T}u`)};\n            let offsetA${T} = ${S.broadcastedIndicesToOffset(`outputIndices${T}`,b)};\n            let offsetB${T} = ${I.broadcastedIndicesToOffset(`outputIndices${T}`,b)};\n            let indexA${T} = offsetA${T} / 4u;\n            let indexB${T} = offsetB${T} / 4u;\n            let componentA${T} = offsetA${T} % 4u;\n            let componentB${T} = offsetB${T} % 4u;\n            ${E}[${T}] = ${B}(${v(M,W)});\n          `};g===9?x=`\n            var data = vec4<u32>(0);\n            ${$("data",0,"u32")}\n            ${$("data",1,"u32")}\n            ${$("data",2,"u32")}\n            ${$("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:x=`\n            ${$("outputData[global_idx]",0)}\n            ${$("outputData[global_idx]",1)}\n            ${$("outputData[global_idx]",2)}\n            ${$("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(S,I,b)}\n\n        ${h??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${x}\n      }`},dd=(e,t,r,o,n,s,l=r.dataType)=>{let c=!z.areEqual(r.dims,o.dims),a=r.dims,m=z.size(r.dims),g=!1,h=!1,v=[c];if(c){let _=yt.calcShape(r.dims,o.dims,!1);if(!_)throw new Error("Can\'t perform binary op on the given tensors");a=_,m=z.size(a);let b=z.size(r.dims)===1,S=z.size(o.dims)===1,I=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,x=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;v.push(b),v.push(S),v.push(I),v.push(x);let $=1;for(let E=1;E<a.length;E++){let T=r.dims[r.dims.length-E]??1,B=o.dims[o.dims.length-E]??1;if(T===B)$*=T;else break}$%4===0?(h=!0,g=!0):(b||S||I||x)&&(g=!0)}else g=!0;return v.push(g),{name:e,shaderCache:{hint:t+v.map(_=>_.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:_=>ld(_,r.dims,o.dims,a,g,c,h,n,r.dataType,o.dataType,l,s),getRunData:()=>({outputs:[{dims:a,dataType:l}],dispatchGroup:{x:Math.ceil(m/64/4)},programUniforms:[{type:12,data:Math.ceil(z.size(a)/4)},...Z(r.dims,o.dims,a)]})}},_t=(e,t,r,o,n,s)=>{e.compute(dd(t,n??"",e.inputs[0],e.inputs[1],r,o,s))},ji=e=>{_t(e,"Add",(t,r)=>`${t}+${r}`)},qi=e=>{_t(e,"Div",(t,r)=>`${t}/${r}`)},Ki=e=>{_t(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Yi=e=>{_t(e,"Mul",(t,r)=>`${t}*${r}`)},Zi=e=>{let t=U("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;_t(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Qi=e=>{_t(e,"Sub",(t,r)=>`${t}-${r}`)},Xi=e=>{_t(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Ji=e=>{_t(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},es=e=>{_t(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},ts=e=>{_t(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var pd,md,fd,hd,ns,os,as=Y(()=>{"use strict";he();xe();Qe();ve();pd=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},md=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,fd=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(s):n===0?o.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?o.push(`else { ${s} }`):o.push(`else if (inputIndex == ${n}) { ${s} }`)}return o.join(`\n`)},hd=(e,t)=>{let r=0,o=0,n=new Array(e.length);for(let T=0;T<e.length;T++){let B=z.size(e[T].dims);n[T]=B,B>r&&(r=B,o=T)}let s=e[o].dims.slice();if(t>=s.length||t<-1*s.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let l=t<0?s.length+t:t,c=s.slice(0);for(let T=0;T<e.length;T++){if(T===o)continue;let B=e[T].dims.slice();for(let M=0;M<s.length;M++)if(M===l)c[l]+=B[M];else if(s[M]!==B[M])throw new Error("non concat dimensions must match")}let a=z.size(c),m=new Array(e.length),g=new Array(e.length),h=e[0].dataType,v=0,_=[],b=[],S=[{type:12,data:a}];for(let T=0;T<e.length;++T)v+=e[T].dims[l],m[T]=v,b.push(e[T].dims.length),g[T]=U(`input${T}`,h,b[T]),_.push("rank"),S.push({type:12,data:m[T]});for(let T=0;T<e.length;++T)S.push(...Z(e[T].dims));S.push(...Z(c));let I=j("output",h,c.length),x=I.indicesGet("indices",l),$=Array.from(Array(m.length).keys()).map(T=>`uniforms.sizeInConcatAxis${T}`).join(","),E=T=>`\n\n  ${(()=>{T.registerUniform("outputSize","u32");for(let B=0;B<e.length;B++)T.registerUniform(`sizeInConcatAxis${B}`,"u32");return T.declareVariables(...g,I)})()}\n\n  ${md(m.length,$)}\n\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${I.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${x});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${m.length}u>(${$});\n      ${x} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${fd(g,I)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:S}),getShaderSource:E}},ns=(e,t)=>{pd(e.inputs);for(let r=0;r<e.inputs.length;r++)z.size(e.inputs[r].dims)===0&&e.inputs.slice(r,1);e.compute(hd(e.inputs,t.axis))},os=e=>Se({axis:e.axis})});var St,xt,Ct,Rn,Ot=Y(()=>{"use strict";he();xe();St=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},xt=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},Ct=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},Rn=e=>{let t=e?.activation||"";if(t==="HardSigmoid"){let[r,o]=e?.activation_params||[.2,.5];return{activation:t,alpha:r,beta:o}}else if(t==="Clip"){let[r,o]=e?.activation_params||[Sn,xn];return{activation:t,clipMax:o,clipMin:r}}else if(t==="LeakyRelu"){let[r]=e?.activation_params||[.01];return{activation:t,alpha:r}}return{activation:t}}});var Ze,Bn,Dn=Y(()=>{"use strict";Ze=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Bn=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Mn,bo=Y(()=>{"use strict";Mn=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var gd,yd,Mr,is,bd,zr,wd,zn,Ur=Y(()=>{"use strict";he();xe();ve();Ot();Dn();gd=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,yd=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,Mr=(e,t,r="f32",o,n=!1,s=32,l=!1,c=32)=>{let a=t[1]*e[1],m=t[0]*e[0],g=n?a:s,h=n?s:a,v=g/t[0],_=s/t[1];if(!((n&&v===4&&e[1]===4||!n&&(v===3||v===4))&&g%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${v} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${v} must be 3 or 4.\n  tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${v}<${r}>, ${g/v}>, ${h}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${m/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${v};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${l?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let num_tiles = ${l?`${Math.ceil(c/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n  var kStart = ${l?`i32(globalId.z) * ${c}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${_};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${gd(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${v===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${yd(n,v)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},is=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,bd=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",zr=(e,t,r="f32",o,n=!1,s=32,l=!1,c=32,a=!1)=>{let m=e[1]*t[1],g=e[0]*t[0],h=n?m:s,v=n?s:m;if(!(v%t[1]===0&&h%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${v} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let _=v/t[1],b=h/t[0],S=s/t[1],I=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${m};\n    let globalColStart = i32(workgroupId.x) * ${g};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${v}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          ${is(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${m};\n\nlet tileRowA = i32(localId.y) * ${_};\nlet tileColA = i32(localId.x) * ${b};\nlet tileRowB = i32(localId.y) * ${S};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${is(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${bd(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${h}>, ${v}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${g}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${l?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let num_tiles = ${l?`${Math.ceil(c/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n    var kStart = ${l?`i32(globalId.z) * ${c}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${I}\n  }\n`},wd=(e,t,r,o,n,s=!1)=>{let[l,c,a]=n,[m,g,h,v]=o,_=ur(l,a),b=ur(c,a),S=Ue(o[0].type.tensor),I=()=>{let E=g.rank,T=m.rank,B=`var aIndices: ${g.type.indices};`;for(let M=E-2-1,W=T-1;M>=0;M--,W--)B+=`\naIndices[${M}] = ${T>1?`batchIndices[${W}]`:"batchIndices"};`;return _.forEach(M=>{B+=`\naIndices[${M}] = 0;`}),B+=`\naIndices[${E-2}] = u32(row);\n                   aIndices[${E-1}] = u32(colIn);`,B},x=()=>{let E=h.rank,T=m.rank,B=`var bIndices: ${h.type.indices};`;for(let M=E-2-1,W=T-1;M>=0;M--,W--)B+=`\nbIndices[${M}] = ${T>1?`batchIndices[${W}]`:"batchIndices"};`;return b.forEach(M=>{B+=`\nbIndices[${M}] = 0;`}),B+=`\nbIndices[${E-2}] = u32(row);\n                   bIndices[${E-1}] = u32(colIn);`,B};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${m.type.indices}) -> ${Ze(e,S)} {\n      var value = ${Ze(e,S)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        ${I()}\n        value = ${g.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${m.type.indices}) -> ${Ze(e,S)} {\n      var value = ${Ze(e,S)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        ${x()}\n        value = ${h.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ze(e,S)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${Ze(e,S)}(bias[row])`};`:""}\n        ${r}\n        ${v.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},zn=(e,t,r,o,n=!1)=>{let s=e[0].dims,l=e[1].dims,c=s.slice(0,-2),a=l.slice(0,-2),m=o?o.slice(0,-2):r.slice(0,-2),g=z.size(m),h=s[s.length-2],v=s[s.length-1],_=l[l.length-1],b=v%4===0&&_%4===0,S=h<=8?[4,1,1]:[4,4,1],I=[8,8,1],x=[Math.ceil(_/I[0]/S[0]),Math.ceil(h/I[1]/S[1]),Math.ceil(g/I[2]/S[2])],$=b?4:1,E=[...c,h,v/$],T=E.length,B=[...a,v,_/$],M=B.length,W=[g,h,_/$],q=[{type:6,data:h},{type:6,data:_},{type:6,data:v}];xt(t,q),q.push(...Z(m,E,B));let ie=["rank","rank"],O=e.length>2;O&&(q.push(...Z(e[2].dims)),ie.push("rank")),q.push(...Z(W));let J=$e=>{let ke=m.length,Re=In("batchDims",e[0].dataType,ke,1),_e=Ue(e[0].dataType),N=U("a",e[0].dataType,T,$),Be=U("b",e[1].dataType,M,$),be=j("result",e[0].dataType,W.length,$),ge=[N,Be];if(O){let L=n?$:1;ge.push(U("bias",e[2].dataType,e[2].dims.length,L))}let pe=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Ct(t,pe);let Ce=Ue(be.type.tensor),Ae=St(t,be.type.value,Ce),Ne=wd($,O,Ae,[Re,N,Be,be],[c,a,m],n);return`\n  ${$e.registerUniforms(pe).registerInternalVariables(Re).declareVariables(...ge,be)}\n  ${Ne}\n  ${b?Mr(S,I,_e,Re):zr(S,I,_e,Re)}\n                   `};return{name:"MatMul",shaderCache:{hint:`${S};${t.activation};${b};${n}`,inputDependencies:ie},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:x[0],y:x[1],z:x[2]},programUniforms:q}),getShaderSource:J}}});var vd,ss,us=Y(()=>{"use strict";he();Pt();ve();Ot();Dn();bo();Ur();vd=(e,t,r,o,n=!1,s,l=4,c=4,a=4,m="f32")=>{let g=O=>{switch(O){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${m}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${O} is not supported.`)}},h=O=>{switch(O){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${O} is not supported.`)}},v=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,_=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",S=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",x=e?"col":"row",$=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${I} / outWidth;\n    let outCol = ${I} % outWidth;\n\n    let WRow = ${x} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${x} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${x} % inChannels;\n    var resData = ${Ze(l,m)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${S}) {\n      ${v}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${g(l)}\n    }\n    return resData;`,E=e?t&&o?`\n    let col = colIn * ${l};\n    ${$}`:`\n    let col = colIn * ${l};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${$}\n    }\n    return ${Ze(l,m)}(0.0);`:o&&r?`\n    let col = colIn * ${l};\n    ${$}`:`\n    let col = colIn * ${l};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${$}\n    }\n    return ${Ze(l,m)}(0.0);`,T=`${h(c)}`,B=Ze(a,m),M=e?Ze(l,m):Ze(c,m),W=e?Ze(c,m):Ze(l,m),q=St(s,B,m);return`\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${M} {\n      ${e?E:T}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${W} {\n      ${e?T:E}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${B}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${_}\n      ${Bn(n)}\n      ${q}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},ss=(e,t,r,o,n,s,l,c)=>{let a=t.format==="NHWC",m=a?e[0].dims[3]:e[0].dims[1],g=r[0],h=a?r[2]:r[3],v=a?r[1]:r[2],_=a?r[3]:r[1],b=a&&(m%4===0||m%3===0)&&_%4===0,S=a?_:h*v,I=a?h*v:_,x=[8,8,1],$=o<=8?[4,1,1]:[4,4,1],E=[Math.ceil(S/x[0]/$[0]),Math.ceil(I/x[1]/$[1]),Math.ceil(g/x[2]/$[2])];ze("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${E}`);let T=b?a&&m%4!==0?3:4:1,B=x[1]*$[1],M=x[0]*$[0],W=Math.max(x[0]*T,x[1]),q=o%B===0,ie=n%M===0,O=s%W===0,J=b?[T,4,4]:[1,1,1],$e=[{type:6,data:o},{type:6,data:n},{type:6,data:s},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];xt(t,$e),$e.push(...Z(e[0].dims,e[1].dims));let ke=["rank","rank"];l&&($e.push(...Z(e[2].dims)),ke.push("rank")),$e.push(...Z(r));let Re=_e=>{let N=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Ct(t,N);let Be=b?4:1,be=Ue(e[0].dataType),ge=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${be}>`:be}) {\n        result[flatIndex] = ${b?`vec4<${be}>`:be}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${be}>`:be}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);\n      }`,pe=U("x",e[0].dataType,e[0].dims.length,T===3?1:T),Ce=U("w",e[1].dataType,e[1].dims.length,Be),Ae=[pe,Ce],Ne=j("result",e[0].dataType,r.length,Be);if(l){let L=U("bias",e[2].dataType,e[2].dims.length,Be);Ae.push(L),ge+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${be}>`:be} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}return`\n        ${Mn("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${_e.registerUniforms(N).declareVariables(...Ae,Ne)}\n        ${ge}\n        ${vd(a,q,ie,O,l,t,J[0],J[1],J[2],be)}\n        ${b?Mr($,x,be,void 0,!a,W):zr($,x,be,void 0,!a,W,!1,void 0,c)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${T};${b};${q};${ie};${O};${B};${M};${W}`,inputDependencies:ke},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:$e}),getShaderSource:Re}}});var wo,ls=Y(()=>{"use strict";he();xe();ve();$o();Ot();wo=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",s=e[0].dims,l=e[1].dims,c=l[0]/t.group,a=t.format==="NHWC",m=vo(s,l,t.dilations,t.pads,t.strides,a),g=z.size(m),h=[{type:12,data:g},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:c}];xt(t,h),h.push(...Z(s,l,m));let v=["rank","rank"];o&&(h.push(...Z(e[2].dims)),v.push("rank")),h.push(...Z(m));let _=b=>{let S=j("output",e[0].dataType,m.length),I=Ue(S.type.tensor),x=St(t,S.type.value,I),$=U("x",e[0].dataType,s.length),E=U("w",e[1].dataType,l.length),T=[$,E];o&&T.push(U("b",e[2].dataType,e[2].dims));let B=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return Ct(t,B),`\n  ${b.registerUniforms(B).declareVariables(...T,S)}\n\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let outputIndices = ${S.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel / uniforms.output_channels_per_group;\n\n    var value: ${S.type.value} = ${S.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[${a?1:2}]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[${a?2:3}]) {\n            continue;\n          }\n\n          let xVal = ${a?$.get("batch","xHeight","xWidth","input_channel"):$.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${E.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${x}\n    ${S.setByOffset("global_idx","value")}\n  }`};return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:v},getRunData:()=>({outputs:[{dims:r?r(m):m,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:h}),getShaderSource:_}}});var _o,$d,ds,So=Y(()=>{"use strict";he();xe();Ur();ve();Ot();_o=(e,t,r,o,n=!1)=>{let s=e[0].dims,l=e[1].dims,c=s[s.length-2],a=l[l.length-1],m=s[s.length-1],g=je(a),h=je(m),v=je(c),_=z.size(r)/g/v,b=e.length>2,S=o?o.slice(0,-2):r.slice(0,-2),x=[z.size(S),c,a],$=[{type:12,data:_},{type:12,data:c},{type:12,data:a},{type:12,data:m}];xt(t,$),$.push(...Z(S,s,l)),b&&$.push(...Z(e[2].dims)),$.push(...Z(x));let E=T=>{let B=In("batch_dims",e[0].dataType,S.length),M=U("a",e[0].dataType,s.length,h),W=U("b",e[1].dataType,l.length,g),q=j("output",e[0].dataType,x.length,g),ie=Ue(q.type.tensor),O=St(t,q.type.value,ie),J=[M,W],$e="";if(b){let pe=n?g:1;J.push(U("bias",e[2].dataType,e[2].dims.length,pe)),$e=`${n?`value += bias[col / ${pe}];`:`value += ${q.type.value}(bias[row + i]);`}`}let ke=s.slice(0,-2),Re=l.slice(0,-2),_e=ur(ke,S),N=ur(Re,S),Be=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Ct(t,Be);let be=(pe,Ce)=>{let Ae=pe.rank,Ne=pe.name;if(Ae===2)return`var ${Ne}_indices = ${pe.type.indices}(0u, 0u);`;let L=B.rank,re=`var ${Ne}_indices: ${pe.type.indices};`;for(let me=Ae-2-1,Xe=L-1;me>=0;me--,Xe--)re+=`\n${Ne}_indices[${me}] = ${L>1?`batch_indices[${Xe}]`:"batch_indices"};`;return Ce.forEach(me=>{re+=`\n${Ne}_indices[${me}] = 0;`}),re+=`${Ne}_indices[${Ae-2}] = 0u;\n                     ${Ne}_indices[${Ae-1}] = 0u;`,re},ge=()=>{let pe=`var a_data: ${M.type.value};`;for(let Ce=0;Ce<h;Ce++)pe+=`\n              let b_data${Ce} = b[(b_offset + (k + ${Ce}) * uniforms.N + col) / ${g}];`;for(let Ce=0;Ce<v;Ce++){pe+=`a_data = a[(a_offset + (row + ${Ce}) * uniforms.K + k) / ${h}];`;for(let Ae=0;Ae<h;Ae++)pe+=`\n            values[${Ce}] = fma(${W.type.value}(a_data${h===1?"":`[${Ae}]`}), b_data${Ae}, values[${Ce}]);\n`}return pe};return`\n  ${T.registerUniforms(Be).registerInternalVariables(B).declareVariables(...J,q)}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let col = (global_idx % (uniforms.N / ${g})) * ${g};\n    var index1 = global_idx / (uniforms.N / ${g});\n    let stride1 = uniforms.M / ${v};\n    let row = (index1 % stride1) * ${v};\n    let batch = index1 / stride1;\n\n    ${r.length===2?"":`let batch_indices = ${B.offsetToIndices("batch")};`}\n    ${be(M,_e)}\n    let a_offset = ${M.indicesToOffset("a_indices")};\n    ${be(W,N)}\n    let b_offset = ${W.indicesToOffset("b_indices")};\n    var values: array<${q.type.value}, ${v}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${h}) {\n      ${ge()}\n    }\n    for (var i = 0u; i < ${v}u; i++) {\n      var value = values[i];\n      ${$e}\n      ${O}\n      let cur_indices = ${q.type.indices}(batch, row + i, col);\n      let offset = ${q.indicesToOffset("cur_indices")};\n      ${q.setByOffset(`offset / ${g}`,"value")};\n    }\n  }\n  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${g};${h};${v};${n}`,inputDependencies:b?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:$}),getShaderSource:E}},$d=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},ds=e=>{$d(e.inputs);let t=yt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");let r=t[t.length-1],o=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&o<8?e.compute(_o(e.inputs,{activation:""},t)):e.compute(zn(e.inputs,{activation:""},t))}});var vo,cs,_d,ps,xo,Sd,xd,Co,$o=Y(()=>{"use strict";xe();us();Ur();ls();Ot();So();lr();vo=(e,t,r,o,n,s)=>{let l=e[0],c=e.slice(s?1:2,s?3:4),a=c.length,m=t[0],h=t.slice(2).map((b,S)=>b+(b-1)*(r[S]-1)),_=c.map((b,S)=>b+o[S]+o[S+a]).map((b,S)=>Math.floor((b-h[S]+n[S])/n[S]));return _.splice(0,0,l),_.splice(s?3:1,0,m),_},cs=[2,3,1,0],_d=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},ps=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let o=e.pads.slice();Ft.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o}),n},xo=e=>{let t=Rn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,l=e.kernel_shape,c=e.pads,a=e.strides,m=e.w_is_const();return{autoPad:o,format:r,dilations:n,group:s,kernelShape:l,pads:c,strides:a,wIsConst:m,...t,cacheKey:`${e.format};${t.activation};`}},Sd=(e,t,r)=>{let o=ps(r,t),n=r.format==="NHWC";if(r.group!==1){e.compute(wo(t,o));return}let s=t.length===3,l=t[0].dims[n?1:2],c=t[0].dims[n?2:3],a=t[0].dims[n?3:1],m=t[1].dims[2],g=t[1].dims[3],h=vo(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),v=h[n?1:2],_=h[n?2:3],b=h[n?3:1],S=n&&m===l&&g===c&&r.pads[0]===0&&r.pads[1]===0;if(S||m===1&&g===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let M=h[0],W,q,ie,O=[];if(n){let ke=e.kernelCustomData.wT??e.compute(mt(t[1],cs),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=ke),S){let Re=l*c*a;W=t[0].reshape([1,M,Re]),q=ke.reshape([1,Re,b]),ie=[1,M,b]}else W=t[0].reshape([M,l*c,a]),q=ke.reshape([1,a,b]),ie=[M,v*_,b];O.push(W),O.push(q)}else W=t[0].reshape([M,a,l*c]),q=t[1].reshape([1,b,a]),ie=[M,b,v*_],O.push(q),O.push(W);s&&O.push(t[2]);let J=ie[2],$e=O[0].dims[O[0].dims.length-1];J<8&&$e<8?e.compute(_o(O,o,h,ie,n),{inputs:O}):e.compute(zn(O,o,h,ie,n),{inputs:O});return}let I=!0,x=e.kernelCustomData.wT??e.compute(mt(t[1],cs),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=x);let $=[t[0],x];s&&$.push(t[2]);let E=n?v*_:b,T=n?b:v*_,B=m*g*a;e.compute(ss($,o,h,E,T,B,s,I),{inputs:$})},xd=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),l=[1].concat(t.dilations),c=[1].concat(t.kernelShape),a=ps({...t,pads:n,strides:s,dilations:l,kernelShape:c},o);e.compute(wo(o,a,m=>r?[m[0],m[2],m[3]]:[]))},Co=(e,t)=>{_d(e.inputs,t),e.inputs[0].dims.length===3?xd(e,t):Sd(e,e.inputs,t)}});var Cd,ms,fs=Y(()=>{"use strict";he();Pt();ve();Ot();Dn();bo();Ur();Cd=(e,t=!1,r,o=4)=>{let n=Ze(o,"f32"),s=x=>{switch(x){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${x} is not supported.`)}},l=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,c=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",m=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",g=e?"row":"col",h=e?"col":"row",v=`\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${g} / outWidth;\n      let outCol = ${g} % outWidth;\n\n      let WRow = ${h} / (uniforms.filter_dims[1] * inChannels);\n      let WCol = ${h} / inChannels % uniforms.filter_dims[1];\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${m}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${h} % inChannels;\n      ${l}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,_=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n        ${v}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n        ${v}\n      }\n      return ${n}(0.0);`,b=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\n      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${s(o)}\n      }\n      return ${n}(0.0);\n      `,S=St(r,n);return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?_:b}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?b:_}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${c}\n      ${Bn(t)}\n      ${S}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},ms=(e,t,r,o,n,s,l,c)=>{let a=t.format==="NHWC",m=a?e[0].dims[3]:e[0].dims[1],g=r[0],h=a?r[2]:r[3],v=a?r[1]:r[2],_=a?r[3]:r[1],b=a?m%4===0&&_%4===0:h%4===0&&_%4===0,S=a?_:h*v,I=a?h*v:_,x=b?[8,8,1]:[S<=4||I<=4?4:16,S>4&&I<=4?4:16,1],$=b?[4,4,1]:[S<=4?1:4,S>4&&I<=4?1:4,1],E=[Math.ceil(S/x[0]/$[0]),Math.ceil(I/x[1]/$[1]),Math.ceil(g/x[2]/$[2])];ze("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${E}`);let T=b?4:1,B=Math.max(x[0]*T,x[1]),M=b?4:1,W=[t.kernelShape[a?1:2],t.kernelShape[a?2:3]],q=[W[0]+(t.dilations[0]<=1?0:(W[0]-1)*(t.dilations[0]-1)),W[1]+(t.dilations[1]<=1?0:(W[1]-1)*(t.dilations[1]-1))],ie=[q[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),q[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],O=[{type:6,data:o},{type:6,data:n},{type:6,data:s},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:W},{type:6,data:ie}];xt(t,O),O.push(...Z(e[0].dims,e[1].dims));let J=["rank","rank"];l&&(O.push(...Z(e[2].dims)),J.push("rank")),O.push(...Z(r));let $e=ke=>{let Re=U("x",e[0].dataType,e[0].dims.length,M),_e=U("w",e[1].dataType,e[1].dims.length,1),N=j("result",e[0].dataType,r.length,M),Be=[Re,_e],be="";if(l){let pe=U("bias",e[2].dataType,e[2].dims.length,M);Be.push(pe),be+=`\n          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {\n            return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n          }`}let ge=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:W.length},{name:"pads",type:"i32",length:ie.length}];return Ct(t,ge),`\n        ${Mn("uniforms.result_strides")}\n        ${ke.registerUniforms(ge).declareVariables(...Be,N)};\n        ${be}\n        ${Cd(a,l,t,T)}\n        ${b?Mr($,x,"f32",void 0,!a,B):zr($,x,"f32",void 0,!a,B,!1,void 0,c)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${$};${x};${b}`,inputDependencies:J},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:O}),getShaderSource:$e}}});var Id,Io,hs=Y(()=>{"use strict";he();Pt();xe();ve();Id=(e,t,r,o,n,s=!1,l,c,a=!1)=>{let m=a?1:2,g=a?2:3,h=a?3:1,v=s?2:1,_=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${s?`vec4<${l}>`:l}) {\n    result[flatIndex] = ${s?`vec4<${l}>`:l}(value);\n  }`;o&&(_+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${s?`vec4<${l}>`:l} {\n      return bias[coords.${a?"w":"y"}${s?"/ 4":""}];\n    }`);let b=s?4:1,S=U("W",t[1].dataType,t[1].dims.length,b),I=U("Dy",t[0].dataType,t[0].dims.length,b),x=[I,S];o&&x.push(U("bias",t[2].dataType,[r[h]].length,b));let $=j("result",t[0].dataType,r.length,b),E=`{\n        let batch: u32 = ${n?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];\n        let r = ${n?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];\n        let c = ${n?"global_id.y":"workgroup_id.y"} * ${v};\n        let d1: u32 = ${n?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${l}>, ${v}>;\n        for (var i = 0; i < ${v}; i++) {\n          dotProd[i] = vec4<${l}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\n          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(uniforms.strides.x);\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${l}(uniforms.Dy_shape[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\n            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(uniforms.strides.y);\n            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(uniforms.strides.y);\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${l}(uniforms.Dy_shape[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${l}(uniforms.Dy_shape[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${I.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${l}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${I.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = uniforms.Dy_shape[${h}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${I.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${l}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${I.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${l}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${v}; i = i + 1) {\n          let value = dotProd[i] + ${o?"bias[c+i]":`vec4<${l}>(0.0)`};\n          ${$.set("batch","r","c + i","d1","value")};\n        }\n      }`,T=`\n          let outputIndices = ${$.offsetToIndices("global_idx")};\n          let batch = ${$.indicesGet("outputIndices",0)};\n          let d1 = ${$.indicesGet("outputIndices",h)};\n          let r = ${$.indicesGet("outputIndices",m)};\n          let c = ${$.indicesGet("outputIndices",g)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / uniforms.output_channels_per_group;\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${l}(0.0);\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n            if (wR % uniforms.dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(uniforms.strides[0]);\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n            if (dyR < 0.0 || dyR >= ${l}(uniforms.Dy_shape[${m}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n              if (wC % uniforms.dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(uniforms.strides.y);\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n              if (dyC < 0.0 || dyC >= ${l}(uniforms.Dy_shape[${g}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * uniforms.input_channels_per_group;\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\n                let xValue = ${a?I.get("batch","idyR","idyC","inputChannel"):I.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${S.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${o?"bias[d1]":`${l}(0.0)`};\n          ${$.setByOffset("global_idx","value")};\n        `;return`\n  ${e.registerUniforms(c).declareVariables(...x,$)}\n  ${_}\n\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};\n  ${s?E:T}}`},Io=(e,t,r)=>{let o=e.length>2,n=t.outputShape,s=z.size(n),l=[Math.ceil(s/64),1,1];ze("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${l}`);let c=t.format==="NHWC",a=["rank","rank"],m=[t.strides[0],t.strides[1]],g=[t.kernelShape[c?1:2],t.kernelShape[c?2:3]],h=[t.dilations[0],t.dilations[1]],v=[g[0]+(t.dilations[0]<=1?0:(t.kernelShape[c?1:2]-1)*(t.dilations[0]-1)),g[1]+(t.dilations[1]<=1?0:(t.kernelShape[c?2:3]-1)*(t.dilations[1]-1))],_=[v[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),v[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],b=!1,S=t.group,I=e[1].dims,x=I[0]/S,$=I[1],E=[{type:6,data:s},{type:12,data:m},{type:12,data:g},{type:12,data:h},{type:12,data:v},{type:6,data:_},{type:12,data:x},{type:12,data:$},...Z(e[0].dims,e[1].dims)];o&&(E.push(...Z(e[2].dims)),a.push("rank")),E.push(...Z(n));let T=l[1]===1&&l[2]===1,B=M=>{let W=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:m.length},{name:"filter_dims",type:"u32",length:g.length},{name:"dilations",type:"u32",length:g.length},{name:"effective_filter_dims",type:"u32",length:v.length},{name:"pads",type:"i32",length:_.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],q=Ue(e[0].dataType);return`${Id(M,e,n,o,T,b,q,W,c)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:a},getRunData:()=>({dispatchGroup:{x:l[0],y:l[1],z:l[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}],programUniforms:E}),getShaderSource:B}}});var Ad,Td,Ed,gs,ys,Pd,Od,kd,Rd,bs,ws=Y(()=>{"use strict";fs();hs();Ot();lr();Ad=(e,t,r,o,n,s)=>(e-1)*t+r+(o-1)*n+1-s,Td=(e,t,r,o,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[o]=e-s,r[n]=s)},Ed=(e,t,r,o,n,s,l,c,a,m)=>{let g=e.length-2,h=m.length===0;if(a.length===0)for(let b=0;b<g;++b)a.push(0);let v=e[0],_=t[c?3:1]*n;for(let b=0,S=e.length-g-(c?1:0);b<g;++b,++S){let I=e[S],x=h?I*l[b]:m[b],$=Ad(I,l[b],s[b],t[S],r[b],x);Td($,o,s,b,b+g),h&&m.push(l[b]*(I-1)+a[b]+(t[S]-1)*r[b]+1-s[b]-s[b+g])}m.splice(0,0,v),m.splice(c?3:1,0,_)},gs=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((h,v)=>h*v,1)===0){r.length=0;for(let h=2;h<t[1].dims.length;++h)r.push(t[1].dims[h])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),l=e.outputPadding.slice(),c=t[0].dims,a=e.dilations.slice();if(a.reduce((h,v)=>h+v,0)===0){let h=t[0].dims.length-2;a=new Array(h).fill(1)}let m=e.strides.slice();if(m.reduce((h,v)=>h+v,0)===0){let h=t[0].dims.length-2;m=new Array(h).fill(1)}Ed(c,r,a,e.autoPad,e.group,n,m,o,l,s);let g=Object.assign({},e);return Object.assign(g,{kernelShape:r,pads:n,outputPadding:l,outputShape:s,dilations:a,strides:m}),g},ys=e=>{let t=Rn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,l=e.kernelShape,c=e.pads,a=e.strides,m=e.wIsConst(),g=e.outputPadding,h=e.outputShape;return{autoPad:o,format:r,dilations:n,group:s,kernelShape:l,outputPadding:g,outputShape:h,pads:c,strides:a,wIsConst:m,...t,cacheKey:`${e.format};${t.activation};`}},Pd=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((g,h)=>g+h,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((g,h)=>g+h,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((g,h)=>g+h,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((g,h)=>g+h,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Od=[2,3,1,0],kd=(e,t,r)=>{let o=gs(r,t),n=r.format==="NHWC",s=o.outputShape,l=s[n?3:1],c=t[0].dims[n?3:1];if(o.group!==1||l===1&&c===1){e.compute(Io(t,o));return}let a=s[n?1:2],m=s[n?2:3],g=t[1].dims[2],h=t[1].dims[3],v=n?a*m:l,_=n?l:a*m,b=g*h*c,S=!0,I=e.kernelCustomData.wT??e.compute(mt(t[1],Od),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let x=[t[0],I],$=t.length===3;$&&(!n&&t[2].dims.length===1?x.push(t[2].reshape([t[2].dims[0],1,1])):x.push(t[2])),e.compute(ms(x,o,s,v,_,b,$,S),{inputs:x})},Rd=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let l=t.strides;(l.length===0||l[0]===0)&&(l=[1]);let c=t.pads;c.length===0&&(c=[0,0]),c=[0,c[0],0,c[1]],l=[1].concat(l),s=[1].concat(s),n=[1].concat(n);let a=gs({...t,pads:c,strides:l,dilations:s,kernelShape:n},o);e.compute(Io(o,a,m=>r?[m[0],m[2],m[3]]:[m[0],m[1],m[3]]))},bs=(e,t)=>{Pd(e.inputs,t),e.inputs[0].dims.length===3?Rd(e,t):kd(e,e.inputs,t)}});var Bd,vs,$s,_s=Y(()=>{"use strict";he();xe();Qe();ve();Bd=(e,t,r,o)=>{let n=z.size(t),s=t.length,l=U("input",e,s),c=j("output",e,s),a=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),m=z.normalizeAxis(a,s),g=h=>{let v=` i32(${l.indicesGet("inputIndices","uniforms.axis")}) `,_=de("uniforms.input_shape","uniforms.axis",s),b=o.reverse?v+(o.exclusive?" + 1":""):"0",S=o.reverse?_:v+(o.exclusive?"":" + 1");return`\n                ${h.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(l,c)}\n                ${h.mainStart()}\n                  ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${c.offsetToIndices("global_idx")};\n                  var sum = ${c.type.value}(0);\n                  let first : i32 = ${b};\n                  let last : i32 = ${S};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${l.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${l.getByIndices("inputIndices")};\n                  }\n                  ${c.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},{type:6,data:m},...Z(t,t)]}),getShaderSource:g}},vs=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,n=e.inputs[1];e.compute(Bd(o,r,n,t),{inputs:[0]})},$s=e=>{let t=e.exclusive===1,r=e.reverse===1;return Se({exclusive:t,reverse:r})}});var Ao,Un,Ss,Dd,Md,To,Eo,xs,zd,Cs,Is,As=Y(()=>{"use strict";he();xe();Qe();ve();Ao="[a-zA-Z]|\\\\.\\\\.\\\\.",Un="("+Ao+")+",Ss="^"+Un+"$",Dd="("+Un+",)*"+Un,Md="^"+Dd+"$",To=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Eo=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(Md)))throw new Error("Invalid LHS term");if(o.split(",").forEach((c,a)=>{let m=t[a].dims.slice();if(!c.match(RegExp(Ss)))throw new Error("Invalid LHS term");let g=this.processTerm(c,!0,m,a);this.lhs.push(g)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([c,a])=>a.count===1||c==="...").map(([c])=>c).join("");else if(!n.match(RegExp(Un)))throw new Error("Invalid RHS");n.match(RegExp(Ao,"g"))?.forEach(c=>{if(c==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(c);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let s=o.length,l=!1,c=[],a=0;if(!t.match(RegExp(Ss))&&!r&&t!=="")throw new Error("Invalid LHS term");let m=t.match(RegExp(Ao,"g")),g=new To(n);return m?.forEach((h,v)=>{if(h==="..."){if(l)throw new Error("Only one ellipsis is allowed per input term");l=!0;let _=s-m.length+1;if(_<0)throw new Error("Ellipsis out of bounds");if(c=o.slice(a,a+_),this.hasEllipsis){if(this.ellipsisDims.length!==c.length||this.ellipsisDims.toString()!==c.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=c;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<c.length;b++){let S=String.fromCharCode("0".charCodeAt(0)+b);g.addSymbol(S,v+b),this.addSymbol(S,o[a++],n)}}else g.addSymbol(h,v+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(h,o[a++],n)}),g}},xs=e=>e+"_max",zd=(e,t,r,o)=>{let s=e.map(g=>g.length).map((g,h)=>U(`input${h}`,t,g)),l=z.size(o),c=j("output",t,o.length),a=[...r.symbolToInfo.keys()].filter(g=>!r.rhs.symbolToIndices.has(g)),m=g=>{let h=[],v="var prod = 1.0;",_="var sum = 0.0;",b="sum += prod;",S=[],I=[],x=[],$=[],E=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((B,M)=>{if(r.rhs.symbolToIndices.has(M)){let W=r.rhs.symbolToIndices.get(M)?.[0];W!==void 0&&r.lhs.forEach((q,ie)=>{if(B.inputIndices.includes(ie)){let O=q.symbolToIndices.get(M);if(O===void 0)throw new Error("Invalid symbol error");O.forEach(J=>{h.push(`${s[ie].indicesSet(`input${ie}Indices`,J,c.indicesGet("outputIndices",W))}`)})}})}else r.lhs.forEach((W,q)=>{if(B.inputIndices.includes(q)){let ie=W.symbolToIndices.get(M);if(ie===void 0)throw new Error("Invalid symbol error");ie.forEach(O=>{S.push(`${s[q].indicesSet(`input${q}Indices`,O,`${M}`)}`)}),$.push(`prod *= ${s[q].getByIndices(`input${q}Indices`)};`)}}),I.push(`for(var ${M}: u32 = 0; ${M} < uniforms.${xs(M)}; ${M}++) {`),x.push("}")});let T=E?[...h,`let sum = ${s.map((B,M)=>B.getByIndices(`input${M}Indices`)).join(" * ")};`]:[...h,_,...I,...S,v,...$,b,...x];return`\n            ${g.registerUniforms(a.map(B=>({name:`${xs(B)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...s,c)}\n\n            ${g.mainStart()}\n            ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${c.offsetToIndices("global_idx")};\n            ${s.map((B,M)=>`var input${M}Indices: ${s[M].type.indices};`).join(`\n`)}\n            ${T.join(`\n`)};\n            ${c.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let g=a.filter(v=>r.symbolToInfo.has(v)).map(v=>({type:12,data:r.symbolToInfo.get(v)?.dimValue||0}));g.push({type:12,data:l});let h=e.map((v,_)=>[...Z(v)]).reduce((v,_)=>v.concat(_),g);return h.push(...Z(o)),{outputs:[{dims:o,dataType:t}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:h}},getShaderSource:m}},Cs=(e,t)=>{let r=new Eo(e.inputs,t.equation),o=r.outputDims,n=e.inputs.map((s,l)=>s.dims);e.compute(zd(n,e.inputs[0].dataType,r,o))},Is=e=>{let t=e.equation.replace(/\\s+/g,"");return Se({equation:t})}});var Ud,Ts,Vd,Wd,Es,Ps=Y(()=>{"use strict";he();xe();ve();Ud=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Ts=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},Vd=(e,t)=>e.length>t.length?Ts(e,t):Ts(t,e),Wd=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=Vd(t,r),n=e[0].dataType,s=n===9?4:1,l=Math.ceil(z.size(o)/s),c=m=>{let g=U("input",n,t.length,s),h=j("output",n,o.length,s),v;if(n===9){let _=(b,S,I="")=>`\n          let outputIndices${S} = ${h.offsetToIndices(`outputOffset + ${S}u`)};\n          let offset${S} = ${g.broadcastedIndicesToOffset(`outputIndices${S}`,h)};\n          let index${S} = offset${S} / 4u;\n          let component${S} = offset${S} % 4u;\n          ${b}[${S}] = ${I}(${g.getByOffset(`index${S}`)}[component${S}]);\n        `;v=`\n        let outputOffset = global_idx * ${s};\n        var data = vec4<u32>(0);\n        ${_("data",0,"u32")}\n        ${_("data",1,"u32")}\n        ${_("data",2,"u32")}\n        ${_("data",3,"u32")}\n        ${h.setByOffset("global_idx","data")}\n      }`}else v=`\n        let outputIndices = ${h.offsetToIndices("global_idx")};\n        let inputOffset = ${g.broadcastedIndicesToOffset("outputIndices",h)};\n        ${h.setByOffset("global_idx",g.getByOffset("inputOffset"))}\n      }`;return`\n    ${m.registerUniform("vec_size","u32").declareVariables(g,h)}\n    ${m.mainStart()}\n    ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${v}`},a=[{type:12,data:l},...Z(t,o)];return{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:["rank"]},getShaderSource:c,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:a})}},Es=e=>{Ud(e.inputs),e.compute(Wd(e.inputs),{inputs:[0]})}});var Nd,Os,ks=Y(()=>{"use strict";he();xe();ve();kn();Nd=e=>{let t=e[0].dataType,r=z.size(e[0].dims),o=z.size(e[1].dims),n=o%4===0,s=l=>{let c=U("x",t,[1],4),a=U("bias",t,[1],4),m=j("y",t,[1],4),g=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],h=_=>`\n      let bias${_}_offset: u32 = (global_idx * 4 + ${_}) % uniforms.bias_size;\n      let bias${_} = ${a.getByOffset(`bias${_}_offset / 4`)}[bias${_}_offset % 4];`,v=n?`\n      let bias = ${a.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${h(0)}${h(1)}${h(2)}${h(3)}\n      let bias = ${c.type.value}(bias0, bias1, bias2, bias3);`;return`${l.registerUniforms(g).declareVariables(c,a,m)}\n\n    ${go(rt(t))}\n\n    ${l.mainStart(Cn)}\n      ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}\n\n      let x = ${c.getByOffset("global_idx")};\n      ${v}\n      let x_in = x + bias;\n      ${m.setByOffset("global_idx",yo("x_in"))}\n    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${n}`,inputDependencies:["type","type"]},getShaderSource:s,getRunData:l=>({outputs:[{dims:l[0].dims,dataType:l[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:o}],dispatchGroup:{x:Math.ceil(r/Cn/4)}})}},Os=e=>{e.inputs.length<2||z.size(e.inputs[1].dims)===0?Wi(e):e.compute(Nd(e.inputs))}});var Gd,Hd,Rs,Bs,Ds=Y(()=>{"use strict";he();xe();Qe();ve();Gd=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Hd=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,s=z.normalizeAxis(t.axis,n),l=r.slice(0);l.splice(s,1,...o);let c=r[s],a=e[0].dataType===9?4:1,m=Math.ceil(z.size(l)/a),g=[{type:12,data:m},{type:6,data:c},{type:12,data:s},...Z(e[0].dims,e[1].dims,l)],h=v=>{let _=U("data",e[0].dataType,e[0].dims.length,a),b=U("inputIndices",e[1].dataType,e[1].dims.length),S=j("output",e[0].dataType,l.length,a),I=$=>{let E=o.length,T=`var indicesIndices${$}  = ${b.type.indices}(0);`;for(let B=0;B<E;B++)T+=`${E>1?`indicesIndices${$}[${B}]`:`indicesIndices${$}`} = ${l.length>1?`outputIndices${$}[uniforms.axis + ${B}]`:`outputIndices${$}`};`;T+=`\n          var idx${$} = ${b.getByIndices(`indicesIndices${$}`)};\n          if (idx${$} < 0) {\n            idx${$} = idx${$} + uniforms.axisDimLimit;\n          }\n          var dataIndices${$} = ${_.type.indices}(0);\n        `;for(let B=0,M=0;B<n;B++)B===s?(T+=`${n>1?`dataIndices${$}[${B}]`:`dataIndices${$}`} = u32(idx${$});`,M+=E):(T+=`${n>1?`dataIndices${$}[${B}]`:`dataIndices${$}`} = ${l.length>1?`outputIndices${$}[${M}]`:`outputIndices${$}`};`,M++);return T},x;if(e[0].dataType===9){let $=(E,T,B="")=>`\n          let outputIndices${T} = ${S.offsetToIndices(`outputOffset + ${T}u`)};\n          ${I(T)};\n          let offset${T} = ${_.indicesToOffset(`dataIndices${T}`)};\n          let index${T} = offset${T} / 4u;\n          let component${T} = offset${T} % 4u;\n          ${E}[${T}] = ${B}(${_.getByOffset(`index${T}`)}[component${T}]);\n        `;x=`\n        let outputOffset = global_idx * ${a};\n        var value = vec4<u32>(0);\n        ${$("value",0,"u32")}\n        ${$("value",1,"u32")}\n        ${$("value",2,"u32")}\n        ${$("value",3,"u32")}\n        ${S.setByOffset("global_idx","value")}\n      `}else x=`\n      let outputIndices = ${S.offsetToIndices("global_idx")};\n      ${I("")};\n      let value = ${_.getByIndices("dataIndices")};\n      ${S.setByOffset("global_idx","value")};\n      `;return`\n      ${v.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(_,b,S)}\n      ${v.mainStart()}\n        ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${x}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:g}),getShaderSource:h}},Rs=e=>Se({axis:e.axis}),Bs=(e,t)=>{let r=e.inputs;Gd(r),e.compute(Hd(e.inputs,t))}});var Ld,Fd,Ms,zs,Us=Y(()=>{"use strict";he();xe();Qe();ve();Ld=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},Fd=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,s=e[1].dims,l=e[1].dataType,c=z.normalizeAxis(t.axis,n),a=r[c],m=s.slice(0),g=z.size(m),h=U("input",o,n),v=U("indicesInput",l,s.length),_=j("output",o,m.length),b=[{type:12,data:g},{type:6,data:a},{type:12,data:c}];return b.push(...Z(r,s,m)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:m,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:b}),getShaderSource:x=>`\n      ${x.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(h,v,_)}\n      ${x.mainStart()}\n      ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${_.offsetToIndices("global_idx")};\n\n      var idx = ${v.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${h.type.indices}(outputIndices);\n      ${h.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${h.getByIndices("inputIndices")};\n\n      ${_.setByOffset("global_idx","value")};\n  }`}},Ms=e=>Se({axis:e.axis}),zs=(e,t)=>{let r=e.inputs;Ld(r),e.compute(Fd(e.inputs,t))}});var jd,qd,Vs,Ws,Ns=Y(()=>{"use strict";he();xe();ve();jd=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},qd=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,s,l]=_n.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),c=[n,s];if(!c)throw new Error("Can\'t use gemm on the given tensors");let a=z.size(c),m=[{type:12,data:a},{type:12,data:n},{type:12,data:s},{type:12,data:l},{type:1,data:t.alpha},{type:1,data:t.beta}],g=["type","type"];e.length===3&&(m.push(...Z(e[2].dims)),g.push("rank")),m.push(...Z(c));let h=v=>{let _="";t.transA&&t.transB?_="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?_="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?_="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(_="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let b=t.alpha===1?"":"value *= uniforms.alpha;",S=U("a",e[0].dataType,e[0].dims),I=U("b",e[1].dataType,e[1].dims),x=S.type.value,$=null,E=[S,I];e.length===3&&($=U("c",e[2].dataType,e[2].dims.length),E.push($));let T=j("output",e[0].dataType,c.length);E.push(T);let B=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`\n  ${v.registerUniforms(B).declareVariables(...E)}\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${x}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${_}\n    }\n\n    ${b}\n    ${(()=>$!=null?`let cOffset = ${$.broadcastedIndicesToOffset("vec2(m, n)",T)}; value += ${x}(uniforms.beta) * ${$.getByOffset("cOffset")};`:"")()}\n    output[global_idx] = value;\n  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:m}),getShaderSource:h}},Vs=e=>{let t=e.transA,r=e.transB,o=e.alpha,n=e.beta;return{transA:t,transB:r,alpha:o,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Ws=(e,t)=>{jd(e.inputs),e.compute(qd(e.inputs,t))}});var Kd,Yd,Zd,Gs,Hs=Y(()=>{"use strict";he();xe();ve();Kd=(e,t)=>{let r=e[0].dims,o=r,n=2,s=z.sizeToDimension(r,n),l=z.sizeFromDimension(r,n),c=je(l),a=l/c,m=[r[0],r[1],a],g=["rank","type","type"],h=[{type:12,data:l},{type:12,data:a}];h.push(...Z(m,m));let v=_=>{let b=U("x",e[0].dataType,m.length,c),S=U("scale",e[1].dataType,e[1].dims),I=U("bias",e[2].dataType,e[2].dims),x=j("output",e[0].dataType,m.length,c),$=[b,S,I,x],E=b.type.value,T=c===1?"f32":`vec${c}<f32>`,B=64,M=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${T}, ${B}>;\n  const workgroupSize = ${B}u;\n  ${_.registerUniforms(M).declareVariables(...$)}\n  ${_.mainStart(B)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${T}(${b.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${nt("workgroupShared[0]",c)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${T}(${b.get("batch","channel","h")}) - ${T}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${nt("workgroupShared[0]",c)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${S.getByOffset("channel")});\n    let channelShift = f32(${I.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${b.get("batch","channel","h")} * ${E}(${T}(channelScale)) + ${E}(${T}(channelShift));\n      ${x.set("batch","channel","h","value")};\n    }\n  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${c}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:s},programUniforms:h}),getShaderSource:v}},Yd=(e,t,r,o,n,s,l,c)=>{let a=je(l),m=64,g=a===1?"vec2f":`mat2x${a}f`,h=a===1?"f32":`vec${a}f`,v=(M,W)=>`${g}(${M}, ${W})`,_=n*l/a,b=Math.ceil(s/m),S=["type"],I=[{type:12,data:b},{type:12,data:s},{type:12,data:Math.floor(l/a)},{type:12,data:Math.floor(s*l/a)}],x=M=>{let W=U("input",t.dataType,t.dims,a);return`\n  ${M.declareVariables(W)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${g}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${M.mainStart(m)}\n    let currentImageNumber = global_idx / ${m} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${m}) % uniforms.C;\n    let wgId = global_idx % ${m};\n    let wgOffset = wgId * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${Je("f32",a)};\n    var squaredSum = ${Je("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${h}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${v("sum","squaredSum")};\n  }`},$=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${a}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:[n,l,m,2],dataType:1}],dispatchGroup:{x:n*l/a},programUniforms:I}),getShaderSource:x},{inputs:[t],outputs:[-1]})[0],E=[{type:12,data:_},{type:12,data:s},{type:12,data:Math.floor(l/a)},{type:12,data:Math.floor(m*l/a)}],T=["type","type","type"],B=M=>{let W=U("scale",r.dataType,r.dims,a),q=U("bias",o.dataType,o.dims,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${g}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${W.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${q.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${g}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${M.mainStart()}\n    ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${Je("f32",a)};\n    var squaredSum = ${Je("f32",a)};\n    for (var i: u32 = 0; i < ${m}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${m}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${c}));\n    let channelScale = invStdDev * ${h}(scale[currentChannelNumber]);\n    let channelShift = ${h}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${v("channelScale","channelShift")};\n  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${a};${c}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:[n,l,2],dataType:1}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:E}),getShaderSource:B},{inputs:[$,r,o],outputs:[-1]})[0]},Zd=(e,t,r)=>{let o=t[0].dims,n=o,s=o[0],l=o[o.length-1],c=z.sizeFromDimension(o,1)/l,a=je(l),m=z.size(n)/a,g=[{type:12,data:c},{type:12,data:Math.floor(l/a)}],h=["type","type"],v=Yd(e,t[0],t[1],t[2],s,c,l,r.epsilon),_=b=>{let S=Ue(t[0].dataType),I=a===1?"vec2f":`mat2x${a}f`,x=a===1?S:`vec${a}<${S}>`,$=U("input",t[0].dataType,t[0].dims,a),E=j("output",t[0].dataType,n,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${$.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${I}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${E.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${b.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${x}(scale[0]), ${x}(scale[1]));\n  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${a}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:g}),getShaderSource:_},{inputs:[t[0],v]})},Gs=(e,t)=>{t.format==="NHWC"?Zd(e,e.inputs,t):e.compute(Kd(e.inputs,t))}});var Qd,Xd,Ls,Fs=Y(()=>{"use strict";he();xe();ve();Qd=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Xd=(e,t,r)=>{let o=e[0].dims,n=e[1],s=e[2],l=o,c=z.normalizeAxis(t.axis,o.length),a=z.sizeToDimension(o,c),m=z.sizeFromDimension(o,c),g=z.size(n.dims),h=s?z.size(s.dims):0;if(g!==m||s&&h!==m)throw new Error(`Size of X.shape()[axis:] == ${m}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${g} and bias size of ${h}`);let v=[];for(let T=0;T<o.length;++T)T<c?v.push(o[T]):v.push(1);let _=je(m),b=["type","type"],S=[{type:12,data:a},{type:1,data:m},{type:12,data:Math.floor(m/_)},{type:1,data:t.epsilon}];s&&b.push("type");let I=r>1,x=r>2,$=T=>{let B=Ue(e[0].dataType),M=[U("x",e[0].dataType,e[0].dims,_),U("scale",n.dataType,n.dims,_)];s&&M.push(U("bias",s.dataType,s.dims,_)),M.push(j("output",e[0].dataType,l,_)),I&&M.push(j("mean_data_output",1,v)),x&&M.push(j("inv_std_output",1,v));let W=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`\n  ${T.registerUniforms(W).declareVariables(...M)}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var meanVector = ${Je("f32",_)};\n    var meanSquareVector = ${Je("f32",_)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${pt(B,_,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${nt("meanVector",_)} / uniforms.norm_size;\n    let invStdDev =\n        inverseSqrt(${nt("meanSquareVector",_)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${pt(B,_,"x[j + offset]")};\n      let f32scale = ${pt(B,_,"scale[j]")};\n      output[j + offset] = ${M[0].type.value}((f32input - mean) * invStdDev * f32scale\n        ${s?`+ ${pt(B,_,"bias[j]")}`:""}\n      );\n    }\n\n    ${I?"mean_data_output[global_idx] = mean":""};\n    ${x?"inv_std_output[global_idx] = invStdDev":""};\n  }`},E=[{dims:l,dataType:e[0].dataType}];return I&&E.push({dims:v,dataType:1}),x&&E.push({dims:v,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${_};${r}`,inputDependencies:b},getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:S}),getShaderSource:$}},Ls=(e,t)=>{Qd(e.inputs),e.compute(Xd(e.inputs,t,e.outputCount))}});var Jd,ec,js,qs,Ks=Y(()=>{"use strict";he();xe();Qe();ve();Jd=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],o=r.dims.length;if(r.dims[o-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let n=Math.floor((t.k+t.blockSize-1)/t.blockSize),s=t.blockSize/8*t.bits,l=e[1];if(!z.areEqual(l.dims,[t.n,n,s]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let a=e[2].dims;if(z.size(a)!==t.n*n)throw new Error("scales input size error.");if(e.length===4){let g=e[3].dims,h=t.bits>4?t.n*n:t.n*Math.floor((n+1)/2);if(z.size(g)!==h)throw new Error("zeroPoints input size error.")}},ec=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=r.dims.length,l=r.dims.slice(0,s-1).concat(t.n),c=z.size(l),a=[{type:12,data:c},{type:12,data:t.k},{type:12,data:t.n},{type:12,data:t.accuracyLevel},{type:12,data:t.bits},{type:12,data:t.blockSize}];a.push(...Z(r.dims)),a.push(...Z(z.convertShape(o.dims))),a.push(...Z(n.dims)),e.length===4&&a.push(...Z(z.convertShape(e[3].dims))),a.push(...Z(l));let m=g=>{let h=U("a",e[0].dataType,e[0].dims.length),v=U("b",12,e[1].dims.length),_=U("scales",e[2].dataType,e[2].dims.length),b=[h,v,_],S=e.length===4?U("zero_points",12,e[3].dims.length):void 0;S&&b.push(S);let I=j("output",e[0].dataType,l.length),x=[{name:"output_size",type:"u32"},{name:"k",type:"u32"},{name:"n",type:"u32"},{name:"accuracy_level",type:"u32"},{name:"bits",type:"u32"},{name:"block_size",type:"u32"}],$=Math.floor((t.k+t.blockSize-1)/t.blockSize),T=t.blockSize/8*t.bits/4,B=Ue(e[0].dataType);return`\n        fn ortUnpack8x4snorm(value: u32) -> array<${B}, 8>{\n          var result = array<${B}, 8>();\n          var offset: u32 = 0;\n          let count: u32 = 4;\n          for (var i: u32 = 0; i < 8u; i++) {\n            result[i] = ${B}(extractBits(value, offset, count));\n            offset += count;\n          }\n          return result;\n        }\n        ${g.registerUniforms(x).declareVariables(...b,I)}\n        ${g.mainStart()}\n          ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var value: ${B} = 0.0;\n          let output_indices = ${I.offsetToIndices("global_idx")};\n          var a_indices: ${h.type.indices} = output_indices;\n          var n = ${I.indicesGet("output_indices",s-1)};\n          // Two zero points are packed into one byte because uniforms.bits <= 4.\n          // zero_point_offset is either 0 or 4. It is bit offset within one byte.\n          // TODO support zero_point_offset for bits > 4\n          ${S?`\n            var zero_point_index: u32 = n * ((${$} + 1) / 2) / 4;\n            var zero_point_word: u32 = ${S.getByOffset("zero_point_index")};\n            var zero_point_offset: u32 = 0;`:""}\n          var scale_idex = n * ${$};\n          var b_indices: ${v.type.indices};\n          ${v.indicesSet("b_indices","0","n")};\n          var block_offset: u32 = 0;\n          for (var block: u32 = 0; block < ${$}; block++) {\n            // The scale and zero points are computed per block.\n            let scale = ${_.getByOffset("scale_idex")};\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point: ${B} = ${S?`${B}(extractBits(zero_point_word, zero_point_offset, 4))`:8};\n            ${v.indicesSet("b_indices","1","block")};\n            var word_offset: u32 = block_offset;\n            for (var word: u32 = 0; word < ${T}; word++) {\n              ${v.indicesSet("b_indices","2","word")};\n              let b_value = ${v.getByIndices("b_indices")};\n              let b_quantized_values: array<${B}, 8> = ortUnpack8x4snorm(b_value);\n              // Number of B elements per 32-bit word is 32/bits = 32/4 = 8\n              var offset: u32 = word_offset;\n              for (var i: u32 = 0; i < 8; i++) {\n                ${h.indicesSet("a_indices",s-1,"offset")};\n                let a_value = ${h.getByIndices("a_indices")};\n                let b_quantized_value = b_quantized_values[i];\n                let b_dequantized_value = (b_quantized_value - zero_point) * scale;\n                value += a_value * b_dequantized_value;\n                offset++;\n              }\n              word_offset += 8;\n            }\n            scale_idex++;\n            ${S?`\n            if (zero_point_offset == 28) {\n              zero_point_offset = 0;\n              zero_point_index++;\n              zero_point_word = ${S.getByOffset("zero_point_index")};\n            } else {\n              zero_point_offset += 4;\n            }`:""}\n            block_offset += uniforms.block_size;\n          }\n          ${I.setByOffset("global_idx","value")};\n        }\n        `};return{name:"MatMulNBits",shaderCache:{hint:`${t.cacheKey};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:a}),getShaderSource:m}},js=(e,t)=>{Jd(e.inputs,t),e.compute(ec(e.inputs,t))},qs=e=>Se(e)});var tc,Zs,Ys,rc,Po,Qs,Xs=Y(()=>{"use strict";he();xe();Qe();vn();ho();ve();lr();tc=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],l=e[4],c=e[5],a=e[6],m=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let g=!1,h=r.dims[0],v=r.dims[1],_=r.dims.length===3?g?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=v,S=0,I=0,x=Math.floor(_/t.numHeads);if(a&&m){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(m.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');S=a.dims[2],I=a.dims[2]}else if(a||m)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let $;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');$=2,b=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==x)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');$=5,b=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==x)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');$=0,b=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');$=3}if(s){if(s.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let E=0;if(l){E=8;let q=l.dims;throw q.length===1?q[0]===h?E=1:q[0]===3*h+2&&(E=3):q.length===2&&q[0]===h&&q[1]===b&&(E=5),E===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let T=!1,B=_;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(b!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');B=n.dims[2]}else{if(b!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');B=n.dims[1]*n.dims[3],T=!0}}let M=S+b,W=!1;if(l)throw new Error("Key padding mask is not supported");if(c)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(m)throw new Error("pastValue is not supported");return{batchSize:h,sequenceLength:v,pastSequenceLength:S,kvSequenceLength:b,totalSequenceLength:M,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:_,vHiddenSize:B,headSize:x,vHeadSize:Math.floor(B/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:E,scale:t.scale,broadcastResPosBias:W,passPastInKv:T,qkvFormat:$}},Zs=e=>Se({...e}),Ys=Se({perm:[0,2,1,3]}),rc=(e,t,r,o,n,s,l)=>{let c=[o,n,s],a=z.size(c),m=[{type:12,data:a},{type:12,data:l},{type:12,data:s}],g=h=>{let v=j("qkv_with_bias",t.dataType,c),_=U("qkv",t.dataType,c),b=U("bias",r.dataType,c),S=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`\n  ${h.registerUniforms(S).declareVariables(_,b,v)}\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:c,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:m}),getShaderSource:g},{inputs:[t,r],outputs:[-1]})[0]},Po=(e,t,r,o,n,s,l,c)=>{let a=s;if(l){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=rc(e,s,l,t,o,r*n,c),a=a.reshape([t,o,r,n]),e.compute(mt(a,Ys.perm),{inputs:[a],outputs:[-1]})[0]}else return s.dims.length===3&&(a=s.reshape([t,o,r,n])),e.compute(mt(a,Ys.perm),{inputs:[a],outputs:[-1]})[0]},Qs=(e,t)=>{let r=tc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Po(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return En(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=Po(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),l=Po(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);En(e,n,s,l,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var nc,oc,ac,ic,sc,uc,lc,dc,Js,eu=Y(()=>{"use strict";he();xe();ve();nc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},oc=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n            k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${de("uniforms.x_shape",n,t)})) {\n              break;\n            }\n            offset += k * i32(${de("uniforms.x_strides",n,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${o}\n            value = x[offset];\n          }\n      `},ac=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${de("uniforms.x_shape",n,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${de("uniforms.x_shape",n,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${de("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},ic=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${de("uniforms.x_shape",n,t)})) {\n                  k = i32(${de("uniforms.x_shape",n,t)}) - 1;\n                }\n                offset += k * i32(${de("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},sc=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n                if (k < 0)  {\n                  k += i32(${de("uniforms.x_shape",n,t)}]);\n                }\n                if (k >= i32(${de("uniforms.x_shape",n,t)})) {\n                  k -= i32(${de("uniforms.x_shape",n,t)});\n                }\n                offset += k * i32(${de("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},uc=(e,t,r)=>{switch(r.mode){case 0:return oc(e,t,r.pads.length);case 1:return ac(e,t,r.pads.length);case 2:return ic(e,t,r.pads.length);case 3:return sc(e,t,r.pads.length);default:throw new Error("Invalid mode")}},lc=(e,t)=>{let r=z.padShape(e[0].dims.slice(),t.pads),o=e[0].dims,n=z.size(r),s=[{type:12,data:n},{type:12,data:t.pads}];t.mode===0&&s.push({type:e[0].dataType,data:t.value}),s.push(...Z(e[0].dims,r));let l=["rank"],c=a=>{let m=j("output",e[0].dataType,r.length),g=U("x",e[0].dataType,o.length),h=g.type.value,v=uc(m,o.length,t),_=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&_.push({name:"constant_value",type:h}),`\n            ${a.registerUniforms(_).declareVariables(g,m)}\n            ${a.mainStart()}\n            ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${m.offsetToIndices("global_idx")};\n\n            var value = ${h}(0);\n            ${v}\n            output[global_idx] = value;\n        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(z.size(r)/64)},programUniforms:s}),getShaderSource:c}},dc=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let c=e[3].getBigInt64Array();for(let a=0;a<c.length;a++)s[Number(c[a])]=Number(r[a]),s[Number(c[a])+n]=Number(r[a+c.length])}else r.forEach((c,a)=>s[Number(a)]=Number(c));let l=[];return s.forEach(c=>l.push(c)),{mode:t.mode,value:o,pads:l}}else return t},Js=(e,t)=>{nc(e.inputs);let r=dc(e.inputs,t);e.compute(lc(e.inputs,r),{inputs:[0]})}});var Vn,tu,ru,nu,ou,cc,pc,au,iu,su,uu,lu,du,cu,pu,mu,fu,hu,gu,yu=Y(()=>{"use strict";sr();he();xe();ve();Vn=e=>{if(ir.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},tu=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),l=t.kernelShape.slice(),c=t.strides.slice(),a=s?t.dilations.slice():[],m=t.pads.slice();Ft.adjustPoolAttributes(r,n,l,c,a,m);let g=Ft.computePoolOutputShape(r,n,c,a,l,m,t.autoPad),h=Object.assign({},t);s?Object.assign(h,{kernelShape:l,strides:c,pads:m,dilations:a,cacheKey:t.cacheKey}):Object.assign(h,{kernelShape:l,strides:c,pads:m,cacheKey:t.cacheKey});let v=g.slice();return v.push(v.splice(1,1)[0]),[h,o?v:g]},ru=(e,t)=>{let r=t.format==="NHWC",o=z.size(e),n=z.size(t.kernelShape),s=[{type:12,data:o},{type:12,data:n}],l=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let c=t.kernelShape[t.kernelShape.length-1],a=t.strides[t.strides.length-1],m=t.pads[t.pads.length/2-1],g=t.pads[t.pads.length-1],h=!!(m+g);s.push({type:12,data:c},{type:12,data:a},{type:12,data:m},{type:12,data:g}),l.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let v=!1;if(t.kernelShape.length===2){let _=t.kernelShape[t.kernelShape.length-2],b=t.strides[t.strides.length-2],S=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];v=!!(S+I),s.push({type:12,data:_},{type:12,data:b},{type:12,data:S},{type:12,data:I}),l.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,l,!0,h,v]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let c=z.computeStrides(t.kernelShape);s.push({type:12,data:c},{type:12,data:t.pads},{type:12,data:t.strides}),l.push({name:"kernelStrides",type:"u32",length:c.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let a=t.pads.reduce((m,g)=>m+g);return[s,l,!!a,!1,!1]}},nu=(e,t,r,o,n,s,l,c,a,m,g,h)=>{let v=n.format==="NHWC",_=t.type.value,b=j("output",t.type.tensor,o);if(n.kernelShape.length<=2){let S="",I="",x="",$=r-(v?2:1);if(g?S=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${$}] = indices[${$}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${$}] < 0 || xIndices[${$}]\n                      >= uniforms.x_shape[${$}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:S=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${$}] = indices[${$}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let T=r-(v?3:2);h?I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${T}] < 0 || xIndices[${T}] >= uniforms.x_shape[${T}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                `,x=`\n              }\n            `}return`\n            ${e.registerUniforms(a).declareVariables(t,b)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${b.offsetToIndices("global_idx")};\n              var xIndices = ${b.offsetToIndices("global_idx")};\n\n              var value = ${_}(${c});\n              var pad = 0;\n              ${I}\n              ${S}\n              ${x}\n              ${l}\n\n              output[global_idx] = value;\n            }`}else{if(v)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let S=n.kernelShape.length,I=n.pads.length,x="";return m?x=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:x=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.registerUniforms(a).declareVariables(t,b)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${b.offsetToIndices("global_idx")};\n              var xIndices = ${b.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${S}>;\n\n              var value = ${_}(${c});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${S-1}u; j++) {\n                  offsets[j] = offset / ${de("uniforms.kernelStrides","j",S)};\n                  offset -= offsets[j] * ${de("uniforms.kernelStrides","j",S)};\n                }\n                offsets[${S-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-S}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${de("uniforms.strides",`j - ${r-S}u`,S)}\n                    + offsets[j - ${r-S}u] - ${de("uniforms.pads","j - 2u",I)};\n                  ${x}\n              }\n              ${l}\n\n              output[global_idx] = value;\n            }`}},ou=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,cc=e=>`${ou(e)};${e.countIncludePad}`,pc=e=>`${ou(e)};${e.storageOrder};${e.dilations}`,au=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),iu=(e,t,r,o)=>{let[n,s]=tu(t,o,r),l=U("x",t.dataType,t.dims.length),c=l.type.value,a="value += x_val;",m="";n.countIncludePad?m+=`value /= ${c}(uniforms.kernelSize);`:m+=`value /= ${c}(i32(uniforms.kernelSize) - pad);`;let[g,h,v,_,b]=ru(s,n);g.push(...Z(t.dims,s));let S=["rank"];return{name:e,shaderCache:{hint:`${o.cacheKey};${v};${_};${b}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(z.size(s)/64)},programUniforms:g}),getShaderSource:I=>nu(I,l,t.dims.length,s.length,n,a,m,0,h,v,_,b)}},su=e=>{let t=e.count_include_pad!==0,r=au(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let o={countIncludePad:t,...r,cacheKey:""};return{...o,cacheKey:cc(o)}},uu=(e,t)=>{Vn(e.inputs),e.compute(iu("AveragePool",e.inputs[0],!1,t))},lu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},du=e=>{let t=e.format;return{format:t,...lu,cacheKey:t}},cu=(e,t)=>{Vn(e.inputs),e.compute(iu("GlobalAveragePool",e.inputs[0],!0,t))},pu=(e,t,r,o)=>{let[n,s]=tu(t,o,r),l=`\n      value = max(x_val, value);\n    `,c="",a=U("x",t.dataType,t.dims.length),m=["rank"],[g,h,v,_,b]=ru(s,n);return g.push(...Z(t.dims,s)),{name:e,shaderCache:{hint:`${o.cacheKey};${v};${_};${b}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(z.size(s)/64)},programUniforms:g}),getShaderSource:S=>nu(S,a,t.dims.length,s.length,n,l,c,-1e5,h,v,_,b)}},mu=(e,t)=>{Vn(e.inputs),e.compute(pu("MaxPool",e.inputs[0],!1,t))},fu=e=>{let t=e.storage_order,r=e.dilations,o=au(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:t,dilations:r,...o,cacheKey:""};return{...n,cacheKey:pc(n)}},hu=e=>{let t=e.format;return{format:t,...lu,cacheKey:t}},gu=(e,t)=>{Vn(e.inputs),e.compute(pu("GlobalMaxPool",e.inputs[0],!0,t))}});var fc,hc,bu,wu=Y(()=>{"use strict";sr();he();ve();fc=(e,t,r)=>{let o=e===t,n=e<t&&r<0,s=e>t&&r>0;if(o||n||s)throw new Error("Range these inputs\' contents are invalid.")},hc=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],l=n,c=[{type:12,data:l},{type:o,data:e},{type:o,data:r},...Z(s)],a=m=>{let g=j("output",o,s.length),h=g.type.value,v=[{name:"outputSize",type:"u32"},{name:"start",type:h},{name:"delta",type:h}];return`\n        ${m.registerUniforms(v).declareVariables(g)}\n        ${m.mainStart()}\n        ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${h}(global_idx) * uniforms.delta;\n      }`};return{name:"Range",shaderCache:{hint:`${o}`},getShaderSource:a,getRunData:()=>({outputs:[{dims:s,dataType:o}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c})}},bu=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),ir.webgpu.validateInputContent&&fc(t,r,o),e.compute(hc(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var gc,yc,bc,wc,vc,$c,_c,Sc,xc,Cc,Ic,vu,Ac,Tc,Ec,Pc,Oc,$u,_u,Su=Y(()=>{"use strict";he();xe();Qe();ve();gc=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},yc=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,s)=>o[n]=e[s]),o},bc=(e,t,r,o,n,s)=>{let[l,c,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],m=e[0].dims.length;if(l>0&&e.length>l&&e[l].dims.length>0)e[l].getFloat32Array().forEach(g=>s.push(g));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(c>0&&e.length>c&&e[c].dims.length>0){if(e[c].getFloat32Array().forEach(g=>o.push(g)),o.length!==0&&o.length!==m&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");gc(o,t),t.axes.length>0&&yc(o,t.axes,m).forEach((g,h)=>o[h]=g)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(g=>n.push(Number(g))),n.length!==m||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>m)throw new Error("Resize requires only of scales or sizes to be specified")},wc=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",vc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",$c=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((s,l)=>{o[s]=n[l],o[l+r]=n[t.length+l]}),o):n},_c=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(s=>n.push(s)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((s,l)=>n[s]=r[l])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,l)=>Math.round(s*t[l]))}return n},Sc=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=o),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(o,0,t.length),n.forEach((s,l)=>n[l]=Math.round(s*t[l]))),n},xc=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${de("uniforms.scales","i",o)};\n        var roi_low = ${de("uniforms.roi","i",n)};\n        var roi_hi = ${de("uniforms.roi",`i + ${t.length}`,n)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${de("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${de("uniforms.output_shape","i",r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,Cc=(e,t,r,o,n,s,l)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${o.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${de("uniforms.scales","i",n)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${de("uniforms.roi","i",s)};\n          var roi_hi = ${de("uniforms.roi",`i + ${r.length}`,s)};\n          var input_shape_i = ${de("uniforms.input_shape","i",r.length)};\n          var output_shape_i = ${de("uniforms.output_shape","i",o.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${l} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,Ic=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${de("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,vu=(e,t,r,o)=>e.rank>o?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",r,"batch")};\n`:"",Ac=(e,t,r,o,n)=>{let[l,c,a,m]=r.length===2?[-1,0,1,-1]:[0,2,3,1],g=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${g} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",c,`max(0, min(row, ${r[c]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(col, ${r[a]} - 1))`)};\n      ${vu(e,m,l,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${g} = originalIndices[${c}];\n      var col:${g} = originalIndices[${a}];\n      ${o?`if (row < 0 || row > (${r[c]} - 1) || col < 0 || col > (${r[a]} - 1)) {\n        return ${n};\n      }`:""};\n      row = max(0, min(row, ${r[c]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length>2?`u32(originalIndices[${m}])`:"0"};\n      var batch: u32 =  ${r.length>2?`u32(originalIndices[${l}])`:"0"};\n      var x11: ${g} = getInputValue(batch, channel, row1, col1);\n      var x12: ${g} = getInputValue(batch, channel, row1, col2);\n      var x21: ${g} = getInputValue(batch, channel, row2, col1);\n      var x22: ${g} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${g} = abs(row - ${g}(row1));\n      var dx2: ${g} = abs(${g}(row2) - row);\n      var dy1: ${g} = abs(col - ${g}(col1));\n      var dy2: ${g} = abs(${g}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},Tc=(e,t,r,o,n,s,l,c,a,m)=>{let g=r.length===2,h=!0,[v,_]=g?[0,1]:h?[2,3]:[1,2],b=e.type.value,S=I=>{let x=I===v?"row":"col";return`\n      fn ${x}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${b} {\n        var output_index = ${t.indicesGet("output_indices",I)};\n        var originalIdx: ${b} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[I]},\n        ${o[I]}, ${r[I]}, ${s[I]}, ${s[I]} + ${r.length});\n        var fractOriginalIdx: ${b} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${c} && (originalIdx < 0 || originalIdx > (${r[I]} - 1))) {\n          return ${a};\n        }\n        var data: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${x}: ${b} = originalIdx + ${b}(i);\n          if (${x} < 0 || ${x} >= ${r[I]}) {\n            ${(()=>m?`coefs[i + 1] = 0.0;\n                        continue;`:c?`return ${a};`:`${x} = max(0, min(${x}, ${r[I]} - 1));`)()};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",I,`u32(${x})`)};\n          data[i + 1] = ${I===v?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${S(v)};\n    ${S(_)};\n  fn getCubicInterpolationCoefs(s: ${b}) -> array<${b}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${b} = 1.0 - absS;\n    var twoMinusAbsS: ${b} = 2.0 - absS;\n    var onePlusAbsS: ${b} = 1.0 + absS;\n    coeffs[0] = ((${l} * onePlusAbsS - 5 * ${l}) * onePlusAbsS + 8 * ${l}) * onePlusAbsS - 4 * ${l};\n    coeffs[1] = ((${l} + 2) * absS - (${l} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${l} + 2) * oneMinusAbsS - (${l} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${l} * twoMinusAbsS - 5 * ${l}) * twoMinusAbsS + 8 * ${l}) * twoMinusAbsS - 4 * ${l};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${b}, 4>, coefs: array<${b}, 4>) -> ${b} {\n    var coefsSum: ${b} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${b} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},Ec=(e,t,r,o,n)=>{let[l,c,a,m,g]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],h=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${h} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",c,`max(0, min(depth, ${r[c]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(height, ${r[a]} - 1))`)};\n      ${e.indicesSet("input_indices",m,`max(0, min(width, ${r[m]} - 1))`)};\n      ${vu(e,g,l,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${h} = originalIndices[${c}];\n      var height:${h} = originalIndices[${a}];\n      var width:${h} = originalIndices[${m}];\n      ${o?`if (depth < 0 || depth > (${r[c]} - 1) || height < 0 || height > (${r[a]} - 1) || width < 0 || (width > ${r[m]} - 1)) {\n      return ${n};\n        }`:""};\n\n    depth = max(0, min(depth, ${r[c]} - 1));\n      height = max(0, min(height, ${r[a]} - 1));\n      width = max(0, min(width, ${r[m]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length>3?`u32(originalIndices[${g}])`:"0"};\n      var batch: u32 =  ${r.length>3?`u32(originalIndices[${l}])`:"0"};\n\n      var x111: ${h} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${h} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${h} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${h} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${h} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${h} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${h} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${h} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${h} = abs(depth - ${h}(depth1));\n      var dx2: ${h} = abs(${h}(depth2) - depth);\n      var dy1: ${h} = abs(height - ${h}(height1));\n      var dy2: ${h} = abs(${h}(height2) - height);\n      var dz1: ${h} = abs(width - ${h}(width1));\n      var dz2: ${h} = abs(${h}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},Pc=(e,t,r,o,n,s)=>{let l=e.dims,c=$c(s,t.axes,l.length),a=_c(l,o,n,t.axes),m=o.slice();o.length===0&&(m=l.map(($,E)=>$===0?1:a[E]/$),t.keepAspectRatioPolicy!=="stretch"&&(a=Sc(l,m,t)));let g=j("output",e.dataType,a.length),h=U("input",e.dataType,l.length),v=z.size(a),_=l.length===a.length&&l.every(($,E)=>$===a[E]),b=t.coordinateTransformMode==="tf_crop_and_resize",S=t.extrapolationValue,I=h.type.value,x=$=>`\n      ${_?"":`\n      ${wc(t.coordinateTransformMode,I)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${Ic(h,l)};\n              ${vc(t.nearestMode,r,I)};\n              ${Cc(h,g,l,a,m.length,c.length,b)};\n              `;case"linear":return`\n              ${xc(g,l,a,m.length,c.length)};\n              ${(()=>{if(l.length===2||l.length===4)return`${Ac(h,g,l,b,S)}`;if(l.length===3||l.length===5)return`${Ec(h,g,l,b,S)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(l.length===2||l.length===4)return`${Tc(h,g,l,a,m,c,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${$.registerUniform("output_size","u32").registerUniform("scales","f32",m.length).registerUniform("roi","f32",c.length).declareVariables(h,g)}\n      ${$.mainStart()}\n        ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${_?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${g.offsetToIndices("global_idx")};\n        var input_indices: ${h.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${h.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${l.length===2||l.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${m.length>0?m:""}|${n.length>0?n:""}|${c.length>0?c:""}|${_}|${l}`,inputDependencies:["rank"]},getShaderSource:x,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:12,data:v},{type:1,data:m},{type:1,data:c},...Z(l,a)]})}},Oc=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},$u=(e,t)=>{let r=[],o=[],n=[],s=Oc(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");bc(e.inputs,t,s,r,o,n),e.compute(Pc(e.inputs[0],t,s,r,o,n),{inputs:[0]})},_u=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,l=e.extrapolationValue,c=e.keepAspectRatioPolicy,a=e.mode,m=e.nearestMode===""?"simple":e.nearestMode;return Se({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:s,extrapolationValue:l,keepAspectRatioPolicy:c,mode:a,nearestMode:m})}});var kc,Rc,xu,Cu=Y(()=>{"use strict";he();xe();ve();kc=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let l=e[3];if(l.dims.length!==1)throw new Error("Beta must be 1D");if(l.dims[l.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let l=e[4];if(l.dims.length!==1)throw new Error("Bias must be 1D");if(l.dims[l.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},Rc=(e,t,r,o)=>{let n=e[0].dims,s=z.size(n),l=n,c=s,a=n.slice(-1)[0],m=o?n.slice(0,-1).concat(1):[],g=e.length>3,h=e.length>4,v=o&&r>1,_=o&&r>2,b=r>3,S=je(a),I=[{type:12,data:c},{type:12,data:S},{type:12,data:a},{type:1,data:t.epsilon}],x=E=>{let T=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],B=[U("x",e[0].dataType,e[0].dims,S),U("skip",e[1].dataType,e[1].dims,S),U("gamma",e[2].dataType,e[2].dims,S)];g&&B.push(U("beta",e[3].dataType,e[3].dims,S)),h&&B.push(U("bias",e[4].dataType,e[4].dims,S)),B.push(j("output",e[0].dataType,l,S)),v&&B.push(j("mean_output",1,m)),_&&B.push(j("inv_std_output",1,m)),b&&B.push(j("input_skip_bias_sum",e[0].dataType,l,S));let M=Ue(e[0].dataType);return`\n\n      ${E.registerUniforms(T).declareVariables(...B)}\n\n      ${E.mainStart()}\n        ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        let offset = global_idx * hidden_size_vectorized;\n        var sum = ${Je("f32",S)};\n        var squareSum = ${Je("f32",S)};\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${h?"bias[i]":"0.0"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${b?"input_skip_bias_sum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32_value = ${pt(M,S,"value")};\n          sum += f32_value;\n          squareSum += f32_value * f32_value;\n        }\n        let mean = ${nt("sum",S)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${nt("squareSum",S)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);\n        ${v?"mean_output[global_idx] = mean;":""}\n        ${_?"inv_std_output[global_idx] = inv_std_dev;":""}\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${M}(mean)) * ${M}(inv_std_dev) * gamma[i] + ${g?"beta[i]":"0.0"};\n        }\n      }`},$=[{dims:l,dataType:e[0].dataType}];return r>1&&$.push({dims:m,dataType:1}),r>2&&$.push({dims:m,dataType:1}),r>3&&$.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${S};${v};${_};${b}`,inputDependencies:e.map((E,T)=>"type")},getShaderSource:x,getRunData:()=>({outputs:$,dispatchGroup:{x:Math.ceil(c/a/64)},programUniforms:I})}},xu=(e,t)=>{kc(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(Rc(e.inputs,t,e.outputCount,!1),{outputs:o})}});var Bc,Wn,Dc,Iu,Mc,zc,Au,Tu,Eu=Y(()=>{"use strict";he();xe();Qe();ve();Bc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},Wn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Dc=(e,t)=>{if(e.length>1){let r=Wn(e,1),o=Wn(e,2),n=Wn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),Se({starts:r,ends:o,axes:n})}else return t},Iu=(e,t,r,o,n)=>{let s=e;return e<0&&(s+=r[o[t]]),n[t]<0?Math.max(0,Math.min(s,r[o[t]]-1)):Math.max(0,Math.min(s,r[o[t]]))},Mc=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${de("uniforms.input_shape","i",r.length)};\n            let steps_i = ${de("uniforms.steps","i",r.length)};\n            let signs_i = ${de("uniforms.signs","i",r.length)};\n            let starts_i = ${de("uniforms.starts","i",r.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,zc=(e,t)=>{let r=e[0].dims,o=z.size(r),n=t.axes.length>0?z.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=Wn(e,4);s.forEach(x=>x!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let l=t.starts.map((x,$)=>Iu(x,$,r,n,s)),c=t.ends.map((x,$)=>Iu(x,$,r,n,s));if(n.length!==l.length||n.length!==c.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let x=0;x<r.length;++x)n.includes(x)||(l.splice(x,0,0),c.splice(x,0,r[x]),s.splice(x,0,1));let a=s.map(x=>Math.sign(x));s.forEach((x,$,E)=>{if(x<0){let T=(c[$]-l[$])/x,B=l[$],M=B+T*s[$];l[$]=M,c[$]=B,E[$]=-x}});let m=r.slice(0);n.forEach((x,$)=>{m[x]=Math.ceil((c[x]-l[x])/s[x])});let g={dims:m,dataType:e[0].dataType},h=j("output",e[0].dataType,m.length),v=U("input",e[0].dataType,e[0].dims.length),_=z.size(m),b=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:l.length},{name:"signs",type:"i32",length:a.length},{name:"steps",type:"u32",length:s.length}],S=[{type:12,data:_},{type:12,data:l},{type:6,data:a},{type:12,data:s},...Z(e[0].dims,m)],I=x=>`\n      ${x.registerUniforms(b).declareVariables(v,h)}\n        ${Mc(v,h,r)}\n        ${x.mainStart()}\n          ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${h.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${h.setByOffset("global_idx",v.getByIndices("input_indices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${a.length}_${l.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[g],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:S})}},Au=(e,t)=>{Bc(e.inputs,t);let r=Dc(e.inputs,t);e.compute(zc(e.inputs,r),{inputs:[0]})},Tu=e=>{let t=e.starts,r=e.ends,o=e.axes;return Se({starts:t,ends:r,axes:o})}});var Uc,Vc,Pu,Ou,ku=Y(()=>{"use strict";he();xe();Qe();ve();Uc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Vc=(e,t)=>{let r=e.dims,o=z.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let l=r[s],c=o/l,a=je(l),m=l/a,g=(I,x)=>x===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:x===2?`max(${I}.x, ${I}.y)`:x===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,h=U("x",e.dataType,e.dims,a),v=j("result",e.dataType,e.dims,a),_=h.type.value,b=Ue(e.dataType)==="f32"?`var threadMax = ${_}(-3.402823e+38f);`:`var threadMax = ${_}(-65504.0h);`,S=I=>`\n      var<workgroup> rowMaxShared : ${_};\n      var<workgroup> rowSumShared : ${_};\n      var<workgroup> threadShared : array<${_}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${_} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${_}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${I.registerUniform("packedCols","i32").declareVariables(h,v)}\n      ${I.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${b}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${_}(${g("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${_}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${_}(${nt("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:c},programUniforms:[{type:12,data:m}]}),getShaderSource:S}},Pu=(e,t)=>{Uc(e.inputs),e.compute(Vc(e.inputs[0],t))},Ou=e=>Se({axis:e.axis})});var Wc,Nc,Gc,Hc,Lc,Ru,Bu,Du=Y(()=>{"use strict";he();xe();Qe();ve();Wc=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Nc=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),Se({numOutputs:o,axis:t.axis,splitSizes:r})},Gc=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${de("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,Hc=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (output_number == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${o}) { ${n} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},Lc=(e,t)=>{let r=e[0].dims,o=z.size(r),n=e[0].dataType,s=z.normalizeAxis(t.axis,r.length),l=new Array(t.numOutputs),c=U("input",n,r),a=new Array(t.numOutputs),m=[],g=[],h=0,v=[{type:12,data:o}];for(let b=0;b<t.numOutputs;b++){h+=t.splitSizes[b],a[b]=h;let S=r.slice();S[t.axis]=t.splitSizes[b],g.push(S),l[b]=j(`output${b}`,n,S),m.push({dims:g[b],dataType:e[0].dataType})}v.push({type:12,data:a},...Z(r,...g));let _=b=>`\n  ${b.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",a.length).declareVariables(c,...l)}\n  ${Gc(a.length)}\n  ${Hc(l)}\n\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${c.offsetToIndices("global_idx")};\n    var index = ${c.indicesGet("indices",s)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${de("uniforms.size_in_split_axis","output_number - 1u",a.length)};\n      ${c.indicesSet("indices",s,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:`${t.cacheKey};${r}`,inputDependencies:["rank"]},getShaderSource:_,getRunData:()=>({outputs:m,dispatchGroup:{x:Math.ceil(o/64)},programUniforms:v})}},Ru=(e,t)=>{Wc(e.inputs);let r=e.inputs.length===1?t:Nc(e.inputs,t);e.compute(Lc(e.inputs,r),{inputs:[0]})},Bu=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Se({axis:t,numOutputs:o,splitSizes:r})}});var Mu,Fc,jc,qc,zu,Uu=Y(()=>{"use strict";he();xe();ve();Mu=e=>Array.from(e.getBigInt64Array(),Number),Fc=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Mu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},jc=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},qc=e=>{let t=e[0].dims,r=Mu(e[1]),o=jc(t,r),n=z.size(o),s=e[0].dataType,l=U("input",s,t.length),c=j("output",s,o.length),a=m=>`\n      const inputShape = ${l.indices(...t)};\n      ${m.registerUniform("output_size","u32").declareVariables(l,c)}\n      ${m.mainStart()}\n      ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${c.offsetToIndices("global_idx")};\n      var input_indices: ${l.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${l.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${c.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${l.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${c.setByOffset("global_idx",l.getByIndices("input_indices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},...Z(e[0].dims,o)]}),getShaderSource:a}},zu=e=>{Fc(e.inputs),e.compute(qc(e.inputs),{inputs:[0]})}});var Kc,Yc,Vu,Wu=Y(()=>{"use strict";he();xe();ve();Kc=(e,t,r,o,n)=>{let s=j("output_data",n,r.length,4),l=U("a_data",t[1].dataType,t[1].dims.length,4),c=U("b_data",t[2].dataType,t[2].dims.length,4),a=U("c_data",t[0].dataType,t[0].dims.length,4),m,g=(h,v,_)=>`select(${v}, ${h}, ${_})`;if(!o)m=s.setByOffset("global_idx",g(l.getByOffset("global_idx"),c.getByOffset("global_idx"),a.getByOffset("global_idx")));else{let h=(v,_,b="")=>{let S=`a_data[index_a${_}][component_a${_}]`,I=`b_data[index_b${_}][component_b${_}]`,x=`bool(c_data[index_c${_}] & ${4278190080>>>(3-_)*8}u)`;return`\n            let output_indices${_} = ${s.offsetToIndices(`global_idx * 4u + ${_}u`)};\n            let offset_a${_} = ${l.broadcastedIndicesToOffset(`output_indices${_}`,s)};\n            let offset_b${_} = ${c.broadcastedIndicesToOffset(`output_indices${_}`,s)};\n            let offset_c${_} = ${a.broadcastedIndicesToOffset(`output_indices${_}`,s)};\n            let index_a${_} = offset_a${_} / 4u;\n            let index_b${_} = offset_b${_} / 4u;\n            let index_c${_} = offset_c${_} / 4u;\n            let component_a${_} = offset_a${_} % 4u;\n            let component_b${_} = offset_b${_} % 4u;\n            ${v}[${_}] = ${b}(${g(S,I,x)});\n          `};n===9?m=`\n            var data = vec4<u32>(0);\n            ${h("data",0,"u32")}\n            ${h("data",1,"u32")}\n            ${h("data",2,"u32")}\n            ${h("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:m=`\n            ${h("output_data[global_idx]",0)}\n            ${h("output_data[global_idx]",1)}\n            ${h("output_data[global_idx]",2)}\n            ${h("output_data[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(a,l,c,s)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${m}\n      }`},Yc=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,s=!(z.areEqual(t,r)&&z.areEqual(r,o)),l=t,c=z.size(t);if(s){let m=yt.calcShape(yt.calcShape(t,r,!1),o,!1);if(!m)throw new Error("Can\'t perform where op on the given tensors");l=m,c=z.size(l)}let a=Math.ceil(c/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:m=>Kc(m,e,l,s,n),getRunData:()=>({outputs:[{dims:l,dataType:n}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:[{type:12,data:a},...Z(o,t,r,l)]})}},Vu=e=>{e.compute(Yc(e.inputs))}});var Nu,Gu=Y(()=>{"use strict";ri();ho();ai();si();Fi();rs();as();$o();ws();_s();As();Ps();ks();Ds();Us();Ns();Hs();Fs();So();Ks();Xs();eu();yu();wu();An();Su();Cu();Eu();ku();Du();Uu();lr();kn();Wu();Nu=new Map([["Abs",[ui]],["Acos",[li]],["Acosh",[di]],["Add",[ji]],["ArgMax",[ti,fo]],["ArgMin",[ei,fo]],["Asin",[ci]],["Asinh",[pi]],["Atan",[mi]],["Atanh",[fi]],["Attention",[ni]],["AveragePool",[uu,su]],["BatchNormalization",[oi]],["BiasAdd",[ii]],["BiasSplitGelu",[Li]],["Cast",[gi,hi]],["Ceil",[bi]],["Clip",[yi]],["Concat",[ns,os]],["Conv",[Co,xo]],["ConvTranspose",[bs,ys]],["Cos",[wi]],["Cosh",[vi]],["CumSum",[vs,$s]],["Div",[qi]],["Einsum",[Cs,Is]],["Elu",[$i,Pn]],["Equal",[Ki]],["Erf",[_i]],["Exp",[Si]],["Expand",[Es]],["FastGelu",[Os]],["Floor",[xi]],["FusedConv",[Co,xo]],["Gather",[Bs,Rs]],["GatherElements",[zs,Ms]],["Gelu",[Ci]],["Gemm",[Ws,Vs]],["GlobalAveragePool",[cu,du]],["GlobalMaxPool",[gu,hu]],["Greater",[Xi]],["GreaterOrEqual",[es]],["HardSigmoid",[Ri,ki]],["InstanceNormalization",[Gs]],["LayerNormalization",[Ls]],["LeakyRelu",[Ii,Pn]],["Less",[Ji]],["LessOrEqual",[ts]],["Log",[Gi]],["MatMul",[ds]],["MatMulNBits",[js,qs]],["MaxPool",[mu,fu]],["Mul",[Yi]],["MultiHeadAttention",[Qs,Zs]],["Neg",[Ti]],["Not",[Ai]],["Pad",[Js]],["Pow",[Zi]],["Range",[bu]],["Reciprocal",[Ei]],["ReduceMin",[Ka]],["ReduceMean",[Ha]],["ReduceMax",[qa]],["ReduceSum",[Za]],["ReduceProd",[Ya]],["ReduceL1",[La]],["ReduceL2",[Fa]],["ReduceLogSum",[Xa]],["ReduceLogSumExp",[ja]],["ReduceSumSquare",[Qa]],["Relu",[Pi]],["Resize",[$u,_u]],["Sigmoid",[Oi]],["Sin",[Bi]],["Sinh",[Di]],["Slice",[Au,Tu]],["SkipLayerNormalization",[xu]],["Split",[Ru,Bu]],["Sqrt",[Mi]],["Softmax",[Pu,Ou]],["Sub",[Qi]],["Tan",[zi]],["Tanh",[Vi]],["ThresholdedRelu",[Ni,Pn]],["Tile",[zu]],["Transpose",[Pa,Oa]],["Where",[Vu]]])});var Nn,Hu=Y(()=>{"use strict";sr();Pt();ve();Nn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,s){Ht(t.programInfo.name);let l=this.backend.device,c=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let a=[];for(let g of r)a.push({binding:a.length,resource:{buffer:g.buffer}});for(let g of o)a.push({binding:a.length,resource:{buffer:g.buffer}});s&&a.push({binding:a.length,resource:s});let m=l.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:a,label:t.programInfo.name});if(this.backend.sessionStatus==="capturing"){let g={kernelId:this.backend.currentKernelId,computePipeline:t.computePipeline,bindGroup:m,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(g)}c.setPipeline(t.computePipeline),c.setBindGroup(0,m),c.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Lt(t.programInfo.name)}dispose(){}build(t,r){Ht(t.name);let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let s=Ta(r),l=t.getShaderSource(s),c=`${n.join(`\n`)}\n${s.additionalImplementations}\n${l}`,a=o.createShaderModule({code:c,label:t.name});ze("verbose",()=>`[WebGPU] ${t.name} shader code: ${c}`);let m=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return Lt(t.name),{programInfo:t,computePipeline:m}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&o<=s&&n<=s)return[r,o,n];let l=r*o*n,c=Math.ceil(Math.sqrt(l));if(c>s){if(c=Math.ceil(Math.cbrt(l)),c>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[c,c,c]}else return[c,c,1]}}});var Zc,Qc,Gn,Lu=Y(()=>{"use strict";sr();he();Pt();Sa();Aa();Gu();Hu();Zc=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[o].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[o].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Qc=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${Zc(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},Gn=class{constructor(){this.currentSessionId=null;this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionStatus="default";this.capturedCommandList=new Map;this.capturedPendingKernels=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("chromium-experimental-timestamp-query-inside-passes")?o.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Ia(this),this.programManager=new Nn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,$a(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=t.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Ht(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),o=this.pendingQueries.get(t);for(let n=0;n<r.length/2;n++){let s=o[n],l=s.kernelId,c=this.kernels.get(l),a=c.kernelType,m=c.kernelName,g=s.programName,h=s.inputTensorViews,v=s.outputTensorViews,_=r[n*2],b=r[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=_);let S=Number(_-this.queryTimeBase),I=Number(b-this.queryTimeBase);if(!Number.isSafeInteger(S)||!Number.isSafeInteger(I))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:h.map(x=>({dims:x.dims,dataType:Et(x.dataType)})),outputsMetadata:v.map(x=>({dims:x.dims,dataType:Et(x.dataType)})),kernelId:l,kernelType:a,kernelName:m,programName:g,startTime:S,endTime:I});else{let x="";h.forEach((E,T)=>{x+=`input[${T}]: [${E.dims}] | ${Et(E.dataType)}, `});let $="";v.forEach((E,T)=>{$+=`output[${T}]: [${E.dims}] | ${Et(E.dataType)}, `}),console.log(`[profiling] kernel "${l}|${a}|${m}|${g}" ${x}${$}execution time: ${I-S} ns`)}no("GPU",`${g}::${_}::${b}`)}t.unmap(),this.pendingQueries.delete(t)}),Lt()}run(t,r,o,n,s){Ht(t.name);let l=[];for(let $=0;$<r.length;++$){let E=this.gpuDataManager.get(r[$].data);E?l[$]=E:l[$]=this.gpuDataManager.create(4)}let{outputs:c,dispatchGroup:a,programUniforms:m}=t.getRunData(r),g=o.length===0?c.map(($,E)=>E):o;if(g.length!==c.length)throw new Error(`Output size ${g.length} must be equal to ${c.length}.`);let h=[],v=[];for(let $=0;$<c.length;++$){if(!Number.isInteger(g[$])||g[$]<-3||g[$]>=c.length)throw new Error(`Invalid output index: ${g[$]}`);if(g[$]===-3)continue;let E=g[$]===-1,T=g[$]===-2,B=E||T?s(c[$].dataType,c[$].dims):n(g[$],c[$].dataType,c[$].dims),M=this.gpuDataManager.get(B.data);if(!M)throw new Error(`no GPU data for output: ${B.data}`);if(E&&this.temporaryData.push(M),T){let W=this.kernelPersistentData.get(this.currentKernelId);W||(W=[],this.kernelPersistentData.set(this.currentKernelId,W)),W.push(M)}h.push(B),v.push(M)}let _;if(m){let $=0,E=[];m.forEach(W=>{let q=typeof W.data=="number"?[W.data]:W.data;if(q.length===0)return;let ie=W.type===10?2:4,O,J;W.type===10?(J=q.length>4?16:q.length>2?8:q.length*ie,O=q.length>4?16:ie*q.length):(J=q.length<=2?q.length*ie:16,O=16),$=Math.ceil($/J)*J,E.push($);let $e=W.type===10?8:4;$+=q.length>4?Math.ceil(q.length/$e)*O:q.length*ie});let T=16;$=Math.ceil($/T)*T;let B=new ArrayBuffer($);m.forEach((W,q)=>{let ie=E[q],O=typeof W.data=="number"?[W.data]:W.data;if(W.type===6)new Int32Array(B,ie,O.length).set(O);else if(W.type===12)new Uint32Array(B,ie,O.length).set(O);else if(W.type===10)new Uint16Array(B,ie,O.length).set(O);else if(W.type===1)new Float32Array(B,ie,O.length).set(O);else throw new Error(`Unsupported uniform type: ${Et(W.type)}`)});let M=this.gpuDataManager.create($,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(M.buffer,0,B,0,$),this.gpuDataManager.release(M.id),_={offset:0,size:$,buffer:M.buffer}}let b=this.programManager.normalizeDispatchGroupSize(a),S=b[1]===1&&b[2]===1,I=Qc(t,r,S),x=this.programManager.getArtifact(I);if(x||(x=this.programManager.build(t,b),this.programManager.setArtifact(I,x),ze("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),ze("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${b[0]}x${b[1]}x${b[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let $={kernelId:this.currentKernelId,programName:x.programInfo.name,inputTensorViews:r,outputTensorViews:h};this.pendingKernels.push($),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push($)}return this.programManager.run(x,l,v,b,_),Lt(t.name),h}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let s=Nu.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);let l={kernelType:t,kernelName:n,kernelEntry:s[0],attributes:[s[1],o]};this.kernels.set(r,l)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let s=n.kernelType,l=n.kernelName,c=n.kernelEntry,a=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${l}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),ze("info",()=>`[WebGPU] Start to run kernel "[${s}] ${l}"...`);let m=this.env.debug;this.temporaryData=[];try{return m&&this.device.pushErrorScope("validation"),c(r,a[1]),0}catch(g){return o.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${l}" failed. ${g}`)),1}finally{m&&o.push(this.device.popErrorScope().then(g=>g?`GPU validation error for kernel "[${s}] ${l}": ${g.message}`:null));for(let g of this.temporaryData)this.gpuDataManager.release(g.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let l=s.get(r),c=this.gpuDataManager.registerExternalBuffer(o,n,l?.[1]);return s.set(r,[c,o]),c}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await io(this,t,r);return _a(n.buffer,o)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){ze("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){ze("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){ze("info","replay"),this.sessionStatus="replaying";let t=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),o=t.length;this.pendingKernels=[];for(let n=0;n<o;n++){let s=this.getComputePassEncoder(),l=t[n];this.writeTimestamp(this.pendingDispatchNumber*2),s.setPipeline(l.computePipeline),s.setBindGroup(0,l.bindGroup),s.dispatchWorkgroups(...l.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(r[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(t){this.unregisterBuffers(t),this.capturedCommandList.has(t)&&this.capturedCommandList.delete(t),this.capturedPendingKernels.has(t)&&this.capturedPendingKernels.delete(t),this.gpuDataManager.onReleaseSession(t)}onRunStart(t){this.currentSessionId=t,this.setQueryType()}}});var Fu={};pn(Fu,{init:()=>Xc});var Vr,Oo,Xc,ju=Y(()=>{"use strict";he();Lu();Pt();xe();Vr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=z.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=z.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=z.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(z.size(t)!==z.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Oo=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=o>>>2;this.opKernelContext=n[s++];let l=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let c=[];for(let a=0;a<l;a++){let m=n[s++],g=n[s++],h=n[s++],v=[];for(let _=0;_<h;_++)v.push(n[s++]);c.push(new Vr(t,m,g,v))}this.inputs=c}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(c=>typeof c=="number"?this.inputs[c]:c)??this.inputs,n=r?.outputs??[],s=(c,a,m)=>new Vr(this.module,a,this.output(c,m),m),l=(c,a)=>{let m=Br(c);if(!m)throw new Error(`Unsupported data type: ${c}`);let g=m*z.size(a);return new Vr(this.module,c,this.backend.gpuDataManager.create(g).id,a)};return this.backend.run(t,o,n,s,l)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let l=0;l<r.length;l++)this.module.HEAPU32[s++]=r[l];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},Xc=async(e,t,r)=>{let o=e.jsepInit;if(!o)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let n=new Gn;await n.initialize(t,r),o(n,s=>n.alloc(s),s=>n.free(s),(s,l,c,a=!1)=>{if(a)ze("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${s}, dst=${l}, size=${c}`),n.memcpy(s,l);else{ze("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${s}, gpuDataId=${l}, size=${c}`);let m=e.HEAPU8.subarray(s>>>0,(s>>>0)+c);n.upload(l,m)}},async(s,l,c)=>{ze("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${s}, dataOffset=${l}, size=${c}`),await n.download(s,()=>e.HEAPU8.subarray(l>>>0,(l>>>0)+c))},(s,l,c)=>n.createKernel(s,l,c,e.UTF8ToString(e._JsepGetNodeName(l))),s=>n.releaseKernel(s),(s,l,c,a)=>{ze("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${c}, kernel=${s}, contextDataOffset=${l}`);let m=new Oo(e,n,l);return n.computeKernel(s,m,a)},()=>n.captureBegin(),()=>n.captureEnd(),()=>n.replay())}});var Qo;Qo=No();var cl=Ko(),Xn,Jn=!1,hn=!1,Zo=!1,pl=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},ml=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},fl=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Xo=async e=>{if(Jn)return Promise.resolve();if(hn)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(Zo)throw new Error("previous call to \'initializeWebAssembly()\' failed.");hn=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=pl(r),s=o&&ml(),l=e.wasmPaths,c=typeof l=="string"?l:void 0,a=fl(s,n),m=typeof l=="object"?l[a]:void 0,g=!1,h=[];if(t>0&&h.push(new Promise(v=>{setTimeout(()=>{g=!0,v()},t)})),h.push(new Promise((v,_)=>{let b=n?cl:Qo,S={locateFile:(I,x)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Yo()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(m)return m;let $=c??x;return a==="ort-wasm-simd.wasm"?$+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?$+"ort-wasm-simd-threaded.jsep.wasm":$+a}return x+I}};if(n)if(S.numThreads=r,typeof Blob>"u")S.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${b.toString()};`;S.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}b(S).then(I=>{hn=!1,Jn=!0,Xn=I,v()},I=>{hn=!1,Zo=!0,_(I)})})),await Promise.race(h),g)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},We=()=>{if(Jn&&Xn)return Xn;throw new Error("WebAssembly is not initialized yet.")};var Ve=(e,t)=>{let r=We(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},Rr=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let l=t?t+n:n;if(typeof s=="object")Rr(s,l+".",r,o);else if(typeof s=="string"||typeof s=="number")o(l,s.toString());else if(typeof s=="boolean")o(l,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},Me=e=>{let t=We(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],s=t.HEAPU32[o/4+1],l=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${l}`)}finally{t.stackRestore(r)}};var Jo=e=>{let t=We(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=Ve(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Me("Can\'t create run options."),e?.extra!==void 0&&Rr(e.extra,"",new WeakSet,(l,c)=>{let a=Ve(l,o),m=Ve(c,o);t._OrtAddRunConfigEntry(r,a,m)!==0&&Me(`Can\'t set a run config entry: ${l} - ${c}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(l=>t._free(l)),s}};var hl=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},gl=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},yl=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},bl=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"webnn":if(n="WEBNN",typeof o!="string"){let l=o;if(l?.deviceType){let c=Ve("deviceType",r),a=Ve(l.deviceType,r);We()._OrtAddSessionConfigEntry(e,c,a)!==0&&Me(`Can\'t set a session config entry: \'deviceType\' - ${l.deviceType}.`)}if(l?.numThreads){let c=l.numThreads;(typeof c!="number"||!Number.isInteger(c)||c<0)&&(c=0);let a=Ve("numThreads",r),m=Ve(c.toString(),r);We()._OrtAddSessionConfigEntry(e,a,m)!==0&&Me(`Can\'t set a session config entry: \'numThreads\' - ${l.numThreads}.`)}if(l?.powerPreference){let c=Ve("powerPreference",r),a=Ve(l.powerPreference,r);We()._OrtAddSessionConfigEntry(e,c,a)!==0&&Me(`Can\'t set a session config entry: \'powerPreference\' - ${l.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let l=o;if(l?.preferredLayout){if(l.preferredLayout!=="NCHW"&&l.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${l.preferredLayout}`);let c=Ve("preferredLayout",r),a=Ve(l.preferredLayout,r);We()._OrtAddSessionConfigEntry(e,c,a)!==0&&Me(`Can\'t set a session config entry: \'preferredLayout\' - ${l.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=Ve(n,r);We()._OrtAppendExecutionProvider(e,s)!==0&&Me(`Can\'t append execution provider: ${n}.`)}},ea=e=>{let t=We(),r=0,o=[],n=e||{};yl(n);try{let s=hl(n.graphOptimizationLevel??"all"),l=gl(n.executionMode??"sequential"),c=typeof n.logId=="string"?Ve(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let m=n.logVerbosityLevel??0;if(!Number.isInteger(m)||m<0||m>4)throw new Error(`log verbosity level is not valid: ${m}`);let g=typeof n.optimizedModelFilePath=="string"?Ve(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,l,!!n.enableProfiling,0,c,a,m,g),r===0&&Me("Can\'t create session options."),n.executionProviders&&bl(r,n.executionProviders,o),n.enableGraphCapture!==void 0){if(typeof n.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${n.enableGraphCapture}`);let h=Ve("enableGraphCapture",o),v=Ve(n.enableGraphCapture.toString(),o);t._OrtAddSessionConfigEntry(r,h,v)!==0&&Me(`Can\'t set a session config entry: \'enableGraphCapture\' - ${n.enableGraphCapture}.`)}if(n.freeDimensionOverrides)for(let[h,v]of Object.entries(n.freeDimensionOverrides)){if(typeof h!="string")throw new Error(`free dimension override name must be a string: ${h}`);if(typeof v!="number"||!Number.isInteger(v)||v<0)throw new Error(`free dimension override value must be a non-negative integer: ${v}`);let _=Ve(h,o);t._OrtAddFreeDimensionOverride(r,_,v)!==0&&Me(`Can\'t set a free dimension override: ${h} - ${v}.`)}return n.extra!==void 0&&Rr(n.extra,"",new WeakSet,(h,v)=>{let _=Ve(h,o),b=Ve(v,o);t._OrtAddSessionConfigEntry(r,_,b)!==0&&Me(`Can\'t set a session config entry: ${h} - ${v}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(l=>t._free(l)),s}};he();var ra=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),o=[];for await(let n of r)o.push(n);return new Uint8Array(Buffer.concat(o))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),o=r?parseInt(r,10):0;if(o<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n=t.body.getReader(),s;try{s=new ArrayBuffer(o)}catch(c){if(c instanceof RangeError){let a=Math.ceil(o/65536);s=new WebAssembly.Memory({initial:a,maximum:a}).buffer}else throw c}let l=0;for(;;){let{done:c,value:a}=await n.read();if(c)break;let m=a.byteLength;new Uint8Array(s,l,m).set(a),l+=m}return new Uint8Array(s,0,o)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)};var Jc=(e,t)=>{We()._OrtInit(e,t)!==0&&Me("Can\'t initialize onnxruntime.")},Ku=async e=>{Jc(e.wasm.numThreads,Dr(e.logLevel))},Yu=async(e,t)=>{if(t==="webgpu"||t==="webnn"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error(\'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let o=(ju(),Nt(Fu)).init;await o(We(),e,r)}},jt=new Map,ep=e=>{let t=We(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Me("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},ko=e=>{let t=We(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Zu=async(e,t)=>{let r,o,n=We();Array.isArray(e)?[r,o]=e:e.buffer===n.HEAPU8.buffer?[r,o]=[e.byteOffset,e.byteLength]:[r,o]=ko(e);let s=0,l=0,c=0,a=[],m=[],g=[];try{if([l,a]=ea(t),t?.externalData&&n.mountExternalData){let $=[];for(let E of t.externalData){let T=typeof E=="string"?E:E.path;$.push(ra(typeof E=="string"?E:E.data).then(B=>{n.mountExternalData(T,B)}))}await Promise.all($)}s=await n._OrtCreateSession(r,o,l),s===0&&Me("Can\'t create a session.");let[h,v]=ep(s),_=!!t?.enableGraphCapture,b=[],S=[],I=[];for(let $=0;$<h;$++){let E=n._OrtGetInputName(s,$);E===0&&Me("Can\'t get an input name."),m.push(E),b.push(n.UTF8ToString(E))}for(let $=0;$<v;$++){let E=n._OrtGetOutputName(s,$);E===0&&Me("Can\'t get an output name."),g.push(E);let T=n.UTF8ToString(E);S.push(T);{if(_&&t?.preferredOutputLocation===void 0){I.push("gpu-buffer");continue}let B=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[T]??"cpu";if(B!=="cpu"&&B!=="cpu-pinned"&&B!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${B}.`);if(_&&B!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${B}. Only \'gpu-buffer\' location is supported when enableGraphCapture is true.`);I.push(B)}}let x=null;return I.some($=>$==="gpu-buffer")&&(c=n._OrtCreateBinding(s),c===0&&Me("Can\'t create IO binding."),x={handle:c,outputPreferredLocations:I,outputPreferredLocationsEncoded:I.map($=>to($))}),jt.set(s,[s,m,g,x,_,!1]),[s,b,S]}catch(h){throw m.forEach(v=>n._OrtFree(v)),g.forEach(v=>n._OrtFree(v)),c!==0&&n._OrtReleaseBinding(c),s!==0&&n._OrtReleaseSession(s),h}finally{n._free(r),l!==0&&n._OrtReleaseSessionOptions(l),a.forEach(h=>n._free(h)),n.unmountExternalData?.()}},Qu=e=>{let t=We(),r=jt.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,s,l,c]=r;l&&(c&&t._OrtClearBoundOutputs(l.handle),t._OrtReleaseBinding(l.handle)),t.jsepOnReleaseSession?.(e),n.forEach(a=>t._OrtFree(a)),s.forEach(a=>t._OrtFree(a)),t._OrtReleaseSession(o),jt.delete(e)},qu=(e,t,r,o,n,s=!1)=>{if(!e){t.push(0);return}let l=We(),c=e[0],a=e[1],m=e[3],g,h;if(c==="string"&&m==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(s&&m!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${n} when enableGraphCapture is true.`);if(m==="gpu-buffer"){let b=e[2].gpuBuffer,S=Br(eo(c));h=a.reduce((I,x)=>I*x,1)*S,g=l.jsepRegisterBuffer(o,n,b,h)}else{let b=e[2];if(Array.isArray(b)){h=4*b.length,g=l._malloc(h),r.push(g);let S=g/4;for(let I=0;I<b.length;I++){if(typeof b[I]!="string")throw new TypeError(`tensor data at index ${I} is not a string`);l.HEAPU32[S++]=Ve(b[I],r)}}else h=b.byteLength,g=l._malloc(h),r.push(g),l.HEAPU8.set(new Uint8Array(b.buffer,b.byteOffset,h),g)}let v=l.stackSave(),_=l.stackAlloc(4*a.length);try{let b=_/4;a.forEach(I=>l.HEAP32[b++]=I);let S=l._OrtCreateTensor(eo(c),g,h,_,a.length,to(m));S===0&&Me(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push(S)}finally{l.stackRestore(v)}},Xu=async(e,t,r,o,n,s)=>{let l=We(),c=jt.get(e);if(!c)throw new Error(`cannot run inference. invalid session id: ${e}`);let a=c[0],m=c[1],g=c[2],h=c[3],v=c[4],_=c[5],b=t.length,S=o.length,I=0,x=[],$=[],E=[],T=[],B=l.stackSave(),M=l.stackAlloc(b*4),W=l.stackAlloc(b*4),q=l.stackAlloc(S*4),ie=l.stackAlloc(S*4);try{[I,x]=Jo(s);for(let N=0;N<b;N++)qu(r[N],$,T,e,t[N],v);for(let N=0;N<S;N++)qu(n[N],E,T,e,b+o[N],v);let O=M/4,J=W/4,$e=q/4,ke=ie/4;for(let N=0;N<b;N++)l.HEAPU32[O++]=$[N],l.HEAPU32[J++]=m[t[N]];for(let N=0;N<S;N++)l.HEAPU32[$e++]=E[N],l.HEAPU32[ke++]=g[o[N]];if(h&&!_){let{handle:N,outputPreferredLocations:Be,outputPreferredLocationsEncoded:be}=h;if(m.length!==b)throw new Error(`input count from feeds (${b}) is expected to be always equal to model\'s input count (${m.length}).`);for(let ge=0;ge<b;ge++){let pe=t[ge];await l._OrtBindInput(N,m[pe],$[ge])!==0&&Me(`Can\'t bind input[${ge}] for session=${e}.`)}for(let ge=0;ge<S;ge++){let pe=o[ge];n[ge]?.[3]?l._OrtBindOutput(N,g[pe],E[ge],0)!==0&&Me(`Can\'t bind pre-allocated output[${ge}] for session=${e}.`):l._OrtBindOutput(N,g[pe],0,be[pe])!==0&&Me(`Can\'t bind output[${ge}] to ${Be[ge]} for session=${e}.`)}jt.set(e,[a,m,g,h,v,!0])}l.jsepOnRunStart?.(a);let Re;h?Re=await l._OrtRunWithBinding(a,h.handle,S,q,I):Re=await l._OrtRun(a,W,M,b,ie,S,q,I),Re!==0&&Me("failed to call OrtRun().");let _e=[];for(let N=0;N<S;N++){let Be=l.HEAPU32[q/4+N];if(Be===E[N]){_e.push(n[N]);continue}let be=l.stackSave(),ge=l.stackAlloc(4*4),pe=!1,Ce,Ae=0;try{l._OrtGetTensorData(Be,ge,ge+4,ge+8,ge+12)!==0&&Me(`Can\'t access output tensor data on index ${N}.`);let L=ge/4,re=l.HEAPU32[L++];Ae=l.HEAPU32[L++];let me=l.HEAPU32[L++],Xe=l.HEAPU32[L++],qe=[];for(let Le=0;Le<Xe;Le++)qe.push(l.HEAPU32[me/4+Le]);l._OrtFree(me);let ot=qe.reduce((Le,Ge)=>Le*Ge,1);Ce=Et(re);let At=h?.outputPreferredLocations[o[N]];if(Ce==="string"){if(At==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Le=[],Ge=Ae/4;for(let et=0;et<ot;et++){let Tt=l.HEAPU32[Ge++],ft=et===ot-1?void 0:l.HEAPU32[Ge]-Tt;Le.push(l.UTF8ToString(Tt,ft))}_e.push([Ce,qe,Le,"cpu"])}else if(At==="gpu-buffer"&&ot>0){let Le=l.jsepGetBuffer(Ae),Ge=Br(re);if(Ge===void 0||!ta(Ce))throw new Error(`Unsupported data type: ${Ce}`);pe=!0,_e.push([Ce,qe,{gpuBuffer:Le,download:l.jsepCreateDownloader(Le,ot*Ge,Ce),dispose:()=>{l._OrtReleaseTensor(Be)}},"gpu-buffer"])}else{let Le=gn(Ce),Ge=new Le(ot);new Uint8Array(Ge.buffer,Ge.byteOffset,Ge.byteLength).set(l.HEAPU8.subarray(Ae,Ae+Ge.byteLength)),_e.push([Ce,qe,Ge,"cpu"])}}finally{l.stackRestore(be),Ce==="string"&&Ae&&l._free(Ae),pe||l._OrtReleaseTensor(Be)}}return h&&!v&&(l._OrtClearBoundOutputs(h.handle),jt.set(e,[a,m,g,h,v,!1])),_e}finally{l.stackRestore(B),$.forEach(O=>l._OrtReleaseTensor(O)),E.forEach(O=>l._OrtReleaseTensor(O)),T.forEach(O=>l._free(O)),I!==0&&l._OrtReleaseRunOptions(I),x.forEach(O=>l._free(O))}},Ju=e=>{let t=We(),r=jt.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&Me("Can\'t get an profile file name."),t._OrtFree(n)},el=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":Xo(r.wasm).then(()=>{Ku(r).then(()=>{postMessage({type:t})},o=>{postMessage({type:t,err:o})})},o=>{postMessage({type:t,err:o})});break;case"init-ep":{let{epName:o,env:n}=r;Yu(n,o).then(()=>{postMessage({type:t})},s=>{postMessage({type:t,err:s})});break}case"copy-from":{let{buffer:o}=r,n=ko(o);postMessage({type:t,out:n});break}case"create":{let{model:o,options:n}=r;Zu(o,n).then(s=>{postMessage({type:t,out:s})},s=>{postMessage({type:t,err:s})});break}case"release":Qu(r),postMessage({type:t});break;case"run":{let{sessionId:o,inputIndices:n,inputs:s,outputIndices:l,options:c}=r;Xu(o,n,s,l,new Array(l.length).fill(null),c).then(a=>{a.some(m=>m[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:a},el(a))},a=>{postMessage({type:t,err:a})});break}case"end-profiling":Ju(r),postMessage({type:t});break;default:}}catch(o){postMessage({type:t,err:o})}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var tr,ht,Jr,da,ca,ii,oi,wr,vr,af,la,Fl,ql,jl,Kl,Yl,Zl,Ql,si=q(()=>{"use strict";mt();Gl();gr();tr=()=>!!Ae.wasm.proxy&&typeof document<"u",Jr=!1,da=!1,ca=!1,oi=new Map,wr=(e,t)=>{let r=oi.get(e);r?r.push(t):oi.set(e,[t])},vr=()=>{if(Jr||!da||ca||!ht)throw new Error("worker not ready")},af=e=>{switch(e.data.type){case"init-wasm":Jr=!1,e.data.err?(ca=!0,ii[1](e.data.err)):(da=!0,ii[0]());break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=oi.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}default:}},la=typeof document<"u"?document?.currentScript?.src:void 0,Fl=async()=>{if(!da){if(Jr)throw new Error("multiple calls to 'initWasm()' detected.");if(ca)throw new Error("previous call to 'initWasm()' failed.");if(Jr=!0,tr())return Ae.wasm.wasmPaths===void 0&&la&&la.indexOf("blob:")!==0&&(Ae.wasm.wasmPaths=la.substr(0,+la.lastIndexOf("/")+1)),new Promise((e,t)=>{ht?.terminate();let r=URL.createObjectURL(new Blob([Hl()],{type:"text/javascript"}));ht=new Worker(r,{name:"ort-wasm-proxy-worker"}),ht.onerror=n=>t(n),ht.onmessage=af,URL.revokeObjectURL(r),ii=[e,t];let a={type:"init-wasm",in:Ae};ht.postMessage(a)});try{await to(Ae.wasm),await zl(Ae),da=!0}catch(e){throw ca=!0,e}finally{Jr=!1}}},ql=async e=>{if(tr())return vr(),new Promise((t,r)=>{wr("init-ep",[t,r]);let a={type:"init-ep",in:{epName:e,env:Ae}};ht.postMessage(a)});await Dl(Ae,e)},jl=async e=>tr()?(vr(),new Promise((t,r)=>{wr("copy-from",[t,r]);let a={type:"copy-from",in:{buffer:e}};ht.postMessage(a,[e.buffer])})):ai(e),Kl=async(e,t)=>{if(tr()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return vr(),new Promise((r,a)=>{wr("create",[r,a]);let n={type:"create",in:{model:e,options:t}},o=[];e instanceof Uint8Array&&o.push(e.buffer),ht.postMessage(n,o)})}else return Ul(e,t)},Yl=async e=>{if(tr())return vr(),new Promise((t,r)=>{wr("release",[t,r]);let a={type:"release",in:e};ht.postMessage(a)});Wl(e)},Zl=async(e,t,r,a,n,o)=>{if(tr()){if(r.some(s=>s[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(s=>s))throw new Error("pre-allocated output tensor is not supported for proxy.");return vr(),new Promise((s,d)=>{wr("run",[s,d]);let i=r,p={type:"run",in:{sessionId:e,inputIndices:t,inputs:i,outputIndices:a,options:o}};ht.postMessage(p,Ll(i))})}else return Nl(e,t,r,a,n,o)},Ql=async e=>{if(tr())return vr(),new Promise((t,r)=>{wr("end-profiling",[t,r]);let a={type:"end-profiling",in:e};ht.postMessage(a)});Vl(e)}});var Xl,of,pa,Jl=q(()=>{"use strict";mt();si();he();ka();Xl=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},of=e=>{switch(e[3]){case"cpu":return new Xe(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Wn(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return Xe.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},pa=class{async fetchModelAndCopyToWasmMemory(t){return jl(await Kr(t))}async loadModel(t,r){it();let a;typeof t=="string"?typeof process<"u"&&process.versions&&process.versions.node?a=await Kr(t):a=await this.fetchModelAndCopyToWasmMemory(t):a=t,[this.sessionId,this.inputNames,this.outputNames]=await Kl(a,r),ot()}async dispose(){return Yl(this.sessionId)}async run(t,r,a){it();let n=[],o=[];Object.entries(t).forEach(y=>{let v=y[0],b=y[1],_=this.inputNames.indexOf(v);if(_===-1)throw new Error(`invalid input '${v}'`);n.push(b),o.push(_)});let s=[],d=[];Object.entries(r).forEach(y=>{let v=y[0],b=y[1],_=this.outputNames.indexOf(v);if(_===-1)throw new Error(`invalid output '${v}'`);s.push(b),d.push(_)});let i=n.map((y,v)=>Xl(y,()=>`input "${this.inputNames[o[v]]}"`)),p=s.map((y,v)=>y?Xl(y,()=>`output "${this.outputNames[d[v]]}"`):null),h=await Zl(this.sessionId,o,i,d,p,a),m={};for(let y=0;y<h.length;y++)m[this.outputNames[d[y]]]=s[y]??of(h[y]);return ot(),m}startProfiling(){}endProfiling(){Ql(this.sessionId)}}});var sf,fa,ed=q(()=>{"use strict";mt();si();Jl();sf=()=>{if((typeof Ae.wasm.initTimeout!="number"||Ae.wasm.initTimeout<0)&&(Ae.wasm.initTimeout=0),typeof Ae.wasm.simd!="boolean"&&(Ae.wasm.simd=!0),typeof Ae.wasm.proxy!="boolean"&&(Ae.wasm.proxy=!1),typeof Ae.wasm.trace!="boolean"&&(Ae.wasm.trace=!1),typeof Ae.wasm.numThreads!="number"||!Number.isInteger(Ae.wasm.numThreads)||Ae.wasm.numThreads<=0){(typeof self<"u"&&!self.crossOriginIsolated||typeof process<"u"&&process.versions&&process.versions.node)&&(Ae.wasm.numThreads=1);let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Ae.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},fa=class{async init(t){sf(),await Fl(),await ql(t)}async createInferenceSessionHandler(t,r){let a=new pa;return await a.loadModel(t,r),Promise.resolve(a)}}});var td={};Zt(td,{wasmBackend:()=>uf});var uf,rd=q(()=>{"use strict";ed();uf=new fa});var df={};Zt(df,{InferenceSession:()=>Bi,TRACE:()=>Hr,TRACE_FUNC_BEGIN:()=>it,TRACE_FUNC_END:()=>ot,Tensor:()=>Xe,TrainingSession:()=>Ui,default:()=>lf,env:()=>Ae,registerBackend:()=>Dt});module.exports=Bt(df);mt();mt();mt();var Ni="1.18.0";var lf=_a;{let e=(rd(),Bt(td)).wasmBackend;Dt("webgpu",e,5),Dt("webnn",e,5),Dt("cpu",e,10),Dt("wasm",e,10)}Object.defineProperty(Ae.versions,"web",{value:Ni,enumerable:!0});
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
